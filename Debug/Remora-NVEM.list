
Remora-NVEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e9c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023dc  08013020  08013020  00023020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080153fc  080153fc  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  080153fc  080153fc  000253fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015404  08015404  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015404  08015404  00025404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015408  08015408  00025408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801540c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b34  20000080  0801548c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006bb4  0801548c  00036bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005c96e  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000abed  00000000  00000000  0008ca17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  00097608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa0  00000000  00000000  00099298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000336d3  00000000  00000000  0009ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033513  00000000  00000000  000ce40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e80a8  00000000  00000000  0010191e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e99c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009544  00000000  00000000  001e9a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000080 	.word	0x20000080
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08013008 	.word	0x08013008

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000084 	.word	0x20000084
 80001c0:	08013008 	.word	0x08013008

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <__aeabi_frsub>:
 80009b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b4:	e002      	b.n	80009bc <__addsf3>
 80009b6:	bf00      	nop

080009b8 <__aeabi_fsub>:
 80009b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009bc <__addsf3>:
 80009bc:	0042      	lsls	r2, r0, #1
 80009be:	bf1f      	itttt	ne
 80009c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c4:	ea92 0f03 	teqne	r2, r3
 80009c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d0:	d06a      	beq.n	8000aa8 <__addsf3+0xec>
 80009d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009da:	bfc1      	itttt	gt
 80009dc:	18d2      	addgt	r2, r2, r3
 80009de:	4041      	eorgt	r1, r0
 80009e0:	4048      	eorgt	r0, r1
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	bfb8      	it	lt
 80009e6:	425b      	neglt	r3, r3
 80009e8:	2b19      	cmp	r3, #25
 80009ea:	bf88      	it	hi
 80009ec:	4770      	bxhi	lr
 80009ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009fa:	bf18      	it	ne
 80009fc:	4240      	negne	r0, r0
 80009fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a0a:	bf18      	it	ne
 8000a0c:	4249      	negne	r1, r1
 8000a0e:	ea92 0f03 	teq	r2, r3
 8000a12:	d03f      	beq.n	8000a94 <__addsf3+0xd8>
 8000a14:	f1a2 0201 	sub.w	r2, r2, #1
 8000a18:	fa41 fc03 	asr.w	ip, r1, r3
 8000a1c:	eb10 000c 	adds.w	r0, r0, ip
 8000a20:	f1c3 0320 	rsb	r3, r3, #32
 8000a24:	fa01 f103 	lsl.w	r1, r1, r3
 8000a28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a2c:	d502      	bpl.n	8000a34 <__addsf3+0x78>
 8000a2e:	4249      	negs	r1, r1
 8000a30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a38:	d313      	bcc.n	8000a62 <__addsf3+0xa6>
 8000a3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3e:	d306      	bcc.n	8000a4e <__addsf3+0x92>
 8000a40:	0840      	lsrs	r0, r0, #1
 8000a42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a46:	f102 0201 	add.w	r2, r2, #1
 8000a4a:	2afe      	cmp	r2, #254	; 0xfe
 8000a4c:	d251      	bcs.n	8000af2 <__addsf3+0x136>
 8000a4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a56:	bf08      	it	eq
 8000a58:	f020 0001 	biceq.w	r0, r0, #1
 8000a5c:	ea40 0003 	orr.w	r0, r0, r3
 8000a60:	4770      	bx	lr
 8000a62:	0049      	lsls	r1, r1, #1
 8000a64:	eb40 0000 	adc.w	r0, r0, r0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a70:	d2ed      	bcs.n	8000a4e <__addsf3+0x92>
 8000a72:	fab0 fc80 	clz	ip, r0
 8000a76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a82:	bfaa      	itet	ge
 8000a84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a88:	4252      	neglt	r2, r2
 8000a8a:	4318      	orrge	r0, r3
 8000a8c:	bfbc      	itt	lt
 8000a8e:	40d0      	lsrlt	r0, r2
 8000a90:	4318      	orrlt	r0, r3
 8000a92:	4770      	bx	lr
 8000a94:	f092 0f00 	teq	r2, #0
 8000a98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a9c:	bf06      	itte	eq
 8000a9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aa2:	3201      	addeq	r2, #1
 8000aa4:	3b01      	subne	r3, #1
 8000aa6:	e7b5      	b.n	8000a14 <__addsf3+0x58>
 8000aa8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab6:	d021      	beq.n	8000afc <__addsf3+0x140>
 8000ab8:	ea92 0f03 	teq	r2, r3
 8000abc:	d004      	beq.n	8000ac8 <__addsf3+0x10c>
 8000abe:	f092 0f00 	teq	r2, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	4608      	moveq	r0, r1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea90 0f01 	teq	r0, r1
 8000acc:	bf1c      	itt	ne
 8000ace:	2000      	movne	r0, #0
 8000ad0:	4770      	bxne	lr
 8000ad2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad6:	d104      	bne.n	8000ae2 <__addsf3+0x126>
 8000ad8:	0040      	lsls	r0, r0, #1
 8000ada:	bf28      	it	cs
 8000adc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	4770      	bx	lr
 8000ae2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae6:	bf3c      	itt	cc
 8000ae8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000aec:	4770      	bxcc	lr
 8000aee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afa:	4770      	bx	lr
 8000afc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b00:	bf16      	itet	ne
 8000b02:	4608      	movne	r0, r1
 8000b04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b08:	4601      	movne	r1, r0
 8000b0a:	0242      	lsls	r2, r0, #9
 8000b0c:	bf06      	itte	eq
 8000b0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b12:	ea90 0f01 	teqeq	r0, r1
 8000b16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_ui2f>:
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e004      	b.n	8000b2c <__aeabi_i2f+0x8>
 8000b22:	bf00      	nop

08000b24 <__aeabi_i2f>:
 8000b24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	bf48      	it	mi
 8000b2a:	4240      	negmi	r0, r0
 8000b2c:	ea5f 0c00 	movs.w	ip, r0
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b38:	4601      	mov	r1, r0
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	e01c      	b.n	8000b7a <__aeabi_l2f+0x2a>

08000b40 <__aeabi_ul2f>:
 8000b40:	ea50 0201 	orrs.w	r2, r0, r1
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e00a      	b.n	8000b64 <__aeabi_l2f+0x14>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_l2f>:
 8000b50:	ea50 0201 	orrs.w	r2, r0, r1
 8000b54:	bf08      	it	eq
 8000b56:	4770      	bxeq	lr
 8000b58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b5c:	d502      	bpl.n	8000b64 <__aeabi_l2f+0x14>
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	ea5f 0c01 	movs.w	ip, r1
 8000b68:	bf02      	ittt	eq
 8000b6a:	4684      	moveq	ip, r0
 8000b6c:	4601      	moveq	r1, r0
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b74:	bf08      	it	eq
 8000b76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7e:	fabc f28c 	clz	r2, ip
 8000b82:	3a08      	subs	r2, #8
 8000b84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b88:	db10      	blt.n	8000bac <__aeabi_l2f+0x5c>
 8000b8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8e:	4463      	add	r3, ip
 8000b90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b94:	f1c2 0220 	rsb	r2, r2, #32
 8000b98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba0:	eb43 0002 	adc.w	r0, r3, r2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f102 0220 	add.w	r2, r2, #32
 8000bb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb4:	f1c2 0220 	rsb	r2, r2, #32
 8000bb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc0:	eb43 0002 	adc.w	r0, r3, r2
 8000bc4:	bf08      	it	eq
 8000bc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_fmul>:
 8000bcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bda:	ea92 0f0c 	teqne	r2, ip
 8000bde:	ea93 0f0c 	teqne	r3, ip
 8000be2:	d06f      	beq.n	8000cc4 <__aeabi_fmul+0xf8>
 8000be4:	441a      	add	r2, r3
 8000be6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bea:	0240      	lsls	r0, r0, #9
 8000bec:	bf18      	it	ne
 8000bee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bf2:	d01e      	beq.n	8000c32 <__aeabi_fmul+0x66>
 8000bf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c00:	fba0 3101 	umull	r3, r1, r0, r1
 8000c04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c0c:	bf3e      	ittt	cc
 8000c0e:	0049      	lslcc	r1, r1, #1
 8000c10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c14:	005b      	lslcc	r3, r3, #1
 8000c16:	ea40 0001 	orr.w	r0, r0, r1
 8000c1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c1e:	2afd      	cmp	r2, #253	; 0xfd
 8000c20:	d81d      	bhi.n	8000c5e <__aeabi_fmul+0x92>
 8000c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	4770      	bx	lr
 8000c32:	f090 0f00 	teq	r0, #0
 8000c36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c3a:	bf08      	it	eq
 8000c3c:	0249      	lsleq	r1, r1, #9
 8000c3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c46:	3a7f      	subs	r2, #127	; 0x7f
 8000c48:	bfc2      	ittt	gt
 8000c4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c52:	4770      	bxgt	lr
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	dc5d      	bgt.n	8000d1c <__aeabi_fmul+0x150>
 8000c60:	f112 0f19 	cmn.w	r2, #25
 8000c64:	bfdc      	itt	le
 8000c66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c6a:	4770      	bxle	lr
 8000c6c:	f1c2 0200 	rsb	r2, r2, #0
 8000c70:	0041      	lsls	r1, r0, #1
 8000c72:	fa21 f102 	lsr.w	r1, r1, r2
 8000c76:	f1c2 0220 	rsb	r2, r2, #32
 8000c7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c82:	f140 0000 	adc.w	r0, r0, #0
 8000c86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c8a:	bf08      	it	eq
 8000c8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c90:	4770      	bx	lr
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0040      	lsleq	r0, r0, #1
 8000c9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ca2:	3a01      	subeq	r2, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xce>
 8000ca6:	ea40 000c 	orr.w	r0, r0, ip
 8000caa:	f093 0f00 	teq	r3, #0
 8000cae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb2:	bf02      	ittt	eq
 8000cb4:	0049      	lsleq	r1, r1, #1
 8000cb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cba:	3b01      	subeq	r3, #1
 8000cbc:	d0f9      	beq.n	8000cb2 <__aeabi_fmul+0xe6>
 8000cbe:	ea41 010c 	orr.w	r1, r1, ip
 8000cc2:	e78f      	b.n	8000be4 <__aeabi_fmul+0x18>
 8000cc4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc8:	ea92 0f0c 	teq	r2, ip
 8000ccc:	bf18      	it	ne
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d00a      	beq.n	8000cea <__aeabi_fmul+0x11e>
 8000cd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd8:	bf18      	it	ne
 8000cda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	d1d8      	bne.n	8000c92 <__aeabi_fmul+0xc6>
 8000ce0:	ea80 0001 	eor.w	r0, r0, r1
 8000ce4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	bf17      	itett	ne
 8000cf0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	f091 0f00 	teqne	r1, #0
 8000cfa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cfe:	d014      	beq.n	8000d2a <__aeabi_fmul+0x15e>
 8000d00:	ea92 0f0c 	teq	r2, ip
 8000d04:	d101      	bne.n	8000d0a <__aeabi_fmul+0x13e>
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	d10f      	bne.n	8000d2a <__aeabi_fmul+0x15e>
 8000d0a:	ea93 0f0c 	teq	r3, ip
 8000d0e:	d103      	bne.n	8000d18 <__aeabi_fmul+0x14c>
 8000d10:	024b      	lsls	r3, r1, #9
 8000d12:	bf18      	it	ne
 8000d14:	4608      	movne	r0, r1
 8000d16:	d108      	bne.n	8000d2a <__aeabi_fmul+0x15e>
 8000d18:	ea80 0001 	eor.w	r0, r0, r1
 8000d1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	4770      	bx	lr
 8000d2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fdiv>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d069      	beq.n	8000e20 <__aeabi_fdiv+0xec>
 8000d4c:	eba2 0203 	sub.w	r2, r2, r3
 8000d50:	ea80 0c01 	eor.w	ip, r0, r1
 8000d54:	0249      	lsls	r1, r1, #9
 8000d56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d5a:	d037      	beq.n	8000dcc <__aeabi_fdiv+0x98>
 8000d5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	bf38      	it	cc
 8000d70:	005b      	lslcc	r3, r3, #1
 8000d72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	bf24      	itt	cs
 8000d7e:	1a5b      	subcs	r3, r3, r1
 8000d80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d88:	bf24      	itt	cs
 8000d8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d96:	bf24      	itt	cs
 8000d98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000daa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db6:	d1e0      	bne.n	8000d7a <__aeabi_fdiv+0x46>
 8000db8:	2afd      	cmp	r2, #253	; 0xfd
 8000dba:	f63f af50 	bhi.w	8000c5e <__aeabi_fmul+0x92>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd4:	327f      	adds	r2, #127	; 0x7f
 8000dd6:	bfc2      	ittt	gt
 8000dd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ddc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de0:	4770      	bxgt	lr
 8000de2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	3a01      	subs	r2, #1
 8000dec:	e737      	b.n	8000c5e <__aeabi_fmul+0x92>
 8000dee:	f092 0f00 	teq	r2, #0
 8000df2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0040      	lsleq	r0, r0, #1
 8000dfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfe:	3a01      	subeq	r2, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xc2>
 8000e02:	ea40 000c 	orr.w	r0, r0, ip
 8000e06:	f093 0f00 	teq	r3, #0
 8000e0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0049      	lsleq	r1, r1, #1
 8000e12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e16:	3b01      	subeq	r3, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fdiv+0xda>
 8000e1a:	ea41 010c 	orr.w	r1, r1, ip
 8000e1e:	e795      	b.n	8000d4c <__aeabi_fdiv+0x18>
 8000e20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e24:	ea92 0f0c 	teq	r2, ip
 8000e28:	d108      	bne.n	8000e3c <__aeabi_fdiv+0x108>
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	f47f af7d 	bne.w	8000d2a <__aeabi_fmul+0x15e>
 8000e30:	ea93 0f0c 	teq	r3, ip
 8000e34:	f47f af70 	bne.w	8000d18 <__aeabi_fmul+0x14c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e776      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e3c:	ea93 0f0c 	teq	r3, ip
 8000e40:	d104      	bne.n	8000e4c <__aeabi_fdiv+0x118>
 8000e42:	024b      	lsls	r3, r1, #9
 8000e44:	f43f af4c 	beq.w	8000ce0 <__aeabi_fmul+0x114>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e76e      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1ca      	bne.n	8000dee <__aeabi_fdiv+0xba>
 8000e58:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e5c:	f47f af5c 	bne.w	8000d18 <__aeabi_fmul+0x14c>
 8000e60:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	f47f af3c 	bne.w	8000ce0 <__aeabi_fmul+0x114>
 8000e68:	e75f      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e6a:	bf00      	nop

08000e6c <__gesf2>:
 8000e6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e70:	e006      	b.n	8000e80 <__cmpsf2+0x4>
 8000e72:	bf00      	nop

08000e74 <__lesf2>:
 8000e74:	f04f 0c01 	mov.w	ip, #1
 8000e78:	e002      	b.n	8000e80 <__cmpsf2+0x4>
 8000e7a:	bf00      	nop

08000e7c <__cmpsf2>:
 8000e7c:	f04f 0c01 	mov.w	ip, #1
 8000e80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e90:	bf18      	it	ne
 8000e92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e96:	d011      	beq.n	8000ebc <__cmpsf2+0x40>
 8000e98:	b001      	add	sp, #4
 8000e9a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e9e:	bf18      	it	ne
 8000ea0:	ea90 0f01 	teqne	r0, r1
 8000ea4:	bf58      	it	pl
 8000ea6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eaa:	bf88      	it	hi
 8000eac:	17c8      	asrhi	r0, r1, #31
 8000eae:	bf38      	it	cc
 8000eb0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb4:	bf18      	it	ne
 8000eb6:	f040 0001 	orrne.w	r0, r0, #1
 8000eba:	4770      	bx	lr
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	d102      	bne.n	8000ec8 <__cmpsf2+0x4c>
 8000ec2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec6:	d105      	bne.n	8000ed4 <__cmpsf2+0x58>
 8000ec8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ecc:	d1e4      	bne.n	8000e98 <__cmpsf2+0x1c>
 8000ece:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed2:	d0e1      	beq.n	8000e98 <__cmpsf2+0x1c>
 8000ed4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__aeabi_cfrcmple>:
 8000edc:	4684      	mov	ip, r0
 8000ede:	4608      	mov	r0, r1
 8000ee0:	4661      	mov	r1, ip
 8000ee2:	e7ff      	b.n	8000ee4 <__aeabi_cfcmpeq>

08000ee4 <__aeabi_cfcmpeq>:
 8000ee4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ee6:	f7ff ffc9 	bl	8000e7c <__cmpsf2>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	bf48      	it	mi
 8000eee:	f110 0f00 	cmnmi.w	r0, #0
 8000ef2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef4 <__aeabi_fcmpeq>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff fff4 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000efc:	bf0c      	ite	eq
 8000efe:	2001      	moveq	r0, #1
 8000f00:	2000      	movne	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmplt>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffea 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000f10:	bf34      	ite	cc
 8000f12:	2001      	movcc	r0, #1
 8000f14:	2000      	movcs	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmple>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffe0 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpge>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffd2 	bl	8000edc <__aeabi_cfrcmple>
 8000f38:	bf94      	ite	ls
 8000f3a:	2001      	movls	r0, #1
 8000f3c:	2000      	movhi	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmpgt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffc8 	bl	8000edc <__aeabi_cfrcmple>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2iz>:
 8000f58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30f      	bcc.n	8000f82 <__aeabi_f2iz+0x2a>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d90d      	bls.n	8000f88 <__aeabi_f2iz+0x30>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	bf18      	it	ne
 8000f7e:	4240      	negne	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4770      	bx	lr
 8000f88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_f2iz+0x3a>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d105      	bne.n	8000f9e <__aeabi_f2iz+0x46>
 8000f92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f96:	bf08      	it	eq
 8000f98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <__aeabi_uldivmod>:
 8000fa4:	b953      	cbnz	r3, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa6:	b94a      	cbnz	r2, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	bf08      	it	eq
 8000fac:	2800      	cmpeq	r0, #0
 8000fae:	bf1c      	itt	ne
 8000fb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fb8:	f000 b96e 	b.w	8001298 <__aeabi_idiv0>
 8000fbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fc4:	f000 f806 	bl	8000fd4 <__udivmoddi4>
 8000fc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fd0:	b004      	add	sp, #16
 8000fd2:	4770      	bx	lr

08000fd4 <__udivmoddi4>:
 8000fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd8:	9e08      	ldr	r6, [sp, #32]
 8000fda:	460d      	mov	r5, r1
 8000fdc:	4604      	mov	r4, r0
 8000fde:	468e      	mov	lr, r1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 8083 	bne.w	80010ec <__udivmoddi4+0x118>
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	4617      	mov	r7, r2
 8000fea:	d947      	bls.n	800107c <__udivmoddi4+0xa8>
 8000fec:	fab2 f382 	clz	r3, r2
 8000ff0:	b14b      	cbz	r3, 8001006 <__udivmoddi4+0x32>
 8000ff2:	f1c3 0120 	rsb	r1, r3, #32
 8000ff6:	fa05 fe03 	lsl.w	lr, r5, r3
 8000ffa:	fa20 f101 	lsr.w	r1, r0, r1
 8000ffe:	409f      	lsls	r7, r3
 8001000:	ea41 0e0e 	orr.w	lr, r1, lr
 8001004:	409c      	lsls	r4, r3
 8001006:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800100a:	fbbe fcf8 	udiv	ip, lr, r8
 800100e:	fa1f f987 	uxth.w	r9, r7
 8001012:	fb08 e21c 	mls	r2, r8, ip, lr
 8001016:	fb0c f009 	mul.w	r0, ip, r9
 800101a:	0c21      	lsrs	r1, r4, #16
 800101c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001020:	4290      	cmp	r0, r2
 8001022:	d90a      	bls.n	800103a <__udivmoddi4+0x66>
 8001024:	18ba      	adds	r2, r7, r2
 8001026:	f10c 31ff 	add.w	r1, ip, #4294967295
 800102a:	f080 8118 	bcs.w	800125e <__udivmoddi4+0x28a>
 800102e:	4290      	cmp	r0, r2
 8001030:	f240 8115 	bls.w	800125e <__udivmoddi4+0x28a>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	443a      	add	r2, r7
 800103a:	1a12      	subs	r2, r2, r0
 800103c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001040:	fb08 2210 	mls	r2, r8, r0, r2
 8001044:	fb00 f109 	mul.w	r1, r0, r9
 8001048:	b2a4      	uxth	r4, r4
 800104a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800104e:	42a1      	cmp	r1, r4
 8001050:	d909      	bls.n	8001066 <__udivmoddi4+0x92>
 8001052:	193c      	adds	r4, r7, r4
 8001054:	f100 32ff 	add.w	r2, r0, #4294967295
 8001058:	f080 8103 	bcs.w	8001262 <__udivmoddi4+0x28e>
 800105c:	42a1      	cmp	r1, r4
 800105e:	f240 8100 	bls.w	8001262 <__udivmoddi4+0x28e>
 8001062:	3802      	subs	r0, #2
 8001064:	443c      	add	r4, r7
 8001066:	1a64      	subs	r4, r4, r1
 8001068:	2100      	movs	r1, #0
 800106a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800106e:	b11e      	cbz	r6, 8001078 <__udivmoddi4+0xa4>
 8001070:	2200      	movs	r2, #0
 8001072:	40dc      	lsrs	r4, r3
 8001074:	e9c6 4200 	strd	r4, r2, [r6]
 8001078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107c:	b902      	cbnz	r2, 8001080 <__udivmoddi4+0xac>
 800107e:	deff      	udf	#255	; 0xff
 8001080:	fab2 f382 	clz	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d14f      	bne.n	8001128 <__udivmoddi4+0x154>
 8001088:	1a8d      	subs	r5, r1, r2
 800108a:	2101      	movs	r1, #1
 800108c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001090:	fa1f f882 	uxth.w	r8, r2
 8001094:	fbb5 fcfe 	udiv	ip, r5, lr
 8001098:	fb0e 551c 	mls	r5, lr, ip, r5
 800109c:	fb08 f00c 	mul.w	r0, r8, ip
 80010a0:	0c22      	lsrs	r2, r4, #16
 80010a2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80010a6:	42a8      	cmp	r0, r5
 80010a8:	d907      	bls.n	80010ba <__udivmoddi4+0xe6>
 80010aa:	197d      	adds	r5, r7, r5
 80010ac:	f10c 32ff 	add.w	r2, ip, #4294967295
 80010b0:	d202      	bcs.n	80010b8 <__udivmoddi4+0xe4>
 80010b2:	42a8      	cmp	r0, r5
 80010b4:	f200 80e9 	bhi.w	800128a <__udivmoddi4+0x2b6>
 80010b8:	4694      	mov	ip, r2
 80010ba:	1a2d      	subs	r5, r5, r0
 80010bc:	fbb5 f0fe 	udiv	r0, r5, lr
 80010c0:	fb0e 5510 	mls	r5, lr, r0, r5
 80010c4:	fb08 f800 	mul.w	r8, r8, r0
 80010c8:	b2a4      	uxth	r4, r4
 80010ca:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010ce:	45a0      	cmp	r8, r4
 80010d0:	d907      	bls.n	80010e2 <__udivmoddi4+0x10e>
 80010d2:	193c      	adds	r4, r7, r4
 80010d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80010d8:	d202      	bcs.n	80010e0 <__udivmoddi4+0x10c>
 80010da:	45a0      	cmp	r8, r4
 80010dc:	f200 80d9 	bhi.w	8001292 <__udivmoddi4+0x2be>
 80010e0:	4610      	mov	r0, r2
 80010e2:	eba4 0408 	sub.w	r4, r4, r8
 80010e6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010ea:	e7c0      	b.n	800106e <__udivmoddi4+0x9a>
 80010ec:	428b      	cmp	r3, r1
 80010ee:	d908      	bls.n	8001102 <__udivmoddi4+0x12e>
 80010f0:	2e00      	cmp	r6, #0
 80010f2:	f000 80b1 	beq.w	8001258 <__udivmoddi4+0x284>
 80010f6:	2100      	movs	r1, #0
 80010f8:	e9c6 0500 	strd	r0, r5, [r6]
 80010fc:	4608      	mov	r0, r1
 80010fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001102:	fab3 f183 	clz	r1, r3
 8001106:	2900      	cmp	r1, #0
 8001108:	d14b      	bne.n	80011a2 <__udivmoddi4+0x1ce>
 800110a:	42ab      	cmp	r3, r5
 800110c:	d302      	bcc.n	8001114 <__udivmoddi4+0x140>
 800110e:	4282      	cmp	r2, r0
 8001110:	f200 80b9 	bhi.w	8001286 <__udivmoddi4+0x2b2>
 8001114:	1a84      	subs	r4, r0, r2
 8001116:	eb65 0303 	sbc.w	r3, r5, r3
 800111a:	2001      	movs	r0, #1
 800111c:	469e      	mov	lr, r3
 800111e:	2e00      	cmp	r6, #0
 8001120:	d0aa      	beq.n	8001078 <__udivmoddi4+0xa4>
 8001122:	e9c6 4e00 	strd	r4, lr, [r6]
 8001126:	e7a7      	b.n	8001078 <__udivmoddi4+0xa4>
 8001128:	409f      	lsls	r7, r3
 800112a:	f1c3 0220 	rsb	r2, r3, #32
 800112e:	40d1      	lsrs	r1, r2
 8001130:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001134:	fbb1 f0fe 	udiv	r0, r1, lr
 8001138:	fa1f f887 	uxth.w	r8, r7
 800113c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001140:	fa24 f202 	lsr.w	r2, r4, r2
 8001144:	409d      	lsls	r5, r3
 8001146:	fb00 fc08 	mul.w	ip, r0, r8
 800114a:	432a      	orrs	r2, r5
 800114c:	0c15      	lsrs	r5, r2, #16
 800114e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001152:	45ac      	cmp	ip, r5
 8001154:	fa04 f403 	lsl.w	r4, r4, r3
 8001158:	d909      	bls.n	800116e <__udivmoddi4+0x19a>
 800115a:	197d      	adds	r5, r7, r5
 800115c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001160:	f080 808f 	bcs.w	8001282 <__udivmoddi4+0x2ae>
 8001164:	45ac      	cmp	ip, r5
 8001166:	f240 808c 	bls.w	8001282 <__udivmoddi4+0x2ae>
 800116a:	3802      	subs	r0, #2
 800116c:	443d      	add	r5, r7
 800116e:	eba5 050c 	sub.w	r5, r5, ip
 8001172:	fbb5 f1fe 	udiv	r1, r5, lr
 8001176:	fb0e 5c11 	mls	ip, lr, r1, r5
 800117a:	fb01 f908 	mul.w	r9, r1, r8
 800117e:	b295      	uxth	r5, r2
 8001180:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001184:	45a9      	cmp	r9, r5
 8001186:	d907      	bls.n	8001198 <__udivmoddi4+0x1c4>
 8001188:	197d      	adds	r5, r7, r5
 800118a:	f101 32ff 	add.w	r2, r1, #4294967295
 800118e:	d274      	bcs.n	800127a <__udivmoddi4+0x2a6>
 8001190:	45a9      	cmp	r9, r5
 8001192:	d972      	bls.n	800127a <__udivmoddi4+0x2a6>
 8001194:	3902      	subs	r1, #2
 8001196:	443d      	add	r5, r7
 8001198:	eba5 0509 	sub.w	r5, r5, r9
 800119c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011a0:	e778      	b.n	8001094 <__udivmoddi4+0xc0>
 80011a2:	f1c1 0720 	rsb	r7, r1, #32
 80011a6:	408b      	lsls	r3, r1
 80011a8:	fa22 fc07 	lsr.w	ip, r2, r7
 80011ac:	ea4c 0c03 	orr.w	ip, ip, r3
 80011b0:	fa25 f407 	lsr.w	r4, r5, r7
 80011b4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011b8:	fbb4 f9fe 	udiv	r9, r4, lr
 80011bc:	fa1f f88c 	uxth.w	r8, ip
 80011c0:	fb0e 4419 	mls	r4, lr, r9, r4
 80011c4:	fa20 f307 	lsr.w	r3, r0, r7
 80011c8:	fb09 fa08 	mul.w	sl, r9, r8
 80011cc:	408d      	lsls	r5, r1
 80011ce:	431d      	orrs	r5, r3
 80011d0:	0c2b      	lsrs	r3, r5, #16
 80011d2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80011d6:	45a2      	cmp	sl, r4
 80011d8:	fa02 f201 	lsl.w	r2, r2, r1
 80011dc:	fa00 f301 	lsl.w	r3, r0, r1
 80011e0:	d909      	bls.n	80011f6 <__udivmoddi4+0x222>
 80011e2:	eb1c 0404 	adds.w	r4, ip, r4
 80011e6:	f109 30ff 	add.w	r0, r9, #4294967295
 80011ea:	d248      	bcs.n	800127e <__udivmoddi4+0x2aa>
 80011ec:	45a2      	cmp	sl, r4
 80011ee:	d946      	bls.n	800127e <__udivmoddi4+0x2aa>
 80011f0:	f1a9 0902 	sub.w	r9, r9, #2
 80011f4:	4464      	add	r4, ip
 80011f6:	eba4 040a 	sub.w	r4, r4, sl
 80011fa:	fbb4 f0fe 	udiv	r0, r4, lr
 80011fe:	fb0e 4410 	mls	r4, lr, r0, r4
 8001202:	fb00 fa08 	mul.w	sl, r0, r8
 8001206:	b2ad      	uxth	r5, r5
 8001208:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800120c:	45a2      	cmp	sl, r4
 800120e:	d908      	bls.n	8001222 <__udivmoddi4+0x24e>
 8001210:	eb1c 0404 	adds.w	r4, ip, r4
 8001214:	f100 35ff 	add.w	r5, r0, #4294967295
 8001218:	d22d      	bcs.n	8001276 <__udivmoddi4+0x2a2>
 800121a:	45a2      	cmp	sl, r4
 800121c:	d92b      	bls.n	8001276 <__udivmoddi4+0x2a2>
 800121e:	3802      	subs	r0, #2
 8001220:	4464      	add	r4, ip
 8001222:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001226:	fba0 8902 	umull	r8, r9, r0, r2
 800122a:	eba4 040a 	sub.w	r4, r4, sl
 800122e:	454c      	cmp	r4, r9
 8001230:	46c6      	mov	lr, r8
 8001232:	464d      	mov	r5, r9
 8001234:	d319      	bcc.n	800126a <__udivmoddi4+0x296>
 8001236:	d016      	beq.n	8001266 <__udivmoddi4+0x292>
 8001238:	b15e      	cbz	r6, 8001252 <__udivmoddi4+0x27e>
 800123a:	ebb3 020e 	subs.w	r2, r3, lr
 800123e:	eb64 0405 	sbc.w	r4, r4, r5
 8001242:	fa04 f707 	lsl.w	r7, r4, r7
 8001246:	fa22 f301 	lsr.w	r3, r2, r1
 800124a:	431f      	orrs	r7, r3
 800124c:	40cc      	lsrs	r4, r1
 800124e:	e9c6 7400 	strd	r7, r4, [r6]
 8001252:	2100      	movs	r1, #0
 8001254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001258:	4631      	mov	r1, r6
 800125a:	4630      	mov	r0, r6
 800125c:	e70c      	b.n	8001078 <__udivmoddi4+0xa4>
 800125e:	468c      	mov	ip, r1
 8001260:	e6eb      	b.n	800103a <__udivmoddi4+0x66>
 8001262:	4610      	mov	r0, r2
 8001264:	e6ff      	b.n	8001066 <__udivmoddi4+0x92>
 8001266:	4543      	cmp	r3, r8
 8001268:	d2e6      	bcs.n	8001238 <__udivmoddi4+0x264>
 800126a:	ebb8 0e02 	subs.w	lr, r8, r2
 800126e:	eb69 050c 	sbc.w	r5, r9, ip
 8001272:	3801      	subs	r0, #1
 8001274:	e7e0      	b.n	8001238 <__udivmoddi4+0x264>
 8001276:	4628      	mov	r0, r5
 8001278:	e7d3      	b.n	8001222 <__udivmoddi4+0x24e>
 800127a:	4611      	mov	r1, r2
 800127c:	e78c      	b.n	8001198 <__udivmoddi4+0x1c4>
 800127e:	4681      	mov	r9, r0
 8001280:	e7b9      	b.n	80011f6 <__udivmoddi4+0x222>
 8001282:	4608      	mov	r0, r1
 8001284:	e773      	b.n	800116e <__udivmoddi4+0x19a>
 8001286:	4608      	mov	r0, r1
 8001288:	e749      	b.n	800111e <__udivmoddi4+0x14a>
 800128a:	f1ac 0c02 	sub.w	ip, ip, #2
 800128e:	443d      	add	r5, r7
 8001290:	e713      	b.n	80010ba <__udivmoddi4+0xe6>
 8001292:	3802      	subs	r0, #2
 8001294:	443c      	add	r4, r7
 8001296:	e724      	b.n	80010e2 <__udivmoddi4+0x10e>

08001298 <__aeabi_idiv0>:
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
    dir(dir)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f010 fc0b 	bl	8011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	761a      	strb	r2, [r3, #24]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3330      	adds	r3, #48	; 0x30
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	7e1b      	ldrb	r3, [r3, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d106      	bne.n	80012e0 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
 80012de:	e005      	b.n	80012ec <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2201      	movs	r2, #1
 80012e4:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
    }

    this->configPin();
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f000 f863 	bl	80013b8 <_ZN3Pin9configPinEv>
}
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(std::string portAndPin, int dir, int modifier) :
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
    portAndPin(portAndPin),
    dir(dir),
    modifier(modifier)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	4618      	mov	r0, r3
 8001310:	f010 fbda 	bl	8011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	761a      	strb	r2, [r3, #24]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	765a      	strb	r2, [r3, #25]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3330      	adds	r3, #48	; 0x30
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	7e1b      	ldrb	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d128      	bne.n	800138e <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x92>
    {
        this->mode = GPIO_MODE_INPUT;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]

        // Set pin  modifier
        switch(this->modifier)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	7e5b      	ldrb	r3, [r3, #25]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d827      	bhi.n	800139a <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9e>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x54>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	08001381 	.word	0x08001381
 8001354:	0800139b 	.word	0x0800139b
 8001358:	08001365 	.word	0x08001365
 800135c:	08001373 	.word	0x08001373
 8001360:	08001381 	.word	0x08001381
        {
            case PULLUP:
                printf("  Setting pin as Pull Up\n");
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xb0>)
 8001366:	f010 fdc5 	bl	8011ef4 <puts>
                this->pull = GPIO_PULLUP;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2201      	movs	r2, #1
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 8001370:	e013      	b.n	800139a <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9e>
            case PULLDOWN:
                printf("  Setting pin as Pull Down\n");
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xb4>)
 8001374:	f010 fdbe 	bl	8011ef4 <puts>
                this->pull = GPIO_PULLDOWN;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2202      	movs	r2, #2
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 800137e:	e00c      	b.n	800139a <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9e>
            case NONE:
            case PULLNONE:
                printf("  Setting pin as No Pull\n");
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xb8>)
 8001382:	f010 fdb7 	bl	8011ef4 <puts>
                this->pull = GPIO_NOPULL;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 800138c:	e005      	b.n	800139a <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9e>
        }
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2201      	movs	r2, #1
 8001392:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
    }

    this->configPin();
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f80c 	bl	80013b8 <_ZN3Pin9configPinEv>
}
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08013020 	.word	0x08013020
 80013b0:	0801303c 	.word	0x0801303c
 80013b4:	08013058 	.word	0x08013058

080013b8 <_ZN3Pin9configPinEv>:

void Pin::configPin()
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 80013c0:	4867      	ldr	r0, [pc, #412]	; (8001560 <_ZN3Pin9configPinEv+0x1a8>)
 80013c2:	f010 fd97 	bl	8011ef4 <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 80013c6:	4b67      	ldr	r3, [pc, #412]	; (8001564 <_ZN3Pin9configPinEv+0x1ac>)
 80013c8:	f107 0420 	add.w	r4, r7, #32
 80013cc:	461d      	mov	r5, r3
 80013ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f010 fb4d 	bl	8011a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013e0:	4603      	mov	r3, r0
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b50      	cmp	r3, #80	; 0x50
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d060      	beq.n	80014b4 <_ZN3Pin9configPinEv+0xfc>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2101      	movs	r1, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f010 fb3f 	bl	8011a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013fc:	4603      	mov	r3, r0
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3b41      	subs	r3, #65	; 0x41
 8001402:	b2da      	uxtb	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2103      	movs	r1, #3
 800140c:	4618      	mov	r0, r3
 800140e:	f010 fb34 	bl	8011a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001412:	4603      	mov	r3, r0
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	3b30      	subs	r3, #48	; 0x30
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2104      	movs	r1, #4
 8001424:	4618      	mov	r0, r3
 8001426:	f010 fb28 	bl	8011a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800142a:	4603      	mov	r3, r0
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b30      	subs	r3, #48	; 0x30
 8001432:	86fb      	strh	r3, [r7, #54]	; 0x36

        if (pin2 <= 8) 
 8001434:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001436:	2b08      	cmp	r3, #8
 8001438:	d80b      	bhi.n	8001452 <_ZN3Pin9configPinEv+0x9a>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	8b9b      	ldrh	r3, [r3, #28]
 800143e:	461a      	mov	r2, r3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800144a:	4413      	add	r3, r2
 800144c:	b29a      	uxth	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	8b9b      	ldrh	r3, [r3, #28]
 8001456:	461a      	mov	r2, r3
 8001458:	2301      	movs	r3, #1
 800145a:	4093      	lsls	r3, r2
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7e9b      	ldrb	r3, [r3, #26]
 8001466:	3341      	adds	r3, #65	; 0x41
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	483e      	ldr	r0, [pc, #248]	; (8001568 <_ZN3Pin9configPinEv+0x1b0>)
 800146e:	f010 fcbb 	bl	8011de8 <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	8b9b      	ldrh	r3, [r3, #28]
 8001476:	4619      	mov	r1, r3
 8001478:	483c      	ldr	r0, [pc, #240]	; (800156c <_ZN3Pin9configPinEv+0x1b4>)
 800147a:	f010 fcb5 	bl	8011de8 <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7e9b      	ldrb	r3, [r3, #26]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001488:	4413      	add	r3, r2
 800148a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c

    // enable the peripheral clock
    switch (portIndex){
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e9b      	ldrb	r3, [r3, #26]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d85b      	bhi.n	8001552 <_ZN3Pin9configPinEv+0x19a>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <_ZN3Pin9configPinEv+0xe8>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014bd 	.word	0x080014bd
 80014a4:	080014db 	.word	0x080014db
 80014a8:	080014f9 	.word	0x080014f9
 80014ac:	08001517 	.word	0x08001517
 80014b0:	08001535 	.word	0x08001535
        printf("  Invalid port and pin definition\n");
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <_ZN3Pin9configPinEv+0x1b8>)
 80014b6:	f010 fd1d 	bl	8011ef4 <puts>
 80014ba:	e04d      	b.n	8001558 <_ZN3Pin9configPinEv+0x1a0>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4a2b      	ldr	r2, [pc, #172]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6313      	str	r3, [r2, #48]	; 0x30
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	69fb      	ldr	r3, [r7, #28]
            break;
 80014d8:	e03b      	b.n	8001552 <_ZN3Pin9configPinEv+0x19a>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
            break;
 80014f6:	e02c      	b.n	8001552 <_ZN3Pin9configPinEv+0x19a>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
            break;
 8001514:	e01d      	b.n	8001552 <_ZN3Pin9configPinEv+0x19a>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
            break;
 8001532:	e00e      	b.n	8001552 <_ZN3Pin9configPinEv+0x19a>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <_ZN3Pin9configPinEv+0x1bc>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
            break;
 8001550:	bf00      	nop
    }

    this->initPin();
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f810 	bl	8001578 <_ZN3Pin7initPinEv>
}
 8001558:	3738      	adds	r7, #56	; 0x38
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	08013074 	.word	0x08013074
 8001564:	080130c8 	.word	0x080130c8
 8001568:	080130a8 	.word	0x080130a8
 800156c:	080130bc 	.word	0x080130bc
 8001570:	08013084 	.word	0x08013084
 8001574:	40023800 	.word	0x40023800

08001578 <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	8bdb      	ldrh	r3, [r3, #30]
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	f005 f8fb 	bl	8006786 <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	8bdb      	ldrh	r3, [r3, #30]
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1a      	ldr	r2, [r3, #32]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2202      	movs	r2, #2
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3330      	adds	r3, #48	; 0x30
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f004 ff2e 	bl	800641c <HAL_GPIO_Init>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <_ZN9InterruptC1Ev+0x1c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	0801512c 	.word	0x0801512c

080015e8 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 80015f6:	f010 fbf7 	bl	8011de8 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 80015fa:	4905      	ldr	r1, [pc, #20]	; (8001610 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	080130dc 	.word	0x080130dc
 8001610:	2000009c 	.word	0x2000009c

08001614 <_ZN9Interrupt12TIM1_WrapperEv>:

void Interrupt::TIM1_Wrapper(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM1_UP_TIM10_IRQn]->ISR_Handler();
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <_ZN9Interrupt12TIM1_WrapperEv+0x18>)
 800161a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <_ZN9Interrupt12TIM1_WrapperEv+0x18>)
 800161e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4610      	mov	r0, r2
 8001626:	4798      	blx	r3
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000009c 	.word	0x2000009c

08001630 <_ZN9Interrupt12TIM2_WrapperEv>:

void Interrupt::TIM2_Wrapper(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8001636:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4610      	mov	r0, r2
 8001642:	4798      	blx	r3
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000009c 	.word	0x2000009c

0800164c <_ZN9Interrupt20DMA2_Stream2_WrapperEv>:
{
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
}

void Interrupt::DMA2_Stream2_Wrapper(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA2_Stream2_IRQn]->ISR_Handler();
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <_ZN9Interrupt20DMA2_Stream2_WrapperEv+0x1c>)
 8001652:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <_ZN9Interrupt20DMA2_Stream2_WrapperEv+0x1c>)
 8001658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4610      	mov	r0, r2
 8001662:	4798      	blx	r3
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000009c 	.word	0x2000009c

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <TIM1_UP_TIM10_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void TIM1_UP_TIM10_IRQHandler()
	{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	  if(TIM1->SR & TIM_SR_UIF) // if UIF flag is set
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf14      	ite	ne
 80016d0:	2301      	movne	r3, #1
 80016d2:	2300      	moveq	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <TIM1_UP_TIM10_IRQHandler+0x2a>
	  {
		TIM1->SR &= ~TIM_SR_UIF; // clear UIF flag
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6113      	str	r3, [r2, #16]

		Interrupt::TIM1_Wrapper();
 80016e6:	f7ff ff95 	bl	8001614 <_ZN9Interrupt12TIM1_WrapperEv>
	  }
	}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010000 	.word	0x40010000

080016f4 <TIM2_IRQHandler>:

	void TIM2_IRQHandler()
	{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 80016f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf14      	ite	ne
 8001706:	2301      	movne	r3, #1
 8001708:	2300      	moveq	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d009      	beq.n	8001724 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8001710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 8001720:	f7ff ff86 	bl	8001630 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <DMA2_Stream2_IRQHandler>:


	void DMA2_Stream2_IRQHandler(void)
	{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
		Interrupt::DMA2_Stream2_Wrapper();
 800172c:	f7ff ff8e 	bl	800164c <_ZN9Interrupt20DMA2_Stream2_WrapperEv>
	}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 8001734:	b598      	push	{r3, r4, r7, lr}
 8001736:	af00      	add	r7, sp, #0
    baseThread = new pruThread(TIM1, TIM1_UP_TIM10_IRQn, PRU_BASEFREQ);
 8001738:	2030      	movs	r0, #48	; 0x30
 800173a:	f010 f937 	bl	80119ac <_Znwj>
 800173e:	4603      	mov	r3, r0
 8001740:	461c      	mov	r4, r3
 8001742:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001746:	2219      	movs	r2, #25
 8001748:	490f      	ldr	r1, [pc, #60]	; (8001788 <_Z13createThreadsv+0x54>)
 800174a:	4620      	mov	r0, r4
 800174c:	f002 f99c 	bl	8003a88 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <_Z13createThreadsv+0x58>)
 8001752:	601c      	str	r4, [r3, #0]
    //NVIC_SetVector(TIM1_UP_TIM10_IRQn, (uint32_t)TIM1_IRQHandler);
    NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2);
 8001754:	2102      	movs	r1, #2
 8001756:	2019      	movs	r0, #25
 8001758:	f7ff ff88 	bl	800166c <__NVIC_SetPriority>

    servoThread = new pruThread(TIM2, TIM2_IRQn , PRU_SERVOFREQ);
 800175c:	2030      	movs	r0, #48	; 0x30
 800175e:	f010 f925 	bl	80119ac <_Znwj>
 8001762:	4603      	mov	r3, r0
 8001764:	461c      	mov	r4, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	221c      	movs	r2, #28
 800176c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001770:	4620      	mov	r0, r4
 8001772:	f002 f989 	bl	8003a88 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <_Z13createThreadsv+0x5c>)
 8001778:	601c      	str	r4, [r3, #0]
    //NVIC_SetVector(TIM2_IRQn , (uint32_t)TIM2_IRQHandler);
    NVIC_SetPriority(TIM2_IRQn , 3);
 800177a:	2103      	movs	r1, #3
 800177c:	201c      	movs	r0, #28
 800177e:	f7ff ff75 	bl	800166c <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	bd98      	pop	{r3, r4, r7, pc}
 8001786:	bf00      	nop
 8001788:	40010000 	.word	0x40010000
 800178c:	2000025c 	.word	0x2000025c
 8001790:	20000258 	.word	0x20000258

08001794 <__io_putchar>:
/* USER CODE BEGIN 0 */

// re-target printf to UART2 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800179c:	1d39      	adds	r1, r7, #4
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	2201      	movs	r2, #1
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <__io_putchar+0x20>)
 80017a6:	f006 f95a 	bl	8007a5e <HAL_UART_Transmit>
	  return ch;
 80017aa:	687b      	ldr	r3, [r7, #4]
	}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200001dc 	.word	0x200001dc

080017b8 <_Z11loadModulesv>:

volatile mpgData_t* ptrMpgData = &mpgData;


void loadModules()
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	f5ad 7d61 	sub.w	sp, sp, #900	; 0x384
 80017be:	af06      	add	r7, sp, #24
	int joint;
    ptrInputs = &txData.inputs;
 80017c0:	4bd7      	ldr	r3, [pc, #860]	; (8001b20 <_Z11loadModulesv+0x368>)
 80017c2:	4ad8      	ldr	r2, [pc, #864]	; (8001b24 <_Z11loadModulesv+0x36c>)
 80017c4:	601a      	str	r2, [r3, #0]
    ptrNVMPGInputs = &txData.NVMPGinputs;
 80017c6:	4bd8      	ldr	r3, [pc, #864]	; (8001b28 <_Z11loadModulesv+0x370>)
 80017c8:	4ad8      	ldr	r2, [pc, #864]	; (8001b2c <_Z11loadModulesv+0x374>)
 80017ca:	601a      	str	r2, [r3, #0]

    // Ethernet communication monitoring
	comms = new RemoraComms();
 80017cc:	2018      	movs	r0, #24
 80017ce:	f010 f8ed 	bl	80119ac <_Znwj>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461c      	mov	r4, r3
 80017d6:	4620      	mov	r0, r4
 80017d8:	f001 fa40 	bl	8002c5c <_ZN11RemoraCommsC1Ev>
 80017dc:	4bd4      	ldr	r3, [pc, #848]	; (8001b30 <_Z11loadModulesv+0x378>)
 80017de:	601c      	str	r4, [r3, #0]
	servoThread->registerModule(comms);
 80017e0:	4bd4      	ldr	r3, [pc, #848]	; (8001b34 <_Z11loadModulesv+0x37c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4ad2      	ldr	r2, [pc, #840]	; (8001b30 <_Z11loadModulesv+0x378>)
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 f996 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>


	// STEP GENERATORS

	// Step generator for Joint 0 [X axis]
	joint = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
	printf("\nCreate step generator for Joint %d\n", joint);
 80017f6:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 80017fa:	48cf      	ldr	r0, [pc, #828]	; (8001b38 <_Z11loadModulesv+0x380>)
 80017fc:	f010 faf4 	bl	8011de8 <iprintf>

	ptrJointFreqCmd[joint] = &rxData.jointFreqCmd[joint];
 8001800:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4acd      	ldr	r2, [pc, #820]	; (8001b3c <_Z11loadModulesv+0x384>)
 8001808:	4413      	add	r3, r2
 800180a:	1d1a      	adds	r2, r3, #4
 800180c:	49cc      	ldr	r1, [pc, #816]	; (8001b40 <_Z11loadModulesv+0x388>)
 800180e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointFeedback[joint] = &txData.jointFeedback[joint];
 8001816:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4ac9      	ldr	r2, [pc, #804]	; (8001b44 <_Z11loadModulesv+0x38c>)
 800181e:	4413      	add	r3, r2
 8001820:	1d1a      	adds	r2, r3, #4
 8001822:	49c9      	ldr	r1, [pc, #804]	; (8001b48 <_Z11loadModulesv+0x390>)
 8001824:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointEnable = &rxData.jointEnable;
 800182c:	4bc7      	ldr	r3, [pc, #796]	; (8001b4c <_Z11loadModulesv+0x394>)
 800182e:	4ac8      	ldr	r2, [pc, #800]	; (8001b50 <_Z11loadModulesv+0x398>)
 8001830:	601a      	str	r2, [r3, #0]

    Module* joint0 = new Stepgen(PRU_BASEFREQ, joint, "PE_15", "PE_14", STEPBIT, *ptrJointFreqCmd[joint], *ptrJointFeedback[joint], *ptrJointEnable);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4618      	mov	r0, r3
 8001838:	f010 f8cc 	bl	80119d4 <_ZNSaIcEC1Ev>
 800183c:	f107 021c 	add.w	r2, r7, #28
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	49c4      	ldr	r1, [pc, #784]	; (8001b54 <_Z11loadModulesv+0x39c>)
 8001844:	4618      	mov	r0, r3
 8001846:	f010 f971 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800184a:	1d3e      	adds	r6, r7, #4
 800184c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001850:	4618      	mov	r0, r3
 8001852:	f010 f8bf 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001856:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	49be      	ldr	r1, [pc, #760]	; (8001b58 <_Z11loadModulesv+0x3a0>)
 8001860:	4618      	mov	r0, r3
 8001862:	f010 f963 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001866:	f107 0420 	add.w	r4, r7, #32
 800186a:	207c      	movs	r0, #124	; 0x7c
 800186c:	f010 f89e 	bl	80119ac <_Znwj>
 8001870:	4603      	mov	r3, r0
 8001872:	461d      	mov	r5, r3
 8001874:	4ab2      	ldr	r2, [pc, #712]	; (8001b40 <_Z11loadModulesv+0x388>)
 8001876:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	49b2      	ldr	r1, [pc, #712]	; (8001b48 <_Z11loadModulesv+0x390>)
 8001880:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8001884:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001888:	49b0      	ldr	r1, [pc, #704]	; (8001b4c <_Z11loadModulesv+0x394>)
 800188a:	6809      	ldr	r1, [r1, #0]
 800188c:	9104      	str	r1, [sp, #16]
 800188e:	9203      	str	r2, [sp, #12]
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	2316      	movs	r3, #22
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	9400      	str	r4, [sp, #0]
 8001898:	4633      	mov	r3, r6
 800189a:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800189e:	f649 4140 	movw	r1, #40000	; 0x9c40
 80018a2:	4628      	mov	r0, r5
 80018a4:	f001 ff62 	bl	800376c <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh>
 80018a8:	f8c7 5360 	str.w	r5, [r7, #864]	; 0x360
 80018ac:	f107 0320 	add.w	r3, r7, #32
 80018b0:	4618      	mov	r0, r3
 80018b2:	f010 f8dc 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ba:	4618      	mov	r0, r3
 80018bc:	f010 f88b 	bl	80119d6 <_ZNSaIcED1Ev>
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f010 f8d3 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4618      	mov	r0, r3
 80018ce:	f010 f882 	bl	80119d6 <_ZNSaIcED1Ev>
    baseThread->registerModule(joint0);
 80018d2:	4ba2      	ldr	r3, [pc, #648]	; (8001b5c <_Z11loadModulesv+0x3a4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8d7 1360 	ldr.w	r1, [r7, #864]	; 0x360
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 f91e 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>
    baseThread->registerModulePost(joint0);
 80018e0:	4b9e      	ldr	r3, [pc, #632]	; (8001b5c <_Z11loadModulesv+0x3a4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8d7 1360 	ldr.w	r1, [r7, #864]	; 0x360
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 f927 	bl	8003b3c <_ZN9pruThread18registerModulePostEP6Module>
    baseThread->registerModule(joint5);
    baseThread->registerModulePost(joint5);
*/

    // INPUTS
    Module* STOP = new DigitalPin(*ptrInputs, 0, "PD_8", 0, true, NONE);
 80018ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018f2:	4618      	mov	r0, r3
 80018f4:	f010 f86e 	bl	80119d4 <_ZNSaIcEC1Ev>
 80018f8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80018fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001900:	4997      	ldr	r1, [pc, #604]	; (8001b60 <_Z11loadModulesv+0x3a8>)
 8001902:	4618      	mov	r0, r3
 8001904:	f010 f912 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001908:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 800190c:	2048      	movs	r0, #72	; 0x48
 800190e:	f010 f84d 	bl	80119ac <_Znwj>
 8001912:	4603      	mov	r3, r0
 8001914:	461c      	mov	r4, r3
 8001916:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <_Z11loadModulesv+0x368>)
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	9302      	str	r3, [sp, #8]
 800191e:	2301      	movs	r3, #1
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	462b      	mov	r3, r5
 8001928:	2200      	movs	r2, #0
 800192a:	4620      	mov	r0, r4
 800192c:	f001 fa24 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001930:	f8c7 435c 	str.w	r4, [r7, #860]	; 0x35c
 8001934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001938:	4618      	mov	r0, r3
 800193a:	f010 f898 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800193e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001942:	4618      	mov	r0, r3
 8001944:	f010 f847 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(STOP);
 8001948:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <_Z11loadModulesv+0x37c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8001950:	4618      	mov	r0, r3
 8001952:	f002 f8e3 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* PROBE = new DigitalPin(*ptrInputs, 0, "PD_9", 1, true, NONE);
 8001956:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800195a:	4618      	mov	r0, r3
 800195c:	f010 f83a 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001960:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001964:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001968:	497e      	ldr	r1, [pc, #504]	; (8001b64 <_Z11loadModulesv+0x3ac>)
 800196a:	4618      	mov	r0, r3
 800196c:	f010 f8de 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001970:	f107 0558 	add.w	r5, r7, #88	; 0x58
 8001974:	2048      	movs	r0, #72	; 0x48
 8001976:	f010 f819 	bl	80119ac <_Znwj>
 800197a:	4603      	mov	r3, r0
 800197c:	461c      	mov	r4, r3
 800197e:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <_Z11loadModulesv+0x368>)
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	2300      	movs	r3, #0
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2301      	movs	r3, #1
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	2301      	movs	r3, #1
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	462b      	mov	r3, r5
 8001990:	2200      	movs	r2, #0
 8001992:	4620      	mov	r0, r4
 8001994:	f001 f9f0 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001998:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 800199c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019a0:	4618      	mov	r0, r3
 80019a2:	f010 f864 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019aa:	4618      	mov	r0, r3
 80019ac:	f010 f813 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(PROBE);
 80019b0:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <_Z11loadModulesv+0x37c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 f8af 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP3 = new DigitalPin(*ptrInputs, 0, "PD_10", 2, true, NONE);
 80019be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019c2:	4618      	mov	r0, r3
 80019c4:	f010 f806 	bl	80119d4 <_ZNSaIcEC1Ev>
 80019c8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80019cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019d0:	4965      	ldr	r1, [pc, #404]	; (8001b68 <_Z11loadModulesv+0x3b0>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f010 f8aa 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80019d8:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80019dc:	2048      	movs	r0, #72	; 0x48
 80019de:	f00f ffe5 	bl	80119ac <_Znwj>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461c      	mov	r4, r3
 80019e6:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <_Z11loadModulesv+0x368>)
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2302      	movs	r3, #2
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	462b      	mov	r3, r5
 80019f8:	2200      	movs	r2, #0
 80019fa:	4620      	mov	r0, r4
 80019fc:	f001 f9bc 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001a00:	f8c7 4354 	str.w	r4, [r7, #852]	; 0x354
 8001a04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f010 f830 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a12:	4618      	mov	r0, r3
 8001a14:	f00f ffdf 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP3);
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <_Z11loadModulesv+0x37c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 f87b 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP4 = new DigitalPin(*ptrInputs, 0, "PD_11", 3, true, NONE);
 8001a26:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00f ffd2 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001a30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a34:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a38:	494c      	ldr	r1, [pc, #304]	; (8001b6c <_Z11loadModulesv+0x3b4>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f010 f876 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a40:	f107 0590 	add.w	r5, r7, #144	; 0x90
 8001a44:	2048      	movs	r0, #72	; 0x48
 8001a46:	f00f ffb1 	bl	80119ac <_Znwj>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <_Z11loadModulesv+0x368>)
 8001a50:	6819      	ldr	r1, [r3, #0]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2301      	movs	r3, #1
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	462b      	mov	r3, r5
 8001a60:	2200      	movs	r2, #0
 8001a62:	4620      	mov	r0, r4
 8001a64:	f001 f988 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001a68:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 8001a6c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00f fffc 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a76:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00f ffab 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP4);
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <_Z11loadModulesv+0x37c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 f847 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP5 = new DigitalPin(*ptrInputs, 0, "PD_14", 4, true, NONE);
 8001a8e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a92:	4618      	mov	r0, r3
 8001a94:	f00f ff9e 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001a98:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001a9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aa0:	4933      	ldr	r1, [pc, #204]	; (8001b70 <_Z11loadModulesv+0x3b8>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f010 f842 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001aa8:	f107 05ac 	add.w	r5, r7, #172	; 0xac
 8001aac:	2048      	movs	r0, #72	; 0x48
 8001aae:	f00f ff7d 	bl	80119ac <_Znwj>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <_Z11loadModulesv+0x368>)
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4620      	mov	r0, r4
 8001acc:	f001 f954 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001ad0:	f8c7 434c 	str.w	r4, [r7, #844]	; 0x34c
 8001ad4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00f ffc8 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ade:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f00f ff77 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP5);
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <_Z11loadModulesv+0x37c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d7 134c 	ldr.w	r1, [r7, #844]	; 0x34c
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 f813 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP6 = new DigitalPin(*ptrInputs, 0, "PD_15", 5, true, NONE);
 8001af6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00f ff6a 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001b00:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001b04:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b08:	491a      	ldr	r1, [pc, #104]	; (8001b74 <_Z11loadModulesv+0x3bc>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f010 f80e 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001b10:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8001b14:	2048      	movs	r0, #72	; 0x48
 8001b16:	f00f ff49 	bl	80119ac <_Znwj>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461c      	mov	r4, r3
 8001b1e:	e02b      	b.n	8001b78 <_Z11loadModulesv+0x3c0>
 8001b20:	200003cc 	.word	0x200003cc
 8001b24:	20000324 	.word	0x20000324
 8001b28:	200003d0 	.word	0x200003d0
 8001b2c:	20000328 	.word	0x20000328
 8001b30:	2000032c 	.word	0x2000032c
 8001b34:	20000258 	.word	0x20000258
 8001b38:	08013110 	.word	0x08013110
 8001b3c:	200002a4 	.word	0x200002a4
 8001b40:	20000370 	.word	0x20000370
 8001b44:	200002e8 	.word	0x200002e8
 8001b48:	20000390 	.word	0x20000390
 8001b4c:	200003b0 	.word	0x200003b0
 8001b50:	200002e0 	.word	0x200002e0
 8001b54:	08013138 	.word	0x08013138
 8001b58:	08013140 	.word	0x08013140
 8001b5c:	2000025c 	.word	0x2000025c
 8001b60:	08013148 	.word	0x08013148
 8001b64:	08013150 	.word	0x08013150
 8001b68:	08013158 	.word	0x08013158
 8001b6c:	08013160 	.word	0x08013160
 8001b70:	08013168 	.word	0x08013168
 8001b74:	08013170 	.word	0x08013170
 8001b78:	4bdb      	ldr	r3, [pc, #876]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9302      	str	r3, [sp, #8]
 8001b80:	2301      	movs	r3, #1
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2305      	movs	r3, #5
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	462b      	mov	r3, r5
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f001 f8f3 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001b92:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 8001b96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f00f ff67 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ba0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00f ff16 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP6);
 8001baa:	4bd0      	ldr	r3, [pc, #832]	; (8001eec <_Z11loadModulesv+0x734>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 ffb2 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP7 = new DigitalPin(*ptrInputs, 0, "PC_6", 6, true, NONE);
 8001bb8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00f ff09 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001bc2:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8001bc6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bca:	49c9      	ldr	r1, [pc, #804]	; (8001ef0 <_Z11loadModulesv+0x738>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00f ffad 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bd2:	f107 05e4 	add.w	r5, r7, #228	; 0xe4
 8001bd6:	2048      	movs	r0, #72	; 0x48
 8001bd8:	f00f fee8 	bl	80119ac <_Znwj>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461c      	mov	r4, r3
 8001be0:	4bc1      	ldr	r3, [pc, #772]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	2301      	movs	r3, #1
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2306      	movs	r3, #6
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f001 f8bf 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001bfa:	f8c7 4344 	str.w	r4, [r7, #836]	; 0x344
 8001bfe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00f ff33 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00f fee2 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP7);
 8001c12:	4bb6      	ldr	r3, [pc, #728]	; (8001eec <_Z11loadModulesv+0x734>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d7 1344 	ldr.w	r1, [r7, #836]	; 0x344
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 ff7e 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP8 = new DigitalPin(*ptrInputs, 0, "PC_7", 7, true, NONE);
 8001c20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00f fed5 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001c2a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c32:	49b0      	ldr	r1, [pc, #704]	; (8001ef4 <_Z11loadModulesv+0x73c>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f00f ff79 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c3a:	f507 7580 	add.w	r5, r7, #256	; 0x100
 8001c3e:	2048      	movs	r0, #72	; 0x48
 8001c40:	f00f feb4 	bl	80119ac <_Znwj>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461c      	mov	r4, r3
 8001c48:	4ba7      	ldr	r3, [pc, #668]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2301      	movs	r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2307      	movs	r3, #7
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	462b      	mov	r3, r5
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f001 f88b 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001c62:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 8001c66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f00f feff 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00f feae 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP8);
 8001c7a:	4b9c      	ldr	r3, [pc, #624]	; (8001eec <_Z11loadModulesv+0x734>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 ff4a 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP9 = new DigitalPin(*ptrInputs, 0, "PC_8", 8, true, NONE);
 8001c88:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f00f fea1 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001c92:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8001c96:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001c9a:	4997      	ldr	r1, [pc, #604]	; (8001ef8 <_Z11loadModulesv+0x740>)
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00f ff45 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ca2:	f507 758e 	add.w	r5, r7, #284	; 0x11c
 8001ca6:	2048      	movs	r0, #72	; 0x48
 8001ca8:	f00f fe80 	bl	80119ac <_Znwj>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461c      	mov	r4, r3
 8001cb0:	4b8d      	ldr	r3, [pc, #564]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001cb2:	6819      	ldr	r1, [r3, #0]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f001 f857 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001cca:	f8c7 433c 	str.w	r4, [r7, #828]	; 0x33c
 8001cce:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f00f fecb 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001cd8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00f fe7a 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP9);
 8001ce2:	4b82      	ldr	r3, [pc, #520]	; (8001eec <_Z11loadModulesv+0x734>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8d7 133c 	ldr.w	r1, [r7, #828]	; 0x33c
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 ff16 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP10 = new DigitalPin(*ptrInputs, 0, "PC_9", 9, true, NONE);
 8001cf0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00f fe6d 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001cfa:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001d02:	497e      	ldr	r1, [pc, #504]	; (8001efc <_Z11loadModulesv+0x744>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00f ff11 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001d0a:	f507 759c 	add.w	r5, r7, #312	; 0x138
 8001d0e:	2048      	movs	r0, #72	; 0x48
 8001d10:	f00f fe4c 	bl	80119ac <_Znwj>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461c      	mov	r4, r3
 8001d18:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	2301      	movs	r3, #1
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2309      	movs	r3, #9
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	462b      	mov	r3, r5
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f001 f823 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001d32:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8001d36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00f fe97 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d40:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00f fe46 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP10);
 8001d4a:	4b68      	ldr	r3, [pc, #416]	; (8001eec <_Z11loadModulesv+0x734>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fee2 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP11 = new DigitalPin(*ptrInputs, 0, "PA_11", 10, true, NONE);
 8001d58:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f00f fe39 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001d62:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8001d66:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001d6a:	4965      	ldr	r1, [pc, #404]	; (8001f00 <_Z11loadModulesv+0x748>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00f fedd 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001d72:	f507 75aa 	add.w	r5, r7, #340	; 0x154
 8001d76:	2048      	movs	r0, #72	; 0x48
 8001d78:	f00f fe18 	bl	80119ac <_Znwj>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461c      	mov	r4, r3
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	2300      	movs	r3, #0
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	462b      	mov	r3, r5
 8001d92:	2200      	movs	r2, #0
 8001d94:	4620      	mov	r0, r4
 8001d96:	f000 ffef 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001d9a:	f8c7 4334 	str.w	r4, [r7, #820]	; 0x334
 8001d9e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00f fe63 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001da8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00f fe12 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP11);
 8001db2:	4b4e      	ldr	r3, [pc, #312]	; (8001eec <_Z11loadModulesv+0x734>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d7 1334 	ldr.w	r1, [r7, #820]	; 0x334
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 feae 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* INP12 = new DigitalPin(*ptrInputs, 0, "PA_12", 11, true, NONE);
 8001dc0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00f fe05 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001dca:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001dce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001dd2:	494c      	ldr	r1, [pc, #304]	; (8001f04 <_Z11loadModulesv+0x74c>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00f fea9 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001dda:	f507 75b8 	add.w	r5, r7, #368	; 0x170
 8001dde:	2048      	movs	r0, #72	; 0x48
 8001de0:	f00f fde4 	bl	80119ac <_Znwj>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461c      	mov	r4, r3
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	2300      	movs	r3, #0
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	2301      	movs	r3, #1
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	230b      	movs	r3, #11
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	462b      	mov	r3, r5
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f000 ffbb 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001e02:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 8001e06:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00f fe2f 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e10:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00f fdde 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(INP12);
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <_Z11loadModulesv+0x734>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fe7a 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* SRO = new DigitalPin(*ptrInputs, 0, "PB_14", 12, true, NONE);
 8001e28:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00f fdd1 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001e32:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8001e36:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e3a:	4933      	ldr	r1, [pc, #204]	; (8001f08 <_Z11loadModulesv+0x750>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f00f fe75 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e42:	f507 75c6 	add.w	r5, r7, #396	; 0x18c
 8001e46:	2048      	movs	r0, #72	; 0x48
 8001e48:	f00f fdb0 	bl	80119ac <_Znwj>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461c      	mov	r4, r3
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	2300      	movs	r3, #0
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	462b      	mov	r3, r5
 8001e62:	2200      	movs	r2, #0
 8001e64:	4620      	mov	r0, r4
 8001e66:	f000 ff87 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001e6a:	f8c7 432c 	str.w	r4, [r7, #812]	; 0x32c
 8001e6e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e72:	4618      	mov	r0, r3
 8001e74:	f00f fdfb 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e78:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00f fdaa 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(SRO);
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <_Z11loadModulesv+0x734>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 fe46 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* SJR = new DigitalPin(*ptrInputs, 0, "PB_15", 13, true, NONE);
 8001e90:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00f fd9d 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001e9a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8001e9e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ea2:	491a      	ldr	r1, [pc, #104]	; (8001f0c <_Z11loadModulesv+0x754>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00f fe41 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001eaa:	f507 75d4 	add.w	r5, r7, #424	; 0x1a8
 8001eae:	2048      	movs	r0, #72	; 0x48
 8001eb0:	f00f fd7c 	bl	80119ac <_Znwj>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461c      	mov	r4, r3
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <_Z11loadModulesv+0x730>)
 8001eba:	6819      	ldr	r1, [r3, #0]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	230d      	movs	r3, #13
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	462b      	mov	r3, r5
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f000 ff53 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001ed2:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 8001ed6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00f fdc7 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ee0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	e013      	b.n	8001f10 <_Z11loadModulesv+0x758>
 8001ee8:	200003cc 	.word	0x200003cc
 8001eec:	20000258 	.word	0x20000258
 8001ef0:	08013178 	.word	0x08013178
 8001ef4:	08013180 	.word	0x08013180
 8001ef8:	08013188 	.word	0x08013188
 8001efc:	08013190 	.word	0x08013190
 8001f00:	08013198 	.word	0x08013198
 8001f04:	080131a0 	.word	0x080131a0
 8001f08:	080131a8 	.word	0x080131a8
 8001f0c:	080131b0 	.word	0x080131b0
 8001f10:	f00f fd61 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(SJR);
 8001f14:	4bdc      	ldr	r3, [pc, #880]	; (8002288 <_Z11loadModulesv+0xad0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8d7 1328 	ldr.w	r1, [r7, #808]	; 0x328
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 fdfd 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    //Module* x100 = new DigitalPin(*ptrInputs, 0, "PA_15", 14, true, NONE);
    //servoThread->registerModule(x100);

    Module* x10 = new DigitalPin(*ptrInputs, 0, "PC_10", 15, true, NONE);
 8001f22:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001f26:	4618      	mov	r0, r3
 8001f28:	f00f fd54 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001f2c:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8001f30:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001f34:	49d5      	ldr	r1, [pc, #852]	; (800228c <_Z11loadModulesv+0xad4>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f00f fdf8 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001f3c:	f507 75e2 	add.w	r5, r7, #452	; 0x1c4
 8001f40:	2048      	movs	r0, #72	; 0x48
 8001f42:	f00f fd33 	bl	80119ac <_Znwj>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461c      	mov	r4, r3
 8001f4a:	4bd1      	ldr	r3, [pc, #836]	; (8002290 <_Z11loadModulesv+0xad8>)
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	2301      	movs	r3, #1
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	230f      	movs	r3, #15
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f000 ff0a 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001f64:	f8c7 4324 	str.w	r4, [r7, #804]	; 0x324
 8001f68:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00f fd7e 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001f72:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00f fd2d 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(x10);
 8001f7c:	4bc2      	ldr	r3, [pc, #776]	; (8002288 <_Z11loadModulesv+0xad0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fdc9 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* x1 = new DigitalPin(*ptrInputs, 0, "PC_11", 16, true, NONE);
 8001f8a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00f fd20 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001f94:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001f98:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001f9c:	49bd      	ldr	r1, [pc, #756]	; (8002294 <_Z11loadModulesv+0xadc>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00f fdc4 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001fa4:	f507 75f0 	add.w	r5, r7, #480	; 0x1e0
 8001fa8:	2048      	movs	r0, #72	; 0x48
 8001faa:	f00f fcff 	bl	80119ac <_Znwj>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	4bb7      	ldr	r3, [pc, #732]	; (8002290 <_Z11loadModulesv+0xad8>)
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	462b      	mov	r3, r5
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f000 fed6 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8001fcc:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 8001fd0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00f fd4a 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001fda:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00f fcf9 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(x1);
 8001fe4:	4ba8      	ldr	r3, [pc, #672]	; (8002288 <_Z11loadModulesv+0xad0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 fd95 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* ESTOP = new DigitalPin(*ptrInputs, 0, "PC_12", 17, true, NONE);
 8001ff2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00f fcec 	bl	80119d4 <_ZNSaIcEC1Ev>
 8001ffc:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8002000:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8002004:	49a4      	ldr	r1, [pc, #656]	; (8002298 <_Z11loadModulesv+0xae0>)
 8002006:	4618      	mov	r0, r3
 8002008:	f00f fd90 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800200c:	f507 75fe 	add.w	r5, r7, #508	; 0x1fc
 8002010:	2048      	movs	r0, #72	; 0x48
 8002012:	f00f fccb 	bl	80119ac <_Znwj>
 8002016:	4603      	mov	r3, r0
 8002018:	461c      	mov	r4, r3
 800201a:	4b9d      	ldr	r3, [pc, #628]	; (8002290 <_Z11loadModulesv+0xad8>)
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2301      	movs	r3, #1
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2311      	movs	r3, #17
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	462b      	mov	r3, r5
 800202c:	2200      	movs	r2, #0
 800202e:	4620      	mov	r0, r4
 8002030:	f000 fea2 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8002034:	f8c7 431c 	str.w	r4, [r7, #796]	; 0x31c
 8002038:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800203c:	4618      	mov	r0, r3
 800203e:	f00f fd16 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002042:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8002046:	4618      	mov	r0, r3
 8002048:	f00f fcc5 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(ESTOP);
 800204c:	4b8e      	ldr	r3, [pc, #568]	; (8002288 <_Z11loadModulesv+0xad0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8d7 131c 	ldr.w	r1, [r7, #796]	; 0x31c
 8002054:	4618      	mov	r0, r3
 8002056:	f001 fd61 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* Xin = new DigitalPin(*ptrInputs, 0, "PD_7", 18, true, NONE);
 800205a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800205e:	4618      	mov	r0, r3
 8002060:	f00f fcb8 	bl	80119d4 <_ZNSaIcEC1Ev>
 8002064:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002068:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800206c:	498b      	ldr	r1, [pc, #556]	; (800229c <_Z11loadModulesv+0xae4>)
 800206e:	4618      	mov	r0, r3
 8002070:	f00f fd5c 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002074:	f507 7506 	add.w	r5, r7, #536	; 0x218
 8002078:	2048      	movs	r0, #72	; 0x48
 800207a:	f00f fc97 	bl	80119ac <_Znwj>
 800207e:	4603      	mov	r3, r0
 8002080:	461c      	mov	r4, r3
 8002082:	4b83      	ldr	r3, [pc, #524]	; (8002290 <_Z11loadModulesv+0xad8>)
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	2300      	movs	r3, #0
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	2301      	movs	r3, #1
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	2312      	movs	r3, #18
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	462b      	mov	r3, r5
 8002094:	2200      	movs	r2, #0
 8002096:	4620      	mov	r0, r4
 8002098:	f000 fe6e 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 800209c:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 80020a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80020a4:	4618      	mov	r0, r3
 80020a6:	f00f fce2 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80020aa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00f fc91 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(Xin);
 80020b4:	4b74      	ldr	r3, [pc, #464]	; (8002288 <_Z11loadModulesv+0xad0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8d7 1318 	ldr.w	r1, [r7, #792]	; 0x318
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fd2d 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* Yin = new DigitalPin(*ptrInputs, 0, "PD_4", 19, true, NONE);
 80020c2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80020c6:	4618      	mov	r0, r3
 80020c8:	f00f fc84 	bl	80119d4 <_ZNSaIcEC1Ev>
 80020cc:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80020d0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80020d4:	4972      	ldr	r1, [pc, #456]	; (80022a0 <_Z11loadModulesv+0xae8>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00f fd28 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80020dc:	f507 750d 	add.w	r5, r7, #564	; 0x234
 80020e0:	2048      	movs	r0, #72	; 0x48
 80020e2:	f00f fc63 	bl	80119ac <_Znwj>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461c      	mov	r4, r3
 80020ea:	4b69      	ldr	r3, [pc, #420]	; (8002290 <_Z11loadModulesv+0xad8>)
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9302      	str	r3, [sp, #8]
 80020f2:	2301      	movs	r3, #1
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	2313      	movs	r3, #19
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	462b      	mov	r3, r5
 80020fc:	2200      	movs	r2, #0
 80020fe:	4620      	mov	r0, r4
 8002100:	f000 fe3a 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8002104:	f8c7 4314 	str.w	r4, [r7, #788]	; 0x314
 8002108:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800210c:	4618      	mov	r0, r3
 800210e:	f00f fcae 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002112:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002116:	4618      	mov	r0, r3
 8002118:	f00f fc5d 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(Yin);
 800211c:	4b5a      	ldr	r3, [pc, #360]	; (8002288 <_Z11loadModulesv+0xad0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8d7 1314 	ldr.w	r1, [r7, #788]	; 0x314
 8002124:	4618      	mov	r0, r3
 8002126:	f001 fcf9 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* Zin = new DigitalPin(*ptrInputs, 0, "PD_3", 20, true, NONE);
 800212a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800212e:	4618      	mov	r0, r3
 8002130:	f00f fc50 	bl	80119d4 <_ZNSaIcEC1Ev>
 8002134:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8002138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800213c:	4959      	ldr	r1, [pc, #356]	; (80022a4 <_Z11loadModulesv+0xaec>)
 800213e:	4618      	mov	r0, r3
 8002140:	f00f fcf4 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002144:	f507 7514 	add.w	r5, r7, #592	; 0x250
 8002148:	2048      	movs	r0, #72	; 0x48
 800214a:	f00f fc2f 	bl	80119ac <_Znwj>
 800214e:	4603      	mov	r3, r0
 8002150:	461c      	mov	r4, r3
 8002152:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <_Z11loadModulesv+0xad8>)
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	2300      	movs	r3, #0
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	2301      	movs	r3, #1
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	2314      	movs	r3, #20
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	462b      	mov	r3, r5
 8002164:	2200      	movs	r2, #0
 8002166:	4620      	mov	r0, r4
 8002168:	f000 fe06 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 800216c:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 8002170:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002174:	4618      	mov	r0, r3
 8002176:	f00f fc7a 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800217a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800217e:	4618      	mov	r0, r3
 8002180:	f00f fc29 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(Zin);
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <_Z11loadModulesv+0xad0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 800218c:	4618      	mov	r0, r3
 800218e:	f001 fcc5 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* Ain = new DigitalPin(*ptrInputs, 0, "PD_2", 21, true, NONE);
 8002192:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8002196:	4618      	mov	r0, r3
 8002198:	f00f fc1c 	bl	80119d4 <_ZNSaIcEC1Ev>
 800219c:	f507 7221 	add.w	r2, r7, #644	; 0x284
 80021a0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80021a4:	4940      	ldr	r1, [pc, #256]	; (80022a8 <_Z11loadModulesv+0xaf0>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f00f fcc0 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80021ac:	f507 751b 	add.w	r5, r7, #620	; 0x26c
 80021b0:	2048      	movs	r0, #72	; 0x48
 80021b2:	f00f fbfb 	bl	80119ac <_Znwj>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461c      	mov	r4, r3
 80021ba:	4b35      	ldr	r3, [pc, #212]	; (8002290 <_Z11loadModulesv+0xad8>)
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	2301      	movs	r3, #1
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	2315      	movs	r3, #21
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	462b      	mov	r3, r5
 80021cc:	2200      	movs	r2, #0
 80021ce:	4620      	mov	r0, r4
 80021d0:	f000 fdd2 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 80021d4:	f8c7 430c 	str.w	r4, [r7, #780]	; 0x30c
 80021d8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80021dc:	4618      	mov	r0, r3
 80021de:	f00f fc46 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021e2:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80021e6:	4618      	mov	r0, r3
 80021e8:	f00f fbf5 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(Ain);
 80021ec:	4b26      	ldr	r3, [pc, #152]	; (8002288 <_Z11loadModulesv+0xad0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8d7 130c 	ldr.w	r1, [r7, #780]	; 0x30c
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 fc91 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* Bin = new DigitalPin(*ptrInputs, 0, "PD_1", 22, true, NONE);
 80021fa:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80021fe:	4618      	mov	r0, r3
 8002200:	f00f fbe8 	bl	80119d4 <_ZNSaIcEC1Ev>
 8002204:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002208:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800220c:	4927      	ldr	r1, [pc, #156]	; (80022ac <_Z11loadModulesv+0xaf4>)
 800220e:	4618      	mov	r0, r3
 8002210:	f00f fc8c 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002214:	f507 7522 	add.w	r5, r7, #648	; 0x288
 8002218:	2048      	movs	r0, #72	; 0x48
 800221a:	f00f fbc7 	bl	80119ac <_Znwj>
 800221e:	4603      	mov	r3, r0
 8002220:	461c      	mov	r4, r3
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <_Z11loadModulesv+0xad8>)
 8002224:	6819      	ldr	r1, [r3, #0]
 8002226:	2300      	movs	r3, #0
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2301      	movs	r3, #1
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2316      	movs	r3, #22
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	462b      	mov	r3, r5
 8002234:	2200      	movs	r2, #0
 8002236:	4620      	mov	r0, r4
 8002238:	f000 fd9e 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 800223c:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 8002240:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002244:	4618      	mov	r0, r3
 8002246:	f00f fc12 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800224a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800224e:	4618      	mov	r0, r3
 8002250:	f00f fbc1 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(Bin);
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <_Z11loadModulesv+0xad0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 800225c:	4618      	mov	r0, r3
 800225e:	f001 fc5d 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* Cin = new DigitalPin(*ptrInputs, 0, "PD_0", 23, true, NONE);
 8002262:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8002266:	4618      	mov	r0, r3
 8002268:	f00f fbb4 	bl	80119d4 <_ZNSaIcEC1Ev>
 800226c:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8002270:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <_Z11loadModulesv+0xaf8>)
 8002276:	4618      	mov	r0, r3
 8002278:	f00f fc58 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800227c:	f507 7529 	add.w	r5, r7, #676	; 0x2a4
 8002280:	2048      	movs	r0, #72	; 0x48
 8002282:	f00f fb93 	bl	80119ac <_Znwj>
 8002286:	e015      	b.n	80022b4 <_Z11loadModulesv+0xafc>
 8002288:	20000258 	.word	0x20000258
 800228c:	080131b8 	.word	0x080131b8
 8002290:	200003cc 	.word	0x200003cc
 8002294:	080131c0 	.word	0x080131c0
 8002298:	080131c8 	.word	0x080131c8
 800229c:	080131d0 	.word	0x080131d0
 80022a0:	080131d8 	.word	0x080131d8
 80022a4:	080131e0 	.word	0x080131e0
 80022a8:	080131e8 	.word	0x080131e8
 80022ac:	080131f0 	.word	0x080131f0
 80022b0:	080131f8 	.word	0x080131f8
 80022b4:	4603      	mov	r3, r0
 80022b6:	461c      	mov	r4, r3
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <_Z11loadModulesv+0xc78>)
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	2300      	movs	r3, #0
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	2301      	movs	r3, #1
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	2317      	movs	r3, #23
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	462b      	mov	r3, r5
 80022ca:	2200      	movs	r2, #0
 80022cc:	4620      	mov	r0, r4
 80022ce:	f000 fd53 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 80022d2:	f8c7 4304 	str.w	r4, [r7, #772]	; 0x304
 80022d6:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80022da:	4618      	mov	r0, r3
 80022dc:	f00f fbc7 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80022e0:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00f fb76 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(Cin);
 80022ea:	4b52      	ldr	r3, [pc, #328]	; (8002434 <_Z11loadModulesv+0xc7c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 fc12 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* WHA = new DigitalPin(*ptrInputs, 0, "PB_7", 24, false, NONE);
 80022f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80022fc:	4618      	mov	r0, r3
 80022fe:	f00f fb69 	bl	80119d4 <_ZNSaIcEC1Ev>
 8002302:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8002306:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800230a:	494b      	ldr	r1, [pc, #300]	; (8002438 <_Z11loadModulesv+0xc80>)
 800230c:	4618      	mov	r0, r3
 800230e:	f00f fc0d 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002312:	f507 7530 	add.w	r5, r7, #704	; 0x2c0
 8002316:	2048      	movs	r0, #72	; 0x48
 8002318:	f00f fb48 	bl	80119ac <_Znwj>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	4b43      	ldr	r3, [pc, #268]	; (8002430 <_Z11loadModulesv+0xc78>)
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	2300      	movs	r3, #0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2318      	movs	r3, #24
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	462b      	mov	r3, r5
 8002332:	2200      	movs	r2, #0
 8002334:	4620      	mov	r0, r4
 8002336:	f000 fd1f 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 800233a:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 800233e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002342:	4618      	mov	r0, r3
 8002344:	f00f fb93 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002348:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800234c:	4618      	mov	r0, r3
 800234e:	f00f fb42 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(WHA);
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <_Z11loadModulesv+0xc7c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d7 1300 	ldr.w	r1, [r7, #768]	; 0x300
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fbde 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    Module* WHB = new DigitalPin(*ptrInputs, 0, "PB_6", 25, false, NONE);
 8002360:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8002364:	4618      	mov	r0, r3
 8002366:	f00f fb35 	bl	80119d4 <_ZNSaIcEC1Ev>
 800236a:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 800236e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8002372:	4932      	ldr	r1, [pc, #200]	; (800243c <_Z11loadModulesv+0xc84>)
 8002374:	4618      	mov	r0, r3
 8002376:	f00f fbd9 	bl	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800237a:	f507 7537 	add.w	r5, r7, #732	; 0x2dc
 800237e:	2048      	movs	r0, #72	; 0x48
 8002380:	f00f fb14 	bl	80119ac <_Znwj>
 8002384:	4603      	mov	r3, r0
 8002386:	461c      	mov	r4, r3
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <_Z11loadModulesv+0xc78>)
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	2300      	movs	r3, #0
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	2300      	movs	r3, #0
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2319      	movs	r3, #25
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	462b      	mov	r3, r5
 800239a:	2200      	movs	r2, #0
 800239c:	4620      	mov	r0, r4
 800239e:	f000 fceb 	bl	8002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 80023a2:	f8c7 42fc 	str.w	r4, [r7, #764]	; 0x2fc
 80023a6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80023aa:	4618      	mov	r0, r3
 80023ac:	f00f fb5f 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80023b0:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80023b4:	4618      	mov	r0, r3
 80023b6:	f00f fb0e 	bl	80119d6 <_ZNSaIcED1Ev>
    servoThread->registerModule(WHB);
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <_Z11loadModulesv+0xc7c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d7 12fc 	ldr.w	r1, [r7, #764]	; 0x2fc
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 fbaa 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    ptrSetPoint[0] = &rxData.setPoint[0];
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <_Z11loadModulesv+0xc88>)
 80023ca:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <_Z11loadModulesv+0xc8c>)
 80023cc:	601a      	str	r2, [r3, #0]
    Module* spindle = new SpindlePWM(*ptrSetPoint[0]);
 80023ce:	2070      	movs	r0, #112	; 0x70
 80023d0:	f00f faec 	bl	80119ac <_Znwj>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461c      	mov	r4, r3
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <_Z11loadModulesv+0xc88>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	4620      	mov	r0, r4
 80023e0:	f001 f882 	bl	80034e8 <_ZN10SpindlePWMC1ERVf>
 80023e4:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
    servoThread->registerModule(spindle);
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <_Z11loadModulesv+0xc7c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d7 12f8 	ldr.w	r1, [r7, #760]	; 0x2f8
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 fb93 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>

    //Module* spindle = new SoftPWM(*ptrSetPoint[0], "PA_0");
    //baseThread->registerModule(spindle);

	MPG = new NVMPG(*ptrMpgData, *ptrNVMPGInputs);
 80023f6:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80023fa:	f00f fad7 	bl	80119ac <_Znwj>
 80023fe:	4603      	mov	r3, r0
 8002400:	461c      	mov	r4, r3
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <_Z11loadModulesv+0xc90>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a11      	ldr	r2, [pc, #68]	; (800244c <_Z11loadModulesv+0xc94>)
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	4620      	mov	r0, r4
 800240e:	f000 fe49 	bl	80030a4 <_ZN5NVMPGC1ERV9mpgData_tRVt>
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <_Z11loadModulesv+0xc98>)
 8002414:	601c      	str	r4, [r3, #0]
	servoThread->registerModule(MPG);
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <_Z11loadModulesv+0xc7c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <_Z11loadModulesv+0xc98>)
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f001 fb7b 	bl	8003b1c <_ZN9pruThread14registerModuleEP6Module>
}
 8002426:	bf00      	nop
 8002428:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800242c:	46bd      	mov	sp, r7
 800242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002430:	200003cc 	.word	0x200003cc
 8002434:	20000258 	.word	0x20000258
 8002438:	08013200 	.word	0x08013200
 800243c:	08013208 	.word	0x08013208
 8002440:	200003b4 	.word	0x200003b4
 8002444:	200002c8 	.word	0x200002c8
 8002448:	20000000 	.word	0x20000000
 800244c:	200003d0 	.word	0x200003d0
 8002450:	2000036c 	.word	0x2000036c

08002454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800245a:	f002 f9c7 	bl	80047ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800245e:	f000 f8e3 	bl	8002628 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LWIP_Init();
 8002462:	f005 ff25 	bl	80082b0 <MX_LWIP_Init>
  MX_USART2_UART_Init();
 8002466:	f000 f92f 	bl	80026c8 <_ZL19MX_USART2_UART_Initv>

  /* USER CODE BEGIN 2 */
  enum State currentState;
  enum State prevState;

  currentState = ST_SETUP;
 800246a:	2300      	movs	r3, #0
 800246c:	71fb      	strb	r3, [r7, #7]
  prevState = ST_RESET;
 800246e:	2305      	movs	r3, #5
 8002470:	71bb      	strb	r3, [r7, #6]

  printf("Remora-NVEM starting\n");
 8002472:	485c      	ldr	r0, [pc, #368]	; (80025e4 <main+0x190>)
 8002474:	f00f fd3e 	bl	8011ef4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(currentState){
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2b06      	cmp	r3, #6
 800247c:	f200 80ab 	bhi.w	80025d6 <main+0x182>
 8002480:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <main+0x34>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	080024a5 	.word	0x080024a5
 800248c:	080024c9 	.word	0x080024c9
 8002490:	08002515 	.word	0x08002515
 8002494:	0800253d 	.word	0x0800253d
 8002498:	0800256f 	.word	0x0800256f
 800249c:	08002587 	.word	0x08002587
 80024a0:	080025c9 	.word	0x080025c9
	          case ST_SETUP:
	              // do setup tasks
	              if (currentState != prevState)
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	79bb      	ldrb	r3, [r7, #6]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d002      	beq.n	80024b2 <main+0x5e>
	              {
	                  printf("\n## Entering SETUP state\n\n");
 80024ac:	484e      	ldr	r0, [pc, #312]	; (80025e8 <main+0x194>)
 80024ae:	f00f fd21 	bl	8011ef4 <puts>
	              }
	              prevState = currentState;
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	71bb      	strb	r3, [r7, #6]

	              createThreads();
 80024b6:	f7ff f93d 	bl	8001734 <_Z13createThreadsv>
	              //debugThreadHigh();
	              loadModules();
 80024ba:	f7ff f97d 	bl	80017b8 <_Z11loadModulesv>
	              //debugThreadLow();
	              udpServer_init();
 80024be:	f000 f937 	bl	8002730 <_Z14udpServer_initv>

	              currentState = ST_START;
 80024c2:	2301      	movs	r3, #1
 80024c4:	71fb      	strb	r3, [r7, #7]
	              break;
 80024c6:	e086      	b.n	80025d6 <main+0x182>

	          case ST_START:
	              // do start tasks
	              if (currentState != prevState)
 80024c8:	79fa      	ldrb	r2, [r7, #7]
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d002      	beq.n	80024d6 <main+0x82>
	              {
	                  printf("\n## Entering START state\n");
 80024d0:	4846      	ldr	r0, [pc, #280]	; (80025ec <main+0x198>)
 80024d2:	f00f fd0f 	bl	8011ef4 <puts>
	              }
	              prevState = currentState;
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	71bb      	strb	r3, [r7, #6]

	              if (!threadsRunning)
 80024da:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <main+0x19c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f083 0301 	eor.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <main+0xba>
	              {
	                  // Start the threads
	                  printf("\nStarting the BASE thread\n");
 80024e8:	4842      	ldr	r0, [pc, #264]	; (80025f4 <main+0x1a0>)
 80024ea:	f00f fd03 	bl	8011ef4 <puts>
	                  baseThread->startThread();
 80024ee:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <main+0x1a4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 faf6 	bl	8003ae4 <_ZN9pruThread11startThreadEv>

	                  printf("\nStarting the SERVO thread\n");
 80024f8:	4840      	ldr	r0, [pc, #256]	; (80025fc <main+0x1a8>)
 80024fa:	f00f fcfb 	bl	8011ef4 <puts>
	                  servoThread->startThread();
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <main+0x1ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f001 faee 	bl	8003ae4 <_ZN9pruThread11startThreadEv>

	                  threadsRunning = true;
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <main+0x19c>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
	              }

	              currentState = ST_IDLE;
 800250e:	2302      	movs	r3, #2
 8002510:	71fb      	strb	r3, [r7, #7]

	              break;
 8002512:	e060      	b.n	80025d6 <main+0x182>


	          case ST_IDLE:
	              // do something when idle
	              if (currentState != prevState)
 8002514:	79fa      	ldrb	r2, [r7, #7]
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	429a      	cmp	r2, r3
 800251a:	d002      	beq.n	8002522 <main+0xce>
	              {
	                  printf("\n## Entering IDLE state\n");
 800251c:	4839      	ldr	r0, [pc, #228]	; (8002604 <main+0x1b0>)
 800251e:	f00f fce9 	bl	8011ef4 <puts>
	              }
	              prevState = currentState;
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	71bb      	strb	r3, [r7, #6]

	              //wait for data before changing to running state
	              if (comms->getStatus())
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <main+0x1b4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fbe1 	bl	8002cf2 <_ZN11RemoraComms9getStatusEv>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d04c      	beq.n	80025d0 <main+0x17c>
	              {
	                  currentState = ST_RUNNING;
 8002536:	2303      	movs	r3, #3
 8002538:	71fb      	strb	r3, [r7, #7]
	              }

	              break;
 800253a:	e049      	b.n	80025d0 <main+0x17c>

	          case ST_RUNNING:
	              // do running tasks
	              if (currentState != prevState)
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	429a      	cmp	r2, r3
 8002542:	d002      	beq.n	800254a <main+0xf6>
	              {
	                  printf("\n## Entering RUNNING state\n");
 8002544:	4831      	ldr	r0, [pc, #196]	; (800260c <main+0x1b8>)
 8002546:	f00f fcd5 	bl	8011ef4 <puts>
	              }
	              prevState = currentState;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	71bb      	strb	r3, [r7, #6]

	              if (comms->getStatus() == false)
 800254e:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <main+0x1b4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fbcd 	bl	8002cf2 <_ZN11RemoraComms9getStatusEv>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d035      	beq.n	80025d4 <main+0x180>
	              {
	            	  currentState = ST_RESET;
 8002568:	2305      	movs	r3, #5
 800256a:	71fb      	strb	r3, [r7, #7]
	              }

	              break;
 800256c:	e032      	b.n	80025d4 <main+0x180>

	          case ST_STOP:
	              // do stop tasks
	              if (currentState != prevState)
 800256e:	79fa      	ldrb	r2, [r7, #7]
 8002570:	79bb      	ldrb	r3, [r7, #6]
 8002572:	429a      	cmp	r2, r3
 8002574:	d002      	beq.n	800257c <main+0x128>
	              {
	                  printf("\n## Entering STOP state\n");
 8002576:	4826      	ldr	r0, [pc, #152]	; (8002610 <main+0x1bc>)
 8002578:	f00f fcbc 	bl	8011ef4 <puts>
	              }
	              prevState = currentState;
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	71bb      	strb	r3, [r7, #6]


	              currentState = ST_STOP;
 8002580:	2304      	movs	r3, #4
 8002582:	71fb      	strb	r3, [r7, #7]
	              break;
 8002584:	e027      	b.n	80025d6 <main+0x182>

	          case ST_RESET:
	              // do reset tasks
	              if (currentState != prevState)
 8002586:	79fa      	ldrb	r2, [r7, #7]
 8002588:	79bb      	ldrb	r3, [r7, #6]
 800258a:	429a      	cmp	r2, r3
 800258c:	d002      	beq.n	8002594 <main+0x140>
	              {
	                  printf("\n## Entering RESET state\n");
 800258e:	4821      	ldr	r0, [pc, #132]	; (8002614 <main+0x1c0>)
 8002590:	f00f fcb0 	bl	8011ef4 <puts>
	              }
	              prevState = currentState;
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	71bb      	strb	r3, [r7, #6]

	              // set all of the rxData buffer to 0
	              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile
	              printf("   Resetting rxBuffer\n");
 8002598:	481f      	ldr	r0, [pc, #124]	; (8002618 <main+0x1c4>)
 800259a:	f00f fcab 	bl	8011ef4 <puts>
	              {
	                  int n = sizeof(rxData.rxBuffer);
 800259e:	2344      	movs	r3, #68	; 0x44
 80025a0:	603b      	str	r3, [r7, #0]
	                  while(n-- > 0)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	603a      	str	r2, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bfcc      	ite	gt
 80025ac:	2301      	movgt	r3, #1
 80025ae:	2300      	movle	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <main+0x16e>
	                  {
	                      rxData.rxBuffer[n] = 0;
 80025b6:	4a19      	ldr	r2, [pc, #100]	; (800261c <main+0x1c8>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
	                  while(n-- > 0)
 80025c0:	e7ef      	b.n	80025a2 <main+0x14e>
	                  }
	              }

	              currentState = ST_IDLE;
 80025c2:	2302      	movs	r3, #2
 80025c4:	71fb      	strb	r3, [r7, #7]
	              break;
 80025c6:	e006      	b.n	80025d6 <main+0x182>

	          case ST_WDRESET:
	              // do a watch dog reset
	              printf("\n## Entering WDRESET state\n");
 80025c8:	4815      	ldr	r0, [pc, #84]	; (8002620 <main+0x1cc>)
 80025ca:	f00f fc93 	bl	8011ef4 <puts>

	              // force a watchdog reset by looping here
	              while(1){}
 80025ce:	e7fe      	b.n	80025ce <main+0x17a>
	              break;
 80025d0:	bf00      	nop
 80025d2:	e000      	b.n	80025d6 <main+0x182>
	              break;
 80025d4:	bf00      	nop

	              break;
	  }

	  // do Ethernet tasks
	  ethernetif_input(&gnetif);
 80025d6:	4813      	ldr	r0, [pc, #76]	; (8002624 <main+0x1d0>)
 80025d8:	f006 fa40 	bl	8008a5c <ethernetif_input>
	  sys_check_timeouts();
 80025dc:	f00c fba4 	bl	800ed28 <sys_check_timeouts>
  }
 80025e0:	e74a      	b.n	8002478 <main+0x24>
 80025e2:	bf00      	nop
 80025e4:	08013210 	.word	0x08013210
 80025e8:	08013228 	.word	0x08013228
 80025ec:	08013244 	.word	0x08013244
 80025f0:	20000254 	.word	0x20000254
 80025f4:	08013260 	.word	0x08013260
 80025f8:	2000025c 	.word	0x2000025c
 80025fc:	0801327c 	.word	0x0801327c
 8002600:	20000258 	.word	0x20000258
 8002604:	08013298 	.word	0x08013298
 8002608:	2000032c 	.word	0x2000032c
 800260c:	080132b0 	.word	0x080132b0
 8002610:	080132cc 	.word	0x080132cc
 8002614:	080132e4 	.word	0x080132e4
 8002618:	08013300 	.word	0x08013300
 800261c:	200002a4 	.word	0x200002a4
 8002620:	08013318 	.word	0x08013318
 8002624:	20000220 	.word	0x20000220

08002628 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b092      	sub	sp, #72	; 0x48
 800262c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262e:	f107 0318 	add.w	r3, r7, #24
 8002632:	2230      	movs	r2, #48	; 0x30
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f00f fb28 	bl	8011c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800264a:	2301      	movs	r3, #1
 800264c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002652:	2302      	movs	r3, #2
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 800265c:	2319      	movs	r3, #25
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8002660:	23f0      	movs	r3, #240	; 0xf0
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002664:	2302      	movs	r3, #2
 8002666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002668:	2304      	movs	r3, #4
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	4618      	mov	r0, r3
 8002672:	f004 f8a1 	bl	80067b8 <HAL_RCC_OscConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002686:	f000 f84d 	bl	8002724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268a:	230f      	movs	r3, #15
 800268c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268e:	2302      	movs	r3, #2
 8002690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800269a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800269c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2103      	movs	r1, #3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fad6 	bl	8006c58 <HAL_RCC_ClockConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80026bc:	f000 f832 	bl	8002724 <Error_Handler>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3748      	adds	r7, #72	; 0x48
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 80026ce:	4a14      	ldr	r2, [pc, #80]	; (8002720 <_ZL19MX_USART2_UART_Initv+0x58>)
 80026d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 80026d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 80026ee:	220c      	movs	r2, #12
 80026f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026fe:	4807      	ldr	r0, [pc, #28]	; (800271c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002700:	f005 f960 	bl	80079c4 <HAL_UART_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002714:	f000 f806 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200001dc 	.word	0x200001dc
 8002720:	40004400 	.word	0x40004400

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
}
 800272a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800272c:	e7fe      	b.n	800272c <Error_Handler+0x8>
	...

08002730 <_Z14udpServer_initv>:
}
#endif /* USE_FULL_ASSERT */


void udpServer_init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb, *upcb2;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8002736:	f00c fee1 	bl	800f4fc <udp_new>
 800273a:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 10, 10, 10, 10);
 800273c:	f04f 330a 	mov.w	r3, #168430090	; 0xa0a0a0a
 8002740:	603b      	str	r3, [r7, #0]

   err = udp_bind(upcb, &myIPADDR, 27181);  // 27181 is the server UDP port
 8002742:	463b      	mov	r3, r7
 8002744:	f646 222d 	movw	r2, #27181	; 0x6a2d
 8002748:	4619      	mov	r1, r3
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f00c fdb6 	bl	800f2bc <udp_bind>
 8002750:	4603      	mov	r3, r0
 8002752:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8002754:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <_Z14udpServer_initv+0x38>
   {
	   udp_recv(upcb, udp_data_callback, NULL);
 800275c:	2200      	movs	r2, #0
 800275e:	4912      	ldr	r1, [pc, #72]	; (80027a8 <_Z14udpServer_initv+0x78>)
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f00c fe87 	bl	800f474 <udp_recv>
 8002766:	e002      	b.n	800276e <_Z14udpServer_initv+0x3e>
   }
   else
   {
	   udp_remove(upcb);
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f00c fe95 	bl	800f498 <udp_remove>
   }


   // Try making a second UDP control block...?

   upcb2 = udp_new();
 800276e:	f00c fec5 	bl	800f4fc <udp_new>
 8002772:	6078      	str	r0, [r7, #4]
   err = udp_bind(upcb2, &myIPADDR, 27182);  // 27182 is the server UDP port for NVMPG
 8002774:	463b      	mov	r3, r7
 8002776:	f646 222e 	movw	r2, #27182	; 0x6a2e
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f00c fd9d 	bl	800f2bc <udp_bind>
 8002782:	4603      	mov	r3, r0
 8002784:	72fb      	strb	r3, [r7, #11]

   if(err == ERR_OK)
 8002786:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <_Z14udpServer_initv+0x6a>
   {
	   udp_recv(upcb2, udp_mpg_callback, NULL);
 800278e:	2200      	movs	r2, #0
 8002790:	4906      	ldr	r1, [pc, #24]	; (80027ac <_Z14udpServer_initv+0x7c>)
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f00c fe6e 	bl	800f474 <udp_recv>
   }
   else
   {
	   udp_remove(upcb2);
   }
}
 8002798:	e002      	b.n	80027a0 <_Z14udpServer_initv+0x70>
	   udp_remove(upcb2);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f00c fe7c 	bl	800f498 <udp_remove>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	080028a1 	.word	0x080028a1

080027b0 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:

void udp_data_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
	int txlen = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
	struct pbuf *txBuf;

	// copy the UDP payload into the rxData structure
	memcpy(&rxBuffer.rxBuffer, p->payload, p->len);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	895b      	ldrh	r3, [r3, #10]
 80027ca:	461a      	mov	r2, r3
 80027cc:	482c      	ldr	r0, [pc, #176]	; (8002880 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 80027ce:	f00f fa35 	bl	8011c3c <memcpy>

	if (rxBuffer.header == PRU_READ)
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a2b      	ldr	r2, [pc, #172]	; (8002884 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d10a      	bne.n	80027f2 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x42>
	{
		txData.header = PRU_DATA;
 80027dc:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 80027de:	4a2b      	ldr	r2, [pc, #172]	; (800288c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xdc>)
 80027e0:	601a      	str	r2, [r3, #0]
		txlen = BUFFER_SIZE;
 80027e2:	2344      	movs	r3, #68	; 0x44
 80027e4:	61fb      	str	r3, [r7, #28]
		comms->dataReceived();
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fa75 	bl	8002cda <_ZN11RemoraComms12dataReceivedEv>
 80027f0:	e020      	b.n	8002834 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
	}
	else if (rxBuffer.header == PRU_WRITE)
 80027f2:	4b23      	ldr	r3, [pc, #140]	; (8002880 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a27      	ldr	r2, [pc, #156]	; (8002894 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d11b      	bne.n	8002834 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
	{
		txData.header = PRU_ACKNOWLEDGE;
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 80027fe:	4a26      	ldr	r2, [pc, #152]	; (8002898 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe8>)
 8002800:	601a      	str	r2, [r3, #0]
		txlen = sizeof(txData.header);
 8002802:	2304      	movs	r3, #4
 8002804:	61fb      	str	r3, [r7, #28]
		comms->dataReceived();
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fa65 	bl	8002cda <_ZN11RemoraComms12dataReceivedEv>

		// then move the data
		for (int i = 0; i < BUFFER_SIZE; i++)
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b43      	cmp	r3, #67	; 0x43
 8002818:	dc0c      	bgt.n	8002834 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
		{
			rxData.rxBuffer[i] = rxBuffer.rxBuffer[i];
 800281a:	4a19      	ldr	r2, [pc, #100]	; (8002880 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	7819      	ldrb	r1, [r3, #0]
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xec>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	460a      	mov	r2, r1
 800282a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BUFFER_SIZE; i++)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	3301      	adds	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e7ef      	b.n	8002814 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x64>
		}
	}


	// allocate pbuf from RAM
	txBuf = pbuf_alloc(PBUF_TRANSPORT, txlen, PBUF_RAM);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	b29b      	uxth	r3, r3
 8002838:	2200      	movs	r2, #0
 800283a:	4619      	mov	r1, r3
 800283c:	2000      	movs	r0, #0
 800283e:	f006 ffa3 	bl	8009788 <pbuf_alloc>
 8002842:	6178      	str	r0, [r7, #20]

	// copy the data into the buffer
	pbuf_take(txBuf, (char*)&txData.txBuffer, txlen);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	490f      	ldr	r1, [pc, #60]	; (8002888 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 800284c:	6978      	ldr	r0, [r7, #20]
 800284e:	f007 fd85 	bl	800a35c <pbuf_take>

	// Connect to the remote client
	udp_connect(upcb, addr, port);
 8002852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002854:	461a      	mov	r2, r3
 8002856:	6839      	ldr	r1, [r7, #0]
 8002858:	68b8      	ldr	r0, [r7, #8]
 800285a:	f00c fd9f 	bl	800f39c <udp_connect>

	// Send a Reply to the Client
	udp_send(upcb, txBuf);
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f00c fc11 	bl	800f088 <udp_send>

	// free the UDP connection, so we can accept new clients
	udp_disconnect(upcb);
 8002866:	68b8      	ldr	r0, [r7, #8]
 8002868:	f00c fdee 	bl	800f448 <udp_disconnect>

	// Free the p_tx buffer
	pbuf_free(txBuf);
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f007 fafd 	bl	8009e6c <pbuf_free>

	// Free the p buffer
	pbuf_free(p);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f007 fafa 	bl	8009e6c <pbuf_free>
}
 8002878:	bf00      	nop
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000260 	.word	0x20000260
 8002884:	72656164 	.word	0x72656164
 8002888:	200002e8 	.word	0x200002e8
 800288c:	64617461 	.word	0x64617461
 8002890:	2000032c 	.word	0x2000032c
 8002894:	77726974 	.word	0x77726974
 8002898:	61636b6e 	.word	0x61636b6e
 800289c:	200002a4 	.word	0x200002a4

080028a0 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:


void udp_mpg_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
	// copy the UDP payload into the nvmpg structure
	memcpy(&mpgData.payload, p->payload, p->len);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	895b      	ldrh	r3, [r3, #10]
 80028b6:	461a      	mov	r2, r3
 80028b8:	480b      	ldr	r0, [pc, #44]	; (80028e8 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x48>)
 80028ba:	f00f f9bf 	bl	8011c3c <memcpy>

	// Free the p buffer
	pbuf_free(p);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f007 fad4 	bl	8009e6c <pbuf_free>

	if (mpgData.header == PRU_NVMPG)
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x48>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a08      	ldr	r2, [pc, #32]	; (80028ec <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x4c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d108      	bne.n	80028e0 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x40>
	{
		// use a standard module interface to trigger the update of the MPG
		MPG->configure();
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x50>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x50>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3314      	adds	r3, #20
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4610      	mov	r0, r2
 80028de:	4798      	blx	r3
	}
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000330 	.word	0x20000330
 80028ec:	6d706764 	.word	0x6d706764
 80028f0:	2000036c 	.word	0x2000036c

080028f4 <HAL_MspInit>:

                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_MspInit+0x48>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <HAL_MspInit+0x48>)
 8002904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002908:	6453      	str	r3, [r2, #68]	; 0x44
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_MspInit+0x48>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_MspInit+0x48>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_MspInit+0x48>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_MspInit+0x48>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a32      	ldr	r2, [pc, #200]	; (8002a28 <HAL_UART_MspInit+0xe8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12d      	bne.n	80029be <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	4b31      	ldr	r3, [pc, #196]	; (8002a2c <HAL_UART_MspInit+0xec>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <HAL_UART_MspInit+0xec>)
 800296c:	f043 0310 	orr.w	r3, r3, #16
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_UART_MspInit+0xec>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_UART_MspInit+0xec>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <HAL_UART_MspInit+0xec>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <HAL_UART_MspInit+0xec>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800299a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029ac:	2307      	movs	r3, #7
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	4619      	mov	r1, r3
 80029b6:	481e      	ldr	r0, [pc, #120]	; (8002a30 <HAL_UART_MspInit+0xf0>)
 80029b8:	f003 fd30 	bl	800641c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029bc:	e030      	b.n	8002a20 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_UART_MspInit+0xf4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d12b      	bne.n	8002a20 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_UART_MspInit+0xec>)
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_UART_MspInit+0xec>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	6413      	str	r3, [r2, #64]	; 0x40
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_UART_MspInit+0xec>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_UART_MspInit+0xec>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <HAL_UART_MspInit+0xec>)
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	6313      	str	r3, [r2, #48]	; 0x30
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_UART_MspInit+0xec>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a00:	2360      	movs	r3, #96	; 0x60
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a10:	2307      	movs	r3, #7
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4807      	ldr	r0, [pc, #28]	; (8002a38 <HAL_UART_MspInit+0xf8>)
 8002a1c:	f003 fcfe 	bl	800641c <HAL_GPIO_Init>
}
 8002a20:	bf00      	nop
 8002a22:	3730      	adds	r7, #48	; 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40011000 	.word	0x40011000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020000 	.word	0x40020000
 8002a34:	40004400 	.word	0x40004400
 8002a38:	40020c00 	.word	0x40020c00

08002a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <NMI_Handler+0x4>

08002a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <HardFault_Handler+0x4>

08002a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <MemManage_Handler+0x4>

08002a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a52:	e7fe      	b.n	8002a52 <BusFault_Handler+0x4>

08002a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a58:	e7fe      	b.n	8002a58 <UsageFault_Handler+0x4>

08002a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a82:	f001 ff05 	bl	8004890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
	return 1;
 8002a8e:	2301      	movs	r3, #1
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <_kill>:

int _kill(int pid, int sig)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <_kill+0x20>)
 8002aa4:	2216      	movs	r2, #22
 8002aa6:	601a      	str	r2, [r3, #0]
	return -1;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20006ba4 	.word	0x20006ba4

08002abc <_exit>:

void _exit (int status)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ffe5 	bl	8002a98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ace:	e7fe      	b.n	8002ace <_exit+0x12>

08002ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e00a      	b.n	8002af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ae2:	f3af 8000 	nop.w
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	60ba      	str	r2, [r7, #8]
 8002aee:	b2ca      	uxtb	r2, r1
 8002af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf0      	blt.n	8002ae2 <_read+0x12>
	}

return len;
 8002b00:	687b      	ldr	r3, [r7, #4]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e009      	b.n	8002b30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	60ba      	str	r2, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fe35 	bl	8001794 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dbf1      	blt.n	8002b1c <_write+0x12>
	}
	return len;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_close>:

int _close(int file)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
	return -1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b68:	605a      	str	r2, [r3, #4]
	return 0;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <_isatty>:

int _isatty(int file)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
	return 0;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <_sbrk+0x5c>)
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <_sbrk+0x60>)
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <_sbrk+0x64>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <_sbrk+0x64>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <_sbrk+0x68>)
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d205      	bcs.n	8002be0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <_sbrk+0x6c>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e009      	b.n	8002bf4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	4a06      	ldr	r2, [pc, #24]	; (8002c08 <_sbrk+0x64>)
 8002bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	2001c000 	.word	0x2001c000
 8002c04:	00000400 	.word	0x00000400
 8002c08:	200003d4 	.word	0x200003d4
 8002c0c:	20006bb8 	.word	0x20006bb8
 8002c10:	20006ba4 	.word	0x20006ba4

08002c14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	8bdb      	ldrh	r3, [r3, #30]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f003 fda2 	bl	8006786 <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 8002c42:	e007      	b.n	8002c54 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8bdb      	ldrh	r3, [r3, #30]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f003 fd99 	bl	8006786 <HAL_GPIO_WritePin>
        }
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_ZN11RemoraCommsC1Ev>:
#include "RemoraComms.h"


RemoraComms::RemoraComms()
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f956 	bl	8002f18 <_ZN6ModuleC1Ev>
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <_ZN11RemoraCommsC1Ev+0x28>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
{
	printf("Creating an Ethernet communication monitoring module\n");
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <_ZN11RemoraCommsC1Ev+0x2c>)
 8002c74:	f00f f93e 	bl	8011ef4 <puts>

}
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	08015150 	.word	0x08015150
 8002c88:	08013334 	.word	0x08013334

08002c8c <_ZN11RemoraComms6updateEv>:


void RemoraComms::update()
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	if (data)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7d1b      	ldrb	r3, [r3, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <_ZN11RemoraComms6updateEv+0x1e>
	{
		this->noDataCount = 0;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	759a      	strb	r2, [r3, #22]
		this->status = true;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	755a      	strb	r2, [r3, #21]
 8002ca8:	e005      	b.n	8002cb6 <_ZN11RemoraComms6updateEv+0x2a>
	}
	else
	{
		this->noDataCount++;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7d9b      	ldrb	r3, [r3, #22]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	759a      	strb	r2, [r3, #22]
	}

	if (this->noDataCount > DATA_ERR_MAX)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7d9b      	ldrb	r3, [r3, #22]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d905      	bls.n	8002cca <_ZN11RemoraComms6updateEv+0x3e>
	{
		this->noDataCount = 0;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	759a      	strb	r2, [r3, #22]
		this->status = false;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	755a      	strb	r2, [r3, #21]
	}

	this->data = false;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	751a      	strb	r2, [r3, #20]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <_ZN11RemoraComms12dataReceivedEv>:



void RemoraComms::dataReceived()
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
	this->data= true;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	751a      	strb	r2, [r3, #20]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <_ZN11RemoraComms9getStatusEv>:


bool RemoraComms::getStatus()
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
	return this->status;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7d5b      	ldrb	r3, [r3, #21]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <_ZN11RemoraCommsD1Ev>:
#include "configuration.h"
#include "remora.h"

#include "../module.h"

class RemoraComms : public Module
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <_ZN11RemoraCommsD1Ev+0x20>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f917 	bl	8002f4c <_ZN6ModuleD1Ev>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	08015150 	.word	0x08015150

08002d2c <_ZN11RemoraCommsD0Ev>:
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ffe7 	bl	8002d08 <_ZN11RemoraCommsD1Ev>
 8002d3a:	2118      	movs	r1, #24
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f00e fe33 	bl	80119a8 <_ZdlPvj>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_ZN3Pin3getEv>:
        void setAsInput();
        void pull_none();
        void pull_up();
        void pull_down();

        inline bool get()
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8bdb      	ldrh	r3, [r3, #30]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	f003 fcfa 	bl	8006758 <HAL_GPIO_ReadPin>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
        }
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

DigitalPin::DigitalPin(volatile uint32_t &ptrData, int mode, std::string portAndPin, int bitNumber, bool invert, int modifier) :
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
	ptrData(&ptrData),
	mode(mode),
	portAndPin(portAndPin),
	bitNumber(bitNumber),
    invert(invert),
	modifier(modifier)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f8c5 	bl	8002f18 <_ZN6ModuleC1Ev>
 8002d8e:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x9c>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	615a      	str	r2, [r3, #20]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d9e:	619a      	str	r2, [r3, #24]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002da6:	771a      	strb	r2, [r3, #28]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	332c      	adds	r3, #44	; 0x2c
 8002db8:	6839      	ldr	r1, [r7, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00e fe84 	bl	8011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
{
	this->pin = new Pin(this->portAndPin, this->mode, this->modifier);		// Input 0x0, Output 0x1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00e fe7b 	bl	8011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002dd2:	f107 0510 	add.w	r5, r7, #16
 8002dd6:	2044      	movs	r0, #68	; 0x44
 8002dd8:	f00e fde8 	bl	80119ac <_Znwj>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461c      	mov	r4, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	4629      	mov	r1, r5
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7fe fa86 	bl	80012fc <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	645c      	str	r4, [r3, #68]	; 0x44
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f00e fe38 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->mask = 1 << this->bitNumber;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
}
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3728      	adds	r7, #40	; 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bdb0      	pop	{r4, r5, r7, pc}
 8002e14:	08015174 	.word	0x08015174

08002e18 <_ZN10DigitalPin6updateEv>:


void DigitalPin::update()
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	bool pinState;

	if (this->mode == 0)									// the pin is configured as an input
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d128      	bne.n	8002e7a <_ZN10DigitalPin6updateEv+0x62>
	{
		pinState = this->pin->get();
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff8d 	bl	8002d4c <_ZN3Pin3getEv>
 8002e32:	4603      	mov	r3, r0
 8002e34:	73fb      	strb	r3, [r7, #15]
		if(this->invert)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7f1b      	ldrb	r3, [r3, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <_ZN10DigitalPin6updateEv+0x2e>
		{
			pinState = !pinState;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
		}

		if (pinState == 1)								// input is high
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10a      	bne.n	8002e62 <_ZN10DigitalPin6updateEv+0x4a>
		{
			*(this->ptrData) |= this->mask;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4619      	mov	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
		{
			pinState = !pinState;
		}
		this->pin->set(pinState);			// simple conversion to boolean
	}
}
 8002e60:	e025      	b.n	8002eae <_ZN10DigitalPin6updateEv+0x96>
			*(this->ptrData) &= ~this->mask;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	400a      	ands	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
}
 8002e78:	e019      	b.n	8002eae <_ZN10DigitalPin6updateEv+0x96>
		pinState = *(this->ptrData) & this->mask;		// get the value of the bit in the data source
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6a12      	ldr	r2, [r2, #32]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
		if(this->invert)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7f1b      	ldrb	r3, [r3, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <_ZN10DigitalPin6updateEv+0x88>
			pinState = !pinState;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	f083 0301 	eor.w	r3, r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
		this->pin->set(pinState);			// simple conversion to boolean
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff feb9 	bl	8002c20 <_ZN3Pin3setEb>
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
	return;
 8002ebe:	bf00      	nop
}
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN10DigitalPinD1Ev>:

#include "../module.h"
#include "../../drivers/pin/pin.h"


class DigitalPin : public Module
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <_ZN10DigitalPinD1Ev+0x2c>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	332c      	adds	r3, #44	; 0x2c
 8002eda:	4618      	mov	r0, r3
 8002edc:	f00e fdc7 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f832 	bl	8002f4c <_ZN6ModuleD1Ev>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08015174 	.word	0x08015174

08002ef8 <_ZN10DigitalPinD0Ev>:
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ffe1 	bl	8002ec8 <_ZN10DigitalPinD1Ev>
 8002f06:	2148      	movs	r1, #72	; 0x48
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f00e fd4d 	bl	80119a8 <_ZdlPvj>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <_ZN6ModuleC1Ev+0x2c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <_ZN6ModuleC1Ev+0x30>)
 8002f34:	f00e ffde 	bl	8011ef4 <puts>
}
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	08015198 	.word	0x08015198
 8002f48:	0801336c 	.word	0x0801336c

08002f4c <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %d thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <_ZN6ModuleD1Ev+0x1c>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	08015198 	.word	0x08015198

08002f6c <_ZN6ModuleD0Ev>:
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ffe9 	bl	8002f4c <_ZN6ModuleD1Ev>
 8002f7a:	2114      	movs	r1, #20
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f00e fd13 	bl	80119a8 <_ZdlPvj>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	++this->counter;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	db08      	blt.n	8002fbc <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3310      	adds	r3, #16
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
		this->counter = 0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	this->updatePost();
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <_ZN6Module6updateEv>:

void Module::update(){}
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <_ZN6Module9configureEv>:
void Module::configure(){}
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
	...

08003048 <_ZN15ModuleInterruptC1EiP6Module>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(int interruptNumber, Module* owner)
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fab6 	bl	80015c8 <_ZN9InterruptC1Ev>
 800305c:	4a07      	ldr	r2, [pc, #28]	; (800307c <_ZN15ModuleInterruptC1EiP6Module+0x34>)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4619      	mov	r1, r3
 800306c:	68b8      	ldr	r0, [r7, #8]
 800306e:	f7fe fabb 	bl	80015e8 <_ZN9Interrupt8RegisterEiPS_>
}
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	080151bc 	.word	0x080151bc

08003080 <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->handleInterrupt();
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3318      	adds	r3, #24
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4610      	mov	r0, r2
 8003098:	4798      	blx	r3
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <_ZN5NVMPGC1ERV9mpgData_tRVt>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

NVMPG::NVMPG(volatile mpgData_t &ptrMpgData, volatile uint16_t &ptrData) :
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b08d      	sub	sp, #52	; 0x34
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
	ptrMpgData(&ptrMpgData),
	ptrData(&ptrData)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff30 	bl	8002f18 <_ZN6ModuleC1Ev>
 80030b8:	4a9d      	ldr	r2, [pc, #628]	; (8003330 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x28c>)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	61da      	str	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	621a      	str	r2, [r3, #32]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3324      	adds	r3, #36	; 0x24
 80030ce:	2235      	movs	r2, #53	; 0x35
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f00e fdda 	bl	8011c8c <memset>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
{

	this->irq = DMA2_Stream2_IRQn;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	223a      	movs	r2, #58	; 0x3a
 80030f4:	761a      	strb	r2, [r3, #24]
	interruptPtr = new ModuleInterrupt(this->irq, this);	// Instantiate a new Module Interrupt object and pass "this" pointer
 80030f6:	2008      	movs	r0, #8
 80030f8:	f00e fc58 	bl	80119ac <_Znwj>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461c      	mov	r4, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8003106:	4619      	mov	r1, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	461a      	mov	r2, r3
 800310c:	4620      	mov	r0, r4
 800310e:	f7ff ff9b 	bl	8003048 <_ZN15ModuleInterruptC1EiP6Module>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	615c      	str	r4, [r3, #20]


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	611a      	str	r2, [r3, #16]

	printf("Creating NVMPG module\n");
 8003126:	4883      	ldr	r0, [pc, #524]	; (8003334 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x290>)
 8003128:	f00e fee4 	bl	8011ef4 <puts>

	this->uartHandle.Instance = USART1;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a82      	ldr	r2, [pc, #520]	; (8003338 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 8003130:	665a      	str	r2, [r3, #100]	; 0x64

	if(this->uartHandle.Instance==USART1)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 8003138:	4293      	cmp	r3, r2
 800313a:	f040 80da 	bne.w	80032f2 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x24e>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	4b7e      	ldr	r3, [pc, #504]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a7d      	ldr	r2, [pc, #500]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b7b      	ldr	r3, [pc, #492]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	69bb      	ldr	r3, [r7, #24]

		/**USART1 GPIO Configuration
		PA9     ------> USART1_TX
		PA10     ------> USART1_RX
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800315a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800315e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003168:	2303      	movs	r3, #3
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800316c:	2307      	movs	r3, #7
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003170:	f107 031c 	add.w	r3, r7, #28
 8003174:	4619      	mov	r1, r3
 8003176:	4872      	ldr	r0, [pc, #456]	; (8003340 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x29c>)
 8003178:	f003 f950 	bl	800641c <HAL_GPIO_Init>

		__HAL_RCC_USART1_CLK_ENABLE();
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	4b6e      	ldr	r3, [pc, #440]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	4a6d      	ldr	r2, [pc, #436]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 8003186:	f043 0310 	orr.w	r3, r3, #16
 800318a:	6453      	str	r3, [r2, #68]	; 0x44
 800318c:	4b6b      	ldr	r3, [pc, #428]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	697b      	ldr	r3, [r7, #20]

		this->uartHandle.Init.BaudRate = 115200;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800319e:	669a      	str	r2, [r3, #104]	; 0x68
		this->uartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	66da      	str	r2, [r3, #108]	; 0x6c
		this->uartHandle.Init.StopBits = UART_STOPBITS_1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	671a      	str	r2, [r3, #112]	; 0x70
		this->uartHandle.Init.Parity = UART_PARITY_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	675a      	str	r2, [r3, #116]	; 0x74
		this->uartHandle.Init.Mode = UART_MODE_TX_RX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	220c      	movs	r2, #12
 80031b6:	679a      	str	r2, [r3, #120]	; 0x78
		this->uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	67da      	str	r2, [r3, #124]	; 0x7c
		this->uartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		HAL_UART_Init(&this->uartHandle);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3364      	adds	r3, #100	; 0x64
 80031ca:	4618      	mov	r0, r3
 80031cc:	f004 fbfa 	bl	80079c4 <HAL_UART_Init>

		__HAL_RCC_DMA2_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	4b59      	ldr	r3, [pc, #356]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	4a58      	ldr	r2, [pc, #352]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 80031da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031de:	6313      	str	r3, [r2, #48]	; 0x30
 80031e0:	4b56      	ldr	r3, [pc, #344]	; (800333c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	693b      	ldr	r3, [r7, #16]

		this->hdma_usart1_rx.Instance = DMA2_Stream2;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a55      	ldr	r2, [pc, #340]	; (8003344 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x2a0>)
 80031f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		this->hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031fa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		this->hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		this->hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		this->hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003214:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		this->hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		this->hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		this->hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		this->hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		this->hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

		HAL_DMA_Init(&this->hdma_usart1_rx);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	33a8      	adds	r3, #168	; 0xa8
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fc71 	bl	8004b2c <HAL_DMA_Init>

	    __HAL_LINKDMA(&this->uartHandle,hdmarx,this->hdma_usart1_rx);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	203a      	movs	r0, #58	; 0x3a
 8003268:	f001 fc29 	bl	8004abe <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800326c:	203a      	movs	r0, #58	; 0x3a
 800326e:	f001 fc42 	bl	8004af6 <HAL_NVIC_EnableIRQ>

	    this->hdma_usart1_tx.Instance = DMA2_Stream7;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a34      	ldr	r2, [pc, #208]	; (8003348 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x2a4>)
 8003276:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	    this->hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003280:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	    this->hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	    this->hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	    this->hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800329a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	    this->hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	    this->hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	    //this->hdma_usart1_tx.Init.Mode = DMA_NORMAL;
	    this->hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	    this->hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	    this->hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

	    HAL_DMA_Init(&this->hdma_usart1_tx);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fc2c 	bl	8004b2c <HAL_DMA_Init>

	    __HAL_LINKDMA(&this->uartHandle,hdmatx,this->hdma_usart1_tx);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

		printf("UART1 DMA configured\n");
 80032ec:	4817      	ldr	r0, [pc, #92]	; (800334c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x2a8>)
 80032ee:	f00e fe01 	bl	8011ef4 <puts>
	}

	sprintf((char*)this->txData, "ZZ");
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3324      	adds	r3, #36	; 0x24
 80032f6:	4916      	ldr	r1, [pc, #88]	; (8003350 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x2ac>)
 80032f8:	4618      	mov	r0, r3
 80032fa:	f00e fe57 	bl	8011fac <siprintf>
	HAL_UART_Transmit(&this->uartHandle, (uint8_t*)&this->txData, 53, 100);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800330a:	2364      	movs	r3, #100	; 0x64
 800330c:	2235      	movs	r2, #53	; 0x35
 800330e:	f004 fba6 	bl	8007a5e <HAL_UART_Transmit>

	HAL_UART_Receive_DMA(&this->uartHandle, (uint8_t*)&this->rxData, 1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3359      	adds	r3, #89	; 0x59
 800331c:	2201      	movs	r2, #1
 800331e:	4619      	mov	r1, r3
 8003320:	f004 fc9c 	bl	8007c5c <HAL_UART_Receive_DMA>
}
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4618      	mov	r0, r3
 8003328:	3734      	adds	r7, #52	; 0x34
 800332a:	46bd      	mov	sp, r7
 800332c:	bd90      	pop	{r4, r7, pc}
 800332e:	bf00      	nop
 8003330:	080151c8 	.word	0x080151c8
 8003334:	080133c0 	.word	0x080133c0
 8003338:	40011000 	.word	0x40011000
 800333c:	40023800 	.word	0x40023800
 8003340:	40020000 	.word	0x40020000
 8003344:	40026440 	.word	0x40026440
 8003348:	400264b8 	.word	0x400264b8
 800334c:	080133d8 	.word	0x080133d8
 8003350:	080133f0 	.word	0x080133f0

08003354 <_ZN5NVMPG6updateEv>:


void NVMPG::update()
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	if (this->serialReceived)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003362:	2b00      	cmp	r3, #0
 8003364:	d041      	beq.n	80033ea <_ZN5NVMPG6updateEv+0x96>
	{
		// get the button number from the low nibble, subtract 2 (buttons start from #2), NVMPG start at bit 26 in the uint64_t output structure
		mask = 1 << ((rxData & 0x0f) - 2);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	3b02      	subs	r3, #2
 8003372:	2201      	movs	r2, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

		// button state is from the high nibble, x0_ is button down (logical 1), x8_ is button up (logical 0)
		buttonState = (rxData & 0x80);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003386:	b25b      	sxtb	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	09db      	lsrs	r3, r3, #7
 800338c:	b2da      	uxtb	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

		if (buttonState)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800339a:	2b00      	cmp	r3, #0
 800339c:	d011      	beq.n	80033c2 <_ZN5NVMPG6updateEv+0x6e>
		{
			*(this->ptrData) &= ~this->mask;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	b21a      	sxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	4013      	ands	r3, r2
 80033b6:	b21a      	sxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	b292      	uxth	r2, r2
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	e00b      	b.n	80033da <_ZN5NVMPG6updateEv+0x86>
		}
		else
		{
			*(this->ptrData) |= this->mask;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b299      	uxth	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	b292      	uxth	r2, r2
 80033d8:	801a      	strh	r2, [r3, #0]
		}

		rxData = 0;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		this->serialReceived = false;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	}

	if (this->payloadReceived)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d021      	beq.n	8003438 <_ZN5NVMPG6updateEv+0xe4>
	{
		// copy the data to txData buffer
		for (int i = 1; i < 53; i++)
 80033f4:	2301      	movs	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b34      	cmp	r3, #52	; 0x34
 80033fc:	dc0f      	bgt.n	800341e <_ZN5NVMPG6updateEv+0xca>
		{
			this->txData[i] =  this->ptrMpgData->payload[i+4];
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3304      	adds	r3, #4
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	b2d9      	uxtb	r1, r3
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	3324      	adds	r3, #36	; 0x24
 8003412:	460a      	mov	r2, r1
 8003414:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 53; i++)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3301      	adds	r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e7ec      	b.n	80033f8 <_ZN5NVMPG6updateEv+0xa4>
		}
		HAL_UART_Transmit_DMA(&this->uartHandle, (uint8_t*)&this->txData, 53);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3324      	adds	r3, #36	; 0x24
 8003428:	2235      	movs	r2, #53	; 0x35
 800342a:	4619      	mov	r1, r3
 800342c:	f004 fbaa 	bl	8007b84 <HAL_UART_Transmit_DMA>
		this->payloadReceived = false;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZN5NVMPG10slowUpdateEv>:


void NVMPG::slowUpdate()
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	return;
 8003448:	bf00      	nop
}
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <_ZN5NVMPG9configureEv>:

void NVMPG::configure()
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
	// use standard module configure method to set payload flag
	this->payloadReceived = true;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <_ZN5NVMPG15handleInterruptEv>:

void NVMPG::handleInterrupt()
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	this->serialReceived = true;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	HAL_DMA_IRQHandler(&this->hdma_usart1_rx);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	33a8      	adds	r3, #168	; 0xa8
 8003480:	4618      	mov	r0, r3
 8003482:	f001 fc59 	bl	8004d38 <HAL_DMA_IRQHandler>
	HAL_UART_Receive_DMA(&this->uartHandle, (uint8_t*)&this->rxData, 1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3359      	adds	r3, #89	; 0x59
 8003490:	2201      	movs	r2, #1
 8003492:	4619      	mov	r1, r3
 8003494:	f004 fbe2 	bl	8007c5c <HAL_UART_Receive_DMA>
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZN5NVMPGD1Ev>:
#include "remora.h"
#include "../module.h"
#include "../moduleinterrupt.h"


class NVMPG : public Module
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <_ZN5NVMPGD1Ev+0x20>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fd4b 	bl	8002f4c <_ZN6ModuleD1Ev>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	080151c8 	.word	0x080151c8

080034c4 <_ZN5NVMPGD0Ev>:
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ffe7 	bl	80034a0 <_ZN5NVMPGD1Ev>
 80034d2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f00e fa66 	bl	80119a8 <_ZdlPvj>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <_ZN10SpindlePWMC1ERVf>:
#include "spindlePwm.h"

// Module for NVMEM spindle RPM on pin PA_0


SpindlePWM::SpindlePWM(volatile float &ptrPwmPulseWidth) :
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b092      	sub	sp, #72	; 0x48
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
    ptrPwmPulseWidth(&ptrPwmPulseWidth)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fd0f 	bl	8002f18 <_ZN6ModuleC1Ev>
 80034fa:	4a49      	ldr	r2, [pc, #292]	; (8003620 <_ZN10SpindlePWMC1ERVf+0x138>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	65da      	str	r2, [r3, #92]	; 0x5c
{
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003506:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
 8003520:	615a      	str	r2, [r3, #20]
 8003522:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 0310 	add.w	r3, r7, #16
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM5_CLK_ENABLE();
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <_ZN10SpindlePWMC1ERVf+0x13c>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	4a39      	ldr	r2, [pc, #228]	; (8003624 <_ZN10SpindlePWMC1ERVf+0x13c>)
 800353e:	f043 0308 	orr.w	r3, r3, #8
 8003542:	6413      	str	r3, [r2, #64]	; 0x40
 8003544:	4b37      	ldr	r3, [pc, #220]	; (8003624 <_ZN10SpindlePWMC1ERVf+0x13c>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]

	this->prescaler = 60;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	223c      	movs	r2, #60	; 0x3c
 8003554:	665a      	str	r2, [r3, #100]	; 0x64
	this->period = 10000;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f242 7210 	movw	r2, #10000	; 0x2710
 800355c:	669a      	str	r2, [r3, #104]	; 0x68

	this->htim.Instance = TIM5;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a31      	ldr	r2, [pc, #196]	; (8003628 <_ZN10SpindlePWMC1ERVf+0x140>)
 8003562:	615a      	str	r2, [r3, #20]
	this->htim.Init.Prescaler = this->prescaler-1;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003568:	1e5a      	subs	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	619a      	str	r2, [r3, #24]
	this->htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	61da      	str	r2, [r3, #28]
	this->htim.Init.Period = this->period-1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003578:	1e5a      	subs	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]
	this->htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	625a      	str	r2, [r3, #36]	; 0x24
	this->htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_PWM_Init(&this->htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3314      	adds	r3, #20
 800358e:	4618      	mov	r0, r3
 8003590:	f003 fd52 	bl	8007038 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003598:	2300      	movs	r3, #0
 800359a:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_TIMEx_MasterConfigSynchronization(&this->htim, &sMasterConfig);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3314      	adds	r3, #20
 80035a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f992 	bl	80078d0 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ac:	2360      	movs	r3, #96	; 0x60
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
	//sConfigOC.Pulse = 0;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_TIM_PWM_ConfigChannel(&this->htim, &sConfigOC, TIM_CHANNEL_1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3314      	adds	r3, #20
 80035bc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80035c0:	2200      	movs	r2, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fe58 	bl	8007278 <HAL_TIM_PWM_ConfigChannel>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	4b15      	ldr	r3, [pc, #84]	; (8003624 <_ZN10SpindlePWMC1ERVf+0x13c>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <_ZN10SpindlePWMC1ERVf+0x13c>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6313      	str	r3, [r2, #48]	; 0x30
 80035d8:	4b12      	ldr	r3, [pc, #72]	; (8003624 <_ZN10SpindlePWMC1ERVf+0x13c>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
	/**TIM2 GPIO Configuration
	PA0     ------> TIM5_CH1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035e4:	2301      	movs	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	2302      	movs	r3, #2
 80035ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035f4:	2302      	movs	r3, #2
 80035f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f8:	f107 0310 	add.w	r3, r7, #16
 80035fc:	4619      	mov	r1, r3
 80035fe:	480b      	ldr	r0, [pc, #44]	; (800362c <_ZN10SpindlePWMC1ERVf+0x144>)
 8003600:	f002 ff0c 	bl	800641c <HAL_GPIO_Init>

	HAL_TIM_PWM_Start(&this->htim, TIM_CHANNEL_1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3314      	adds	r3, #20
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fd6c 	bl	80070e8 <HAL_TIM_PWM_Start>
	TIM5->CCR1 = 0;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <_ZN10SpindlePWMC1ERVf+0x140>)
 8003612:	2200      	movs	r2, #0
 8003614:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	3748      	adds	r7, #72	; 0x48
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	080151ec 	.word	0x080151ec
 8003624:	40023800 	.word	0x40023800
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40020000 	.word	0x40020000

08003630 <_ZN10SpindlePWM6updateEv>:



void SpindlePWM::update()
{
 8003630:	b5b0      	push	{r4, r5, r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

    if (*(this->ptrPwmPulseWidth) != this->pwmPulseWidth)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003642:	2101      	movs	r1, #1
 8003644:	460c      	mov	r4, r1
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	f7fd fc53 	bl	8000ef4 <__aeabi_fcmpeq>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <_ZN10SpindlePWM6updateEv+0x28>
 8003654:	2300      	movs	r3, #0
 8003656:	461c      	mov	r4, r3
 8003658:	b2e3      	uxtb	r3, r4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d050      	beq.n	8003700 <_ZN10SpindlePWM6updateEv+0xd0>
    {
        // PWM duty has changed
        this->pwmPulseWidth = *(this->ptrPwmPulseWidth);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	661a      	str	r2, [r3, #96]	; 0x60

        if (this->pwmPulseWidth > 100.0)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366c:	4926      	ldr	r1, [pc, #152]	; (8003708 <_ZN10SpindlePWM6updateEv+0xd8>)
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd fc68 	bl	8000f44 <__aeabi_fcmpgt>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <_ZN10SpindlePWM6updateEv+0x50>
        {
        	this->pwmPulseWidth = 100.0;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a22      	ldr	r2, [pc, #136]	; (8003708 <_ZN10SpindlePWM6updateEv+0xd8>)
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        if (this->pwmPulseWidth < 0.0)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f7fd fc3d 	bl	8000f08 <__aeabi_fcmplt>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <_ZN10SpindlePWM6updateEv+0x6c>
        {
        	this->pwmPulseWidth = 0.0;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        this->pulse = (uint32_t)((float)this->period*(this->pwmPulseWidth / 100.0));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd fa3b 	bl	8000b1c <__aeabi_ui2f>
 80036a6:	4603      	mov	r3, r0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fc fef7 	bl	800049c <__aeabi_f2d>
 80036ae:	4604      	mov	r4, r0
 80036b0:	460d      	mov	r5, r1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fc fef0 	bl	800049c <__aeabi_f2d>
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <_ZN10SpindlePWM6updateEv+0xdc>)
 80036c2:	f7fd f86d 	bl	80007a0 <__aeabi_ddiv>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4620      	mov	r0, r4
 80036cc:	4629      	mov	r1, r5
 80036ce:	f7fc ff3d 	bl	800054c <__aeabi_dmul>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd f949 	bl	8000970 <__aeabi_d2uiz>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	66da      	str	r2, [r3, #108]	; 0x6c
        if (this->pulse == 0)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <_ZN10SpindlePWM6updateEv+0xc4>
        {
        	TIM5->CCR1 = 0;
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <_ZN10SpindlePWM6updateEv+0xe0>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
        {
        	TIM5->CCR1 = this->pulse-1;
        }
    }

    return;
 80036f2:	e005      	b.n	8003700 <_ZN10SpindlePWM6updateEv+0xd0>
        	TIM5->CCR1 = this->pulse-1;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	4a05      	ldr	r2, [pc, #20]	; (8003710 <_ZN10SpindlePWM6updateEv+0xe0>)
 80036fa:	3b01      	subs	r3, #1
 80036fc:	6353      	str	r3, [r2, #52]	; 0x34
    return;
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
}
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bdb0      	pop	{r4, r5, r7, pc}
 8003708:	42c80000 	.word	0x42c80000
 800370c:	40590000 	.word	0x40590000
 8003710:	40000c00 	.word	0x40000c00

08003714 <_ZN10SpindlePWM10slowUpdateEv>:


void SpindlePWM::slowUpdate()
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	return;
 800371c:	bf00      	nop
}
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
	...

08003728 <_ZN10SpindlePWMD1Ev>:

#include "stm32f2xx_hal.h"

#include "../module.h"

class SpindlePWM : public Module
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	4a05      	ldr	r2, [pc, #20]	; (8003748 <_ZN10SpindlePWMD1Ev+0x20>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fc07 	bl	8002f4c <_ZN6ModuleD1Ev>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	080151ec 	.word	0x080151ec

0800374c <_ZN10SpindlePWMD0Ev>:
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ffe7 	bl	8003728 <_ZN10SpindlePWMD1Ev>
 800375a:	2170      	movs	r1, #112	; 0x70
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f00e f923 	bl	80119a8 <_ZdlPvj>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

Stepgen::Stepgen(int32_t threadFreq, int jointNumber, std::string step, std::string direction, int stepBit, volatile int32_t &ptrFrequencyCommand, volatile int32_t &ptrFeedback, volatile uint8_t &ptrJointEnable) :
 800376c:	b5b0      	push	{r4, r5, r7, lr}
 800376e:	b090      	sub	sp, #64	; 0x40
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
	step(step),
	direction(direction),
	stepBit(stepBit),
	ptrFrequencyCommand(&ptrFrequencyCommand),
	ptrFeedback(&ptrFeedback),
	ptrJointEnable(&ptrJointEnable)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fbcb 	bl	8002f18 <_ZN6ModuleC1Ev>
 8003782:	4a40      	ldr	r2, [pc, #256]	; (8003884 <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh+0x118>)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	615a      	str	r2, [r3, #20]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	331c      	adds	r3, #28
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f00e f997 	bl	8011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3334      	adds	r3, #52	; 0x34
 800379e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037a0:	4618      	mov	r0, r3
 80037a2:	f00e f991 	bl	8011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037bc:	671a      	str	r2, [r3, #112]	; 0x70
{
	this->stepPin = new Pin(this->step, OUTPUT);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f103 021c 	add.w	r2, r3, #28
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f00e f97c 	bl	8011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80037d0:	f107 0510 	add.w	r5, r7, #16
 80037d4:	2044      	movs	r0, #68	; 0x44
 80037d6:	f00e f8e9 	bl	80119ac <_Znwj>
 80037da:	4603      	mov	r3, r0
 80037dc:	461c      	mov	r4, r3
 80037de:	2201      	movs	r2, #1
 80037e0:	4629      	mov	r1, r5
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7fd fd5a 	bl	800129c <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	675c      	str	r4, [r3, #116]	; 0x74
 80037ec:	f107 0310 	add.w	r3, r7, #16
 80037f0:	4618      	mov	r0, r3
 80037f2:	f00e f93c 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->directionPin = new Pin(this->direction, OUTPUT);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80037fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f00e f960 	bl	8011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003808:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800380c:	2044      	movs	r0, #68	; 0x44
 800380e:	f00e f8cd 	bl	80119ac <_Znwj>
 8003812:	4603      	mov	r3, r0
 8003814:	461c      	mov	r4, r3
 8003816:	2201      	movs	r2, #1
 8003818:	4629      	mov	r1, r5
 800381a:	4620      	mov	r0, r4
 800381c:	f7fd fd3e 	bl	800129c <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	679c      	str	r4, [r3, #120]	; 0x78
 8003824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003828:	4618      	mov	r0, r3
 800382a:	f00e f920 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->DDSaccumulator = 0;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	665a      	str	r2, [r3, #100]	; 0x64
	this->frequencyScale = (float)(1 << this->stepBit) / (float)threadFreq;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	2201      	movs	r2, #1
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd f970 	bl	8000b24 <__aeabi_i2f>
 8003844:	4604      	mov	r4, r0
 8003846:	68b8      	ldr	r0, [r7, #8]
 8003848:	f7fd f96c 	bl	8000b24 <__aeabi_i2f>
 800384c:	4603      	mov	r3, r0
 800384e:	4619      	mov	r1, r3
 8003850:	4620      	mov	r0, r4
 8003852:	f7fd fa6f 	bl	8000d34 <__aeabi_fdiv>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	669a      	str	r2, [r3, #104]	; 0x68
	this->mask = 1 << this->jointNumber;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2201      	movs	r2, #1
 8003864:	409a      	lsls	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	619a      	str	r2, [r3, #24]
	this->isEnabled = false;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	this->isForward = false;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
}
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4618      	mov	r0, r3
 800387e:	3740      	adds	r7, #64	; 0x40
 8003880:	46bd      	mov	sp, r7
 8003882:	bdb0      	pop	{r4, r5, r7, pc}
 8003884:	08015210 	.word	0x08015210

08003888 <_ZN7Stepgen6updateEv>:


void Stepgen::update()
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	// Use the standard Module interface to run makePulses()
	this->makePulses();
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f818 	bl	80038c6 <_ZN7Stepgen10makePulsesEv>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <_ZN7Stepgen10updatePostEv>:

void Stepgen::updatePost()
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
	this->stopPulses();
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f88a 	bl	80039c0 <_ZN7Stepgen10stopPulsesEv>
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_ZN7Stepgen10slowUpdateEv>:

void Stepgen::slowUpdate()
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	return;
 80038bc:	bf00      	nop
}
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <_ZN7Stepgen10makePulsesEv>:

void Stepgen::makePulses()
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
	int32_t stepNow = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]

	this->isEnabled = ((*(this->ptrJointEnable) & this->mask) != 0);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf14      	ite	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	2300      	moveq	r3, #0
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	if (this->isEnabled == true)  												// this Step generator is enables so make the pulses
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d15d      	bne.n	80039b8 <_ZN7Stepgen10makePulsesEv+0xf2>
	{
		this->frequencyCommand = *(this->ptrFrequencyCommand);            		// Get the latest frequency command via pointer to the data source
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	651a      	str	r2, [r3, #80]	; 0x50
		this->DDSaddValue = this->frequencyCommand * this->frequencyScale;		// Scale the frequency command to get the DDS add value
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd f90a 	bl	8000b24 <__aeabi_i2f>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f7fd f957 	bl	8000bcc <__aeabi_fmul>
 800391e:	4603      	mov	r3, r0
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fb19 	bl	8000f58 <__aeabi_f2iz>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	66da      	str	r2, [r3, #108]	; 0x6c
		stepNow = this->DDSaccumulator;                           				// Save the current DDS accumulator value
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003930:	60fb      	str	r3, [r7, #12]
		this->DDSaccumulator += this->DDSaddValue;           	  				// Update the DDS accumulator with the new add value
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393a:	441a      	add	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	665a      	str	r2, [r3, #100]	; 0x64
		stepNow ^= this->DDSaccumulator;                          				// Test for changes in the low half of the DDS accumulator
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4053      	eors	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
		stepNow &= (1L << this->stepBit);                         				// Check for the step bit
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	2201      	movs	r2, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4013      	ands	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
		this->rawCount = this->DDSaccumulator >> this->stepBit;   				// Update the position raw count
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	411a      	asrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	659a      	str	r2, [r3, #88]	; 0x58

		if (this->DDSaddValue > 0)												// The sign of the DDS add value indicates the desired direction
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396c:	2b00      	cmp	r3, #0
 800396e:	dd04      	ble.n	800397a <_ZN7Stepgen10makePulsesEv+0xb4>
		{
			this->isForward = true;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8003978:	e003      	b.n	8003982 <_ZN7Stepgen10makePulsesEv+0xbc>
		}
		else //if (this->DDSaddValue < 0)
		{
			this->isForward = false;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		}

		if (stepNow)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d017      	beq.n	80039b8 <_ZN7Stepgen10makePulsesEv+0xf2>
		{
			this->directionPin->set(this->isForward);             		// Set direction pin
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7ff f943 	bl	8002c20 <_ZN3Pin3setEb>
			this->stepPin->set(true);										// Raise step pin - A4988 / DRV8825 stepper drivers only need 200ns setup time
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	2101      	movs	r1, #1
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f93d 	bl	8002c20 <_ZN3Pin3setEb>
			*(this->ptrFeedback) = this->DDSaccumulator;                     // Update position feedback via pointer to the data receiver
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80039ae:	601a      	str	r2, [r3, #0]
			this->isStepping = true;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		}
	}


}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_ZN7Stepgen10stopPulsesEv>:


void Stepgen::stopPulses()
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	this->stepPin->set(false);	// Reset step pin
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff f926 	bl	8002c20 <_ZN3Pin3setEb>
	this->isStepping = false;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <_ZN7StepgenD1Ev>:
#include "../module.h"
#include "../../drivers/pin/pin.h"

void createStepgen(void);

class Stepgen : public Module
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <_ZN7StepgenD1Ev+0x34>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3334      	adds	r3, #52	; 0x34
 80039f6:	4618      	mov	r0, r3
 80039f8:	f00e f839 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	331c      	adds	r3, #28
 8003a00:	4618      	mov	r0, r3
 8003a02:	f00e f834 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fa9f 	bl	8002f4c <_ZN6ModuleD1Ev>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	08015210 	.word	0x08015210

08003a1c <_ZN7StepgenD0Ev>:
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ffdd 	bl	80039e4 <_ZN7StepgenD1Ev>
 8003a2a:	217c      	movs	r1, #124	; 0x7c
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f00d ffbb 	bl	80119a8 <_ZdlPvj>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f8e0 	bl	8003c22 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff ffeb 	bl	8003a52 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
	timer(timer),
	irq(irq),
	frequency(frequency)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	79fa      	ldrb	r2, [r7, #7]
 8003aa2:	721a      	strb	r2, [r3, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3314      	adds	r3, #20
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ffdc 	bl	8003a6c <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3320      	adds	r3, #32
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ffd7 	bl	8003a6c <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	332c      	adds	r3, #44	; 0x2c
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f8bd 	bl	8003c42 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("Creating thread %d\n", this->frequency);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4619      	mov	r1, r3
 8003ace:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 8003ad0:	f00e f98a 	bl	8011de8 <iprintf>
}
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	080133f4 	.word	0x080133f4

08003ae4 <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 8003aec:	2014      	movs	r0, #20
 8003aee:	f00d ff5d 	bl	80119ac <_Znwj>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461c      	mov	r4, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68d8      	ldr	r0, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 fd6c 	bl	80045e8 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	601c      	str	r4, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd90      	pop	{r4, r7, pc}

08003b1c <_ZN9pruThread14registerModuleEP6Module>:
    this->TimerPtr->stopTimer();
}


void pruThread::registerModule(Module* module)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	this->vThread.push_back(module);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	463a      	mov	r2, r7
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f894 	bl	8003c5c <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_ZN9pruThread18registerModulePostEP6Module>:


void pruThread::registerModulePost(Module* module)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
	this->vThreadPost.push_back(module);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	463a      	mov	r2, r7
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f884 	bl	8003c5c <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>
	this->hasThreadPost = true;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	741a      	strb	r2, [r3, #16]
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_ZN9pruThread3runEv>:


void pruThread::run(void)
{
 8003b62:	b590      	push	{r4, r7, lr}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3314      	adds	r3, #20
 8003b6e:	687c      	ldr	r4, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 f898 	bl	8003ca6 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8003b76:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3314      	adds	r3, #20
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f89f 	bl	8003cc6 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	f107 0308 	add.w	r3, r7, #8
 8003b90:	4619      	mov	r1, r3
 8003b92:	4620      	mov	r0, r4
 8003b94:	f000 f8a8 	bl	8003ce8 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00f      	beq.n	8003bbe <_ZN9pruThread3runEv+0x5c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	332c      	adds	r3, #44	; 0x2c
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f8c7 	bl	8003d36 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff f9ed 	bl	8002f8c <_ZN6Module9runModuleEv>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	332c      	adds	r3, #44	; 0x2c
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f8ae 	bl	8003d18 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 8003bbc:	e7dc      	b.n	8003b78 <_ZN9pruThread3runEv+0x16>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	7c1b      	ldrb	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d029      	beq.n	8003c1a <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3320      	adds	r3, #32
 8003bca:	687c      	ldr	r4, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f86a 	bl	8003ca6 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8003bd2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3320      	adds	r3, #32
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f871 	bl	8003cc6 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 8003be4:	4603      	mov	r3, r0
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	4619      	mov	r1, r3
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f000 f87a 	bl	8003ce8 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00f      	beq.n	8003c1a <_ZN9pruThread3runEv+0xb8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	332c      	adds	r3, #44	; 0x2c
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f899 	bl	8003d36 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8003c04:	4603      	mov	r3, r0
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f9e1 	bl	8002fd0 <_ZN6Module13runModulePostEv>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	332c      	adds	r3, #44	; 0x2c
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f880 	bl	8003d18 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 8003c18:	e7dc      	b.n	8003bd4 <_ZN9pruThread3runEv+0x72>
	}
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd90      	pop	{r4, r7, pc}

08003c22 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f88e 	bl	8003d4c <_ZNSaIP6ModuleEC1Ev>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f896 	bl	8003d64 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:
      typedef typename __traits_type::value_type  	value_type;
      typedef typename __traits_type::difference_type 	difference_type;
      typedef typename __traits_type::reference 	reference;
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d00c      	beq.n	8003c8c <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f000 f8b0 	bl	8003de0 <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	1d1a      	adds	r2, r3, #4
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8003c8a:	e008      	b.n	8003c9e <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f81a 	bl	8003cc6 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 8003c92:	4603      	mov	r3, r0
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	4619      	mov	r1, r3
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f8c9 	bl	8003e30 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	f107 030c 	add.w	r3, r7, #12
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f976 	bl	8003fa8 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	1d1a      	adds	r2, r3, #4
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 f965 	bl	8003fa8 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f967 	bl	8003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f000 f962 	bl	8003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8003d02:	4603      	mov	r3, r0
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	429c      	cmp	r4, r3
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd90      	pop	{r4, r7, pc}

08003d18 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	1d1a      	adds	r2, r3, #4
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
	return *this;
 8003d2a:	687b      	ldr	r3, [r7, #4]
      }
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f940 	bl	8003fda <_ZN9__gnu_cxx13new_allocatorIP6ModuleEC1Ev>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
	{ }
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
	if (__p)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f923 	bl	8003fee <_ZNSt16allocator_traitsISaIP6ModuleEE10deallocateERS2_PS1_j>
      }
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <_ZSt8_DestroyIPP6ModuleS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f91a 	bl	800400c <_ZSt8_DestroyIPP6ModuleEvT_S3_>
    }
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f91a 	bl	8004026 <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f91e 	bl	800403a <_ZN9__gnu_cxx13new_allocatorIP6ModuleE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f805 	bl	8003e1c <_ZNSt6vectorIP6ModuleSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003e12:	4603      	mov	r3, r0
      }
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZNSt6vectorIP6ModuleSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003e24:	2301      	movs	r3, #1
      }
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003e30:	b5b0      	push	{r4, r5, r7, lr}
 8003e32:	b08c      	sub	sp, #48	; 0x30
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003e3c:	4a59      	ldr	r2, [pc, #356]	; (8003fa4 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f910 	bl	8004066 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc>
 8003e46:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff ff26 	bl	8003ca6 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	f107 0214 	add.w	r2, r7, #20
 8003e62:	f107 0308 	add.w	r3, r7, #8
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f943 	bl	80040f4 <_ZN9__gnu_cxxmiIPP6ModuleSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f951 	bl	800411e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj>
 8003e7c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003e82:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	18d5      	adds	r5, r2, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8ca 	bl	8004026 <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 8003e92:	4603      	mov	r3, r0
 8003e94:	461a      	mov	r2, r3
 8003e96:	4629      	mov	r1, r5
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff ffa1 	bl	8003de0 <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003ea2:	f7ff ffb0 	bl	8003e06 <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d027      	beq.n	8003efc <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f888 	bl	8003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff77 	bl	8003db0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8003ec2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eca:	f000 f93c 	bl	8004146 <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003ece:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003ed6:	f107 0308 	add.w	r3, r7, #8
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f873 	bl	8003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff62 	bl	8003db0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8003eec:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef0:	6a39      	ldr	r1, [r7, #32]
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f000 f927 	bl	8004146 <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003ef8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003efa:	e026      	b.n	8003f4a <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f860 	bl	8003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f06:	4603      	mov	r3, r0
 8003f08:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff ff4f 	bl	8003db0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8003f12:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4621      	mov	r1, r4
 8003f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f1a:	f000 f928 	bl	800416e <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 8003f1e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	3304      	adds	r3, #4
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8003f26:	f107 0308 	add.w	r3, r7, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f84b 	bl	8003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f30:	4603      	mov	r3, r0
 8003f32:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff ff3a 	bl	8003db0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8003f3c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8003f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f40:	6a39      	ldr	r1, [r7, #32]
 8003f42:	4620      	mov	r0, r4
 8003f44:	f000 f913 	bl	800416e <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 8003f48:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8003f4a:	f7ff ff5c 	bl	8003e06 <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f083 0301 	eor.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff27 	bl	8003db0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	6a39      	ldr	r1, [r7, #32]
 8003f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f6a:	f7ff ff2b 	bl	8003dc4 <_ZSt8_DestroyIPP6ModuleS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003f6e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f7e:	f7ff ff04 	bl	8003d8a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	441a      	add	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	609a      	str	r2, [r3, #8]
    }
 8003f9a:	bf00      	nop
 8003f9c:	3730      	adds	r7, #48	; 0x30
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	08013408 	.word	0x08013408

08003fa8 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <_ZN9__gnu_cxx13new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <_ZNSt16allocator_traitsISaIP6ModuleEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f8ce 	bl	80041a0 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE10deallocateEPS2_j>
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <_ZSt8_DestroyIPP6ModuleEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004016:	6839      	ldr	r1, [r7, #0]
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8ce 	bl	80041ba <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6ModuleEEvT_S5_>
    }
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <_ZN9__gnu_cxx13new_allocatorIP6ModuleE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800403a:	b590      	push	{r4, r7, lr}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff ffed 	bl	8004026 <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 800404c:	4603      	mov	r3, r0
 800404e:	681c      	ldr	r4, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4619      	mov	r1, r3
 8004054:	2004      	movs	r0, #4
 8004056:	f7ff fcf1 	bl	8003a3c <_ZnwjPv>
 800405a:	4603      	mov	r3, r0
 800405c:	601c      	str	r4, [r3, #0]
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bd90      	pop	{r4, r7, pc}

08004066 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8004066:	b590      	push	{r4, r7, lr}
 8004068:	b087      	sub	sp, #28
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f8ab 	bl	80041ce <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 8004078:	4604      	mov	r4, r0
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f8b8 	bl	80041f0 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 8004080:	4603      	mov	r3, r0
 8004082:	1ae2      	subs	r2, r4, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	bf34      	ite	cc
 800408a:	2301      	movcc	r3, #1
 800408c:	2300      	movcs	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f00d fca5 	bl	80119e4 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f8a8 	bl	80041f0 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 80040a0:	4604      	mov	r4, r0
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8a4 	bl	80041f0 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 80040a8:	4603      	mov	r3, r0
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	f107 0208 	add.w	r2, r7, #8
 80040b0:	f107 0310 	add.w	r3, r7, #16
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 f8a9 	bl	800420e <_ZSt3maxIjERKT_S2_S2_>
 80040bc:	4603      	mov	r3, r0
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4423      	add	r3, r4
 80040c2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f893 	bl	80041f0 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 80040ca:	4602      	mov	r2, r0
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d306      	bcc.n	80040e0 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f87b 	bl	80041ce <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 80040d8:	4602      	mov	r2, r0
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	4293      	cmp	r3, r2
 80040de:	d904      	bls.n	80040ea <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x84>
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f874 	bl	80041ce <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 80040e6:	4603      	mov	r3, r0
 80040e8:	e000      	b.n	80040ec <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x86>
 80040ea:	697b      	ldr	r3, [r7, #20]
      }
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}

080040f4 <_ZN9__gnu_cxxmiIPP6ModuleSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ff61 	bl	8003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8004104:	4603      	mov	r3, r0
 8004106:	681c      	ldr	r4, [r3, #0]
 8004108:	6838      	ldr	r0, [r7, #0]
 800410a:	f7ff ff5c 	bl	8003fc6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 800410e:	4603      	mov	r3, r0
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	1ae3      	subs	r3, r4, r3
 8004114:	109b      	asrs	r3, r3, #2
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bd90      	pop	{r4, r7, pc}

0800411e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d006      	beq.n	800413c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj+0x1e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f87e 	bl	8004234 <_ZNSt16allocator_traitsISaIP6ModuleEE8allocateERS2_j>
 8004138:	4603      	mov	r3, r0
 800413a:	e000      	b.n	800413e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj+0x20>
 800413c:	2300      	movs	r3, #0
      }
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8004146:	b590      	push	{r4, r7, lr}
 8004148:	b089      	sub	sp, #36	; 0x24
 800414a:	af02      	add	r7, sp, #8
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8004154:	f88d 4000 	strb.w	r4, [sp]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f877 	bl	8004252 <_ZNSt6vectorIP6ModuleSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8004164:	4603      	mov	r3, r0
      }
 8004166:	4618      	mov	r0, r3
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}

0800416e <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f87a 	bl	8004276 <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>
 8004182:	4604      	mov	r4, r0
 8004184:	68b8      	ldr	r0, [r7, #8]
 8004186:	f000 f876 	bl	8004276 <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>
 800418a:	4601      	mov	r1, r0
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	4620      	mov	r0, r4
 8004192:	f000 f87f 	bl	8004294 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6ModuleES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8004196:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80041ac:	68b8      	ldr	r0, [r7, #8]
 80041ae:	f00d fbf9 	bl	80119a4 <_ZdlPv>
      }
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6ModuleEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f886 	bl	80042ea <_ZNKSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 80041de:	4603      	mov	r3, r0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f868 	bl	80042b6 <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_max_sizeERKS2_>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	109b      	asrs	r3, r3, #2
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d201      	bcs.n	8004228 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	e000      	b.n	800422a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004228:	687b      	ldr	r3, [r7, #4]
    }
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <_ZNSt16allocator_traitsISaIP6ModuleEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800423e:	2200      	movs	r2, #0
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f85b 	bl	80042fe <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv>
 8004248:	4603      	mov	r3, r0
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_ZNSt6vectorIP6ModuleSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f867 	bl	800433a <_ZSt12__relocate_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 800426c:	4603      	mov	r3, r0
      }
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f875 	bl	8004374 <_ZNSt13move_iteratorIPP6ModuleEC1ES2_>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6ModuleES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f872 	bl	8004390 <_ZSt18uninitialized_copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80042be:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80042c2:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f875 	bl	80043b4 <_ZNSt16allocator_traitsISaIP6ModuleEE8max_sizeERKS2_>
 80042ca:	4603      	mov	r3, r0
 80042cc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80042ce:	f107 0208 	add.w	r2, r7, #8
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f877 	bl	80043cc <_ZSt3minIjERKT_S2_S2_>
 80042de:	4603      	mov	r3, r0
 80042e0:	681b      	ldr	r3, [r3, #0]
      }
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <_ZNKSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f871 	bl	80043f2 <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>
 8004310:	4602      	mov	r2, r0
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4293      	cmp	r3, r2
 8004316:	bf8c      	ite	hi
 8004318:	2301      	movhi	r3, #1
 800431a:	2300      	movls	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004322:	f00d fb59 	bl	80119d8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4618      	mov	r0, r3
 800432c:	f00d fb3e 	bl	80119ac <_Znwj>
 8004330:	4603      	mov	r3, r0
      }
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <_ZSt12__relocate_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800433a:	b5b0      	push	{r4, r5, r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f85d 	bl	8004408 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 800434e:	4604      	mov	r4, r0
 8004350:	68b8      	ldr	r0, [r7, #8]
 8004352:	f000 f859 	bl	8004408 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8004356:	4605      	mov	r5, r0
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f855 	bl	8004408 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 800435e:	4602      	mov	r2, r0
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	4629      	mov	r1, r5
 8004364:	4620      	mov	r0, r4
 8004366:	f000 f859 	bl	800441c <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800436a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bdb0      	pop	{r4, r5, r7, pc}

08004374 <_ZNSt13move_iteratorIPP6ModuleEC1ES2_>:
      move_iterator(iterator_type __i)
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <_ZSt18uninitialized_copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800439c:	2301      	movs	r3, #1
 800439e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f857 	bl	8004458 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6ModuleES5_EET0_T_S8_S7_>
 80043aa:	4603      	mov	r3, r0
    }
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <_ZNSt16allocator_traitsISaIP6ModuleEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f818 	bl	80043f2 <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>
 80043c2:	4603      	mov	r3, r0
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d201      	bcs.n	80043e6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	e000      	b.n	80043e8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80043e6:	687b      	ldr	r3, [r7, #4]
    }
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80043fa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <_ZSt12__niter_baseIPP6ModuleET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	109b      	asrs	r3, r3, #2
 8004432:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	dd06      	ble.n	8004448 <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	461a      	mov	r2, r3
 8004440:	68f9      	ldr	r1, [r7, #12]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f00d fc08 	bl	8011c58 <memmove>
      return __result + __count;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
    }
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6ModuleES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f805 	bl	8004478 <_ZSt4copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>
 800446e:	4603      	mov	r3, r0
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_ZSt4copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f80f 	bl	80044a8 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800448a:	4604      	mov	r4, r0
 800448c:	68b8      	ldr	r0, [r7, #8]
 800448e:	f000 f80b 	bl	80044a8 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004492:	4603      	mov	r3, r0
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4619      	mov	r1, r3
 8004498:	4620      	mov	r0, r4
 800449a:	f000 f816 	bl	80044ca <_ZSt14__copy_move_a2ILb1EPP6ModuleS2_ET1_T0_S4_S3_>
 800449e:	4603      	mov	r3, r0
    }
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}

080044a8 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f82c 	bl	8004510 <_ZNKSt13move_iteratorIPP6ModuleE4baseEv>
 80044b8:	4603      	mov	r3, r0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f833 	bl	8004526 <_ZSt12__miter_baseIPP6ModuleET_S3_>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_ZSt14__copy_move_a2ILb1EPP6ModuleS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80044ca:	b5b0      	push	{r4, r5, r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff ff96 	bl	8004408 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 80044dc:	4604      	mov	r4, r0
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f7ff ff92 	bl	8004408 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 80044e4:	4605      	mov	r5, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ff8d 	bl	8004408 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 80044ee:	4603      	mov	r3, r0
 80044f0:	461a      	mov	r2, r3
 80044f2:	4629      	mov	r1, r5
 80044f4:	4620      	mov	r0, r4
 80044f6:	f000 f820 	bl	800453a <_ZSt13__copy_move_aILb1EPP6ModuleS2_ET1_T0_S4_S3_>
 80044fa:	4602      	mov	r2, r0
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f82c 	bl	800455e <_ZSt12__niter_wrapIPP6ModuleET_RKS3_S3_>
 8004506:	4603      	mov	r3, r0
    }
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bdb0      	pop	{r4, r5, r7, pc}

08004510 <_ZNKSt13move_iteratorIPP6ModuleE4baseEv>:
      base() const
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <_ZSt12__miter_baseIPP6ModuleET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <_ZSt13__copy_move_aILb1EPP6ModuleS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800453a:	b580      	push	{r7, lr}
 800453c:	b086      	sub	sp, #24
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f810 	bl	8004574 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_>
 8004554:	4603      	mov	r3, r0
    }
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <_ZSt12__niter_wrapIPP6ModuleET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	109b      	asrs	r3, r3, #2
 8004588:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	461a      	mov	r2, r3
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f00d fb5d 	bl	8011c58 <memmove>
	  return __result + _Num;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4413      	add	r3, r2
	}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <__NVIC_EnableIRQ>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	db0b      	blt.n	80045da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	f003 021f 	and.w	r2, r3, #31
 80045c8:	4906      	ldr	r1, [pc, #24]	; (80045e4 <__NVIC_EnableIRQ+0x34>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2001      	movs	r0, #1
 80045d2:	fa00 f202 	lsl.w	r2, r0, r2
 80045d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	e000e100 	.word	0xe000e100

080045e8 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	71fb      	strb	r3, [r7, #7]
	timer(timer),
	irq(irq),
	frequency(frequency),
	timerOwnerPtr(ownerPtr)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	79fa      	ldrb	r2, [r7, #7]
 8004602:	721a      	strb	r2, [r3, #8]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8004610:	2008      	movs	r0, #8
 8004612:	f00d f9cb 	bl	80119ac <_Znwj>
 8004616:	4603      	mov	r3, r0
 8004618:	461c      	mov	r4, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4619      	mov	r1, r3
 8004624:	4620      	mov	r0, r4
 8004626:	f000 f88d 	bl	8004744 <_ZN14TimerInterruptC1EiP8pruTimer>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	601c      	str	r4, [r3, #0]

	this->startTimer();
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f812 	bl	8004658 <_ZN8pruTimer10startTimerEv>
}
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	bd90      	pop	{r4, r7, pc}

0800463e <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fa89 	bl	8003b62 <_ZN9pruThread3runEv>
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4a31      	ldr	r2, [pc, #196]	; (800472c <_ZN8pruTimer10startTimerEv+0xd4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d114      	bne.n	8004694 <_ZN8pruTimer10startTimerEv+0x3c>
    {
        printf("	power on Timer 1\n\r");
 800466a:	4831      	ldr	r0, [pc, #196]	; (8004730 <_ZN8pruTimer10startTimerEv+0xd8>)
 800466c:	f00d fbbc 	bl	8011de8 <iprintf>
        __HAL_RCC_TIM1_CLK_ENABLE();
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <_ZN8pruTimer10startTimerEv+0xdc>)
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	4a2e      	ldr	r2, [pc, #184]	; (8004734 <_ZN8pruTimer10startTimerEv+0xdc>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6453      	str	r3, [r2, #68]	; 0x44
 8004680:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <_ZN8pruTimer10startTimerEv+0xdc>)
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB2CLK;
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <_ZN8pruTimer10startTimerEv+0xe0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e019      	b.n	80046c8 <_ZN8pruTimer10startTimerEv+0x70>
    }
    else if (this->timer == TIM2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d114      	bne.n	80046c8 <_ZN8pruTimer10startTimerEv+0x70>
    {
        printf("	power on Timer 2\n\r");
 800469e:	4827      	ldr	r0, [pc, #156]	; (800473c <_ZN8pruTimer10startTimerEv+0xe4>)
 80046a0:	f00d fba2 	bl	8011de8 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	4b22      	ldr	r3, [pc, #136]	; (8004734 <_ZN8pruTimer10startTimerEv+0xdc>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	4a21      	ldr	r2, [pc, #132]	; (8004734 <_ZN8pruTimer10startTimerEv+0xdc>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6413      	str	r3, [r2, #64]	; 0x40
 80046b4:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <_ZN8pruTimer10startTimerEv+0xdc>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <_ZN8pruTimer10startTimerEv+0xe0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	085b      	lsrs	r3, r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	629a      	str	r2, [r3, #40]	; 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	3a01      	subs	r2, #1
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff4a 	bl	80045b0 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 800471c:	4808      	ldr	r0, [pc, #32]	; (8004740 <_ZN8pruTimer10startTimerEv+0xe8>)
 800471e:	f00d fbe9 	bl	8011ef4 <puts>
}
 8004722:	bf00      	nop
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	08013424 	.word	0x08013424
 8004734:	40023800 	.word	0x40023800
 8004738:	20000004 	.word	0x20000004
 800473c:	08013438 	.word	0x08013438
 8004740:	0801344c 	.word	0x0801344c

08004744 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc ff38 	bl	80015c8 <_ZN9InterruptC1Ev>
 8004758:	4a07      	ldr	r2, [pc, #28]	; (8004778 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4619      	mov	r1, r3
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f7fc ff3d 	bl	80015e8 <_ZN9Interrupt8RegisterEiPS_>
}
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	08015234 	.word	0x08015234

0800477c <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff58 	bl	800463e <_ZN8pruTimer9timerTickEv>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800479c:	480d      	ldr	r0, [pc, #52]	; (80047d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800479e:	490e      	ldr	r1, [pc, #56]	; (80047d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80047a0:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047a4:	e002      	b.n	80047ac <LoopCopyDataInit>

080047a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047aa:	3304      	adds	r3, #4

080047ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047b0:	d3f9      	bcc.n	80047a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047b2:	4a0b      	ldr	r2, [pc, #44]	; (80047e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80047b4:	4c0b      	ldr	r4, [pc, #44]	; (80047e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80047b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047b8:	e001      	b.n	80047be <LoopFillZerobss>

080047ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047bc:	3204      	adds	r2, #4

080047be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047c0:	d3fb      	bcc.n	80047ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80047c2:	f7fe fa27 	bl	8002c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047c6:	f00d f9e9 	bl	8011b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047ca:	f7fd fe43 	bl	8002454 <main>
  bx  lr
 80047ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047d0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80047d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047d8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80047dc:	0801540c 	.word	0x0801540c
  ldr r2, =_sbss
 80047e0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80047e4:	20006bb4 	.word	0x20006bb4

080047e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047e8:	e7fe      	b.n	80047e8 <ADC_IRQHandler>
	...

080047ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047f0:	4b0e      	ldr	r3, [pc, #56]	; (800482c <HAL_Init+0x40>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a0d      	ldr	r2, [pc, #52]	; (800482c <HAL_Init+0x40>)
 80047f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_Init+0x40>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0a      	ldr	r2, [pc, #40]	; (800482c <HAL_Init+0x40>)
 8004802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <HAL_Init+0x40>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a07      	ldr	r2, [pc, #28]	; (800482c <HAL_Init+0x40>)
 800480e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004814:	2003      	movs	r0, #3
 8004816:	f000 f947 	bl	8004aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800481a:	200f      	movs	r0, #15
 800481c:	f000 f808 	bl	8004830 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004820:	f7fe f868 	bl	80028f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023c00 	.word	0x40023c00

08004830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_InitTick+0x54>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b12      	ldr	r3, [pc, #72]	; (8004888 <HAL_InitTick+0x58>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	4619      	mov	r1, r3
 8004842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004846:	fbb3 f3f1 	udiv	r3, r3, r1
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f95f 	bl	8004b12 <HAL_SYSTICK_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e00e      	b.n	800487c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b0f      	cmp	r3, #15
 8004862:	d80a      	bhi.n	800487a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004864:	2200      	movs	r2, #0
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	f000 f927 	bl	8004abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004870:	4a06      	ldr	r2, [pc, #24]	; (800488c <HAL_InitTick+0x5c>)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e000      	b.n	800487c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000004 	.word	0x20000004
 8004888:	2000000c 	.word	0x2000000c
 800488c:	20000008 	.word	0x20000008

08004890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_IncTick+0x1c>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_IncTick+0x20>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4413      	add	r3, r2
 80048a0:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <HAL_IncTick+0x20>)
 80048a2:	6013      	str	r3, [r2, #0]
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	20000554 	.word	0x20000554

080048b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return uwTick;
 80048b8:	4b02      	ldr	r3, [pc, #8]	; (80048c4 <HAL_GetTick+0x10>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	20000554 	.word	0x20000554

080048c8 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_GetTick>
 80048d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d005      	beq.n	80048ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <HAL_Delay+0x44>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048ee:	bf00      	nop
 80048f0:	f7ff ffe0 	bl	80048b4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d8f7      	bhi.n	80048f0 <HAL_Delay+0x28>
  {
  }
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	2000000c 	.word	0x2000000c

08004910 <__NVIC_SetPriorityGrouping>:
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <__NVIC_SetPriorityGrouping+0x44>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800492c:	4013      	ands	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800493c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004942:	4a04      	ldr	r2, [pc, #16]	; (8004954 <__NVIC_SetPriorityGrouping+0x44>)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	60d3      	str	r3, [r2, #12]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <__NVIC_GetPriorityGrouping>:
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800495c:	4b04      	ldr	r3, [pc, #16]	; (8004970 <__NVIC_GetPriorityGrouping+0x18>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	0a1b      	lsrs	r3, r3, #8
 8004962:	f003 0307 	and.w	r3, r3, #7
}
 8004966:	4618      	mov	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000ed00 	.word	0xe000ed00

08004974 <__NVIC_EnableIRQ>:
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	2b00      	cmp	r3, #0
 8004984:	db0b      	blt.n	800499e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	f003 021f 	and.w	r2, r3, #31
 800498c:	4906      	ldr	r1, [pc, #24]	; (80049a8 <__NVIC_EnableIRQ+0x34>)
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	2001      	movs	r0, #1
 8004996:	fa00 f202 	lsl.w	r2, r0, r2
 800499a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	e000e100 	.word	0xe000e100

080049ac <__NVIC_SetPriority>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	6039      	str	r1, [r7, #0]
 80049b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	db0a      	blt.n	80049d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	490c      	ldr	r1, [pc, #48]	; (80049f8 <__NVIC_SetPriority+0x4c>)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	0112      	lsls	r2, r2, #4
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	440b      	add	r3, r1
 80049d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049d4:	e00a      	b.n	80049ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	4908      	ldr	r1, [pc, #32]	; (80049fc <__NVIC_SetPriority+0x50>)
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	3b04      	subs	r3, #4
 80049e4:	0112      	lsls	r2, r2, #4
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	440b      	add	r3, r1
 80049ea:	761a      	strb	r2, [r3, #24]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000e100 	.word	0xe000e100
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b089      	sub	sp, #36	; 0x24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f1c3 0307 	rsb	r3, r3, #7
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	bf28      	it	cs
 8004a1e:	2304      	movcs	r3, #4
 8004a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3304      	adds	r3, #4
 8004a26:	2b06      	cmp	r3, #6
 8004a28:	d902      	bls.n	8004a30 <NVIC_EncodePriority+0x30>
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3b03      	subs	r3, #3
 8004a2e:	e000      	b.n	8004a32 <NVIC_EncodePriority+0x32>
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a34:	f04f 32ff 	mov.w	r2, #4294967295
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	401a      	ands	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a48:	f04f 31ff 	mov.w	r1, #4294967295
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a52:	43d9      	mvns	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a58:	4313      	orrs	r3, r2
         );
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3724      	adds	r7, #36	; 0x24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a74:	d301      	bcc.n	8004a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a76:	2301      	movs	r3, #1
 8004a78:	e00f      	b.n	8004a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <SysTick_Config+0x40>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a82:	210f      	movs	r1, #15
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	f7ff ff90 	bl	80049ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <SysTick_Config+0x40>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <SysTick_Config+0x40>)
 8004a94:	2207      	movs	r2, #7
 8004a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	e000e010 	.word	0xe000e010

08004aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ff2d 	bl	8004910 <__NVIC_SetPriorityGrouping>
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad0:	f7ff ff42 	bl	8004958 <__NVIC_GetPriorityGrouping>
 8004ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ff90 	bl	8004a00 <NVIC_EncodePriority>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ff5f 	bl	80049ac <__NVIC_SetPriority>
}
 8004aee:	bf00      	nop
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	4603      	mov	r3, r0
 8004afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff35 	bl	8004974 <__NVIC_EnableIRQ>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff ffa2 	bl	8004a64 <SysTick_Config>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7ff febc 	bl	80048b4 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e099      	b.n	8004c7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b68:	e00f      	b.n	8004b8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b6a:	f7ff fea3 	bl	80048b4 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d908      	bls.n	8004b8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2203      	movs	r2, #3
 8004b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e078      	b.n	8004c7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e8      	bne.n	8004b6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_DMA_Init+0x158>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d107      	bne.n	8004bf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	4313      	orrs	r3, r2
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0307 	bic.w	r3, r3, #7
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d117      	bne.n	8004c4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00e      	beq.n	8004c4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa6d 	bl	8005110 <DMA_CheckFifoParam>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2240      	movs	r2, #64	; 0x40
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e016      	b.n	8004c7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa26 	bl	80050a8 <DMA_CalcBaseAndBitshift>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	223f      	movs	r2, #63	; 0x3f
 8004c66:	409a      	lsls	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	f010803f 	.word	0xf010803f

08004c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_DMA_Start_IT+0x26>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e040      	b.n	8004d30 <HAL_DMA_Start_IT+0xa8>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d12f      	bne.n	8004d22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f9b8 	bl	800504c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce0:	223f      	movs	r2, #63	; 0x3f
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0216 	orr.w	r2, r2, #22
 8004cf6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0208 	orr.w	r2, r2, #8
 8004d0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e005      	b.n	8004d2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d44:	4b92      	ldr	r3, [pc, #584]	; (8004f90 <HAL_DMA_IRQHandler+0x258>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a92      	ldr	r2, [pc, #584]	; (8004f94 <HAL_DMA_IRQHandler+0x25c>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	0a9b      	lsrs	r3, r3, #10
 8004d50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	2208      	movs	r2, #8
 8004d64:	409a      	lsls	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01a      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d90:	2208      	movs	r2, #8
 8004d92:	409a      	lsls	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d012      	beq.n	8004dda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f043 0202 	orr.w	r2, r3, #2
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	2204      	movs	r2, #4
 8004de0:	409a      	lsls	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d012      	beq.n	8004e10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f043 0204 	orr.w	r2, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e14:	2210      	movs	r2, #16
 8004e16:	409a      	lsls	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d043      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d03c      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e32:	2210      	movs	r2, #16
 8004e34:	409a      	lsls	r2, r3
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d018      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d108      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d024      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
 8004e66:	e01f      	b.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01b      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
 8004e78:	e016      	b.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d107      	bne.n	8004e98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0208 	bic.w	r2, r2, #8
 8004e96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	2220      	movs	r2, #32
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 808e 	beq.w	8004fd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8086 	beq.w	8004fd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ece:	2220      	movs	r2, #32
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d136      	bne.n	8004f50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0216 	bic.w	r2, r2, #22
 8004ef0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <HAL_DMA_IRQHandler+0x1da>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0208 	bic.w	r2, r2, #8
 8004f20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f26:	223f      	movs	r2, #63	; 0x3f
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d07d      	beq.n	8005042 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
        }
        return;
 8004f4e:	e078      	b.n	8005042 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01c      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d108      	bne.n	8004f7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d030      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
 8004f7c:	e02b      	b.n	8004fd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d027      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
 8004f8e:	e022      	b.n	8004fd6 <HAL_DMA_IRQHandler+0x29e>
 8004f90:	20000004 	.word	0x20000004
 8004f94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0210 	bic.w	r2, r2, #16
 8004fb4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d032      	beq.n	8005044 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d022      	beq.n	8005030 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2205      	movs	r2, #5
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	3301      	adds	r3, #1
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	429a      	cmp	r2, r3
 800500c:	d307      	bcc.n	800501e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f2      	bne.n	8005002 <HAL_DMA_IRQHandler+0x2ca>
 800501c:	e000      	b.n	8005020 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800501e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4798      	blx	r3
 8005040:	e000      	b.n	8005044 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005042:	bf00      	nop
    }
  }
}
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop

0800504c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005068:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d108      	bne.n	800508c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800508a:	e007      	b.n	800509c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
	...

080050a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	3b10      	subs	r3, #16
 80050b8:	4a13      	ldr	r2, [pc, #76]	; (8005108 <DMA_CalcBaseAndBitshift+0x60>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050c2:	4a12      	ldr	r2, [pc, #72]	; (800510c <DMA_CalcBaseAndBitshift+0x64>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d909      	bls.n	80050ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	1d1a      	adds	r2, r3, #4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	659a      	str	r2, [r3, #88]	; 0x58
 80050e8:	e007      	b.n	80050fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	aaaaaaab 	.word	0xaaaaaaab
 800510c:	08015238 	.word	0x08015238

08005110 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11f      	bne.n	800516a <DMA_CheckFifoParam+0x5a>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d856      	bhi.n	80051de <DMA_CheckFifoParam+0xce>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <DMA_CheckFifoParam+0x28>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	08005149 	.word	0x08005149
 800513c:	0800515b 	.word	0x0800515b
 8005140:	08005149 	.word	0x08005149
 8005144:	080051df 	.word	0x080051df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d046      	beq.n	80051e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005158:	e043      	b.n	80051e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005162:	d140      	bne.n	80051e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005168:	e03d      	b.n	80051e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005172:	d121      	bne.n	80051b8 <DMA_CheckFifoParam+0xa8>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d837      	bhi.n	80051ea <DMA_CheckFifoParam+0xda>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <DMA_CheckFifoParam+0x70>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	08005191 	.word	0x08005191
 8005184:	08005197 	.word	0x08005197
 8005188:	08005191 	.word	0x08005191
 800518c:	080051a9 	.word	0x080051a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
      break;
 8005194:	e030      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d025      	beq.n	80051ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a6:	e022      	b.n	80051ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051b0:	d11f      	bne.n	80051f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051b6:	e01c      	b.n	80051f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d903      	bls.n	80051c6 <DMA_CheckFifoParam+0xb6>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d003      	beq.n	80051cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051c4:	e018      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
      break;
 80051ca:	e015      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00e      	beq.n	80051f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
      break;
 80051dc:	e00b      	b.n	80051f6 <DMA_CheckFifoParam+0xe6>
      break;
 80051de:	bf00      	nop
 80051e0:	e00a      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
      break;
 80051e2:	bf00      	nop
 80051e4:	e008      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
      break;
 80051e6:	bf00      	nop
 80051e8:	e006      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
      break;
 80051ea:	bf00      	nop
 80051ec:	e004      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
      break;
 80051ee:	bf00      	nop
 80051f0:	e002      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80051f2:	bf00      	nop
 80051f4:	e000      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
      break;
 80051f6:	bf00      	nop
    }
  } 
  
  return status; 
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8005214:	4ba3      	ldr	r3, [pc, #652]	; (80054a4 <HAL_ETH_Init+0x2a0>)
 8005216:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e173      	b.n	8005512 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f003 f968 	bl	8008514 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	4b97      	ldr	r3, [pc, #604]	; (80054a8 <HAL_ETH_Init+0x2a4>)
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	4a96      	ldr	r2, [pc, #600]	; (80054a8 <HAL_ETH_Init+0x2a4>)
 800524e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005252:	6453      	str	r3, [r2, #68]	; 0x44
 8005254:	4b94      	ldr	r3, [pc, #592]	; (80054a8 <HAL_ETH_Init+0x2a4>)
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005260:	4b92      	ldr	r3, [pc, #584]	; (80054ac <HAL_ETH_Init+0x2a8>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4a91      	ldr	r2, [pc, #580]	; (80054ac <HAL_ETH_Init+0x2a8>)
 8005266:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800526a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800526c:	4b8f      	ldr	r3, [pc, #572]	; (80054ac <HAL_ETH_Init+0x2a8>)
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	498d      	ldr	r1, [pc, #564]	; (80054ac <HAL_ETH_Init+0x2a8>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005290:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005292:	f7ff fb0f 	bl	80048b4 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8005298:	e011      	b.n	80052be <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800529a:	f7ff fb0b 	bl	80048b4 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80052a8:	d909      	bls.n	80052be <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e129      	b.n	8005512 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e4      	bne.n	800529a <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f023 031c 	bic.w	r3, r3, #28
 80052de:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80052e0:	f001 fe5c 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 80052e4:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	4a71      	ldr	r2, [pc, #452]	; (80054b0 <HAL_ETH_Init+0x2ac>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d908      	bls.n	8005300 <HAL_ETH_Init+0xfc>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4a70      	ldr	r2, [pc, #448]	; (80054b4 <HAL_ETH_Init+0x2b0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d804      	bhi.n	8005300 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f043 0308 	orr.w	r3, r3, #8
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	e01a      	b.n	8005336 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	4a6c      	ldr	r2, [pc, #432]	; (80054b4 <HAL_ETH_Init+0x2b0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d908      	bls.n	800531a <HAL_ETH_Init+0x116>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4a66      	ldr	r2, [pc, #408]	; (80054a4 <HAL_ETH_Init+0x2a0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d204      	bcs.n	800531a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f043 030c 	orr.w	r3, r3, #12
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e00d      	b.n	8005336 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	4a61      	ldr	r2, [pc, #388]	; (80054a4 <HAL_ETH_Init+0x2a0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d303      	bcc.n	800532a <HAL_ETH_Init+0x126>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	4a64      	ldr	r2, [pc, #400]	; (80054b8 <HAL_ETH_Init+0x2b4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d904      	bls.n	8005334 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f043 0304 	orr.w	r3, r3, #4
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	e000      	b.n	8005336 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005334:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800533e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005342:	2100      	movs	r1, #0
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fb92 	bl	8005a6e <HAL_ETH_WritePHYRegister>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8005354:	6939      	ldr	r1, [r7, #16]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fd48 	bl	8005dec <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0d4      	b.n	8005512 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8005368:	20ff      	movs	r0, #255	; 0xff
 800536a:	f7ff faad 	bl	80048c8 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80a2 	beq.w	80054bc <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005378:	f7ff fa9c 	bl	80048b4 <HAL_GetTick>
 800537c:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800537e:	f107 030c 	add.w	r3, r7, #12
 8005382:	461a      	mov	r2, r3
 8005384:	2101      	movs	r1, #1
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fb09 	bl	800599e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800538c:	f7ff fa92 	bl	80048b4 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	; 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d90f      	bls.n	80053be <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80053a2:	6939      	ldr	r1, [r7, #16]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fd21 	bl	8005dec <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0a9      	b.n	8005512 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0da      	beq.n	800537e <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80053c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053cc:	2100      	movs	r1, #0
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb4d 	bl	8005a6e <HAL_ETH_WritePHYRegister>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80053de:	6939      	ldr	r1, [r7, #16]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fd03 	bl	8005dec <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e08f      	b.n	8005512 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80053f2:	f7ff fa5f 	bl	80048b4 <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80053f8:	f107 030c 	add.w	r3, r7, #12
 80053fc:	461a      	mov	r2, r3
 80053fe:	2101      	movs	r1, #1
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 facc 	bl	800599e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8005406:	f7ff fa55 	bl	80048b4 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f241 3288 	movw	r2, #5000	; 0x1388
 8005414:	4293      	cmp	r3, r2
 8005416:	d90f      	bls.n	8005438 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800541c:	6939      	ldr	r1, [r7, #16]
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fce4 	bl	8005dec <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e06c      	b.n	8005512 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0da      	beq.n	80053f8 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005442:	f107 030c 	add.w	r3, r7, #12
 8005446:	461a      	mov	r2, r3
 8005448:	2110      	movs	r1, #16
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 faa7 	bl	800599e <HAL_ETH_ReadPHYRegister>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800545a:	6939      	ldr	r1, [r7, #16]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fcc5 	bl	8005dec <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e051      	b.n	8005512 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	e002      	b.n	8005488 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	e032      	b.n	8005500 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054a0:	609a      	str	r2, [r3, #8]
 80054a2:	e02d      	b.n	8005500 <HAL_ETH_Init+0x2fc>
 80054a4:	03938700 	.word	0x03938700
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40013800 	.word	0x40013800
 80054b0:	01312cff 	.word	0x01312cff
 80054b4:	02160ebf 	.word	0x02160ebf
 80054b8:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	08db      	lsrs	r3, r3, #3
 80054c2:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80054cc:	4313      	orrs	r3, r2
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	2100      	movs	r1, #0
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 faca 	bl	8005a6e <HAL_ETH_WritePHYRegister>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00b      	beq.n	80054f8 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80054e4:	6939      	ldr	r1, [r7, #16]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fc80 	bl	8005dec <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e00c      	b.n	8005512 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80054f8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80054fc:	f7ff f9e4 	bl	80048c8 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005500:	6939      	ldr	r1, [r7, #16]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fc72 	bl	8005dec <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop

0800551c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_ETH_DMATxDescListInit+0x20>
 8005538:	2302      	movs	r3, #2
 800553a:	e052      	b.n	80055e2 <HAL_ETH_DMATxDescListInit+0xc6>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e030      	b.n	80055ba <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	015b      	lsls	r3, r3, #5
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	4413      	add	r3, r2
 8005560:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005568:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	461a      	mov	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d105      	bne.n	8005592 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	3b01      	subs	r3, #1
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	429a      	cmp	r2, r3
 800559a:	d208      	bcs.n	80055ae <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	3301      	adds	r3, #1
 80055a0:	015b      	lsls	r3, r3, #5
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	461a      	mov	r2, r3
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	60da      	str	r2, [r3, #12]
 80055ac:	e002      	b.n	80055b4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	3301      	adds	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d3ca      	bcc.n	8005558 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055cc:	3310      	adds	r3, #16
 80055ce:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_ETH_DMARxDescListInit+0x20>
 8005608:	2302      	movs	r3, #2
 800560a:	e056      	b.n	80056ba <HAL_ETH_DMARxDescListInit+0xce>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e034      	b.n	8005692 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	015b      	lsls	r3, r3, #5
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	4413      	add	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005638:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005640:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4413      	add	r3, r2
 8005650:	461a      	mov	r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d105      	bne.n	800566a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	3b01      	subs	r3, #1
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	429a      	cmp	r2, r3
 8005672:	d208      	bcs.n	8005686 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	3301      	adds	r3, #1
 8005678:	015b      	lsls	r3, r3, #5
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4413      	add	r3, r2
 800567e:	461a      	mov	r2, r3
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	e002      	b.n	800568c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3301      	adds	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d3c6      	bcc.n	8005628 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a4:	330c      	adds	r3, #12
 80056a6:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_ETH_TransmitFrame+0x24>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0cd      	b.n	8005884 <HAL_ETH_TransmitFrame+0x1c0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0b8      	b.n	8005884 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	da09      	bge.n	8005730 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2212      	movs	r2, #18
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0a9      	b.n	8005884 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005736:	4293      	cmp	r3, r2
 8005738:	d915      	bls.n	8005766 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	4a54      	ldr	r2, [pc, #336]	; (8005890 <HAL_ETH_TransmitFrame+0x1cc>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0a9b      	lsrs	r3, r3, #10
 8005744:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	4b51      	ldr	r3, [pc, #324]	; (8005890 <HAL_ETH_TransmitFrame+0x1cc>)
 800574a:	fba3 1302 	umull	r1, r3, r3, r2
 800574e:	0a9b      	lsrs	r3, r3, #10
 8005750:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	3301      	adds	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e001      	b.n	800576a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8005766:	2301      	movs	r3, #1
 8005768:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11c      	bne.n	80057aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800577e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800578a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800579a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	461a      	mov	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80057a8:	e04b      	b.n	8005842 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	e044      	b.n	800583a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057be:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057d4:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80057de:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d116      	bne.n	8005818 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80057f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	4a25      	ldr	r2, [pc, #148]	; (8005894 <HAL_ETH_TransmitFrame+0x1d0>)
 80057fe:	fb02 f203 	mul.w	r2, r2, r3
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	4413      	add	r3, r2
 8005806:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800580a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005816:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005826:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3301      	adds	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	429a      	cmp	r2, r3
 8005840:	d3b6      	bcc.n	80057b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584a:	3314      	adds	r3, #20
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585e:	3314      	adds	r3, #20
 8005860:	2204      	movs	r2, #4
 8005862:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586c:	3304      	adds	r3, #4
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	ac02b00b 	.word	0xac02b00b
 8005894:	fffffa0c 	.word	0xfffffa0c

08005898 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_ETH_GetReceivedFrame+0x1a>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e070      	b.n	8005994 <HAL_ETH_GetReceivedFrame+0xfc>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db5a      	blt.n	8005982 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d030      	beq.n	800593c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d103      	bne.n	80058f4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005908:	3b04      	subs	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	461a      	mov	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	e02b      	b.n	8005994 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005946:	2b00      	cmp	r3, #0
 8005948:	d010      	beq.n	800596c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	461a      	mov	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
 800596a:	e00a      	b.n	8005982 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	461a      	mov	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
}
 8005994:	4618      	mov	r0, r3
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	460b      	mov	r3, r1
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b82      	cmp	r3, #130	; 0x82
 80059be:	d101      	bne.n	80059c4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
 80059c2:	e050      	b.n	8005a66 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2282      	movs	r2, #130	; 0x82
 80059c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 031c 	and.w	r3, r3, #28
 80059da:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8a1b      	ldrh	r3, [r3, #16]
 80059e0:	02db      	lsls	r3, r3, #11
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80059ea:	897b      	ldrh	r3, [r7, #10]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0302 	bic.w	r3, r3, #2
 80059fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a10:	f7fe ff50 	bl	80048b4 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005a16:	e015      	b.n	8005a44 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005a18:	f7fe ff4c 	bl	80048b4 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a26:	d309      	bcc.n	8005a3c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e014      	b.n	8005a66 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e4      	bne.n	8005a18 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	460b      	mov	r3, r1
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b42      	cmp	r3, #66	; 0x42
 8005a8e:	d101      	bne.n	8005a94 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
 8005a92:	e04e      	b.n	8005b32 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2242      	movs	r2, #66	; 0x42
 8005a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f003 031c 	and.w	r3, r3, #28
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8a1b      	ldrh	r3, [r3, #16]
 8005ab0:	02db      	lsls	r3, r3, #11
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005aba:	897b      	ldrh	r3, [r7, #10]
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aea:	f7fe fee3 	bl	80048b4 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005af0:	e015      	b.n	8005b1e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005af2:	f7fe fedf 	bl	80048b4 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b00:	d309      	bcc.n	8005b16 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e00d      	b.n	8005b32 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e4      	bne.n	8005af2 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_ETH_Start+0x16>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e01f      	b.n	8005b90 <HAL_ETH_Start+0x56>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb43 	bl	80061ec <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fb7a 	bl	8006260 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fc0d 	bl	800638c <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fbae 	bl	80062d4 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fbd9 	bl	8006330 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_ETH_Stop+0x16>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e01f      	b.n	8005bee <HAL_ETH_Stop+0x56>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb9f 	bl	8006302 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fbca 	bl	800635e <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fb65 	bl	800629a <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fbdb 	bl	800638c <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fb25 	bl	8006226 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_ETH_ConfigMAC+0x1c>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e0e4      	b.n	8005dde <HAL_ETH_ConfigMAC+0x1e6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80b1 	beq.w	8005d8e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4b6c      	ldr	r3, [pc, #432]	; (8005de8 <HAL_ETH_ConfigMAC+0x1f0>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8005c44:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8005c4a:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8005c50:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8005c56:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8005c5c:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8005c62:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8005c68:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8005c6e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8005c74:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8005c7a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8005c80:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8005c86:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	f7fe fe12 	bl	80048c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8005cb4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8005cba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005cc0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8005cc6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005ccc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8005cd2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005cde:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8005ce0:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cea:	2001      	movs	r0, #1
 8005cec:	f7fe fdec 	bl	80048c8 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d00:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d0a:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d22:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005d28:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005d2e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005d34:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8005d3a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005d40:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d58:	2001      	movs	r0, #1
 8005d5a:	f7fe fdb5 	bl	80048c8 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f7fe fda2 	bl	80048c8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	61da      	str	r2, [r3, #28]
 8005d8c:	e01e      	b.n	8005dcc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005d9c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	f7fe fd82 	bl	80048c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	ff20810f 	.word	0xff20810f

08005dec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b0b0      	sub	sp, #192	; 0xc0
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e08:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e10:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e36:	663b      	str	r3, [r7, #96]	; 0x60
 8005e38:	e001      	b.n	8005e3e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e42:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005e58:	2340      	movs	r3, #64	; 0x40
 8005e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005ec0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ec4:	4bac      	ldr	r3, [pc, #688]	; (8006178 <ETH_MACDMAConfig+0x38c>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8005ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8005ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8005ed0:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8005ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8005ed4:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8005ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8005ed8:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8005ede:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8005ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8005ee2:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8005ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8005ee6:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8005eec:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8005eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8005ef0:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8005ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8005ef4:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8005ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8005ef8:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8005efc:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8005efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8005f00:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8005f02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005f14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f20:	2001      	movs	r0, #1
 8005f22:	f7fe fcd1 	bl	80048c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005f2e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8005f30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8005f34:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005f38:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8005f3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005f3e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8005f44:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005f4a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005f50:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005f54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005f5c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8005f5e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	f7fe fcac 	bl	80048c8 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005f78:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f82:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005f8c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005f98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005f9c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8005fa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005faa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005fac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8005fb0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005fb6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8005fb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005fbc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8005fc2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8005fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005fc8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8005fca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005fdc:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f7fe fc6d 	bl	80048c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ff6:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8005ff8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8005ffc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006012:	2001      	movs	r0, #1
 8006014:	f7fe fc58 	bl	80048c8 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006020:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8006026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800602a:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8006030:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006034:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800603e:	2300      	movs	r3, #0
 8006040:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006042:	2300      	movs	r3, #0
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8006046:	2304      	movs	r3, #4
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800604a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8006050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006054:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800605c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8006062:	2380      	movs	r3, #128	; 0x80
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8006066:	2300      	movs	r3, #0
 8006068:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800606a:	2300      	movs	r3, #0
 800606c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006076:	3318      	adds	r3, #24
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800607e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006082:	4b3e      	ldr	r3, [pc, #248]	; (800617c <ETH_MACDMAConfig+0x390>)
 8006084:	4013      	ands	r3, r2
 8006086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800608a:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800608c:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800608e:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8006090:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8006092:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8006094:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8006096:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8006098:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 800609a:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800609c:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800609e:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 80060a0:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 80060a2:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 80060a6:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 80060aa:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80060ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060be:	3318      	adds	r3, #24
 80060c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80060c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ce:	3318      	adds	r3, #24
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80060d6:	2001      	movs	r0, #1
 80060d8:	f7fe fbf6 	bl	80048c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e4:	3318      	adds	r3, #24
 80060e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80060ea:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80060ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80060f0:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80060f4:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80060f8:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80060fc:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80060fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006100:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8006102:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8006104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8006106:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006114:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006124:	2001      	movs	r0, #1
 8006126:	f7fe fbcf 	bl	80048c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006132:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006136:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10f      	bne.n	8006160 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006148:	331c      	adds	r3, #28
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615c:	331c      	adds	r3, #28
 800615e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	461a      	mov	r2, r3
 8006166:	2100      	movs	r1, #0
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f809 	bl	8006180 <ETH_MACAddressConfig>
}
 800616e:	bf00      	nop
 8006170:	37c0      	adds	r7, #192	; 0xc0
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	ff20810f 	.word	0xff20810f
 800617c:	f8de3f23 	.word	0xf8de3f23

08006180 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3305      	adds	r3, #5
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	3204      	adds	r2, #4
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <ETH_MACAddressConfig+0x64>)
 80061a2:	4413      	add	r3, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3303      	adds	r3, #3
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	061a      	lsls	r2, r3, #24
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3302      	adds	r3, #2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3301      	adds	r3, #1
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	4313      	orrs	r3, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	7812      	ldrb	r2, [r2, #0]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <ETH_MACAddressConfig+0x68>)
 80061d2:	4413      	add	r3, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	6013      	str	r3, [r2, #0]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr
 80061e4:	40028040 	.word	0x40028040
 80061e8:	40028044 	.word	0x40028044

080061ec <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0208 	orr.w	r2, r2, #8
 8006206:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8006210:	2001      	movs	r0, #1
 8006212:	f000 f8e5 	bl	80063e0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0208 	bic.w	r2, r2, #8
 8006240:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800624a:	2001      	movs	r0, #1
 800624c:	f000 f8c8 	bl	80063e0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]
}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0204 	orr.w	r2, r2, #4
 800627a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8006284:	2001      	movs	r0, #1
 8006286:	f000 f8ab 	bl	80063e0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]
}
 8006292:	bf00      	nop
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0204 	bic.w	r2, r2, #4
 80062b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80062be:	2001      	movs	r0, #1
 80062c0:	f000 f88e 	bl	80063e0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	601a      	str	r2, [r3, #0]
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e4:	3318      	adds	r3, #24
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f4:	3318      	adds	r3, #24
 80062f6:	601a      	str	r2, [r3, #0]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006312:	3318      	adds	r3, #24
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800631e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006322:	3318      	adds	r3, #24
 8006324:	601a      	str	r2, [r3, #0]
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006340:	3318      	adds	r3, #24
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0202 	orr.w	r2, r2, #2
 800634c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006350:	3318      	adds	r3, #24
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636e:	3318      	adds	r3, #24
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0202 	bic.w	r2, r2, #2
 800637a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637e:	3318      	adds	r3, #24
 8006380:	601a      	str	r2, [r3, #0]
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr

0800638c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a0:	3318      	adds	r3, #24
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80063ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b0:	3318      	adds	r3, #24
 80063b2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063bc:	3318      	adds	r3, #24
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80063c2:	2001      	movs	r0, #1
 80063c4:	f000 f80c 	bl	80063e0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d2:	3318      	adds	r3, #24
 80063d4:	601a      	str	r2, [r3, #0]
}
 80063d6:	bf00      	nop
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <ETH_Delay+0x34>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <ETH_Delay+0x38>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0a5b      	lsrs	r3, r3, #9
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80063fc:	bf00      	nop
  }
  while (Delay --);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1e5a      	subs	r2, r3, #1
 8006402:	60fa      	str	r2, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1f9      	bne.n	80063fc <ETH_Delay+0x1c>
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr
 8006414:	20000004 	.word	0x20000004
 8006418:	10624dd3 	.word	0x10624dd3

0800641c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800642a:	e16f      	b.n	800670c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	2101      	movs	r1, #1
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	4013      	ands	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8161 	beq.w	8006706 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d005      	beq.n	800645c <HAL_GPIO_Init+0x40>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d130      	bne.n	80064be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	2203      	movs	r2, #3
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	43db      	mvns	r3, r3
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4013      	ands	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006492:	2201      	movs	r2, #1
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4013      	ands	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	f003 0201 	and.w	r2, r3, #1
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d017      	beq.n	80064fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	2203      	movs	r2, #3
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4013      	ands	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d123      	bne.n	800654e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	08da      	lsrs	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3208      	adds	r2, #8
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	220f      	movs	r2, #15
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	43db      	mvns	r3, r3
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4013      	ands	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	08da      	lsrs	r2, r3, #3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3208      	adds	r2, #8
 8006548:	6939      	ldr	r1, [r7, #16]
 800654a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	2203      	movs	r2, #3
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4013      	ands	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0203 	and.w	r2, r3, #3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 80bb 	beq.w	8006706 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006590:	2300      	movs	r3, #0
 8006592:	60bb      	str	r3, [r7, #8]
 8006594:	4b64      	ldr	r3, [pc, #400]	; (8006728 <HAL_GPIO_Init+0x30c>)
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	4a63      	ldr	r2, [pc, #396]	; (8006728 <HAL_GPIO_Init+0x30c>)
 800659a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800659e:	6453      	str	r3, [r2, #68]	; 0x44
 80065a0:	4b61      	ldr	r3, [pc, #388]	; (8006728 <HAL_GPIO_Init+0x30c>)
 80065a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80065ac:	4a5f      	ldr	r2, [pc, #380]	; (800672c <HAL_GPIO_Init+0x310>)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	089b      	lsrs	r3, r3, #2
 80065b2:	3302      	adds	r3, #2
 80065b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	220f      	movs	r2, #15
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	43db      	mvns	r3, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4013      	ands	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a57      	ldr	r2, [pc, #348]	; (8006730 <HAL_GPIO_Init+0x314>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d031      	beq.n	800663c <HAL_GPIO_Init+0x220>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a56      	ldr	r2, [pc, #344]	; (8006734 <HAL_GPIO_Init+0x318>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d02b      	beq.n	8006638 <HAL_GPIO_Init+0x21c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a55      	ldr	r2, [pc, #340]	; (8006738 <HAL_GPIO_Init+0x31c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d025      	beq.n	8006634 <HAL_GPIO_Init+0x218>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a54      	ldr	r2, [pc, #336]	; (800673c <HAL_GPIO_Init+0x320>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01f      	beq.n	8006630 <HAL_GPIO_Init+0x214>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a53      	ldr	r2, [pc, #332]	; (8006740 <HAL_GPIO_Init+0x324>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d019      	beq.n	800662c <HAL_GPIO_Init+0x210>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a52      	ldr	r2, [pc, #328]	; (8006744 <HAL_GPIO_Init+0x328>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <HAL_GPIO_Init+0x20c>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a51      	ldr	r2, [pc, #324]	; (8006748 <HAL_GPIO_Init+0x32c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00d      	beq.n	8006624 <HAL_GPIO_Init+0x208>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a50      	ldr	r2, [pc, #320]	; (800674c <HAL_GPIO_Init+0x330>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <HAL_GPIO_Init+0x204>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a4f      	ldr	r2, [pc, #316]	; (8006750 <HAL_GPIO_Init+0x334>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d101      	bne.n	800661c <HAL_GPIO_Init+0x200>
 8006618:	2308      	movs	r3, #8
 800661a:	e010      	b.n	800663e <HAL_GPIO_Init+0x222>
 800661c:	2309      	movs	r3, #9
 800661e:	e00e      	b.n	800663e <HAL_GPIO_Init+0x222>
 8006620:	2307      	movs	r3, #7
 8006622:	e00c      	b.n	800663e <HAL_GPIO_Init+0x222>
 8006624:	2306      	movs	r3, #6
 8006626:	e00a      	b.n	800663e <HAL_GPIO_Init+0x222>
 8006628:	2305      	movs	r3, #5
 800662a:	e008      	b.n	800663e <HAL_GPIO_Init+0x222>
 800662c:	2304      	movs	r3, #4
 800662e:	e006      	b.n	800663e <HAL_GPIO_Init+0x222>
 8006630:	2303      	movs	r3, #3
 8006632:	e004      	b.n	800663e <HAL_GPIO_Init+0x222>
 8006634:	2302      	movs	r3, #2
 8006636:	e002      	b.n	800663e <HAL_GPIO_Init+0x222>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <HAL_GPIO_Init+0x222>
 800663c:	2300      	movs	r3, #0
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	f002 0203 	and.w	r2, r2, #3
 8006644:	0092      	lsls	r2, r2, #2
 8006646:	4093      	lsls	r3, r2
 8006648:	461a      	mov	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006650:	4936      	ldr	r1, [pc, #216]	; (800672c <HAL_GPIO_Init+0x310>)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	3302      	adds	r3, #2
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800665e:	4b3d      	ldr	r3, [pc, #244]	; (8006754 <HAL_GPIO_Init+0x338>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	43db      	mvns	r3, r3
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4013      	ands	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006682:	4a34      	ldr	r2, [pc, #208]	; (8006754 <HAL_GPIO_Init+0x338>)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006688:	4b32      	ldr	r3, [pc, #200]	; (8006754 <HAL_GPIO_Init+0x338>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	43db      	mvns	r3, r3
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4013      	ands	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80066ac:	4a29      	ldr	r2, [pc, #164]	; (8006754 <HAL_GPIO_Init+0x338>)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066b2:	4b28      	ldr	r3, [pc, #160]	; (8006754 <HAL_GPIO_Init+0x338>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	43db      	mvns	r3, r3
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4013      	ands	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80066d6:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <HAL_GPIO_Init+0x338>)
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <HAL_GPIO_Init+0x338>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4013      	ands	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006700:	4a14      	ldr	r2, [pc, #80]	; (8006754 <HAL_GPIO_Init+0x338>)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	3301      	adds	r3, #1
 800670a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	fa22 f303 	lsr.w	r3, r2, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	f47f ae88 	bne.w	800642c <HAL_GPIO_Init+0x10>
  }
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr
 8006728:	40023800 	.word	0x40023800
 800672c:	40013800 	.word	0x40013800
 8006730:	40020000 	.word	0x40020000
 8006734:	40020400 	.word	0x40020400
 8006738:	40020800 	.word	0x40020800
 800673c:	40020c00 	.word	0x40020c00
 8006740:	40021000 	.word	0x40021000
 8006744:	40021400 	.word	0x40021400
 8006748:	40021800 	.word	0x40021800
 800674c:	40021c00 	.word	0x40021c00
 8006750:	40022000 	.word	0x40022000
 8006754:	40013c00 	.word	0x40013c00

08006758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	887b      	ldrh	r3, [r7, #2]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
 8006774:	e001      	b.n	800677a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr

08006786 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	807b      	strh	r3, [r7, #2]
 8006792:	4613      	mov	r3, r2
 8006794:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006796:	787b      	ldrb	r3, [r7, #1]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800679c:	887a      	ldrh	r2, [r7, #2]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067a2:	e003      	b.n	80067ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	041a      	lsls	r2, r3, #16
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	619a      	str	r2, [r3, #24]
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e237      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d050      	beq.n	8006878 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067d6:	4ba3      	ldr	r3, [pc, #652]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d00c      	beq.n	80067fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067e2:	4ba0      	ldr	r3, [pc, #640]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d112      	bne.n	8006814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ee:	4b9d      	ldr	r3, [pc, #628]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067fa:	d10b      	bne.n	8006814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067fc:	4b99      	ldr	r3, [pc, #612]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d036      	beq.n	8006876 <HAL_RCC_OscConfig+0xbe>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d132      	bne.n	8006876 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e212      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	4b93      	ldr	r3, [pc, #588]	; (8006a68 <HAL_RCC_OscConfig+0x2b0>)
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d013      	beq.n	800684e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006826:	f7fe f845 	bl	80048b4 <HAL_GetTick>
 800682a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800682e:	f7fe f841 	bl	80048b4 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b64      	cmp	r3, #100	; 0x64
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e1fc      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006840:	4b88      	ldr	r3, [pc, #544]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0f0      	beq.n	800682e <HAL_RCC_OscConfig+0x76>
 800684c:	e014      	b.n	8006878 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800684e:	f7fe f831 	bl	80048b4 <HAL_GetTick>
 8006852:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006854:	e008      	b.n	8006868 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006856:	f7fe f82d 	bl	80048b4 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b64      	cmp	r3, #100	; 0x64
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e1e8      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006868:	4b7e      	ldr	r3, [pc, #504]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1f0      	bne.n	8006856 <HAL_RCC_OscConfig+0x9e>
 8006874:	e000      	b.n	8006878 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006876:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d077      	beq.n	8006974 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006884:	4b77      	ldr	r3, [pc, #476]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 030c 	and.w	r3, r3, #12
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006890:	4b74      	ldr	r3, [pc, #464]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006898:	2b08      	cmp	r3, #8
 800689a:	d126      	bne.n	80068ea <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800689c:	4b71      	ldr	r3, [pc, #452]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d120      	bne.n	80068ea <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068a8:	4b6e      	ldr	r3, [pc, #440]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCC_OscConfig+0x108>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d001      	beq.n	80068c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e1bc      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c0:	4b68      	ldr	r3, [pc, #416]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	21f8      	movs	r1, #248	; 0xf8
 80068ce:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d0:	69b9      	ldr	r1, [r7, #24]
 80068d2:	fa91 f1a1 	rbit	r1, r1
 80068d6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80068d8:	6979      	ldr	r1, [r7, #20]
 80068da:	fab1 f181 	clz	r1, r1
 80068de:	b2c9      	uxtb	r1, r1
 80068e0:	408b      	lsls	r3, r1
 80068e2:	4960      	ldr	r1, [pc, #384]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068e8:	e044      	b.n	8006974 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d02a      	beq.n	8006948 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068f2:	4b5e      	ldr	r3, [pc, #376]	; (8006a6c <HAL_RCC_OscConfig+0x2b4>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f8:	f7fd ffdc 	bl	80048b4 <HAL_GetTick>
 80068fc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006900:	f7fd ffd8 	bl	80048b4 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e193      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006912:	4b54      	ldr	r3, [pc, #336]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f0      	beq.n	8006900 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800691e:	4b51      	ldr	r3, [pc, #324]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	21f8      	movs	r1, #248	; 0xf8
 800692c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692e:	6939      	ldr	r1, [r7, #16]
 8006930:	fa91 f1a1 	rbit	r1, r1
 8006934:	60f9      	str	r1, [r7, #12]
  return result;
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	fab1 f181 	clz	r1, r1
 800693c:	b2c9      	uxtb	r1, r1
 800693e:	408b      	lsls	r3, r1
 8006940:	4948      	ldr	r1, [pc, #288]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]
 8006946:	e015      	b.n	8006974 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006948:	4b48      	ldr	r3, [pc, #288]	; (8006a6c <HAL_RCC_OscConfig+0x2b4>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694e:	f7fd ffb1 	bl	80048b4 <HAL_GetTick>
 8006952:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006956:	f7fd ffad 	bl	80048b4 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e168      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006968:	4b3e      	ldr	r3, [pc, #248]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1f0      	bne.n	8006956 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0308 	and.w	r3, r3, #8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d030      	beq.n	80069e2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d016      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006988:	4b39      	ldr	r3, [pc, #228]	; (8006a70 <HAL_RCC_OscConfig+0x2b8>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800698e:	f7fd ff91 	bl	80048b4 <HAL_GetTick>
 8006992:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006996:	f7fd ff8d 	bl	80048b4 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e148      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069a8:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80069aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0f0      	beq.n	8006996 <HAL_RCC_OscConfig+0x1de>
 80069b4:	e015      	b.n	80069e2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069b6:	4b2e      	ldr	r3, [pc, #184]	; (8006a70 <HAL_RCC_OscConfig+0x2b8>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069bc:	f7fd ff7a 	bl	80048b4 <HAL_GetTick>
 80069c0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069c4:	f7fd ff76 	bl	80048b4 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e131      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d6:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 8088 	beq.w	8006b00 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069f0:	2300      	movs	r3, #0
 80069f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f6:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d110      	bne.n	8006a24 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a10:	6413      	str	r3, [r2, #64]	; 0x40
 8006a12:	4b14      	ldr	r3, [pc, #80]	; (8006a64 <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	60bb      	str	r3, [r7, #8]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a24:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <HAL_RCC_OscConfig+0x2bc>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <HAL_RCC_OscConfig+0x2bc>)
 8006a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a30:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <HAL_RCC_OscConfig+0x2bc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d123      	bne.n	8006a84 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <HAL_RCC_OscConfig+0x2bc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a0c      	ldr	r2, [pc, #48]	; (8006a74 <HAL_RCC_OscConfig+0x2bc>)
 8006a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a48:	f7fd ff34 	bl	80048b4 <HAL_GetTick>
 8006a4c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4e:	e013      	b.n	8006a78 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a50:	f7fd ff30 	bl	80048b4 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d90c      	bls.n	8006a78 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e0eb      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
 8006a62:	bf00      	nop
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40023802 	.word	0x40023802
 8006a6c:	42470000 	.word	0x42470000
 8006a70:	42470e80 	.word	0x42470e80
 8006a74:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a78:	4b72      	ldr	r3, [pc, #456]	; (8006c44 <HAL_RCC_OscConfig+0x48c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0e5      	beq.n	8006a50 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	4b6f      	ldr	r3, [pc, #444]	; (8006c48 <HAL_RCC_OscConfig+0x490>)
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d015      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a96:	f7fd ff0d 	bl	80048b4 <HAL_GetTick>
 8006a9a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9c:	e00a      	b.n	8006ab4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a9e:	f7fd ff09 	bl	80048b4 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e0c2      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab4:	4b65      	ldr	r3, [pc, #404]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0ee      	beq.n	8006a9e <HAL_RCC_OscConfig+0x2e6>
 8006ac0:	e014      	b.n	8006aec <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ac2:	f7fd fef7 	bl	80048b4 <HAL_GetTick>
 8006ac6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac8:	e00a      	b.n	8006ae0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aca:	f7fd fef3 	bl	80048b4 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e0ac      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ae0:	4b5a      	ldr	r3, [pc, #360]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1ee      	bne.n	8006aca <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d105      	bne.n	8006b00 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006af4:	4b55      	ldr	r3, [pc, #340]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	4a54      	ldr	r2, [pc, #336]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8097 	beq.w	8006c38 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b0a:	4b50      	ldr	r3, [pc, #320]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 030c 	and.w	r3, r3, #12
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d061      	beq.n	8006bda <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d146      	bne.n	8006bac <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b1e:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <HAL_RCC_OscConfig+0x498>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b24:	f7fd fec6 	bl	80048b4 <HAL_GetTick>
 8006b28:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b2c:	f7fd fec2 	bl	80048b4 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b64      	cmp	r3, #100	; 0x64
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e07d      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b3e:	4b43      	ldr	r3, [pc, #268]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b4a:	4b40      	ldr	r3, [pc, #256]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	4b41      	ldr	r3, [pc, #260]	; (8006c54 <HAL_RCC_OscConfig+0x49c>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	69d1      	ldr	r1, [r2, #28]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6a12      	ldr	r2, [r2, #32]
 8006b5a:	4311      	orrs	r1, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b60:	0192      	lsls	r2, r2, #6
 8006b62:	4311      	orrs	r1, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b68:	0612      	lsls	r2, r2, #24
 8006b6a:	4311      	orrs	r1, r2
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006b70:	0852      	lsrs	r2, r2, #1
 8006b72:	3a01      	subs	r2, #1
 8006b74:	0412      	lsls	r2, r2, #16
 8006b76:	430a      	orrs	r2, r1
 8006b78:	4934      	ldr	r1, [pc, #208]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b7e:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <HAL_RCC_OscConfig+0x498>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b84:	f7fd fe96 	bl	80048b4 <HAL_GetTick>
 8006b88:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b8c:	f7fd fe92 	bl	80048b4 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b64      	cmp	r3, #100	; 0x64
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e04d      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b9e:	4b2b      	ldr	r3, [pc, #172]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCC_OscConfig+0x3d4>
 8006baa:	e045      	b.n	8006c38 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <HAL_RCC_OscConfig+0x498>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb2:	f7fd fe7f 	bl	80048b4 <HAL_GetTick>
 8006bb6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bba:	f7fd fe7b 	bl	80048b4 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b64      	cmp	r3, #100	; 0x64
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e036      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bcc:	4b1f      	ldr	r3, [pc, #124]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1f0      	bne.n	8006bba <HAL_RCC_OscConfig+0x402>
 8006bd8:	e02e      	b.n	8006c38 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e029      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8006be6:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <HAL_RCC_OscConfig+0x494>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d11c      	bne.n	8006c34 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d115      	bne.n	8006c34 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	099b      	lsrs	r3, r3, #6
 8006c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d10d      	bne.n	8006c34 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d106      	bne.n	8006c34 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e000      	b.n	8006c3a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3728      	adds	r7, #40	; 0x28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40007000 	.word	0x40007000
 8006c48:	40023870 	.word	0x40023870
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	42470060 	.word	0x42470060
 8006c54:	f0bc8000 	.word	0xf0bc8000

08006c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0d2      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b6b      	ldr	r3, [pc, #428]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d90c      	bls.n	8006c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b68      	ldr	r3, [pc, #416]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b66      	ldr	r3, [pc, #408]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0be      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cac:	4b5c      	ldr	r3, [pc, #368]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4a5b      	ldr	r2, [pc, #364]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8006cc4:	4b56      	ldr	r3, [pc, #344]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4a55      	ldr	r2, [pc, #340]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd0:	4b53      	ldr	r3, [pc, #332]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	4950      	ldr	r1, [pc, #320]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d040      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d107      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	4b4a      	ldr	r3, [pc, #296]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d115      	bne.n	8006d2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e085      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d107      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0e:	4b44      	ldr	r3, [pc, #272]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e079      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1e:	4b40      	ldr	r3, [pc, #256]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e071      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d2e:	4b3c      	ldr	r3, [pc, #240]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f023 0203 	bic.w	r2, r3, #3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	4939      	ldr	r1, [pc, #228]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d40:	f7fd fdb8 	bl	80048b4 <HAL_GetTick>
 8006d44:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d46:	e00a      	b.n	8006d5e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d48:	f7fd fdb4 	bl	80048b4 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e059      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d5e:	4b30      	ldr	r3, [pc, #192]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 020c 	and.w	r2, r3, #12
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d1eb      	bne.n	8006d48 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d70:	4b2a      	ldr	r3, [pc, #168]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d20c      	bcs.n	8006d98 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7e:	4b27      	ldr	r3, [pc, #156]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d86:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d001      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e03c      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d008      	beq.n	8006db6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da4:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	491b      	ldr	r1, [pc, #108]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dc2:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4913      	ldr	r1, [pc, #76]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006dd6:	f000 f82b 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8006dda:	4601      	mov	r1, r0
 8006ddc:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006de4:	22f0      	movs	r2, #240	; 0xf0
 8006de6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	fa92 f2a2 	rbit	r2, r2
 8006dee:	60fa      	str	r2, [r7, #12]
  return result;
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	fab2 f282 	clz	r2, r2
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	40d3      	lsrs	r3, r2
 8006dfa:	4a0a      	ldr	r2, [pc, #40]	; (8006e24 <HAL_RCC_ClockConfig+0x1cc>)
 8006dfc:	5cd3      	ldrb	r3, [r2, r3]
 8006dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8006e02:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <HAL_RCC_ClockConfig+0x1d0>)
 8006e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <HAL_RCC_ClockConfig+0x1d4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fd fd10 	bl	8004830 <HAL_InitTick>

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	40023c00 	.word	0x40023c00
 8006e20:	40023800 	.word	0x40023800
 8006e24:	08015130 	.word	0x08015130
 8006e28:	20000004 	.word	0x20000004
 8006e2c:	20000008 	.word	0x20000008

08006e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e30:	b5b0      	push	{r4, r5, r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e36:	2100      	movs	r1, #0
 8006e38:	6079      	str	r1, [r7, #4]
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	60f9      	str	r1, [r7, #12]
 8006e3e:	2100      	movs	r1, #0
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e42:	2100      	movs	r1, #0
 8006e44:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e46:	4952      	ldr	r1, [pc, #328]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e48:	6889      	ldr	r1, [r1, #8]
 8006e4a:	f001 010c 	and.w	r1, r1, #12
 8006e4e:	2908      	cmp	r1, #8
 8006e50:	d00d      	beq.n	8006e6e <HAL_RCC_GetSysClockFreq+0x3e>
 8006e52:	2908      	cmp	r1, #8
 8006e54:	f200 8094 	bhi.w	8006f80 <HAL_RCC_GetSysClockFreq+0x150>
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_RCC_GetSysClockFreq+0x32>
 8006e5c:	2904      	cmp	r1, #4
 8006e5e:	d003      	beq.n	8006e68 <HAL_RCC_GetSysClockFreq+0x38>
 8006e60:	e08e      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e62:	4b4c      	ldr	r3, [pc, #304]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x164>)
 8006e64:	60bb      	str	r3, [r7, #8]
       break;
 8006e66:	e08e      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e68:	4b4b      	ldr	r3, [pc, #300]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x168>)
 8006e6a:	60bb      	str	r3, [r7, #8]
      break;
 8006e6c:	e08b      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e6e:	4948      	ldr	r1, [pc, #288]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e70:	6849      	ldr	r1, [r1, #4]
 8006e72:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006e76:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e78:	4945      	ldr	r1, [pc, #276]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e7a:	6849      	ldr	r1, [r1, #4]
 8006e7c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006e80:	2900      	cmp	r1, #0
 8006e82:	d024      	beq.n	8006ece <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e84:	4942      	ldr	r1, [pc, #264]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e86:	6849      	ldr	r1, [r1, #4]
 8006e88:	0989      	lsrs	r1, r1, #6
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006e94:	f04f 0500 	mov.w	r5, #0
 8006e98:	ea00 0204 	and.w	r2, r0, r4
 8006e9c:	ea01 0305 	and.w	r3, r1, r5
 8006ea0:	493d      	ldr	r1, [pc, #244]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x168>)
 8006ea2:	fb01 f003 	mul.w	r0, r1, r3
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	fb01 f102 	mul.w	r1, r1, r2
 8006eac:	1844      	adds	r4, r0, r1
 8006eae:	493a      	ldr	r1, [pc, #232]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x168>)
 8006eb0:	fba2 0101 	umull	r0, r1, r2, r1
 8006eb4:	1863      	adds	r3, r4, r1
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	f7fa f870 	bl	8000fa4 <__aeabi_uldivmod>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4613      	mov	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e04a      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ece:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	099b      	lsrs	r3, r3, #6
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f04f 0300 	mov.w	r3, #0
 8006eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ede:	f04f 0100 	mov.w	r1, #0
 8006ee2:	ea02 0400 	and.w	r4, r2, r0
 8006ee6:	ea03 0501 	and.w	r5, r3, r1
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	014b      	lsls	r3, r1, #5
 8006ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006efc:	0142      	lsls	r2, r0, #5
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	1b00      	subs	r0, r0, r4
 8006f04:	eb61 0105 	sbc.w	r1, r1, r5
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	018b      	lsls	r3, r1, #6
 8006f12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f16:	0182      	lsls	r2, r0, #6
 8006f18:	1a12      	subs	r2, r2, r0
 8006f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8006f1e:	f04f 0000 	mov.w	r0, #0
 8006f22:	f04f 0100 	mov.w	r1, #0
 8006f26:	00d9      	lsls	r1, r3, #3
 8006f28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f2c:	00d0      	lsls	r0, r2, #3
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	1912      	adds	r2, r2, r4
 8006f34:	eb45 0303 	adc.w	r3, r5, r3
 8006f38:	f04f 0000 	mov.w	r0, #0
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	0299      	lsls	r1, r3, #10
 8006f42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f46:	0290      	lsls	r0, r2, #10
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4619      	mov	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	f7fa f824 	bl	8000fa4 <__aeabi_uldivmod>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4613      	mov	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	3301      	adds	r3, #1
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	60bb      	str	r3, [r7, #8]
      break;
 8006f7e:	e002      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x164>)
 8006f82:	60bb      	str	r3, [r7, #8]
      break;
 8006f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f86:	68bb      	ldr	r3, [r7, #8]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f90:	40023800 	.word	0x40023800
 8006f94:	00f42400 	.word	0x00f42400
 8006f98:	017d7840 	.word	0x017d7840

08006f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <HAL_RCC_GetHCLKFreq+0x10>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bc80      	pop	{r7}
 8006faa:	4770      	bx	lr
 8006fac:	20000004 	.word	0x20000004

08006fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006fb6:	f7ff fff1 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8006fba:	4601      	mov	r1, r0
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006fc4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006fc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	fa92 f2a2 	rbit	r2, r2
 8006fd0:	603a      	str	r2, [r7, #0]
  return result;
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	fab2 f282 	clz	r2, r2
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	40d3      	lsrs	r3, r2
 8006fdc:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006fde:	5cd3      	ldrb	r3, [r2, r3]
 8006fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	08015140 	.word	0x08015140

08006ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006ffa:	f7ff ffcf 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8006ffe:	4601      	mov	r1, r0
 8007000:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007008:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800700c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	fa92 f2a2 	rbit	r2, r2
 8007014:	603a      	str	r2, [r7, #0]
  return result;
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	fab2 f282 	clz	r2, r2
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	40d3      	lsrs	r3, r2
 8007020:	4a04      	ldr	r2, [pc, #16]	; (8007034 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007022:	5cd3      	ldrb	r3, [r2, r3]
 8007024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40023800 	.word	0x40023800
 8007034:	08015140 	.word	0x08015140

08007038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e041      	b.n	80070ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f839 	bl	80070d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f000 f9bc 	bl	80073f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr

080070e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <HAL_TIM_PWM_Start+0x24>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	bf14      	ite	ne
 8007104:	2301      	movne	r3, #1
 8007106:	2300      	moveq	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	e022      	b.n	8007152 <HAL_TIM_PWM_Start+0x6a>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b04      	cmp	r3, #4
 8007110:	d109      	bne.n	8007126 <HAL_TIM_PWM_Start+0x3e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b01      	cmp	r3, #1
 800711c:	bf14      	ite	ne
 800711e:	2301      	movne	r3, #1
 8007120:	2300      	moveq	r3, #0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	e015      	b.n	8007152 <HAL_TIM_PWM_Start+0x6a>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b08      	cmp	r3, #8
 800712a:	d109      	bne.n	8007140 <HAL_TIM_PWM_Start+0x58>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	bf14      	ite	ne
 8007138:	2301      	movne	r3, #1
 800713a:	2300      	moveq	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	e008      	b.n	8007152 <HAL_TIM_PWM_Start+0x6a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e07c      	b.n	8007254 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <HAL_TIM_PWM_Start+0x82>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007168:	e013      	b.n	8007192 <HAL_TIM_PWM_Start+0xaa>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b04      	cmp	r3, #4
 800716e:	d104      	bne.n	800717a <HAL_TIM_PWM_Start+0x92>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007178:	e00b      	b.n	8007192 <HAL_TIM_PWM_Start+0xaa>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b08      	cmp	r3, #8
 800717e:	d104      	bne.n	800718a <HAL_TIM_PWM_Start+0xa2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007188:	e003      	b.n	8007192 <HAL_TIM_PWM_Start+0xaa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2201      	movs	r2, #1
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fb74 	bl	8007888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2d      	ldr	r2, [pc, #180]	; (800725c <HAL_TIM_PWM_Start+0x174>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_TIM_PWM_Start+0xcc>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2c      	ldr	r2, [pc, #176]	; (8007260 <HAL_TIM_PWM_Start+0x178>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d101      	bne.n	80071b8 <HAL_TIM_PWM_Start+0xd0>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <HAL_TIM_PWM_Start+0xd2>
 80071b8:	2300      	movs	r3, #0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a22      	ldr	r2, [pc, #136]	; (800725c <HAL_TIM_PWM_Start+0x174>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d022      	beq.n	800721e <HAL_TIM_PWM_Start+0x136>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e0:	d01d      	beq.n	800721e <HAL_TIM_PWM_Start+0x136>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1f      	ldr	r2, [pc, #124]	; (8007264 <HAL_TIM_PWM_Start+0x17c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d018      	beq.n	800721e <HAL_TIM_PWM_Start+0x136>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1d      	ldr	r2, [pc, #116]	; (8007268 <HAL_TIM_PWM_Start+0x180>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <HAL_TIM_PWM_Start+0x136>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1c      	ldr	r2, [pc, #112]	; (800726c <HAL_TIM_PWM_Start+0x184>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <HAL_TIM_PWM_Start+0x136>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a16      	ldr	r2, [pc, #88]	; (8007260 <HAL_TIM_PWM_Start+0x178>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_TIM_PWM_Start+0x136>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_TIM_PWM_Start+0x188>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_TIM_PWM_Start+0x136>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a16      	ldr	r2, [pc, #88]	; (8007274 <HAL_TIM_PWM_Start+0x18c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d111      	bne.n	8007242 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b06      	cmp	r3, #6
 800722e:	d010      	beq.n	8007252 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007240:	e007      	b.n	8007252 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f042 0201 	orr.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40010000 	.word	0x40010000
 8007260:	40010400 	.word	0x40010400
 8007264:	40000400 	.word	0x40000400
 8007268:	40000800 	.word	0x40000800
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40014000 	.word	0x40014000
 8007274:	40001800 	.word	0x40001800

08007278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800728e:	2302      	movs	r3, #2
 8007290:	e0ac      	b.n	80073ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b0c      	cmp	r3, #12
 800729e:	f200 809f 	bhi.w	80073e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80072a2:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072dd 	.word	0x080072dd
 80072ac:	080073e1 	.word	0x080073e1
 80072b0:	080073e1 	.word	0x080073e1
 80072b4:	080073e1 	.word	0x080073e1
 80072b8:	0800731d 	.word	0x0800731d
 80072bc:	080073e1 	.word	0x080073e1
 80072c0:	080073e1 	.word	0x080073e1
 80072c4:	080073e1 	.word	0x080073e1
 80072c8:	0800735f 	.word	0x0800735f
 80072cc:	080073e1 	.word	0x080073e1
 80072d0:	080073e1 	.word	0x080073e1
 80072d4:	080073e1 	.word	0x080073e1
 80072d8:	0800739f 	.word	0x0800739f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f924 	bl	8007530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0208 	orr.w	r2, r2, #8
 80072f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0204 	bic.w	r2, r2, #4
 8007306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6999      	ldr	r1, [r3, #24]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	619a      	str	r2, [r3, #24]
      break;
 800731a:	e062      	b.n	80073e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f974 	bl	8007610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6999      	ldr	r1, [r3, #24]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	021a      	lsls	r2, r3, #8
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	619a      	str	r2, [r3, #24]
      break;
 800735c:	e041      	b.n	80073e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f9c7 	bl	80076f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0208 	orr.w	r2, r2, #8
 8007378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0204 	bic.w	r2, r2, #4
 8007388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69d9      	ldr	r1, [r3, #28]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	61da      	str	r2, [r3, #28]
      break;
 800739c:	e021      	b.n	80073e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fa1b 	bl	80077e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69d9      	ldr	r1, [r3, #28]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	021a      	lsls	r2, r3, #8
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	61da      	str	r2, [r3, #28]
      break;
 80073de:	e000      	b.n	80073e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80073e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a3f      	ldr	r2, [pc, #252]	; (8007504 <TIM_Base_SetConfig+0x110>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d013      	beq.n	8007434 <TIM_Base_SetConfig+0x40>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007412:	d00f      	beq.n	8007434 <TIM_Base_SetConfig+0x40>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a3c      	ldr	r2, [pc, #240]	; (8007508 <TIM_Base_SetConfig+0x114>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00b      	beq.n	8007434 <TIM_Base_SetConfig+0x40>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a3b      	ldr	r2, [pc, #236]	; (800750c <TIM_Base_SetConfig+0x118>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d007      	beq.n	8007434 <TIM_Base_SetConfig+0x40>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a3a      	ldr	r2, [pc, #232]	; (8007510 <TIM_Base_SetConfig+0x11c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_Base_SetConfig+0x40>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a39      	ldr	r2, [pc, #228]	; (8007514 <TIM_Base_SetConfig+0x120>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d108      	bne.n	8007446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2e      	ldr	r2, [pc, #184]	; (8007504 <TIM_Base_SetConfig+0x110>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d02b      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007454:	d027      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a2b      	ldr	r2, [pc, #172]	; (8007508 <TIM_Base_SetConfig+0x114>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d023      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a2a      	ldr	r2, [pc, #168]	; (800750c <TIM_Base_SetConfig+0x118>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01f      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a29      	ldr	r2, [pc, #164]	; (8007510 <TIM_Base_SetConfig+0x11c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01b      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a28      	ldr	r2, [pc, #160]	; (8007514 <TIM_Base_SetConfig+0x120>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d017      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a27      	ldr	r2, [pc, #156]	; (8007518 <TIM_Base_SetConfig+0x124>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d013      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a26      	ldr	r2, [pc, #152]	; (800751c <TIM_Base_SetConfig+0x128>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d00f      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a25      	ldr	r2, [pc, #148]	; (8007520 <TIM_Base_SetConfig+0x12c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00b      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a24      	ldr	r2, [pc, #144]	; (8007524 <TIM_Base_SetConfig+0x130>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d007      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a23      	ldr	r2, [pc, #140]	; (8007528 <TIM_Base_SetConfig+0x134>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a22      	ldr	r2, [pc, #136]	; (800752c <TIM_Base_SetConfig+0x138>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d108      	bne.n	80074b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <TIM_Base_SetConfig+0x110>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_Base_SetConfig+0xf8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a0b      	ldr	r2, [pc, #44]	; (8007514 <TIM_Base_SetConfig+0x120>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d103      	bne.n	80074f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	615a      	str	r2, [r3, #20]
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr
 8007504:	40010000 	.word	0x40010000
 8007508:	40000400 	.word	0x40000400
 800750c:	40000800 	.word	0x40000800
 8007510:	40000c00 	.word	0x40000c00
 8007514:	40010400 	.word	0x40010400
 8007518:	40014000 	.word	0x40014000
 800751c:	40014400 	.word	0x40014400
 8007520:	40014800 	.word	0x40014800
 8007524:	40001800 	.word	0x40001800
 8007528:	40001c00 	.word	0x40001c00
 800752c:	40002000 	.word	0x40002000

08007530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	f023 0201 	bic.w	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f023 0302 	bic.w	r3, r3, #2
 8007578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a20      	ldr	r2, [pc, #128]	; (8007608 <TIM_OC1_SetConfig+0xd8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_OC1_SetConfig+0x64>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <TIM_OC1_SetConfig+0xdc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d10c      	bne.n	80075ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f023 0308 	bic.w	r3, r3, #8
 800759a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f023 0304 	bic.w	r3, r3, #4
 80075ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a15      	ldr	r2, [pc, #84]	; (8007608 <TIM_OC1_SetConfig+0xd8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_OC1_SetConfig+0x8e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a14      	ldr	r2, [pc, #80]	; (800760c <TIM_OC1_SetConfig+0xdc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d111      	bne.n	80075e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	621a      	str	r2, [r3, #32]
}
 80075fc:	bf00      	nop
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	40010000 	.word	0x40010000
 800760c:	40010400 	.word	0x40010400

08007610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f023 0210 	bic.w	r2, r3, #16
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f023 0320 	bic.w	r3, r3, #32
 800765a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a21      	ldr	r2, [pc, #132]	; (80076f0 <TIM_OC2_SetConfig+0xe0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_OC2_SetConfig+0x68>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a20      	ldr	r2, [pc, #128]	; (80076f4 <TIM_OC2_SetConfig+0xe4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d10d      	bne.n	8007694 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800767e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007692:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <TIM_OC2_SetConfig+0xe0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC2_SetConfig+0x94>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <TIM_OC2_SetConfig+0xe4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d113      	bne.n	80076cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr
 80076f0:	40010000 	.word	0x40010000
 80076f4:	40010400 	.word	0x40010400

080076f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a21      	ldr	r2, [pc, #132]	; (80077d8 <TIM_OC3_SetConfig+0xe0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d003      	beq.n	800775e <TIM_OC3_SetConfig+0x66>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a20      	ldr	r2, [pc, #128]	; (80077dc <TIM_OC3_SetConfig+0xe4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d10d      	bne.n	800777a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a16      	ldr	r2, [pc, #88]	; (80077d8 <TIM_OC3_SetConfig+0xe0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_OC3_SetConfig+0x92>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a15      	ldr	r2, [pc, #84]	; (80077dc <TIM_OC3_SetConfig+0xe4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d113      	bne.n	80077b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	621a      	str	r2, [r3, #32]
}
 80077cc:	bf00      	nop
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40010400 	.word	0x40010400

080077e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800782a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	031b      	lsls	r3, r3, #12
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a11      	ldr	r2, [pc, #68]	; (8007880 <TIM_OC4_SetConfig+0xa0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d003      	beq.n	8007848 <TIM_OC4_SetConfig+0x68>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a10      	ldr	r2, [pc, #64]	; (8007884 <TIM_OC4_SetConfig+0xa4>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d109      	bne.n	800785c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800784e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	019b      	lsls	r3, r3, #6
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	621a      	str	r2, [r3, #32]
}
 8007876:	bf00      	nop
 8007878:	371c      	adds	r7, #28
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr
 8007880:	40010000 	.word	0x40010000
 8007884:	40010400 	.word	0x40010400

08007888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 031f 	and.w	r3, r3, #31
 800789a:	2201      	movs	r2, #1
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a1a      	ldr	r2, [r3, #32]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	43db      	mvns	r3, r3
 80078aa:	401a      	ands	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a1a      	ldr	r2, [r3, #32]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f003 031f 	and.w	r3, r3, #31
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	fa01 f303 	lsl.w	r3, r1, r3
 80078c0:	431a      	orrs	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	621a      	str	r2, [r3, #32]
}
 80078c6:	bf00      	nop
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d101      	bne.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078e4:	2302      	movs	r3, #2
 80078e6:	e05a      	b.n	800799e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a20      	ldr	r2, [pc, #128]	; (80079a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d022      	beq.n	8007972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007934:	d01d      	beq.n	8007972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a1c      	ldr	r2, [pc, #112]	; (80079ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d018      	beq.n	8007972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1a      	ldr	r2, [pc, #104]	; (80079b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a19      	ldr	r2, [pc, #100]	; (80079b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00e      	beq.n	8007972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d009      	beq.n	8007972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a16      	ldr	r2, [pc, #88]	; (80079bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d004      	beq.n	8007972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a14      	ldr	r2, [pc, #80]	; (80079c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d10c      	bne.n	800798c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	4313      	orrs	r3, r2
 8007982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr
 80079a8:	40010000 	.word	0x40010000
 80079ac:	40000400 	.word	0x40000400
 80079b0:	40000800 	.word	0x40000800
 80079b4:	40000c00 	.word	0x40000c00
 80079b8:	40010400 	.word	0x40010400
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40001800 	.word	0x40001800

080079c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e03f      	b.n	8007a56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fa ffa8 	bl	8002940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2224      	movs	r2, #36	; 0x24
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fb67 	bl	80080dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695a      	ldr	r2, [r3, #20]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b08a      	sub	sp, #40	; 0x28
 8007a62:	af02      	add	r7, sp, #8
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	603b      	str	r3, [r7, #0]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d17c      	bne.n	8007b78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_UART_Transmit+0x2c>
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e075      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_UART_Transmit+0x3e>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e06e      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2221      	movs	r2, #33	; 0x21
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ab2:	f7fc feff 	bl	80048b4 <HAL_GetTick>
 8007ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	88fa      	ldrh	r2, [r7, #6]
 8007abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	88fa      	ldrh	r2, [r7, #6]
 8007ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007acc:	d108      	bne.n	8007ae0 <HAL_UART_Transmit+0x82>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d104      	bne.n	8007ae0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	e003      	b.n	8007ae8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007af0:	e02a      	b.n	8007b48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	2180      	movs	r1, #128	; 0x80
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f9fc 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e036      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10b      	bne.n	8007b2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	3302      	adds	r3, #2
 8007b26:	61bb      	str	r3, [r7, #24]
 8007b28:	e007      	b.n	8007b3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	3301      	adds	r3, #1
 8007b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1cf      	bne.n	8007af2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2140      	movs	r1, #64	; 0x40
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f9cc 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e006      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e000      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b78:	2302      	movs	r3, #2
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d153      	bne.n	8007c46 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_UART_Transmit_DMA+0x26>
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e04c      	b.n	8007c48 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_UART_Transmit_DMA+0x38>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e045      	b.n	8007c48 <HAL_UART_Transmit_DMA+0xc4>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	88fa      	ldrh	r2, [r7, #6]
 8007bce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	88fa      	ldrh	r2, [r7, #6]
 8007bd4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2221      	movs	r2, #33	; 0x21
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	4a19      	ldr	r2, [pc, #100]	; (8007c50 <HAL_UART_Transmit_DMA+0xcc>)
 8007bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf0:	4a18      	ldr	r2, [pc, #96]	; (8007c54 <HAL_UART_Transmit_DMA+0xd0>)
 8007bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf8:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <HAL_UART_Transmit_DMA+0xd4>)
 8007bfa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c00:	2200      	movs	r2, #0
 8007c02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007c04:	f107 0308 	add.w	r3, r7, #8
 8007c08:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	6819      	ldr	r1, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3304      	adds	r3, #4
 8007c18:	461a      	mov	r2, r3
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	f7fd f834 	bl	8004c88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c28:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	695a      	ldr	r2, [r3, #20]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c40:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	e000      	b.n	8007c48 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007c46:	2302      	movs	r3, #2
  }
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	08007d2d 	.word	0x08007d2d
 8007c54:	08007d7f 	.word	0x08007d7f
 8007c58:	08007e67 	.word	0x08007e67

08007c5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d11d      	bne.n	8007cb2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_UART_Receive_DMA+0x26>
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e016      	b.n	8007cb4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_UART_Receive_DMA+0x38>
 8007c90:	2302      	movs	r3, #2
 8007c92:	e00f      	b.n	8007cb4 <HAL_UART_Receive_DMA+0x58>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 f971 	bl	8007f90 <UART_Start_Receive_DMA>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	e000      	b.n	8007cb4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cb2:	2302      	movs	r3, #2
  }
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr

08007cce <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc80      	pop	{r7}
 8007cf0:	4770      	bx	lr

08007cf2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d113      	bne.n	8007d70 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	695a      	ldr	r2, [r3, #20]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d5c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d6c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d6e:	e002      	b.n	8007d76 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff ffa3 	bl	8007cbc <HAL_UART_TxCpltCallback>
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff ff9e 	bl	8007cce <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d12a      	bne.n	8007e0c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dca:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0201 	bic.w	r2, r2, #1
 8007dda:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695a      	ldr	r2, [r3, #20]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dea:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d107      	bne.n	8007e0c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0210 	bic.w	r2, r2, #16
 8007e0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d106      	bne.n	8007e22 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e18:	4619      	mov	r1, r3
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff ff7b 	bl	8007d16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e20:	e002      	b.n	8007e28 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff ff5c 	bl	8007ce0 <HAL_UART_RxCpltCallback>
}
 8007e28:	bf00      	nop
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d108      	bne.n	8007e58 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e4a:	085b      	lsrs	r3, r3, #1
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4619      	mov	r1, r3
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ff60 	bl	8007d16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e56:	e002      	b.n	8007e5e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7ff ff4a 	bl	8007cf2 <HAL_UART_RxHalfCpltCallback>
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e82:	2b80      	cmp	r3, #128	; 0x80
 8007e84:	bf0c      	ite	eq
 8007e86:	2301      	moveq	r3, #1
 8007e88:	2300      	movne	r3, #0
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b21      	cmp	r3, #33	; 0x21
 8007e98:	d108      	bne.n	8007eac <UART_DMAError+0x46>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ea6:	68b8      	ldr	r0, [r7, #8]
 8007ea8:	f000 f8d6 	bl	8008058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	bf0c      	ite	eq
 8007eba:	2301      	moveq	r3, #1
 8007ebc:	2300      	movne	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b22      	cmp	r3, #34	; 0x22
 8007ecc:	d108      	bne.n	8007ee0 <UART_DMAError+0x7a>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007eda:	68b8      	ldr	r0, [r7, #8]
 8007edc:	f000 f8d1 	bl	8008082 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	f043 0210 	orr.w	r2, r3, #16
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eec:	68b8      	ldr	r0, [r7, #8]
 8007eee:	f7ff ff09 	bl	8007d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0a:	e02c      	b.n	8007f66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d028      	beq.n	8007f66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <UART_WaitOnFlagUntilTimeout+0x30>
 8007f1a:	f7fc fccb 	bl	80048b4 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d21d      	bcs.n	8007f66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	695a      	ldr	r2, [r3, #20]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e00f      	b.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	bf0c      	ite	eq
 8007f76:	2301      	moveq	r3, #1
 8007f78:	2300      	movne	r3, #0
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d0c3      	beq.n	8007f0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2222      	movs	r2, #34	; 0x22
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	4a23      	ldr	r2, [pc, #140]	; (800804c <UART_Start_Receive_DMA+0xbc>)
 8007fbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	4a22      	ldr	r2, [pc, #136]	; (8008050 <UART_Start_Receive_DMA+0xc0>)
 8007fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fcc:	4a21      	ldr	r2, [pc, #132]	; (8008054 <UART_Start_Receive_DMA+0xc4>)
 8007fce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007fd8:	f107 0308 	add.w	r3, r7, #8
 8007fdc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4619      	mov	r1, r3
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	f7fc fe4a 	bl	8004c88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008020:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695a      	ldr	r2, [r3, #20]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0201 	orr.w	r2, r2, #1
 8008030:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695a      	ldr	r2, [r3, #20]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008040:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	08007d9b 	.word	0x08007d9b
 8008050:	08007e31 	.word	0x08007e31
 8008054:	08007e67 	.word	0x08007e67

08008058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800806e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr

08008082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008098:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	695a      	ldr	r2, [r3, #20]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0201 	bic.w	r2, r2, #1
 80080a8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d107      	bne.n	80080c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0210 	bic.w	r2, r2, #16
 80080c0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr
	...

080080dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	431a      	orrs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	4313      	orrs	r3, r2
 8008110:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800811c:	f023 030c 	bic.w	r3, r3, #12
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	430b      	orrs	r3, r1
 8008128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699a      	ldr	r2, [r3, #24]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a57      	ldr	r2, [pc, #348]	; (80082a4 <UART_SetConfig+0x1c8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <UART_SetConfig+0x78>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a56      	ldr	r2, [pc, #344]	; (80082a8 <UART_SetConfig+0x1cc>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d103      	bne.n	800815c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008154:	f7fe ff4e 	bl	8006ff4 <HAL_RCC_GetPCLK2Freq>
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	e002      	b.n	8008162 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800815c:	f7fe ff28 	bl	8006fb0 <HAL_RCC_GetPCLK1Freq>
 8008160:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816a:	d14c      	bne.n	8008206 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	009a      	lsls	r2, r3, #2
 8008176:	441a      	add	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	4a4a      	ldr	r2, [pc, #296]	; (80082ac <UART_SetConfig+0x1d0>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	0119      	lsls	r1, r3, #4
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009a      	lsls	r2, r3, #2
 8008196:	441a      	add	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	fbb2 f2f3 	udiv	r2, r2, r3
 80081a2:	4b42      	ldr	r3, [pc, #264]	; (80082ac <UART_SetConfig+0x1d0>)
 80081a4:	fba3 0302 	umull	r0, r3, r3, r2
 80081a8:	095b      	lsrs	r3, r3, #5
 80081aa:	2064      	movs	r0, #100	; 0x64
 80081ac:	fb00 f303 	mul.w	r3, r0, r3
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	3332      	adds	r3, #50	; 0x32
 80081b6:	4a3d      	ldr	r2, [pc, #244]	; (80082ac <UART_SetConfig+0x1d0>)
 80081b8:	fba2 2303 	umull	r2, r3, r2, r3
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081c4:	4419      	add	r1, r3
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009a      	lsls	r2, r3, #2
 80081d0:	441a      	add	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80081dc:	4b33      	ldr	r3, [pc, #204]	; (80082ac <UART_SetConfig+0x1d0>)
 80081de:	fba3 0302 	umull	r0, r3, r3, r2
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	2064      	movs	r0, #100	; 0x64
 80081e6:	fb00 f303 	mul.w	r3, r0, r3
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	3332      	adds	r3, #50	; 0x32
 80081f0:	4a2e      	ldr	r2, [pc, #184]	; (80082ac <UART_SetConfig+0x1d0>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	f003 0207 	and.w	r2, r3, #7
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	440a      	add	r2, r1
 8008202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008204:	e04a      	b.n	800829c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	009a      	lsls	r2, r3, #2
 8008210:	441a      	add	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	fbb2 f3f3 	udiv	r3, r2, r3
 800821c:	4a23      	ldr	r2, [pc, #140]	; (80082ac <UART_SetConfig+0x1d0>)
 800821e:	fba2 2303 	umull	r2, r3, r2, r3
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	0119      	lsls	r1, r3, #4
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009a      	lsls	r2, r3, #2
 8008230:	441a      	add	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	fbb2 f2f3 	udiv	r2, r2, r3
 800823c:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <UART_SetConfig+0x1d0>)
 800823e:	fba3 0302 	umull	r0, r3, r3, r2
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	2064      	movs	r0, #100	; 0x64
 8008246:	fb00 f303 	mul.w	r3, r0, r3
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	3332      	adds	r3, #50	; 0x32
 8008250:	4a16      	ldr	r2, [pc, #88]	; (80082ac <UART_SetConfig+0x1d0>)
 8008252:	fba2 2303 	umull	r2, r3, r2, r3
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800825c:	4419      	add	r1, r3
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009a      	lsls	r2, r3, #2
 8008268:	441a      	add	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	fbb2 f2f3 	udiv	r2, r2, r3
 8008274:	4b0d      	ldr	r3, [pc, #52]	; (80082ac <UART_SetConfig+0x1d0>)
 8008276:	fba3 0302 	umull	r0, r3, r3, r2
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	2064      	movs	r0, #100	; 0x64
 800827e:	fb00 f303 	mul.w	r3, r0, r3
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	011b      	lsls	r3, r3, #4
 8008286:	3332      	adds	r3, #50	; 0x32
 8008288:	4a08      	ldr	r2, [pc, #32]	; (80082ac <UART_SetConfig+0x1d0>)
 800828a:	fba2 2303 	umull	r2, r3, r2, r3
 800828e:	095b      	lsrs	r3, r3, #5
 8008290:	f003 020f 	and.w	r2, r3, #15
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	440a      	add	r2, r1
 800829a:	609a      	str	r2, [r3, #8]
}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	40011000 	.word	0x40011000
 80082a8:	40011400 	.word	0x40011400
 80082ac:	51eb851f 	.word	0x51eb851f

080082b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 80082b6:	4b8d      	ldr	r3, [pc, #564]	; (80084ec <MX_LWIP_Init+0x23c>)
 80082b8:	220a      	movs	r2, #10
 80082ba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 80082bc:	4b8b      	ldr	r3, [pc, #556]	; (80084ec <MX_LWIP_Init+0x23c>)
 80082be:	220a      	movs	r2, #10
 80082c0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 80082c2:	4b8a      	ldr	r3, [pc, #552]	; (80084ec <MX_LWIP_Init+0x23c>)
 80082c4:	220a      	movs	r2, #10
 80082c6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80082c8:	4b88      	ldr	r3, [pc, #544]	; (80084ec <MX_LWIP_Init+0x23c>)
 80082ca:	220a      	movs	r2, #10
 80082cc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80082ce:	4b88      	ldr	r3, [pc, #544]	; (80084f0 <MX_LWIP_Init+0x240>)
 80082d0:	22ff      	movs	r2, #255	; 0xff
 80082d2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80082d4:	4b86      	ldr	r3, [pc, #536]	; (80084f0 <MX_LWIP_Init+0x240>)
 80082d6:	22ff      	movs	r2, #255	; 0xff
 80082d8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80082da:	4b85      	ldr	r3, [pc, #532]	; (80084f0 <MX_LWIP_Init+0x240>)
 80082dc:	22ff      	movs	r2, #255	; 0xff
 80082de:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80082e0:	4b83      	ldr	r3, [pc, #524]	; (80084f0 <MX_LWIP_Init+0x240>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 80082e6:	4b83      	ldr	r3, [pc, #524]	; (80084f4 <MX_LWIP_Init+0x244>)
 80082e8:	220a      	movs	r2, #10
 80082ea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 80082ec:	4b81      	ldr	r3, [pc, #516]	; (80084f4 <MX_LWIP_Init+0x244>)
 80082ee:	220a      	movs	r2, #10
 80082f0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80082f2:	4b80      	ldr	r3, [pc, #512]	; (80084f4 <MX_LWIP_Init+0x244>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80082f8:	4b7e      	ldr	r3, [pc, #504]	; (80084f4 <MX_LWIP_Init+0x244>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80082fe:	f000 fcad 	bl	8008c5c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008302:	4b7a      	ldr	r3, [pc, #488]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	061a      	lsls	r2, r3, #24
 8008308:	4b78      	ldr	r3, [pc, #480]	; (80084ec <MX_LWIP_Init+0x23c>)
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	041b      	lsls	r3, r3, #16
 800830e:	431a      	orrs	r2, r3
 8008310:	4b76      	ldr	r3, [pc, #472]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008312:	789b      	ldrb	r3, [r3, #2]
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	4313      	orrs	r3, r2
 8008318:	4a74      	ldr	r2, [pc, #464]	; (80084ec <MX_LWIP_Init+0x23c>)
 800831a:	78d2      	ldrb	r2, [r2, #3]
 800831c:	4313      	orrs	r3, r2
 800831e:	061a      	lsls	r2, r3, #24
 8008320:	4b72      	ldr	r3, [pc, #456]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	0619      	lsls	r1, r3, #24
 8008326:	4b71      	ldr	r3, [pc, #452]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	041b      	lsls	r3, r3, #16
 800832c:	4319      	orrs	r1, r3
 800832e:	4b6f      	ldr	r3, [pc, #444]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008330:	789b      	ldrb	r3, [r3, #2]
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	430b      	orrs	r3, r1
 8008336:	496d      	ldr	r1, [pc, #436]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008338:	78c9      	ldrb	r1, [r1, #3]
 800833a:	430b      	orrs	r3, r1
 800833c:	021b      	lsls	r3, r3, #8
 800833e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008342:	431a      	orrs	r2, r3
 8008344:	4b69      	ldr	r3, [pc, #420]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	0619      	lsls	r1, r3, #24
 800834a:	4b68      	ldr	r3, [pc, #416]	; (80084ec <MX_LWIP_Init+0x23c>)
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	041b      	lsls	r3, r3, #16
 8008350:	4319      	orrs	r1, r3
 8008352:	4b66      	ldr	r3, [pc, #408]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008354:	789b      	ldrb	r3, [r3, #2]
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	430b      	orrs	r3, r1
 800835a:	4964      	ldr	r1, [pc, #400]	; (80084ec <MX_LWIP_Init+0x23c>)
 800835c:	78c9      	ldrb	r1, [r1, #3]
 800835e:	430b      	orrs	r3, r1
 8008360:	0a1b      	lsrs	r3, r3, #8
 8008362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008366:	431a      	orrs	r2, r3
 8008368:	4b60      	ldr	r3, [pc, #384]	; (80084ec <MX_LWIP_Init+0x23c>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	0619      	lsls	r1, r3, #24
 800836e:	4b5f      	ldr	r3, [pc, #380]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008370:	785b      	ldrb	r3, [r3, #1]
 8008372:	041b      	lsls	r3, r3, #16
 8008374:	4319      	orrs	r1, r3
 8008376:	4b5d      	ldr	r3, [pc, #372]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008378:	789b      	ldrb	r3, [r3, #2]
 800837a:	021b      	lsls	r3, r3, #8
 800837c:	430b      	orrs	r3, r1
 800837e:	495b      	ldr	r1, [pc, #364]	; (80084ec <MX_LWIP_Init+0x23c>)
 8008380:	78c9      	ldrb	r1, [r1, #3]
 8008382:	430b      	orrs	r3, r1
 8008384:	0e1b      	lsrs	r3, r3, #24
 8008386:	4313      	orrs	r3, r2
 8008388:	4a5b      	ldr	r2, [pc, #364]	; (80084f8 <MX_LWIP_Init+0x248>)
 800838a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800838c:	4b58      	ldr	r3, [pc, #352]	; (80084f0 <MX_LWIP_Init+0x240>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	061a      	lsls	r2, r3, #24
 8008392:	4b57      	ldr	r3, [pc, #348]	; (80084f0 <MX_LWIP_Init+0x240>)
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	041b      	lsls	r3, r3, #16
 8008398:	431a      	orrs	r2, r3
 800839a:	4b55      	ldr	r3, [pc, #340]	; (80084f0 <MX_LWIP_Init+0x240>)
 800839c:	789b      	ldrb	r3, [r3, #2]
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	4313      	orrs	r3, r2
 80083a2:	4a53      	ldr	r2, [pc, #332]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083a4:	78d2      	ldrb	r2, [r2, #3]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	061a      	lsls	r2, r3, #24
 80083aa:	4b51      	ldr	r3, [pc, #324]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	0619      	lsls	r1, r3, #24
 80083b0:	4b4f      	ldr	r3, [pc, #316]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	041b      	lsls	r3, r3, #16
 80083b6:	4319      	orrs	r1, r3
 80083b8:	4b4d      	ldr	r3, [pc, #308]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083ba:	789b      	ldrb	r3, [r3, #2]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	430b      	orrs	r3, r1
 80083c0:	494b      	ldr	r1, [pc, #300]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083c2:	78c9      	ldrb	r1, [r1, #3]
 80083c4:	430b      	orrs	r3, r1
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083cc:	431a      	orrs	r2, r3
 80083ce:	4b48      	ldr	r3, [pc, #288]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	0619      	lsls	r1, r3, #24
 80083d4:	4b46      	ldr	r3, [pc, #280]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	041b      	lsls	r3, r3, #16
 80083da:	4319      	orrs	r1, r3
 80083dc:	4b44      	ldr	r3, [pc, #272]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083de:	789b      	ldrb	r3, [r3, #2]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	430b      	orrs	r3, r1
 80083e4:	4942      	ldr	r1, [pc, #264]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083e6:	78c9      	ldrb	r1, [r1, #3]
 80083e8:	430b      	orrs	r3, r1
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083f0:	431a      	orrs	r2, r3
 80083f2:	4b3f      	ldr	r3, [pc, #252]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	0619      	lsls	r1, r3, #24
 80083f8:	4b3d      	ldr	r3, [pc, #244]	; (80084f0 <MX_LWIP_Init+0x240>)
 80083fa:	785b      	ldrb	r3, [r3, #1]
 80083fc:	041b      	lsls	r3, r3, #16
 80083fe:	4319      	orrs	r1, r3
 8008400:	4b3b      	ldr	r3, [pc, #236]	; (80084f0 <MX_LWIP_Init+0x240>)
 8008402:	789b      	ldrb	r3, [r3, #2]
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	430b      	orrs	r3, r1
 8008408:	4939      	ldr	r1, [pc, #228]	; (80084f0 <MX_LWIP_Init+0x240>)
 800840a:	78c9      	ldrb	r1, [r1, #3]
 800840c:	430b      	orrs	r3, r1
 800840e:	0e1b      	lsrs	r3, r3, #24
 8008410:	4313      	orrs	r3, r2
 8008412:	4a3a      	ldr	r2, [pc, #232]	; (80084fc <MX_LWIP_Init+0x24c>)
 8008414:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008416:	4b37      	ldr	r3, [pc, #220]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	061a      	lsls	r2, r3, #24
 800841c:	4b35      	ldr	r3, [pc, #212]	; (80084f4 <MX_LWIP_Init+0x244>)
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	041b      	lsls	r3, r3, #16
 8008422:	431a      	orrs	r2, r3
 8008424:	4b33      	ldr	r3, [pc, #204]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008426:	789b      	ldrb	r3, [r3, #2]
 8008428:	021b      	lsls	r3, r3, #8
 800842a:	4313      	orrs	r3, r2
 800842c:	4a31      	ldr	r2, [pc, #196]	; (80084f4 <MX_LWIP_Init+0x244>)
 800842e:	78d2      	ldrb	r2, [r2, #3]
 8008430:	4313      	orrs	r3, r2
 8008432:	061a      	lsls	r2, r3, #24
 8008434:	4b2f      	ldr	r3, [pc, #188]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	0619      	lsls	r1, r3, #24
 800843a:	4b2e      	ldr	r3, [pc, #184]	; (80084f4 <MX_LWIP_Init+0x244>)
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	041b      	lsls	r3, r3, #16
 8008440:	4319      	orrs	r1, r3
 8008442:	4b2c      	ldr	r3, [pc, #176]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008444:	789b      	ldrb	r3, [r3, #2]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	430b      	orrs	r3, r1
 800844a:	492a      	ldr	r1, [pc, #168]	; (80084f4 <MX_LWIP_Init+0x244>)
 800844c:	78c9      	ldrb	r1, [r1, #3]
 800844e:	430b      	orrs	r3, r1
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008456:	431a      	orrs	r2, r3
 8008458:	4b26      	ldr	r3, [pc, #152]	; (80084f4 <MX_LWIP_Init+0x244>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	0619      	lsls	r1, r3, #24
 800845e:	4b25      	ldr	r3, [pc, #148]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	4319      	orrs	r1, r3
 8008466:	4b23      	ldr	r3, [pc, #140]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008468:	789b      	ldrb	r3, [r3, #2]
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	430b      	orrs	r3, r1
 800846e:	4921      	ldr	r1, [pc, #132]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008470:	78c9      	ldrb	r1, [r1, #3]
 8008472:	430b      	orrs	r3, r1
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800847a:	431a      	orrs	r2, r3
 800847c:	4b1d      	ldr	r3, [pc, #116]	; (80084f4 <MX_LWIP_Init+0x244>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	0619      	lsls	r1, r3, #24
 8008482:	4b1c      	ldr	r3, [pc, #112]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	4319      	orrs	r1, r3
 800848a:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <MX_LWIP_Init+0x244>)
 800848c:	789b      	ldrb	r3, [r3, #2]
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	430b      	orrs	r3, r1
 8008492:	4918      	ldr	r1, [pc, #96]	; (80084f4 <MX_LWIP_Init+0x244>)
 8008494:	78c9      	ldrb	r1, [r1, #3]
 8008496:	430b      	orrs	r3, r1
 8008498:	0e1b      	lsrs	r3, r3, #24
 800849a:	4313      	orrs	r3, r2
 800849c:	4a18      	ldr	r2, [pc, #96]	; (8008500 <MX_LWIP_Init+0x250>)
 800849e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80084a0:	4b18      	ldr	r3, [pc, #96]	; (8008504 <MX_LWIP_Init+0x254>)
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	4b18      	ldr	r3, [pc, #96]	; (8008508 <MX_LWIP_Init+0x258>)
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	2300      	movs	r3, #0
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <MX_LWIP_Init+0x250>)
 80084ae:	4a13      	ldr	r2, [pc, #76]	; (80084fc <MX_LWIP_Init+0x24c>)
 80084b0:	4911      	ldr	r1, [pc, #68]	; (80084f8 <MX_LWIP_Init+0x248>)
 80084b2:	4816      	ldr	r0, [pc, #88]	; (800850c <MX_LWIP_Init+0x25c>)
 80084b4:	f000 ffd2 	bl	800945c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80084b8:	4814      	ldr	r0, [pc, #80]	; (800850c <MX_LWIP_Init+0x25c>)
 80084ba:	f001 f8b1 	bl	8009620 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80084be:	4b13      	ldr	r3, [pc, #76]	; (800850c <MX_LWIP_Init+0x25c>)
 80084c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084c4:	089b      	lsrs	r3, r3, #2
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80084d0:	480e      	ldr	r0, [pc, #56]	; (800850c <MX_LWIP_Init+0x25c>)
 80084d2:	f001 f8b3 	bl	800963c <netif_set_up>
 80084d6:	e002      	b.n	80084de <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80084d8:	480c      	ldr	r0, [pc, #48]	; (800850c <MX_LWIP_Init+0x25c>)
 80084da:	f001 f8f3 	bl	80096c4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80084de:	490c      	ldr	r1, [pc, #48]	; (8008510 <MX_LWIP_Init+0x260>)
 80084e0:	480a      	ldr	r0, [pc, #40]	; (800850c <MX_LWIP_Init+0x25c>)
 80084e2:	f001 f911 	bl	8009708 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80084e6:	bf00      	nop
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	20000564 	.word	0x20000564
 80084f0:	20000560 	.word	0x20000560
 80084f4:	20000558 	.word	0x20000558
 80084f8:	2000055c 	.word	0x2000055c
 80084fc:	20000568 	.word	0x20000568
 8008500:	2000056c 	.word	0x2000056c
 8008504:	080117e9 	.word	0x080117e9
 8008508:	08008a9d 	.word	0x08008a9d
 800850c:	20000220 	.word	0x20000220
 8008510:	08008b09 	.word	0x08008b09

08008514 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08e      	sub	sp, #56	; 0x38
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800851c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008520:	2200      	movs	r2, #0
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	605a      	str	r2, [r3, #4]
 8008526:	609a      	str	r2, [r3, #8]
 8008528:	60da      	str	r2, [r3, #12]
 800852a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a46      	ldr	r2, [pc, #280]	; (800864c <HAL_ETH_MspInit+0x138>)
 8008532:	4293      	cmp	r3, r2
 8008534:	f040 8085 	bne.w	8008642 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008538:	2300      	movs	r3, #0
 800853a:	623b      	str	r3, [r7, #32]
 800853c:	4b44      	ldr	r3, [pc, #272]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	4a43      	ldr	r2, [pc, #268]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 8008542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008546:	6313      	str	r3, [r2, #48]	; 0x30
 8008548:	4b41      	ldr	r3, [pc, #260]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 800854a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008550:	623b      	str	r3, [r7, #32]
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	2300      	movs	r3, #0
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	4b3d      	ldr	r3, [pc, #244]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 800855a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855c:	4a3c      	ldr	r2, [pc, #240]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 800855e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008562:	6313      	str	r3, [r2, #48]	; 0x30
 8008564:	4b3a      	ldr	r3, [pc, #232]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800856c:	61fb      	str	r3, [r7, #28]
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	2300      	movs	r3, #0
 8008572:	61bb      	str	r3, [r7, #24]
 8008574:	4b36      	ldr	r3, [pc, #216]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	4a35      	ldr	r2, [pc, #212]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 800857a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800857e:	6313      	str	r3, [r2, #48]	; 0x30
 8008580:	4b33      	ldr	r3, [pc, #204]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008588:	61bb      	str	r3, [r7, #24]
 800858a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	4b2f      	ldr	r3, [pc, #188]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	4a2e      	ldr	r2, [pc, #184]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 8008596:	f043 0304 	orr.w	r3, r3, #4
 800859a:	6313      	str	r3, [r2, #48]	; 0x30
 800859c:	4b2c      	ldr	r3, [pc, #176]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085a8:	2300      	movs	r3, #0
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	4b28      	ldr	r3, [pc, #160]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 80085ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b0:	4a27      	ldr	r2, [pc, #156]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 80085b2:	f043 0301 	orr.w	r3, r3, #1
 80085b6:	6313      	str	r3, [r2, #48]	; 0x30
 80085b8:	4b25      	ldr	r3, [pc, #148]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 80085ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	4b21      	ldr	r3, [pc, #132]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	4a20      	ldr	r2, [pc, #128]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 80085ce:	f043 0302 	orr.w	r3, r3, #2
 80085d2:	6313      	str	r3, [r2, #48]	; 0x30
 80085d4:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <HAL_ETH_MspInit+0x13c>)
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80085e0:	2332      	movs	r3, #50	; 0x32
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e4:	2302      	movs	r3, #2
 80085e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085ec:	2303      	movs	r3, #3
 80085ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085f0:	230b      	movs	r3, #11
 80085f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085f8:	4619      	mov	r1, r3
 80085fa:	4816      	ldr	r0, [pc, #88]	; (8008654 <HAL_ETH_MspInit+0x140>)
 80085fc:	f7fd ff0e 	bl	800641c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008600:	2386      	movs	r3, #134	; 0x86
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008604:	2302      	movs	r3, #2
 8008606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008608:	2300      	movs	r3, #0
 800860a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800860c:	2303      	movs	r3, #3
 800860e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008610:	230b      	movs	r3, #11
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008618:	4619      	mov	r1, r3
 800861a:	480f      	ldr	r0, [pc, #60]	; (8008658 <HAL_ETH_MspInit+0x144>)
 800861c:	f7fd fefe 	bl	800641c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008620:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008626:	2302      	movs	r3, #2
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800862a:	2300      	movs	r3, #0
 800862c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800862e:	2303      	movs	r3, #3
 8008630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008632:	230b      	movs	r3, #11
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800863a:	4619      	mov	r1, r3
 800863c:	4807      	ldr	r0, [pc, #28]	; (800865c <HAL_ETH_MspInit+0x148>)
 800863e:	f7fd feed 	bl	800641c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008642:	bf00      	nop
 8008644:	3738      	adds	r7, #56	; 0x38
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40028000 	.word	0x40028000
 8008650:	40023800 	.word	0x40023800
 8008654:	40020800 	.word	0x40020800
 8008658:	40020000 	.word	0x40020000
 800865c:	40020400 	.word	0x40020400

08008660 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800866c:	4b4d      	ldr	r3, [pc, #308]	; (80087a4 <low_level_init+0x144>)
 800866e:	4a4e      	ldr	r2, [pc, #312]	; (80087a8 <low_level_init+0x148>)
 8008670:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008672:	4b4c      	ldr	r3, [pc, #304]	; (80087a4 <low_level_init+0x144>)
 8008674:	2201      	movs	r2, #1
 8008676:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008678:	4b4a      	ldr	r3, [pc, #296]	; (80087a4 <low_level_init+0x144>)
 800867a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800867e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008680:	4b48      	ldr	r3, [pc, #288]	; (80087a4 <low_level_init+0x144>)
 8008682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008686:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008688:	4b46      	ldr	r3, [pc, #280]	; (80087a4 <low_level_init+0x144>)
 800868a:	2201      	movs	r2, #1
 800868c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800868e:	2300      	movs	r3, #0
 8008690:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008692:	2380      	movs	r3, #128	; 0x80
 8008694:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008696:	23e1      	movs	r3, #225	; 0xe1
 8008698:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800869a:	2300      	movs	r3, #0
 800869c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800869e:	2300      	movs	r3, #0
 80086a0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80086a2:	2300      	movs	r3, #0
 80086a4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80086a6:	4a3f      	ldr	r2, [pc, #252]	; (80087a4 <low_level_init+0x144>)
 80086a8:	f107 0308 	add.w	r3, r7, #8
 80086ac:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80086ae:	4b3d      	ldr	r3, [pc, #244]	; (80087a4 <low_level_init+0x144>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80086b4:	4b3b      	ldr	r3, [pc, #236]	; (80087a4 <low_level_init+0x144>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80086ba:	4b3a      	ldr	r3, [pc, #232]	; (80087a4 <low_level_init+0x144>)
 80086bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80086c0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80086c2:	4838      	ldr	r0, [pc, #224]	; (80087a4 <low_level_init+0x144>)
 80086c4:	f7fc fd9e 	bl	8005204 <HAL_ETH_Init>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d108      	bne.n	80086e4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086d8:	f043 0304 	orr.w	r3, r3, #4
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80086e4:	2304      	movs	r3, #4
 80086e6:	4a31      	ldr	r2, [pc, #196]	; (80087ac <low_level_init+0x14c>)
 80086e8:	4931      	ldr	r1, [pc, #196]	; (80087b0 <low_level_init+0x150>)
 80086ea:	482e      	ldr	r0, [pc, #184]	; (80087a4 <low_level_init+0x144>)
 80086ec:	f7fc ff16 	bl	800551c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80086f0:	2304      	movs	r3, #4
 80086f2:	4a30      	ldr	r2, [pc, #192]	; (80087b4 <low_level_init+0x154>)
 80086f4:	4930      	ldr	r1, [pc, #192]	; (80087b8 <low_level_init+0x158>)
 80086f6:	482b      	ldr	r0, [pc, #172]	; (80087a4 <low_level_init+0x144>)
 80086f8:	f7fc ff78 	bl	80055ec <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2206      	movs	r2, #6
 8008700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008704:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <low_level_init+0x144>)
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008710:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <low_level_init+0x144>)
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	785a      	ldrb	r2, [r3, #1]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800871c:	4b21      	ldr	r3, [pc, #132]	; (80087a4 <low_level_init+0x144>)
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	789a      	ldrb	r2, [r3, #2]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008728:	4b1e      	ldr	r3, [pc, #120]	; (80087a4 <low_level_init+0x144>)
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	78da      	ldrb	r2, [r3, #3]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008734:	4b1b      	ldr	r3, [pc, #108]	; (80087a4 <low_level_init+0x144>)
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	791a      	ldrb	r2, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008740:	4b18      	ldr	r3, [pc, #96]	; (80087a4 <low_level_init+0x144>)
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	795a      	ldrb	r2, [r3, #5]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008752:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800875a:	f043 030a 	orr.w	r3, r3, #10
 800875e:	b2da      	uxtb	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008766:	480f      	ldr	r0, [pc, #60]	; (80087a4 <low_level_init+0x144>)
 8008768:	f7fd f9e7 	bl	8005b3a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	461a      	mov	r2, r3
 8008772:	211d      	movs	r1, #29
 8008774:	480b      	ldr	r0, [pc, #44]	; (80087a4 <low_level_init+0x144>)
 8008776:	f7fd f912 	bl	800599e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f043 030b 	orr.w	r3, r3, #11
 8008780:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	461a      	mov	r2, r3
 8008786:	211d      	movs	r1, #29
 8008788:	4806      	ldr	r0, [pc, #24]	; (80087a4 <low_level_init+0x144>)
 800878a:	f7fd f970 	bl	8005a6e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800878e:	f107 0310 	add.w	r3, r7, #16
 8008792:	461a      	mov	r2, r3
 8008794:	211d      	movs	r1, #29
 8008796:	4803      	ldr	r0, [pc, #12]	; (80087a4 <low_level_init+0x144>)
 8008798:	f7fd f901 	bl	800599e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800879c:	bf00      	nop
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20001e40 	.word	0x20001e40
 80087a8:	40028000 	.word	0x40028000
 80087ac:	20001e88 	.word	0x20001e88
 80087b0:	20000570 	.word	0x20000570
 80087b4:	200005f0 	.word	0x200005f0
 80087b8:	20001dc0 	.word	0x20001dc0

080087bc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	; 0x28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80087c6:	4b4b      	ldr	r3, [pc, #300]	; (80088f4 <low_level_output+0x138>)
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80087de:	4b45      	ldr	r3, [pc, #276]	; (80088f4 <low_level_output+0x138>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	623b      	str	r3, [r7, #32]
 80087ec:	e05a      	b.n	80088a4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da03      	bge.n	80087fe <low_level_output+0x42>
      {
        errval = ERR_USE;
 80087f6:	23f8      	movs	r3, #248	; 0xf8
 80087f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80087fc:	e05c      	b.n	80088b8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	895b      	ldrh	r3, [r3, #10]
 8008802:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008808:	e02f      	b.n	800886a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	18d0      	adds	r0, r2, r3
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	18d1      	adds	r1, r2, r3
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800881e:	3304      	adds	r3, #4
 8008820:	461a      	mov	r2, r3
 8008822:	f009 fa0b 	bl	8011c3c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	da03      	bge.n	800883c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008834:	23f8      	movs	r3, #248	; 0xf8
 8008836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800883a:	e03d      	b.n	80088b8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800884c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008858:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008864:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	4413      	add	r3, r2
 8008870:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008874:	4293      	cmp	r3, r2
 8008876:	d8c8      	bhi.n	800880a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	18d0      	adds	r0, r2, r3
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	4413      	add	r3, r2
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	4619      	mov	r1, r3
 800888a:	f009 f9d7 	bl	8011c3c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	623b      	str	r3, [r7, #32]
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1a1      	bne.n	80087ee <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80088aa:	6979      	ldr	r1, [r7, #20]
 80088ac:	4811      	ldr	r0, [pc, #68]	; (80088f4 <low_level_output+0x138>)
 80088ae:	f7fc ff09 	bl	80056c4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80088b8:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <low_level_output+0x138>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c0:	3314      	adds	r3, #20
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00d      	beq.n	80088e8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <low_level_output+0x138>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d4:	3314      	adds	r3, #20
 80088d6:	2220      	movs	r2, #32
 80088d8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80088da:	4b06      	ldr	r3, [pc, #24]	; (80088f4 <low_level_output+0x138>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e2:	3304      	adds	r3, #4
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80088e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3728      	adds	r7, #40	; 0x28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20001e40 	.word	0x20001e40

080088f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	; 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008904:	2300      	movs	r3, #0
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008918:	2300      	movs	r3, #0
 800891a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800891c:	484e      	ldr	r0, [pc, #312]	; (8008a58 <low_level_input+0x160>)
 800891e:	f7fc ffbb 	bl	8005898 <HAL_ETH_GetReceivedFrame>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <low_level_input+0x34>

    return NULL;
 8008928:	2300      	movs	r3, #0
 800892a:	e091      	b.n	8008a50 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800892c:	4b4a      	ldr	r3, [pc, #296]	; (8008a58 <low_level_input+0x160>)
 800892e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008930:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008932:	4b49      	ldr	r3, [pc, #292]	; (8008a58 <low_level_input+0x160>)
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008938:	89fb      	ldrh	r3, [r7, #14]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d006      	beq.n	800894c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800893e:	89fb      	ldrh	r3, [r7, #14]
 8008940:	2203      	movs	r2, #3
 8008942:	4619      	mov	r1, r3
 8008944:	2004      	movs	r0, #4
 8008946:	f000 ff1f 	bl	8009788 <pbuf_alloc>
 800894a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d04b      	beq.n	80089ea <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008952:	4b41      	ldr	r3, [pc, #260]	; (8008a58 <low_level_input+0x160>)
 8008954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008956:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008960:	e040      	b.n	80089e4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	895b      	ldrh	r3, [r3, #10]
 8008966:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800896c:	e021      	b.n	80089b2 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	18d0      	adds	r0, r2, r3
 8008976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	18d1      	adds	r1, r2, r3
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008982:	3304      	adds	r3, #4
 8008984:	461a      	mov	r2, r3
 8008986:	f009 f959 	bl	8011c3c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	4413      	add	r3, r2
 800899c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80089a0:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80089ac:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80089bc:	4293      	cmp	r3, r2
 80089be:	d8d6      	bhi.n	800896e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	18d0      	adds	r0, r2, r3
 80089c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	4413      	add	r3, r2
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4619      	mov	r1, r3
 80089d2:	f009 f933 	bl	8011c3c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80089d6:	69fa      	ldr	r2, [r7, #28]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	4413      	add	r3, r2
 80089dc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1bb      	bne.n	8008962 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80089ea:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <low_level_input+0x160>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	e00b      	b.n	8008a0e <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	4b12      	ldr	r3, [pc, #72]	; (8008a58 <low_level_input+0x160>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d3ee      	bcc.n	80089f6 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008a18:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <low_level_input+0x160>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008a1e:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <low_level_input+0x160>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a26:	3314      	adds	r3, #20
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00d      	beq.n	8008a4e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <low_level_input+0x160>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3a:	3314      	adds	r3, #20
 8008a3c:	2280      	movs	r2, #128	; 0x80
 8008a3e:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008a40:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <low_level_input+0x160>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a48:	3308      	adds	r3, #8
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3730      	adds	r7, #48	; 0x30
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20001e40 	.word	0x20001e40

08008a5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff ff47 	bl	80088f8 <low_level_input>
 8008a6a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d010      	beq.n	8008a94 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	4798      	blx	r3
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008a80:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d006      	beq.n	8008a96 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f001 f9ef 	bl	8009e6c <pbuf_free>
    p = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	e000      	b.n	8008a96 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008a94:	bf00      	nop
  }
}
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d106      	bne.n	8008ab8 <ethernetif_init+0x1c>
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <ethernetif_init+0x48>)
 8008aac:	f44f 7202 	mov.w	r2, #520	; 0x208
 8008ab0:	490d      	ldr	r1, [pc, #52]	; (8008ae8 <ethernetif_init+0x4c>)
 8008ab2:	480e      	ldr	r0, [pc, #56]	; (8008aec <ethernetif_init+0x50>)
 8008ab4:	f009 f998 	bl	8011de8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2273      	movs	r2, #115	; 0x73
 8008abc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2274      	movs	r2, #116	; 0x74
 8008ac4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a09      	ldr	r2, [pc, #36]	; (8008af0 <ethernetif_init+0x54>)
 8008acc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a08      	ldr	r2, [pc, #32]	; (8008af4 <ethernetif_init+0x58>)
 8008ad2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff fdc3 	bl	8008660 <low_level_init>

  return ERR_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	0801346c 	.word	0x0801346c
 8008ae8:	08013488 	.word	0x08013488
 8008aec:	08013498 	.word	0x08013498
 8008af0:	0800fdc9 	.word	0x0800fdc9
 8008af4:	080087bd 	.word	0x080087bd

08008af8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008afc:	f7fb feda 	bl	80048b4 <HAL_GetTick>
 8008b00:	4603      	mov	r3, r0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b1e:	089b      	lsrs	r3, r3, #2
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d05d      	beq.n	8008be6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008b2a:	4b34      	ldr	r3, [pc, #208]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d03f      	beq.n	8008bb2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008b32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b36:	2100      	movs	r1, #0
 8008b38:	4830      	ldr	r0, [pc, #192]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008b3a:	f7fc ff98 	bl	8005a6e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008b3e:	f7fb feb9 	bl	80048b4 <HAL_GetTick>
 8008b42:	4603      	mov	r3, r0
 8008b44:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	482b      	ldr	r0, [pc, #172]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008b50:	f7fc ff25 	bl	800599e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008b54:	f7fb feae 	bl	80048b4 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b62:	d828      	bhi.n	8008bb6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0eb      	beq.n	8008b46 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008b6e:	f107 0308 	add.w	r3, r7, #8
 8008b72:	461a      	mov	r2, r3
 8008b74:	2110      	movs	r1, #16
 8008b76:	4821      	ldr	r0, [pc, #132]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008b78:	f7fc ff11 	bl	800599e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008b86:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b8c:	60da      	str	r2, [r3, #12]
 8008b8e:	e002      	b.n	8008b96 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008b90:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008ba0:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	609a      	str	r2, [r3, #8]
 8008ba6:	e016      	b.n	8008bd6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008ba8:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008bae:	609a      	str	r2, [r3, #8]
 8008bb0:	e011      	b.n	8008bd6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008bb2:	bf00      	nop
 8008bb4:	e000      	b.n	8008bb8 <ethernetif_update_config+0xb0>
          goto error;
 8008bb6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008bb8:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	08db      	lsrs	r3, r3, #3
 8008bbe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008bc0:	4b0e      	ldr	r3, [pc, #56]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	085b      	lsrs	r3, r3, #1
 8008bc6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2100      	movs	r1, #0
 8008bd0:	480a      	ldr	r0, [pc, #40]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008bd2:	f7fc ff4c 	bl	8005a6e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4808      	ldr	r0, [pc, #32]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008bda:	f7fd f80d 	bl	8005bf8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008bde:	4807      	ldr	r0, [pc, #28]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008be0:	f7fc ffab 	bl	8005b3a <HAL_ETH_Start>
 8008be4:	e002      	b.n	8008bec <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008be6:	4805      	ldr	r0, [pc, #20]	; (8008bfc <ethernetif_update_config+0xf4>)
 8008be8:	f7fc ffd6 	bl	8005b98 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f807 	bl	8008c00 <ethernetif_notify_conn_changed>
}
 8008bf2:	bf00      	nop
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20001e40 	.word	0x20001e40

08008c00 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr

08008c12 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	4603      	mov	r3, r0
 8008c1a:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	ba5b      	rev16	r3, r3
 8008c20:	b29b      	uxth	r3, r3
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc80      	pop	{r7}
 8008c2a:	4770      	bx	lr

08008c2c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	061a      	lsls	r2, r3, #24
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	021b      	lsls	r3, r3, #8
 8008c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	0a1b      	lsrs	r3, r3, #8
 8008c46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	0e1b      	lsrs	r3, r3, #24
 8008c50:	4313      	orrs	r3, r2
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bc80      	pop	{r7}
 8008c5a:	4770      	bx	lr

08008c5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008c66:	f000 f8a7 	bl	8008db8 <mem_init>
  memp_init();
 8008c6a:	f000 fb37 	bl	80092dc <memp_init>
  pbuf_init();
  netif_init();
 8008c6e:	f000 fbef 	bl	8009450 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008c72:	f006 f8ab 	bl	800edcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008c76:	f001 fc03 	bl	800a480 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8008c7a:	f005 ff89 	bl	800eb90 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008c7e:	bf00      	nop
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008c90:	4b40      	ldr	r3, [pc, #256]	; (8008d94 <plug_holes+0x10c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d206      	bcs.n	8008ca8 <plug_holes+0x20>
 8008c9a:	4b3f      	ldr	r3, [pc, #252]	; (8008d98 <plug_holes+0x110>)
 8008c9c:	f240 125d 	movw	r2, #349	; 0x15d
 8008ca0:	493e      	ldr	r1, [pc, #248]	; (8008d9c <plug_holes+0x114>)
 8008ca2:	483f      	ldr	r0, [pc, #252]	; (8008da0 <plug_holes+0x118>)
 8008ca4:	f009 f8a0 	bl	8011de8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008ca8:	4b3e      	ldr	r3, [pc, #248]	; (8008da4 <plug_holes+0x11c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d306      	bcc.n	8008cc0 <plug_holes+0x38>
 8008cb2:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <plug_holes+0x110>)
 8008cb4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008cb8:	493b      	ldr	r1, [pc, #236]	; (8008da8 <plug_holes+0x120>)
 8008cba:	4839      	ldr	r0, [pc, #228]	; (8008da0 <plug_holes+0x118>)
 8008cbc:	f009 f894 	bl	8011de8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	791b      	ldrb	r3, [r3, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d006      	beq.n	8008cd6 <plug_holes+0x4e>
 8008cc8:	4b33      	ldr	r3, [pc, #204]	; (8008d98 <plug_holes+0x110>)
 8008cca:	f240 125f 	movw	r2, #351	; 0x15f
 8008cce:	4937      	ldr	r1, [pc, #220]	; (8008dac <plug_holes+0x124>)
 8008cd0:	4833      	ldr	r0, [pc, #204]	; (8008da0 <plug_holes+0x118>)
 8008cd2:	f009 f889 	bl	8011de8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008cde:	d906      	bls.n	8008cee <plug_holes+0x66>
 8008ce0:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <plug_holes+0x110>)
 8008ce2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8008ce6:	4932      	ldr	r1, [pc, #200]	; (8008db0 <plug_holes+0x128>)
 8008ce8:	482d      	ldr	r0, [pc, #180]	; (8008da0 <plug_holes+0x118>)
 8008cea:	f009 f87d 	bl	8011de8 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8008cee:	4b29      	ldr	r3, [pc, #164]	; (8008d94 <plug_holes+0x10c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	8812      	ldrh	r2, [r2, #0]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d01f      	beq.n	8008d42 <plug_holes+0xba>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d11b      	bne.n	8008d42 <plug_holes+0xba>
 8008d0a:	4b26      	ldr	r3, [pc, #152]	; (8008da4 <plug_holes+0x11c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d016      	beq.n	8008d42 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008d14:	4b27      	ldr	r3, [pc, #156]	; (8008db4 <plug_holes+0x12c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d102      	bne.n	8008d24 <plug_holes+0x9c>
      lfree = mem;
 8008d1e:	4a25      	ldr	r2, [pc, #148]	; (8008db4 <plug_holes+0x12c>)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	881a      	ldrh	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8008d2c:	4b19      	ldr	r3, [pc, #100]	; (8008d94 <plug_holes+0x10c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	1ad1      	subs	r1, r2, r3
 8008d34:	4b17      	ldr	r3, [pc, #92]	; (8008d94 <plug_holes+0x10c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	8812      	ldrh	r2, [r2, #0]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	b28a      	uxth	r2, r1
 8008d40:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8008d42:	4b14      	ldr	r3, [pc, #80]	; (8008d94 <plug_holes+0x10c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	8852      	ldrh	r2, [r2, #2]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d01a      	beq.n	8008d8c <plug_holes+0x104>
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	791b      	ldrb	r3, [r3, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d116      	bne.n	8008d8c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008d5e:	4b15      	ldr	r3, [pc, #84]	; (8008db4 <plug_holes+0x12c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d102      	bne.n	8008d6e <plug_holes+0xe6>
      lfree = pmem;
 8008d68:	4a12      	ldr	r2, [pc, #72]	; (8008db4 <plug_holes+0x12c>)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	881a      	ldrh	r2, [r3, #0]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8008d76:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <plug_holes+0x10c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	1ad1      	subs	r1, r2, r3
 8008d7e:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <plug_holes+0x10c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	8812      	ldrh	r2, [r2, #0]
 8008d86:	4413      	add	r3, r2
 8008d88:	b28a      	uxth	r2, r1
 8008d8a:	805a      	strh	r2, [r3, #2]
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	200003d8 	.word	0x200003d8
 8008d98:	080134c0 	.word	0x080134c0
 8008d9c:	080134f0 	.word	0x080134f0
 8008da0:	08013508 	.word	0x08013508
 8008da4:	200003dc 	.word	0x200003dc
 8008da8:	08013530 	.word	0x08013530
 8008dac:	0801354c 	.word	0x0801354c
 8008db0:	08013568 	.word	0x08013568
 8008db4:	200003e0 	.word	0x200003e0

08008db8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008dbe:	4b18      	ldr	r3, [pc, #96]	; (8008e20 <mem_init+0x68>)
 8008dc0:	3303      	adds	r3, #3
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <mem_init+0x6c>)
 8008dca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008dcc:	4b15      	ldr	r3, [pc, #84]	; (8008e24 <mem_init+0x6c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008dd8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8008de6:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <mem_init+0x6c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8008dee:	4a0e      	ldr	r2, [pc, #56]	; (8008e28 <mem_init+0x70>)
 8008df0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008df2:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <mem_init+0x70>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2201      	movs	r2, #1
 8008df8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008dfa:	4b0b      	ldr	r3, [pc, #44]	; (8008e28 <mem_init+0x70>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008e02:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008e04:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <mem_init+0x70>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008e0c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <mem_init+0x6c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a06      	ldr	r2, [pc, #24]	; (8008e2c <mem_init+0x74>)
 8008e14:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bc80      	pop	{r7}
 8008e1e:	4770      	bx	lr
 8008e20:	20003670 	.word	0x20003670
 8008e24:	200003d8 	.word	0x200003d8
 8008e28:	200003dc 	.word	0x200003dc
 8008e2c:	200003e0 	.word	0x200003e0

08008e30 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d043      	beq.n	8008ec6 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <mem_free+0x26>
 8008e48:	4b22      	ldr	r3, [pc, #136]	; (8008ed4 <mem_free+0xa4>)
 8008e4a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8008e4e:	4922      	ldr	r1, [pc, #136]	; (8008ed8 <mem_free+0xa8>)
 8008e50:	4822      	ldr	r0, [pc, #136]	; (8008edc <mem_free+0xac>)
 8008e52:	f008 ffc9 	bl	8011de8 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008e56:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <mem_free+0xb0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d304      	bcc.n	8008e6a <mem_free+0x3a>
 8008e60:	4b20      	ldr	r3, [pc, #128]	; (8008ee4 <mem_free+0xb4>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d306      	bcc.n	8008e78 <mem_free+0x48>
 8008e6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ed4 <mem_free+0xa4>)
 8008e6c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8008e70:	491d      	ldr	r1, [pc, #116]	; (8008ee8 <mem_free+0xb8>)
 8008e72:	481a      	ldr	r0, [pc, #104]	; (8008edc <mem_free+0xac>)
 8008e74:	f008 ffb8 	bl	8011de8 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008e78:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <mem_free+0xb0>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d323      	bcc.n	8008eca <mem_free+0x9a>
 8008e82:	4b18      	ldr	r3, [pc, #96]	; (8008ee4 <mem_free+0xb4>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d21e      	bcs.n	8008eca <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3b08      	subs	r3, #8
 8008e90:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	791b      	ldrb	r3, [r3, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <mem_free+0x78>
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <mem_free+0xa4>)
 8008e9c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8008ea0:	4912      	ldr	r1, [pc, #72]	; (8008eec <mem_free+0xbc>)
 8008ea2:	480e      	ldr	r0, [pc, #56]	; (8008edc <mem_free+0xac>)
 8008ea4:	f008 ffa0 	bl	8011de8 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008eae:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <mem_free+0xc0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d202      	bcs.n	8008ebe <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008eb8:	4a0d      	ldr	r2, [pc, #52]	; (8008ef0 <mem_free+0xc0>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff fee2 	bl	8008c88 <plug_holes>
 8008ec4:	e002      	b.n	8008ecc <mem_free+0x9c>
    return;
 8008ec6:	bf00      	nop
 8008ec8:	e000      	b.n	8008ecc <mem_free+0x9c>
    return;
 8008eca:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	080134c0 	.word	0x080134c0
 8008ed8:	08013594 	.word	0x08013594
 8008edc:	08013508 	.word	0x08013508
 8008ee0:	200003d8 	.word	0x200003d8
 8008ee4:	200003dc 	.word	0x200003dc
 8008ee8:	080135b8 	.word	0x080135b8
 8008eec:	080135d0 	.word	0x080135d0
 8008ef0:	200003e0 	.word	0x200003e0

08008ef4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8008f00:	887b      	ldrh	r3, [r7, #2]
 8008f02:	3303      	adds	r3, #3
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	f023 0303 	bic.w	r3, r3, #3
 8008f0a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8008f0c:	887b      	ldrh	r3, [r7, #2]
 8008f0e:	2b0b      	cmp	r3, #11
 8008f10:	d801      	bhi.n	8008f16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008f12:	230c      	movs	r3, #12
 8008f14:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8008f16:	887b      	ldrh	r3, [r7, #2]
 8008f18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008f1c:	d901      	bls.n	8008f22 <mem_trim+0x2e>
    return NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	e0b1      	b.n	8009086 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008f22:	4b5b      	ldr	r3, [pc, #364]	; (8009090 <mem_trim+0x19c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d304      	bcc.n	8008f36 <mem_trim+0x42>
 8008f2c:	4b59      	ldr	r3, [pc, #356]	; (8009094 <mem_trim+0x1a0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d306      	bcc.n	8008f44 <mem_trim+0x50>
 8008f36:	4b58      	ldr	r3, [pc, #352]	; (8009098 <mem_trim+0x1a4>)
 8008f38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008f3c:	4957      	ldr	r1, [pc, #348]	; (800909c <mem_trim+0x1a8>)
 8008f3e:	4858      	ldr	r0, [pc, #352]	; (80090a0 <mem_trim+0x1ac>)
 8008f40:	f008 ff52 	bl	8011de8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008f44:	4b52      	ldr	r3, [pc, #328]	; (8009090 <mem_trim+0x19c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d304      	bcc.n	8008f58 <mem_trim+0x64>
 8008f4e:	4b51      	ldr	r3, [pc, #324]	; (8009094 <mem_trim+0x1a0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d301      	bcc.n	8008f5c <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	e094      	b.n	8009086 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3b08      	subs	r3, #8
 8008f60:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8008f62:	4b4b      	ldr	r3, [pc, #300]	; (8009090 <mem_trim+0x19c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	881a      	ldrh	r2, [r3, #0]
 8008f70:	8a7b      	ldrh	r3, [r7, #18]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	3b08      	subs	r3, #8
 8008f78:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008f7a:	887a      	ldrh	r2, [r7, #2]
 8008f7c:	8a3b      	ldrh	r3, [r7, #16]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d906      	bls.n	8008f90 <mem_trim+0x9c>
 8008f82:	4b45      	ldr	r3, [pc, #276]	; (8009098 <mem_trim+0x1a4>)
 8008f84:	f240 2206 	movw	r2, #518	; 0x206
 8008f88:	4946      	ldr	r1, [pc, #280]	; (80090a4 <mem_trim+0x1b0>)
 8008f8a:	4845      	ldr	r0, [pc, #276]	; (80090a0 <mem_trim+0x1ac>)
 8008f8c:	f008 ff2c 	bl	8011de8 <iprintf>
  if (newsize > size) {
 8008f90:	887a      	ldrh	r2, [r7, #2]
 8008f92:	8a3b      	ldrh	r3, [r7, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d901      	bls.n	8008f9c <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e074      	b.n	8009086 <mem_trim+0x192>
  }
  if (newsize == size) {
 8008f9c:	887a      	ldrh	r2, [r7, #2]
 8008f9e:	8a3b      	ldrh	r3, [r7, #16]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d101      	bne.n	8008fa8 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	e06e      	b.n	8009086 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8008fa8:	4b39      	ldr	r3, [pc, #228]	; (8009090 <mem_trim+0x19c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	8812      	ldrh	r2, [r2, #0]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	791b      	ldrb	r3, [r3, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d131      	bne.n	8009020 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008fc2:	8a7a      	ldrh	r2, [r7, #18]
 8008fc4:	887b      	ldrh	r3, [r7, #2]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3308      	adds	r3, #8
 8008fcc:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8008fce:	4b36      	ldr	r3, [pc, #216]	; (80090a8 <mem_trim+0x1b4>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d105      	bne.n	8008fe4 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8008fd8:	4b2d      	ldr	r3, [pc, #180]	; (8009090 <mem_trim+0x19c>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	897b      	ldrh	r3, [r7, #10]
 8008fde:	4413      	add	r3, r2
 8008fe0:	4a31      	ldr	r2, [pc, #196]	; (80090a8 <mem_trim+0x1b4>)
 8008fe2:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8008fe4:	4b2a      	ldr	r3, [pc, #168]	; (8009090 <mem_trim+0x19c>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	897b      	ldrh	r3, [r7, #10]
 8008fea:	4413      	add	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	893a      	ldrh	r2, [r7, #8]
 8008ff8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	8a7a      	ldrh	r2, [r7, #18]
 8008ffe:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	897a      	ldrh	r2, [r7, #10]
 8009004:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800900e:	d039      	beq.n	8009084 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009010:	4b1f      	ldr	r3, [pc, #124]	; (8009090 <mem_trim+0x19c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	8812      	ldrh	r2, [r2, #0]
 8009018:	4413      	add	r3, r2
 800901a:	897a      	ldrh	r2, [r7, #10]
 800901c:	805a      	strh	r2, [r3, #2]
 800901e:	e031      	b.n	8009084 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009020:	887b      	ldrh	r3, [r7, #2]
 8009022:	f103 0214 	add.w	r2, r3, #20
 8009026:	8a3b      	ldrh	r3, [r7, #16]
 8009028:	429a      	cmp	r2, r3
 800902a:	d82b      	bhi.n	8009084 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800902c:	8a7a      	ldrh	r2, [r7, #18]
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	4413      	add	r3, r2
 8009032:	b29b      	uxth	r3, r3
 8009034:	3308      	adds	r3, #8
 8009036:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009038:	4b15      	ldr	r3, [pc, #84]	; (8009090 <mem_trim+0x19c>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	897b      	ldrh	r3, [r7, #10]
 800903e:	4413      	add	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8009042:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <mem_trim+0x1b4>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	429a      	cmp	r2, r3
 800904a:	d202      	bcs.n	8009052 <mem_trim+0x15e>
      lfree = mem2;
 800904c:	4a16      	ldr	r2, [pc, #88]	; (80090a8 <mem_trim+0x1b4>)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	881a      	ldrh	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8a7a      	ldrh	r2, [r7, #18]
 8009064:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	897a      	ldrh	r2, [r7, #10]
 800906a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009074:	d006      	beq.n	8009084 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009076:	4b06      	ldr	r3, [pc, #24]	; (8009090 <mem_trim+0x19c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	8812      	ldrh	r2, [r2, #0]
 800907e:	4413      	add	r3, r2
 8009080:	897a      	ldrh	r2, [r7, #10]
 8009082:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009084:	687b      	ldr	r3, [r7, #4]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	200003d8 	.word	0x200003d8
 8009094:	200003dc 	.word	0x200003dc
 8009098:	080134c0 	.word	0x080134c0
 800909c:	080135e4 	.word	0x080135e4
 80090a0:	08013508 	.word	0x08013508
 80090a4:	080135fc 	.word	0x080135fc
 80090a8:	200003e0 	.word	0x200003e0

080090ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b088      	sub	sp, #32
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <mem_malloc+0x14>
    return NULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	e0c7      	b.n	8009250 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80090c0:	88fb      	ldrh	r3, [r7, #6]
 80090c2:	3303      	adds	r3, #3
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f023 0303 	bic.w	r3, r3, #3
 80090ca:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80090cc:	88fb      	ldrh	r3, [r7, #6]
 80090ce:	2b0b      	cmp	r3, #11
 80090d0:	d801      	bhi.n	80090d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80090d2:	230c      	movs	r3, #12
 80090d4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80090dc:	d901      	bls.n	80090e2 <mem_malloc+0x36>
    return NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	e0b6      	b.n	8009250 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80090e2:	4b5d      	ldr	r3, [pc, #372]	; (8009258 <mem_malloc+0x1ac>)
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	4b5d      	ldr	r3, [pc, #372]	; (800925c <mem_malloc+0x1b0>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	83fb      	strh	r3, [r7, #30]
 80090ee:	e0a7      	b.n	8009240 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80090f0:	4b5a      	ldr	r3, [pc, #360]	; (800925c <mem_malloc+0x1b0>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	8bfb      	ldrh	r3, [r7, #30]
 80090f6:	4413      	add	r3, r2
 80090f8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	791b      	ldrb	r3, [r3, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f040 8098 	bne.w	8009234 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	461a      	mov	r2, r3
 800910a:	8bfb      	ldrh	r3, [r7, #30]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	f1a3 0208 	sub.w	r2, r3, #8
 8009112:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8009114:	429a      	cmp	r2, r3
 8009116:	f0c0 808d 	bcc.w	8009234 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	8bfb      	ldrh	r3, [r7, #30]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	f1a3 0208 	sub.w	r2, r3, #8
 8009128:	88fb      	ldrh	r3, [r7, #6]
 800912a:	3314      	adds	r3, #20
 800912c:	429a      	cmp	r2, r3
 800912e:	d327      	bcc.n	8009180 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8009130:	8bfa      	ldrh	r2, [r7, #30]
 8009132:	88fb      	ldrh	r3, [r7, #6]
 8009134:	4413      	add	r3, r2
 8009136:	b29b      	uxth	r3, r3
 8009138:	3308      	adds	r3, #8
 800913a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800913c:	4b47      	ldr	r3, [pc, #284]	; (800925c <mem_malloc+0x1b0>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	8a7b      	ldrh	r3, [r7, #18]
 8009142:	4413      	add	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	881a      	ldrh	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8bfa      	ldrh	r2, [r7, #30]
 8009158:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	8a7a      	ldrh	r2, [r7, #18]
 800915e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2201      	movs	r2, #1
 8009164:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800916e:	d00a      	beq.n	8009186 <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009170:	4b3a      	ldr	r3, [pc, #232]	; (800925c <mem_malloc+0x1b0>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	8812      	ldrh	r2, [r2, #0]
 8009178:	4413      	add	r3, r2
 800917a:	8a7a      	ldrh	r2, [r7, #18]
 800917c:	805a      	strh	r2, [r3, #2]
 800917e:	e002      	b.n	8009186 <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2201      	movs	r2, #1
 8009184:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009186:	4b34      	ldr	r3, [pc, #208]	; (8009258 <mem_malloc+0x1ac>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	429a      	cmp	r2, r3
 800918e:	d127      	bne.n	80091e0 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8009190:	4b31      	ldr	r3, [pc, #196]	; (8009258 <mem_malloc+0x1ac>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009196:	e005      	b.n	80091a4 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8009198:	4b30      	ldr	r3, [pc, #192]	; (800925c <mem_malloc+0x1b0>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	8812      	ldrh	r2, [r2, #0]
 80091a0:	4413      	add	r3, r2
 80091a2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	791b      	ldrb	r3, [r3, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <mem_malloc+0x10a>
 80091ac:	4b2c      	ldr	r3, [pc, #176]	; (8009260 <mem_malloc+0x1b4>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d1f0      	bne.n	8009198 <mem_malloc+0xec>
          }
          lfree = cur;
 80091b6:	4a28      	ldr	r2, [pc, #160]	; (8009258 <mem_malloc+0x1ac>)
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80091bc:	4b26      	ldr	r3, [pc, #152]	; (8009258 <mem_malloc+0x1ac>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b27      	ldr	r3, [pc, #156]	; (8009260 <mem_malloc+0x1b4>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d00b      	beq.n	80091e0 <mem_malloc+0x134>
 80091c8:	4b23      	ldr	r3, [pc, #140]	; (8009258 <mem_malloc+0x1ac>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	791b      	ldrb	r3, [r3, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d006      	beq.n	80091e0 <mem_malloc+0x134>
 80091d2:	4b24      	ldr	r3, [pc, #144]	; (8009264 <mem_malloc+0x1b8>)
 80091d4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80091d8:	4923      	ldr	r1, [pc, #140]	; (8009268 <mem_malloc+0x1bc>)
 80091da:	4824      	ldr	r0, [pc, #144]	; (800926c <mem_malloc+0x1c0>)
 80091dc:	f008 fe04 	bl	8011de8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80091e0:	88fa      	ldrh	r2, [r7, #6]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	4413      	add	r3, r2
 80091e6:	3308      	adds	r3, #8
 80091e8:	4a1d      	ldr	r2, [pc, #116]	; (8009260 <mem_malloc+0x1b4>)
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d906      	bls.n	80091fe <mem_malloc+0x152>
 80091f0:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <mem_malloc+0x1b8>)
 80091f2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80091f6:	491e      	ldr	r1, [pc, #120]	; (8009270 <mem_malloc+0x1c4>)
 80091f8:	481c      	ldr	r0, [pc, #112]	; (800926c <mem_malloc+0x1c0>)
 80091fa:	f008 fdf5 	bl	8011de8 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f003 0303 	and.w	r3, r3, #3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d006      	beq.n	8009216 <mem_malloc+0x16a>
 8009208:	4b16      	ldr	r3, [pc, #88]	; (8009264 <mem_malloc+0x1b8>)
 800920a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800920e:	4919      	ldr	r1, [pc, #100]	; (8009274 <mem_malloc+0x1c8>)
 8009210:	4816      	ldr	r0, [pc, #88]	; (800926c <mem_malloc+0x1c0>)
 8009212:	f008 fde9 	bl	8011de8 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f003 0303 	and.w	r3, r3, #3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d006      	beq.n	800922e <mem_malloc+0x182>
 8009220:	4b10      	ldr	r3, [pc, #64]	; (8009264 <mem_malloc+0x1b8>)
 8009222:	f240 22d7 	movw	r2, #727	; 0x2d7
 8009226:	4914      	ldr	r1, [pc, #80]	; (8009278 <mem_malloc+0x1cc>)
 8009228:	4810      	ldr	r0, [pc, #64]	; (800926c <mem_malloc+0x1c0>)
 800922a:	f008 fddd 	bl	8011de8 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	3308      	adds	r3, #8
 8009232:	e00d      	b.n	8009250 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8009234:	4b09      	ldr	r3, [pc, #36]	; (800925c <mem_malloc+0x1b0>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	8bfb      	ldrh	r3, [r7, #30]
 800923a:	4413      	add	r3, r2
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009240:	8bfa      	ldrh	r2, [r7, #30]
 8009242:	88fb      	ldrh	r3, [r7, #6]
 8009244:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009248:	429a      	cmp	r2, r3
 800924a:	f4ff af51 	bcc.w	80090f0 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	200003e0 	.word	0x200003e0
 800925c:	200003d8 	.word	0x200003d8
 8009260:	200003dc 	.word	0x200003dc
 8009264:	080134c0 	.word	0x080134c0
 8009268:	0801361c 	.word	0x0801361c
 800926c:	08013508 	.word	0x08013508
 8009270:	08013638 	.word	0x08013638
 8009274:	08013668 	.word	0x08013668
 8009278:	08013698 	.word	0x08013698

0800927c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	3303      	adds	r3, #3
 8009292:	f023 0303 	bic.w	r3, r3, #3
 8009296:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	e011      	b.n	80092c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	4413      	add	r3, r2
 80092ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	885b      	ldrh	r3, [r3, #2]
 80092c6:	461a      	mov	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4293      	cmp	r3, r2
 80092cc:	dbe7      	blt.n	800929e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr
	...

080092dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80092e2:	2300      	movs	r3, #0
 80092e4:	80fb      	strh	r3, [r7, #6]
 80092e6:	e009      	b.n	80092fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	4a08      	ldr	r2, [pc, #32]	; (800930c <memp_init+0x30>)
 80092ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff ffc3 	bl	800927c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	3301      	adds	r3, #1
 80092fa:	80fb      	strh	r3, [r7, #6]
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	2b08      	cmp	r3, #8
 8009300:	d9f2      	bls.n	80092e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	080152ac 	.word	0x080152ac

08009310 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d012      	beq.n	800934c <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d006      	beq.n	8009348 <do_memp_malloc_pool+0x38>
 800933a:	4b07      	ldr	r3, [pc, #28]	; (8009358 <do_memp_malloc_pool+0x48>)
 800933c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8009340:	4906      	ldr	r1, [pc, #24]	; (800935c <do_memp_malloc_pool+0x4c>)
 8009342:	4807      	ldr	r0, [pc, #28]	; (8009360 <do_memp_malloc_pool+0x50>)
 8009344:	f008 fd50 	bl	8011de8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	e000      	b.n	800934e <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	080136bc 	.word	0x080136bc
 800935c:	080136ec 	.word	0x080136ec
 8009360:	08013710 	.word	0x08013710

08009364 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	2b08      	cmp	r3, #8
 8009372:	d908      	bls.n	8009386 <memp_malloc+0x22>
 8009374:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <memp_malloc+0x3c>)
 8009376:	f240 1287 	movw	r2, #391	; 0x187
 800937a:	490a      	ldr	r1, [pc, #40]	; (80093a4 <memp_malloc+0x40>)
 800937c:	480a      	ldr	r0, [pc, #40]	; (80093a8 <memp_malloc+0x44>)
 800937e:	f008 fd33 	bl	8011de8 <iprintf>
 8009382:	2300      	movs	r3, #0
 8009384:	e008      	b.n	8009398 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	4a08      	ldr	r2, [pc, #32]	; (80093ac <memp_malloc+0x48>)
 800938a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff ffbe 	bl	8009310 <do_memp_malloc_pool>
 8009394:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009396:	68fb      	ldr	r3, [r7, #12]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	080136bc 	.word	0x080136bc
 80093a4:	0801374c 	.word	0x0801374c
 80093a8:	08013710 	.word	0x08013710
 80093ac:	080152ac 	.word	0x080152ac

080093b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	f003 0303 	and.w	r3, r3, #3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d006      	beq.n	80093d2 <do_memp_free_pool+0x22>
 80093c4:	4b0a      	ldr	r3, [pc, #40]	; (80093f0 <do_memp_free_pool+0x40>)
 80093c6:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80093ca:	490a      	ldr	r1, [pc, #40]	; (80093f4 <do_memp_free_pool+0x44>)
 80093cc:	480a      	ldr	r0, [pc, #40]	; (80093f8 <do_memp_free_pool+0x48>)
 80093ce:	f008 fd0b 	bl	8011de8 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80093e8:	bf00      	nop
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	080136bc 	.word	0x080136bc
 80093f4:	0801376c 	.word	0x0801376c
 80093f8:	08013710 	.word	0x08013710

080093fc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	6039      	str	r1, [r7, #0]
 8009406:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	2b08      	cmp	r3, #8
 800940c:	d907      	bls.n	800941e <memp_free+0x22>
 800940e:	4b0c      	ldr	r3, [pc, #48]	; (8009440 <memp_free+0x44>)
 8009410:	f240 12db 	movw	r2, #475	; 0x1db
 8009414:	490b      	ldr	r1, [pc, #44]	; (8009444 <memp_free+0x48>)
 8009416:	480c      	ldr	r0, [pc, #48]	; (8009448 <memp_free+0x4c>)
 8009418:	f008 fce6 	bl	8011de8 <iprintf>
 800941c:	e00c      	b.n	8009438 <memp_free+0x3c>

  if (mem == NULL) {
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d008      	beq.n	8009436 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	4a09      	ldr	r2, [pc, #36]	; (800944c <memp_free+0x50>)
 8009428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ffbe 	bl	80093b0 <do_memp_free_pool>
 8009434:	e000      	b.n	8009438 <memp_free+0x3c>
    return;
 8009436:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	080136bc 	.word	0x080136bc
 8009444:	0801378c 	.word	0x0801378c
 8009448:	08013710 	.word	0x08013710
 800944c:	080152ac 	.word	0x080152ac

08009450 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009454:	bf00      	nop
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr

0800945c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d105      	bne.n	800947c <netif_add+0x20>
 8009470:	4b21      	ldr	r3, [pc, #132]	; (80094f8 <netif_add+0x9c>)
 8009472:	22fb      	movs	r2, #251	; 0xfb
 8009474:	4921      	ldr	r1, [pc, #132]	; (80094fc <netif_add+0xa0>)
 8009476:	4822      	ldr	r0, [pc, #136]	; (8009500 <netif_add+0xa4>)
 8009478:	f008 fcb6 	bl	8011de8 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2203      	movs	r2, #3
 800949a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80094aa:	4b16      	ldr	r3, [pc, #88]	; (8009504 <netif_add+0xa8>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	b2d1      	uxtb	r1, r2
 80094b2:	4a14      	ldr	r2, [pc, #80]	; (8009504 <netif_add+0xa8>)
 80094b4:	7011      	strb	r1, [r2, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a3a      	ldr	r2, [r7, #32]
 80094c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f81f 	bl	800950c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	4798      	blx	r3
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <netif_add+0x82>
    return NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	e007      	b.n	80094ee <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80094de:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <netif_add+0xac>)
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80094e6:	4a08      	ldr	r2, [pc, #32]	; (8009508 <netif_add+0xac>)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80094ec:	68fb      	ldr	r3, [r7, #12]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	080137a8 	.word	0x080137a8
 80094fc:	080137dc 	.word	0x080137dc
 8009500:	080137f4 	.word	0x080137f4
 8009504:	20000408 	.word	0x20000408
 8009508:	20006b78 	.word	0x20006b78

0800950c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <netif_set_addr+0x1c>
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10c      	bne.n	8009542 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 f81a 	bl	8009564 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 f861 	bl	80095fa <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 f84a 	bl	80095d4 <netif_set_gw>
 8009540:	e00c      	b.n	800955c <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 f858 	bl	80095fa <netif_set_netmask>
    netif_set_gw(netif, gw);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f841 	bl	80095d4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8009552:	68b9      	ldr	r1, [r7, #8]
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 f805 	bl	8009564 <netif_set_ipaddr>
  }
}
 800955a:	bf00      	nop
 800955c:	bf00      	nop
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <netif_set_ipaddr+0x18>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	e002      	b.n	8009582 <netif_set_ipaddr+0x1e>
 800957c:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <netif_set_ipaddr+0x6c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3304      	adds	r3, #4
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d01c      	beq.n	80095c8 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3304      	adds	r3, #4
 8009592:	f107 020c 	add.w	r2, r7, #12
 8009596:	4611      	mov	r1, r2
 8009598:	4618      	mov	r0, r3
 800959a:	f002 f905 	bl	800b7a8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3304      	adds	r3, #4
 80095a2:	f107 020c 	add.w	r2, r7, #12
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f005 ffbf 	bl	800f52c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <netif_set_ipaddr+0x56>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	e000      	b.n	80095bc <netif_set_ipaddr+0x58>
 80095ba:	2300      	movs	r3, #0
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80095c0:	2101      	movs	r1, #1
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f85d 	bl	8009682 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	08015310 	.word	0x08015310

080095d4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <netif_set_gw+0x16>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	e000      	b.n	80095ec <netif_set_gw+0x18>
 80095ea:	2300      	movs	r3, #0
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bc80      	pop	{r7}
 80095f8:	4770      	bx	lr

080095fa <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <netif_set_netmask+0x16>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	e000      	b.n	8009612 <netif_set_netmask+0x18>
 8009610:	2300      	movs	r3, #0
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	bc80      	pop	{r7}
 800961e:	4770      	bx	lr

08009620 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009628:	4a03      	ldr	r2, [pc, #12]	; (8009638 <netif_set_default+0x18>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	bc80      	pop	{r7}
 8009636:	4770      	bx	lr
 8009638:	20006b7c 	.word	0x20006b7c

0800963c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d113      	bne.n	800967a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	b2da      	uxtb	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800966a:	f003 0304 	and.w	r3, r3, #4
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009672:	2103      	movs	r1, #3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f804 	bl	8009682 <netif_issue_reports>
    }
  }
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	460b      	mov	r3, r1
 800968c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800968e:	78fb      	ldrb	r3, [r7, #3]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d011      	beq.n	80096bc <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00c      	beq.n	80096bc <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f006 fe6a 	bl	8010390 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d012      	beq.n	8009700 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096e0:	f023 0301 	bic.w	r3, r3, #1
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f006 fa0e 	bl	800fb1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  if (netif) {
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	61da      	str	r2, [r3, #28]
  }
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	bc80      	pop	{r7}
 8009726:	4770      	bx	lr

08009728 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800972e:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <pbuf_free_ooseq+0x40>)
 8009730:	2200      	movs	r2, #0
 8009732:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009734:	4b0d      	ldr	r3, [pc, #52]	; (800976c <pbuf_free_ooseq+0x44>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	e00f      	b.n	800975c <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009740:	2b00      	cmp	r3, #0
 8009742:	d008      	beq.n	8009756 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009748:	4618      	mov	r0, r3
 800974a:	f001 fd6a 	bl	800b222 <tcp_segs_free>
      pcb->ooseq = NULL;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8009754:	e005      	b.n	8009762 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	607b      	str	r3, [r7, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1ec      	bne.n	800973c <pbuf_free_ooseq+0x14>
    }
  }
}
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20006b80 	.word	0x20006b80
 800976c:	20006b88 	.word	0x20006b88

08009770 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009774:	4b03      	ldr	r3, [pc, #12]	; (8009784 <pbuf_pool_is_empty+0x14>)
 8009776:	2201      	movs	r2, #1
 8009778:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800977a:	bf00      	nop
 800977c:	46bd      	mov	sp, r7
 800977e:	bc80      	pop	{r7}
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20006b80 	.word	0x20006b80

08009788 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	71fb      	strb	r3, [r7, #7]
 8009792:	460b      	mov	r3, r1
 8009794:	80bb      	strh	r3, [r7, #4]
 8009796:	4613      	mov	r3, r2
 8009798:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	2b04      	cmp	r3, #4
 800979e:	d81c      	bhi.n	80097da <pbuf_alloc+0x52>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <pbuf_alloc+0x20>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097bd 	.word	0x080097bd
 80097ac:	080097c3 	.word	0x080097c3
 80097b0:	080097c9 	.word	0x080097c9
 80097b4:	080097cf 	.word	0x080097cf
 80097b8:	080097d5 	.word	0x080097d5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80097bc:	2336      	movs	r3, #54	; 0x36
 80097be:	82fb      	strh	r3, [r7, #22]
    break;
 80097c0:	e014      	b.n	80097ec <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80097c2:	2322      	movs	r3, #34	; 0x22
 80097c4:	82fb      	strh	r3, [r7, #22]
    break;
 80097c6:	e011      	b.n	80097ec <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80097c8:	230e      	movs	r3, #14
 80097ca:	82fb      	strh	r3, [r7, #22]
    break;
 80097cc:	e00e      	b.n	80097ec <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80097ce:	2300      	movs	r3, #0
 80097d0:	82fb      	strh	r3, [r7, #22]
    break;
 80097d2:	e00b      	b.n	80097ec <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	82fb      	strh	r3, [r7, #22]
    break;
 80097d8:	e008      	b.n	80097ec <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80097da:	4ba5      	ldr	r3, [pc, #660]	; (8009a70 <pbuf_alloc+0x2e8>)
 80097dc:	f44f 728b 	mov.w	r2, #278	; 0x116
 80097e0:	49a4      	ldr	r1, [pc, #656]	; (8009a74 <pbuf_alloc+0x2ec>)
 80097e2:	48a5      	ldr	r0, [pc, #660]	; (8009a78 <pbuf_alloc+0x2f0>)
 80097e4:	f008 fb00 	bl	8011de8 <iprintf>
    return NULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	e15d      	b.n	8009aa8 <pbuf_alloc+0x320>
  }

  switch (type) {
 80097ec:	79bb      	ldrb	r3, [r7, #6]
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d00d      	beq.n	800980e <pbuf_alloc+0x86>
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	f300 8133 	bgt.w	8009a5e <pbuf_alloc+0x2d6>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80d0 	beq.w	800999e <pbuf_alloc+0x216>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f2c0 812d 	blt.w	8009a5e <pbuf_alloc+0x2d6>
 8009804:	3b01      	subs	r3, #1
 8009806:	2b01      	cmp	r3, #1
 8009808:	f200 8129 	bhi.w	8009a5e <pbuf_alloc+0x2d6>
 800980c:	e10d      	b.n	8009a2a <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800980e:	2008      	movs	r0, #8
 8009810:	f7ff fda8 	bl	8009364 <memp_malloc>
 8009814:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d103      	bne.n	8009824 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800981c:	f7ff ffa8 	bl	8009770 <pbuf_pool_is_empty>
      return NULL;
 8009820:	2300      	movs	r3, #0
 8009822:	e141      	b.n	8009aa8 <pbuf_alloc+0x320>
    }
    p->type = type;
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	79ba      	ldrb	r2, [r7, #6]
 8009828:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009830:	8afb      	ldrh	r3, [r7, #22]
 8009832:	3310      	adds	r3, #16
 8009834:	69fa      	ldr	r2, [r7, #28]
 8009836:	4413      	add	r3, r2
 8009838:	3303      	adds	r3, #3
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	461a      	mov	r2, r3
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d006      	beq.n	800985e <pbuf_alloc+0xd6>
 8009850:	4b87      	ldr	r3, [pc, #540]	; (8009a70 <pbuf_alloc+0x2e8>)
 8009852:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009856:	4989      	ldr	r1, [pc, #548]	; (8009a7c <pbuf_alloc+0x2f4>)
 8009858:	4887      	ldr	r0, [pc, #540]	; (8009a78 <pbuf_alloc+0x2f0>)
 800985a:	f008 fac5 	bl	8011de8 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	88ba      	ldrh	r2, [r7, #4]
 8009862:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009864:	8afb      	ldrh	r3, [r7, #22]
 8009866:	3303      	adds	r3, #3
 8009868:	f023 0303 	bic.w	r3, r3, #3
 800986c:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8009870:	88bb      	ldrh	r3, [r7, #4]
 8009872:	4293      	cmp	r3, r2
 8009874:	bf28      	it	cs
 8009876:	4613      	movcs	r3, r2
 8009878:	b29a      	uxth	r2, r3
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	69fa      	ldr	r2, [r7, #28]
 8009884:	8952      	ldrh	r2, [r2, #10]
 8009886:	441a      	add	r2, r3
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800988e:	429a      	cmp	r2, r3
 8009890:	d906      	bls.n	80098a0 <pbuf_alloc+0x118>
 8009892:	4b77      	ldr	r3, [pc, #476]	; (8009a70 <pbuf_alloc+0x2e8>)
 8009894:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009898:	4979      	ldr	r1, [pc, #484]	; (8009a80 <pbuf_alloc+0x2f8>)
 800989a:	4877      	ldr	r0, [pc, #476]	; (8009a78 <pbuf_alloc+0x2f0>)
 800989c:	f008 faa4 	bl	8011de8 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80098a0:	8afb      	ldrh	r3, [r7, #22]
 80098a2:	3303      	adds	r3, #3
 80098a4:	f023 0303 	bic.w	r3, r3, #3
 80098a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80098ac:	d106      	bne.n	80098bc <pbuf_alloc+0x134>
 80098ae:	4b70      	ldr	r3, [pc, #448]	; (8009a70 <pbuf_alloc+0x2e8>)
 80098b0:	f240 1231 	movw	r2, #305	; 0x131
 80098b4:	4973      	ldr	r1, [pc, #460]	; (8009a84 <pbuf_alloc+0x2fc>)
 80098b6:	4870      	ldr	r0, [pc, #448]	; (8009a78 <pbuf_alloc+0x2f0>)
 80098b8:	f008 fa96 	bl	8011de8 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2201      	movs	r2, #1
 80098c0:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80098c6:	88bb      	ldrh	r3, [r7, #4]
 80098c8:	69fa      	ldr	r2, [r7, #28]
 80098ca:	8952      	ldrh	r2, [r2, #10]
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80098d0:	e061      	b.n	8009996 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80098d2:	2008      	movs	r0, #8
 80098d4:	f7ff fd46 	bl	8009364 <memp_malloc>
 80098d8:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d106      	bne.n	80098ee <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80098e0:	f7ff ff46 	bl	8009770 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80098e4:	69f8      	ldr	r0, [r7, #28]
 80098e6:	f000 fac1 	bl	8009e6c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e0dc      	b.n	8009aa8 <pbuf_alloc+0x320>
      }
      q->type = type;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	79ba      	ldrb	r2, [r7, #6]
 80098f2:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800990c:	4293      	cmp	r3, r2
 800990e:	dd06      	ble.n	800991e <pbuf_alloc+0x196>
 8009910:	4b57      	ldr	r3, [pc, #348]	; (8009a70 <pbuf_alloc+0x2e8>)
 8009912:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8009916:	495c      	ldr	r1, [pc, #368]	; (8009a88 <pbuf_alloc+0x300>)
 8009918:	4857      	ldr	r0, [pc, #348]	; (8009a78 <pbuf_alloc+0x2f0>)
 800991a:	f008 fa65 	bl	8011de8 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	b29a      	uxth	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	b29b      	uxth	r3, r3
 800992a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800992e:	bf28      	it	cs
 8009930:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8009934:	b29a      	uxth	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f103 0210 	add.w	r2, r3, #16
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	f003 0303 	and.w	r3, r3, #3
 800994c:	2b00      	cmp	r3, #0
 800994e:	d006      	beq.n	800995e <pbuf_alloc+0x1d6>
 8009950:	4b47      	ldr	r3, [pc, #284]	; (8009a70 <pbuf_alloc+0x2e8>)
 8009952:	f240 1251 	movw	r2, #337	; 0x151
 8009956:	494d      	ldr	r1, [pc, #308]	; (8009a8c <pbuf_alloc+0x304>)
 8009958:	4847      	ldr	r0, [pc, #284]	; (8009a78 <pbuf_alloc+0x2f0>)
 800995a:	f008 fa45 	bl	8011de8 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	69fa      	ldr	r2, [r7, #28]
 8009964:	8952      	ldrh	r2, [r2, #10]
 8009966:	441a      	add	r2, r3
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800996e:	429a      	cmp	r2, r3
 8009970:	d906      	bls.n	8009980 <pbuf_alloc+0x1f8>
 8009972:	4b3f      	ldr	r3, [pc, #252]	; (8009a70 <pbuf_alloc+0x2e8>)
 8009974:	f240 1253 	movw	r2, #339	; 0x153
 8009978:	4941      	ldr	r1, [pc, #260]	; (8009a80 <pbuf_alloc+0x2f8>)
 800997a:	483f      	ldr	r0, [pc, #252]	; (8009a78 <pbuf_alloc+0x2f0>)
 800997c:	f008 fa34 	bl	8011de8 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	895b      	ldrh	r3, [r3, #10]
 800998a:	461a      	mov	r2, r3
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	dc9a      	bgt.n	80098d2 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800999c:	e07d      	b.n	8009a9a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800999e:	8afb      	ldrh	r3, [r7, #22]
 80099a0:	3313      	adds	r3, #19
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	f023 0303 	bic.w	r3, r3, #3
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	88bb      	ldrh	r3, [r7, #4]
 80099ac:	3303      	adds	r3, #3
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f023 0303 	bic.w	r3, r3, #3
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4413      	add	r3, r2
 80099b8:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80099ba:	897a      	ldrh	r2, [r7, #10]
 80099bc:	88bb      	ldrh	r3, [r7, #4]
 80099be:	3303      	adds	r3, #3
 80099c0:	f023 0303 	bic.w	r3, r3, #3
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d201      	bcs.n	80099cc <pbuf_alloc+0x244>
        return NULL;
 80099c8:	2300      	movs	r3, #0
 80099ca:	e06d      	b.n	8009aa8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80099cc:	897b      	ldrh	r3, [r7, #10]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff fb6c 	bl	80090ac <mem_malloc>
 80099d4:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <pbuf_alloc+0x258>
      return NULL;
 80099dc:	2300      	movs	r3, #0
 80099de:	e063      	b.n	8009aa8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80099e0:	8afb      	ldrh	r3, [r7, #22]
 80099e2:	3310      	adds	r3, #16
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	3303      	adds	r3, #3
 80099ea:	f023 0303 	bic.w	r3, r3, #3
 80099ee:	461a      	mov	r2, r3
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	88ba      	ldrh	r2, [r7, #4]
 80099f8:	811a      	strh	r2, [r3, #8]
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	891a      	ldrh	r2, [r3, #8]
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
    p->type = type;
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	79ba      	ldrb	r2, [r7, #6]
 8009a0c:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d03e      	beq.n	8009a98 <pbuf_alloc+0x310>
 8009a1a:	4b15      	ldr	r3, [pc, #84]	; (8009a70 <pbuf_alloc+0x2e8>)
 8009a1c:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8009a20:	491b      	ldr	r1, [pc, #108]	; (8009a90 <pbuf_alloc+0x308>)
 8009a22:	4815      	ldr	r0, [pc, #84]	; (8009a78 <pbuf_alloc+0x2f0>)
 8009a24:	f008 f9e0 	bl	8011de8 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8009a28:	e036      	b.n	8009a98 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009a2a:	2007      	movs	r0, #7
 8009a2c:	f7ff fc9a 	bl	8009364 <memp_malloc>
 8009a30:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e035      	b.n	8009aa8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	88ba      	ldrh	r2, [r7, #4]
 8009a46:	811a      	strh	r2, [r3, #8]
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	891a      	ldrh	r2, [r3, #8]
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
    p->type = type;
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	79ba      	ldrb	r2, [r7, #6]
 8009a5a:	731a      	strb	r2, [r3, #12]
    break;
 8009a5c:	e01d      	b.n	8009a9a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009a5e:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <pbuf_alloc+0x2e8>)
 8009a60:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8009a64:	490b      	ldr	r1, [pc, #44]	; (8009a94 <pbuf_alloc+0x30c>)
 8009a66:	4804      	ldr	r0, [pc, #16]	; (8009a78 <pbuf_alloc+0x2f0>)
 8009a68:	f008 f9be 	bl	8011de8 <iprintf>
    return NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	e01b      	b.n	8009aa8 <pbuf_alloc+0x320>
 8009a70:	0801381c 	.word	0x0801381c
 8009a74:	0801384c 	.word	0x0801384c
 8009a78:	08013868 	.word	0x08013868
 8009a7c:	08013890 	.word	0x08013890
 8009a80:	080138c0 	.word	0x080138c0
 8009a84:	080138f4 	.word	0x080138f4
 8009a88:	08013928 	.word	0x08013928
 8009a8c:	0801393c 	.word	0x0801393c
 8009a90:	0801396c 	.word	0x0801396c
 8009a94:	08013998 	.word	0x08013998
    break;
 8009a98:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	4603      	mov	r3, r0
 8009aba:	71fb      	strb	r3, [r7, #7]
 8009abc:	460b      	mov	r3, r1
 8009abe:	80bb      	strh	r3, [r7, #4]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d81b      	bhi.n	8009b02 <pbuf_alloced_custom+0x52>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <pbuf_alloced_custom+0x20>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae5 	.word	0x08009ae5
 8009ad4:	08009aeb 	.word	0x08009aeb
 8009ad8:	08009af1 	.word	0x08009af1
 8009adc:	08009af7 	.word	0x08009af7
 8009ae0:	08009afd 	.word	0x08009afd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009ae4:	2336      	movs	r3, #54	; 0x36
 8009ae6:	81fb      	strh	r3, [r7, #14]
    break;
 8009ae8:	e014      	b.n	8009b14 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009aea:	2322      	movs	r3, #34	; 0x22
 8009aec:	81fb      	strh	r3, [r7, #14]
    break;
 8009aee:	e011      	b.n	8009b14 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009af0:	230e      	movs	r3, #14
 8009af2:	81fb      	strh	r3, [r7, #14]
    break;
 8009af4:	e00e      	b.n	8009b14 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009af6:	2300      	movs	r3, #0
 8009af8:	81fb      	strh	r3, [r7, #14]
    break;
 8009afa:	e00b      	b.n	8009b14 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	81fb      	strh	r3, [r7, #14]
    break;
 8009b00:	e008      	b.n	8009b14 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8009b02:	4b1d      	ldr	r3, [pc, #116]	; (8009b78 <pbuf_alloced_custom+0xc8>)
 8009b04:	f240 12c5 	movw	r2, #453	; 0x1c5
 8009b08:	491c      	ldr	r1, [pc, #112]	; (8009b7c <pbuf_alloced_custom+0xcc>)
 8009b0a:	481d      	ldr	r0, [pc, #116]	; (8009b80 <pbuf_alloced_custom+0xd0>)
 8009b0c:	f008 f96c 	bl	8011de8 <iprintf>
    return NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	e02d      	b.n	8009b70 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009b14:	89fb      	ldrh	r3, [r7, #14]
 8009b16:	3303      	adds	r3, #3
 8009b18:	f023 0203 	bic.w	r2, r3, #3
 8009b1c:	88bb      	ldrh	r3, [r7, #4]
 8009b1e:	441a      	add	r2, r3
 8009b20:	8bbb      	ldrh	r3, [r7, #28]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d901      	bls.n	8009b2a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e022      	b.n	8009b70 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d008      	beq.n	8009b48 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009b36:	89fb      	ldrh	r3, [r7, #14]
 8009b38:	3303      	adds	r3, #3
 8009b3a:	f023 0303 	bic.w	r3, r3, #3
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	441a      	add	r2, r3
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	605a      	str	r2, [r3, #4]
 8009b46:	e002      	b.n	8009b4e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2202      	movs	r2, #2
 8009b52:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	88ba      	ldrh	r2, [r7, #4]
 8009b58:	811a      	strh	r2, [r3, #8]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	891a      	ldrh	r2, [r3, #8]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	79ba      	ldrb	r2, [r7, #6]
 8009b66:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8009b6e:	683b      	ldr	r3, [r7, #0]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	0801381c 	.word	0x0801381c
 8009b7c:	080139b4 	.word	0x080139b4
 8009b80:	08013868 	.word	0x08013868

08009b84 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <pbuf_realloc+0x20>
 8009b96:	4b4b      	ldr	r3, [pc, #300]	; (8009cc4 <pbuf_realloc+0x140>)
 8009b98:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009b9c:	494a      	ldr	r1, [pc, #296]	; (8009cc8 <pbuf_realloc+0x144>)
 8009b9e:	484b      	ldr	r0, [pc, #300]	; (8009ccc <pbuf_realloc+0x148>)
 8009ba0:	f008 f922 	bl	8011de8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	7b1b      	ldrb	r3, [r3, #12]
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d012      	beq.n	8009bd2 <pbuf_realloc+0x4e>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	7b1b      	ldrb	r3, [r3, #12]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d00e      	beq.n	8009bd2 <pbuf_realloc+0x4e>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7b1b      	ldrb	r3, [r3, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <pbuf_realloc+0x4e>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7b1b      	ldrb	r3, [r3, #12]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d006      	beq.n	8009bd2 <pbuf_realloc+0x4e>
 8009bc4:	4b3f      	ldr	r3, [pc, #252]	; (8009cc4 <pbuf_realloc+0x140>)
 8009bc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009bca:	4941      	ldr	r1, [pc, #260]	; (8009cd0 <pbuf_realloc+0x14c>)
 8009bcc:	483f      	ldr	r0, [pc, #252]	; (8009ccc <pbuf_realloc+0x148>)
 8009bce:	f008 f90b 	bl	8011de8 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	891b      	ldrh	r3, [r3, #8]
 8009bd6:	887a      	ldrh	r2, [r7, #2]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d26e      	bcs.n	8009cba <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8009bdc:	887b      	ldrh	r3, [r7, #2]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	8912      	ldrh	r2, [r2, #8]
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009be6:	887b      	ldrh	r3, [r7, #2]
 8009be8:	827b      	strh	r3, [r7, #18]
  q = p;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009bee:	e025      	b.n	8009c3c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	895b      	ldrh	r3, [r3, #10]
 8009bf4:	8a7a      	ldrh	r2, [r7, #18]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c00:	4293      	cmp	r3, r2
 8009c02:	dd06      	ble.n	8009c12 <pbuf_realloc+0x8e>
 8009c04:	4b2f      	ldr	r3, [pc, #188]	; (8009cc4 <pbuf_realloc+0x140>)
 8009c06:	f240 220b 	movw	r2, #523	; 0x20b
 8009c0a:	4932      	ldr	r1, [pc, #200]	; (8009cd4 <pbuf_realloc+0x150>)
 8009c0c:	482f      	ldr	r0, [pc, #188]	; (8009ccc <pbuf_realloc+0x148>)
 8009c0e:	f008 f8eb 	bl	8011de8 <iprintf>
    q->tot_len += (u16_t)grow;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	891a      	ldrh	r2, [r3, #8]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	4413      	add	r3, r2
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <pbuf_realloc+0xb8>
 8009c2e:	4b25      	ldr	r3, [pc, #148]	; (8009cc4 <pbuf_realloc+0x140>)
 8009c30:	f240 220f 	movw	r2, #527	; 0x20f
 8009c34:	4928      	ldr	r1, [pc, #160]	; (8009cd8 <pbuf_realloc+0x154>)
 8009c36:	4825      	ldr	r0, [pc, #148]	; (8009ccc <pbuf_realloc+0x148>)
 8009c38:	f008 f8d6 	bl	8011de8 <iprintf>
  while (rem_len > q->len) {
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	895b      	ldrh	r3, [r3, #10]
 8009c40:	8a7a      	ldrh	r2, [r7, #18]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d8d4      	bhi.n	8009bf0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	7b1b      	ldrb	r3, [r3, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d121      	bne.n	8009c92 <pbuf_realloc+0x10e>
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	895b      	ldrh	r3, [r3, #10]
 8009c52:	8a7a      	ldrh	r2, [r7, #18]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d01c      	beq.n	8009c92 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	7b5b      	ldrb	r3, [r3, #13]
 8009c5c:	f003 0302 	and.w	r3, r3, #2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d116      	bne.n	8009c92 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	8a7b      	ldrh	r3, [r7, #18]
 8009c70:	4413      	add	r3, r2
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	4619      	mov	r1, r3
 8009c76:	6978      	ldr	r0, [r7, #20]
 8009c78:	f7ff f93c 	bl	8008ef4 <mem_trim>
 8009c7c:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d106      	bne.n	8009c92 <pbuf_realloc+0x10e>
 8009c84:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <pbuf_realloc+0x140>)
 8009c86:	f240 221d 	movw	r2, #541	; 0x21d
 8009c8a:	4914      	ldr	r1, [pc, #80]	; (8009cdc <pbuf_realloc+0x158>)
 8009c8c:	480f      	ldr	r0, [pc, #60]	; (8009ccc <pbuf_realloc+0x148>)
 8009c8e:	f008 f8ab 	bl	8011de8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	8a7a      	ldrh	r2, [r7, #18]
 8009c96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	895a      	ldrh	r2, [r3, #10]
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d004      	beq.n	8009cb2 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 f8dd 	bl	8009e6c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	e000      	b.n	8009cbc <pbuf_realloc+0x138>
    return;
 8009cba:	bf00      	nop

}
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	0801381c 	.word	0x0801381c
 8009cc8:	080139d8 	.word	0x080139d8
 8009ccc:	08013868 	.word	0x08013868
 8009cd0:	080139f0 	.word	0x080139f0
 8009cd4:	08013a0c 	.word	0x08013a0c
 8009cd8:	08013a20 	.word	0x08013a20
 8009cdc:	08013a38 	.word	0x08013a38

08009ce0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	807b      	strh	r3, [r7, #2]
 8009cec:	4613      	mov	r3, r2
 8009cee:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <pbuf_header_impl+0x24>
 8009cf6:	4b46      	ldr	r3, [pc, #280]	; (8009e10 <pbuf_header_impl+0x130>)
 8009cf8:	f240 223f 	movw	r2, #575	; 0x23f
 8009cfc:	4945      	ldr	r1, [pc, #276]	; (8009e14 <pbuf_header_impl+0x134>)
 8009cfe:	4846      	ldr	r0, [pc, #280]	; (8009e18 <pbuf_header_impl+0x138>)
 8009d00:	f008 f872 	bl	8011de8 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8009d04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <pbuf_header_impl+0x32>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <pbuf_header_impl+0x36>
    return 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	e078      	b.n	8009e08 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8009d16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	da10      	bge.n	8009d40 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8009d1e:	887b      	ldrh	r3, [r7, #2]
 8009d20:	425b      	negs	r3, r3
 8009d22:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	895b      	ldrh	r3, [r3, #10]
 8009d28:	89fa      	ldrh	r2, [r7, #14]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d90a      	bls.n	8009d44 <pbuf_header_impl+0x64>
 8009d2e:	4b38      	ldr	r3, [pc, #224]	; (8009e10 <pbuf_header_impl+0x130>)
 8009d30:	f240 2247 	movw	r2, #583	; 0x247
 8009d34:	4939      	ldr	r1, [pc, #228]	; (8009e1c <pbuf_header_impl+0x13c>)
 8009d36:	4838      	ldr	r0, [pc, #224]	; (8009e18 <pbuf_header_impl+0x138>)
 8009d38:	f008 f856 	bl	8011de8 <iprintf>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e063      	b.n	8009e08 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8009d40:	887b      	ldrh	r3, [r7, #2]
 8009d42:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	7b1b      	ldrb	r3, [r3, #12]
 8009d48:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8009d50:	89bb      	ldrh	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <pbuf_header_impl+0x7c>
 8009d56:	89bb      	ldrh	r3, [r7, #12]
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d112      	bne.n	8009d82 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d64:	425b      	negs	r3, r3
 8009d66:	441a      	add	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3310      	adds	r3, #16
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d238      	bcs.n	8009dea <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e042      	b.n	8009e08 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8009d82:	89bb      	ldrh	r3, [r7, #12]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d002      	beq.n	8009d8e <pbuf_header_impl+0xae>
 8009d88:	89bb      	ldrh	r3, [r7, #12]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d124      	bne.n	8009dd8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009d8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da0d      	bge.n	8009db2 <pbuf_header_impl+0xd2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	895b      	ldrh	r3, [r3, #10]
 8009d9a:	89fa      	ldrh	r2, [r7, #14]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d808      	bhi.n	8009db2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009da8:	425b      	negs	r3, r3
 8009daa:	441a      	add	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	605a      	str	r2, [r3, #4]
 8009db0:	e011      	b.n	8009dd6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8009db2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dd0b      	ble.n	8009dd2 <pbuf_header_impl+0xf2>
 8009dba:	787b      	ldrb	r3, [r7, #1]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d008      	beq.n	8009dd2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009dc8:	425b      	negs	r3, r3
 8009dca:	441a      	add	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	605a      	str	r2, [r3, #4]
 8009dd0:	e001      	b.n	8009dd6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e018      	b.n	8009e08 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009dd6:	e008      	b.n	8009dea <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <pbuf_header_impl+0x130>)
 8009dda:	f240 2277 	movw	r2, #631	; 0x277
 8009dde:	4910      	ldr	r1, [pc, #64]	; (8009e20 <pbuf_header_impl+0x140>)
 8009de0:	480d      	ldr	r0, [pc, #52]	; (8009e18 <pbuf_header_impl+0x138>)
 8009de2:	f008 f801 	bl	8011de8 <iprintf>
    return 1;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e00e      	b.n	8009e08 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	895a      	ldrh	r2, [r3, #10]
 8009dee:	887b      	ldrh	r3, [r7, #2]
 8009df0:	4413      	add	r3, r2
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	891a      	ldrh	r2, [r3, #8]
 8009dfc:	887b      	ldrh	r3, [r7, #2]
 8009dfe:	4413      	add	r3, r2
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	0801381c 	.word	0x0801381c
 8009e14:	08013a54 	.word	0x08013a54
 8009e18:	08013868 	.word	0x08013868
 8009e1c:	08013a60 	.word	0x08013a60
 8009e20:	08013a80 	.word	0x08013a80

08009e24 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8009e30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e34:	2200      	movs	r2, #0
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff ff51 	bl	8009ce0 <pbuf_header_impl>
 8009e3e:	4603      	mov	r3, r0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8009e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff ff3f 	bl	8009ce0 <pbuf_header_impl>
 8009e62:	4603      	mov	r3, r0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10b      	bne.n	8009e92 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <pbuf_free+0x22>
 8009e80:	4b3e      	ldr	r3, [pc, #248]	; (8009f7c <pbuf_free+0x110>)
 8009e82:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009e86:	493e      	ldr	r1, [pc, #248]	; (8009f80 <pbuf_free+0x114>)
 8009e88:	483e      	ldr	r0, [pc, #248]	; (8009f84 <pbuf_free+0x118>)
 8009e8a:	f007 ffad 	bl	8011de8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	e070      	b.n	8009f74 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	7b1b      	ldrb	r3, [r3, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d012      	beq.n	8009ec0 <pbuf_free+0x54>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	7b1b      	ldrb	r3, [r3, #12]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d00e      	beq.n	8009ec0 <pbuf_free+0x54>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	7b1b      	ldrb	r3, [r3, #12]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d00a      	beq.n	8009ec0 <pbuf_free+0x54>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7b1b      	ldrb	r3, [r3, #12]
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d006      	beq.n	8009ec0 <pbuf_free+0x54>
 8009eb2:	4b32      	ldr	r3, [pc, #200]	; (8009f7c <pbuf_free+0x110>)
 8009eb4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009eb8:	4933      	ldr	r1, [pc, #204]	; (8009f88 <pbuf_free+0x11c>)
 8009eba:	4832      	ldr	r0, [pc, #200]	; (8009f84 <pbuf_free+0x118>)
 8009ebc:	f007 ff94 	bl	8011de8 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009ec4:	e052      	b.n	8009f6c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	89db      	ldrh	r3, [r3, #14]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <pbuf_free+0x70>
 8009ece:	4b2b      	ldr	r3, [pc, #172]	; (8009f7c <pbuf_free+0x110>)
 8009ed0:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009ed4:	492d      	ldr	r1, [pc, #180]	; (8009f8c <pbuf_free+0x120>)
 8009ed6:	482b      	ldr	r0, [pc, #172]	; (8009f84 <pbuf_free+0x118>)
 8009ed8:	f007 ff86 	bl	8011de8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	89db      	ldrh	r3, [r3, #14]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	81da      	strh	r2, [r3, #14]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	89db      	ldrh	r3, [r3, #14]
 8009eec:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009eee:	8abb      	ldrh	r3, [r7, #20]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d139      	bne.n	8009f68 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	7b1b      	ldrb	r3, [r3, #12]
 8009efe:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	7b5b      	ldrb	r3, [r3, #13]
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d011      	beq.n	8009f30 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <pbuf_free+0xba>
 8009f18:	4b18      	ldr	r3, [pc, #96]	; (8009f7c <pbuf_free+0x110>)
 8009f1a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8009f1e:	491c      	ldr	r1, [pc, #112]	; (8009f90 <pbuf_free+0x124>)
 8009f20:	4818      	ldr	r0, [pc, #96]	; (8009f84 <pbuf_free+0x118>)
 8009f22:	f007 ff61 	bl	8011de8 <iprintf>
        pc->custom_free_function(p);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	4798      	blx	r3
 8009f2e:	e015      	b.n	8009f5c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d104      	bne.n	8009f40 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	2008      	movs	r0, #8
 8009f3a:	f7ff fa5f 	bl	80093fc <memp_free>
 8009f3e:	e00d      	b.n	8009f5c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8009f40:	89fb      	ldrh	r3, [r7, #14]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d002      	beq.n	8009f4c <pbuf_free+0xe0>
 8009f46:	89fb      	ldrh	r3, [r7, #14]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d104      	bne.n	8009f56 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	2007      	movs	r0, #7
 8009f50:	f7ff fa54 	bl	80093fc <memp_free>
 8009f54:	e002      	b.n	8009f5c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7fe ff6a 	bl	8008e30 <mem_free>
        }
      }
      count++;
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	607b      	str	r3, [r7, #4]
 8009f66:	e001      	b.n	8009f6c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1a9      	bne.n	8009ec6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	0801381c 	.word	0x0801381c
 8009f80:	08013a54 	.word	0x08013a54
 8009f84:	08013868 	.word	0x08013868
 8009f88:	08013a90 	.word	0x08013a90
 8009f8c:	08013aa8 	.word	0x08013aa8
 8009f90:	08013ac0 	.word	0x08013ac0

08009f94 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009fa0:	e005      	b.n	8009fae <pbuf_clen+0x1a>
    ++len;
 8009fa2:	89fb      	ldrh	r3, [r7, #14]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1f6      	bne.n	8009fa2 <pbuf_clen+0xe>
  }
  return len;
 8009fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bc80      	pop	{r7}
 8009fbe:	4770      	bx	lr

08009fc0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d010      	beq.n	8009ff0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	89db      	ldrh	r3, [r3, #14]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	89db      	ldrh	r3, [r3, #14]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <pbuf_ref+0x30>
 8009fe2:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <pbuf_ref+0x38>)
 8009fe4:	f240 3239 	movw	r2, #825	; 0x339
 8009fe8:	4904      	ldr	r1, [pc, #16]	; (8009ffc <pbuf_ref+0x3c>)
 8009fea:	4805      	ldr	r0, [pc, #20]	; (800a000 <pbuf_ref+0x40>)
 8009fec:	f007 fefc 	bl	8011de8 <iprintf>
  }
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	0801381c 	.word	0x0801381c
 8009ffc:	08013ae4 	.word	0x08013ae4
 800a000:	08013868 	.word	0x08013868

0800a004 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <pbuf_cat+0x16>
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d107      	bne.n	800a02a <pbuf_cat+0x26>
 800a01a:	4b20      	ldr	r3, [pc, #128]	; (800a09c <pbuf_cat+0x98>)
 800a01c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800a020:	491f      	ldr	r1, [pc, #124]	; (800a0a0 <pbuf_cat+0x9c>)
 800a022:	4820      	ldr	r0, [pc, #128]	; (800a0a4 <pbuf_cat+0xa0>)
 800a024:	f007 fee0 	bl	8011de8 <iprintf>
 800a028:	e034      	b.n	800a094 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	e00a      	b.n	800a046 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	891a      	ldrh	r2, [r3, #8]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	891b      	ldrh	r3, [r3, #8]
 800a038:	4413      	add	r3, r2
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f0      	bne.n	800a030 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	891a      	ldrh	r2, [r3, #8]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	895b      	ldrh	r3, [r3, #10]
 800a056:	429a      	cmp	r2, r3
 800a058:	d006      	beq.n	800a068 <pbuf_cat+0x64>
 800a05a:	4b10      	ldr	r3, [pc, #64]	; (800a09c <pbuf_cat+0x98>)
 800a05c:	f240 3255 	movw	r2, #853	; 0x355
 800a060:	4911      	ldr	r1, [pc, #68]	; (800a0a8 <pbuf_cat+0xa4>)
 800a062:	4810      	ldr	r0, [pc, #64]	; (800a0a4 <pbuf_cat+0xa0>)
 800a064:	f007 fec0 	bl	8011de8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d006      	beq.n	800a07e <pbuf_cat+0x7a>
 800a070:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <pbuf_cat+0x98>)
 800a072:	f240 3256 	movw	r2, #854	; 0x356
 800a076:	490d      	ldr	r1, [pc, #52]	; (800a0ac <pbuf_cat+0xa8>)
 800a078:	480a      	ldr	r0, [pc, #40]	; (800a0a4 <pbuf_cat+0xa0>)
 800a07a:	f007 feb5 	bl	8011de8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	891a      	ldrh	r2, [r3, #8]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	891b      	ldrh	r3, [r3, #8]
 800a086:	4413      	add	r3, r2
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	0801381c 	.word	0x0801381c
 800a0a0:	08013af8 	.word	0x08013af8
 800a0a4:	08013868 	.word	0x08013868
 800a0a8:	08013b30 	.word	0x08013b30
 800a0ac:	08013b60 	.word	0x08013b60

0800a0b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff ffa1 	bl	800a004 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a0c2:	6838      	ldr	r0, [r7, #0]
 800a0c4:	f7ff ff7c 	bl	8009fc0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	81fb      	strh	r3, [r7, #14]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d008      	beq.n	800a0fa <pbuf_copy+0x2a>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d005      	beq.n	800a0fa <pbuf_copy+0x2a>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	891a      	ldrh	r2, [r3, #8]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	891b      	ldrh	r3, [r3, #8]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d209      	bcs.n	800a10e <pbuf_copy+0x3e>
 800a0fa:	4b54      	ldr	r3, [pc, #336]	; (800a24c <pbuf_copy+0x17c>)
 800a0fc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a100:	4953      	ldr	r1, [pc, #332]	; (800a250 <pbuf_copy+0x180>)
 800a102:	4854      	ldr	r0, [pc, #336]	; (800a254 <pbuf_copy+0x184>)
 800a104:	f007 fe70 	bl	8011de8 <iprintf>
 800a108:	f06f 030f 	mvn.w	r3, #15
 800a10c:	e099      	b.n	800a242 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	895b      	ldrh	r3, [r3, #10]
 800a112:	461a      	mov	r2, r3
 800a114:	89fb      	ldrh	r3, [r7, #14]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	895b      	ldrh	r3, [r3, #10]
 800a11c:	4619      	mov	r1, r3
 800a11e:	89bb      	ldrh	r3, [r7, #12]
 800a120:	1acb      	subs	r3, r1, r3
 800a122:	429a      	cmp	r2, r3
 800a124:	db05      	blt.n	800a132 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	895a      	ldrh	r2, [r3, #10]
 800a12a:	89bb      	ldrh	r3, [r7, #12]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	817b      	strh	r3, [r7, #10]
 800a130:	e004      	b.n	800a13c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	895a      	ldrh	r2, [r3, #10]
 800a136:	89fb      	ldrh	r3, [r7, #14]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	89fb      	ldrh	r3, [r7, #14]
 800a142:	18d0      	adds	r0, r2, r3
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	89bb      	ldrh	r3, [r7, #12]
 800a14a:	4413      	add	r3, r2
 800a14c:	897a      	ldrh	r2, [r7, #10]
 800a14e:	4619      	mov	r1, r3
 800a150:	f007 fd74 	bl	8011c3c <memcpy>
    offset_to += len;
 800a154:	89fa      	ldrh	r2, [r7, #14]
 800a156:	897b      	ldrh	r3, [r7, #10]
 800a158:	4413      	add	r3, r2
 800a15a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800a15c:	89ba      	ldrh	r2, [r7, #12]
 800a15e:	897b      	ldrh	r3, [r7, #10]
 800a160:	4413      	add	r3, r2
 800a162:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	895b      	ldrh	r3, [r3, #10]
 800a168:	89fa      	ldrh	r2, [r7, #14]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d906      	bls.n	800a17c <pbuf_copy+0xac>
 800a16e:	4b37      	ldr	r3, [pc, #220]	; (800a24c <pbuf_copy+0x17c>)
 800a170:	f240 32cd 	movw	r2, #973	; 0x3cd
 800a174:	4938      	ldr	r1, [pc, #224]	; (800a258 <pbuf_copy+0x188>)
 800a176:	4837      	ldr	r0, [pc, #220]	; (800a254 <pbuf_copy+0x184>)
 800a178:	f007 fe36 	bl	8011de8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	895b      	ldrh	r3, [r3, #10]
 800a180:	89ba      	ldrh	r2, [r7, #12]
 800a182:	429a      	cmp	r2, r3
 800a184:	d906      	bls.n	800a194 <pbuf_copy+0xc4>
 800a186:	4b31      	ldr	r3, [pc, #196]	; (800a24c <pbuf_copy+0x17c>)
 800a188:	f240 32ce 	movw	r2, #974	; 0x3ce
 800a18c:	4933      	ldr	r1, [pc, #204]	; (800a25c <pbuf_copy+0x18c>)
 800a18e:	4831      	ldr	r0, [pc, #196]	; (800a254 <pbuf_copy+0x184>)
 800a190:	f007 fe2a 	bl	8011de8 <iprintf>
    if (offset_from >= p_from->len) {
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	895b      	ldrh	r3, [r3, #10]
 800a198:	89ba      	ldrh	r2, [r7, #12]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d304      	bcc.n	800a1a8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	895b      	ldrh	r3, [r3, #10]
 800a1ac:	89fa      	ldrh	r2, [r7, #14]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d114      	bne.n	800a1dc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10c      	bne.n	800a1dc <pbuf_copy+0x10c>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d009      	beq.n	800a1dc <pbuf_copy+0x10c>
 800a1c8:	4b20      	ldr	r3, [pc, #128]	; (800a24c <pbuf_copy+0x17c>)
 800a1ca:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a1ce:	4924      	ldr	r1, [pc, #144]	; (800a260 <pbuf_copy+0x190>)
 800a1d0:	4820      	ldr	r0, [pc, #128]	; (800a254 <pbuf_copy+0x184>)
 800a1d2:	f007 fe09 	bl	8011de8 <iprintf>
 800a1d6:	f06f 030f 	mvn.w	r3, #15
 800a1da:	e032      	b.n	800a242 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d013      	beq.n	800a20a <pbuf_copy+0x13a>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	895a      	ldrh	r2, [r3, #10]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	891b      	ldrh	r3, [r3, #8]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d10d      	bne.n	800a20a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d009      	beq.n	800a20a <pbuf_copy+0x13a>
 800a1f6:	4b15      	ldr	r3, [pc, #84]	; (800a24c <pbuf_copy+0x17c>)
 800a1f8:	f240 32dd 	movw	r2, #989	; 0x3dd
 800a1fc:	4919      	ldr	r1, [pc, #100]	; (800a264 <pbuf_copy+0x194>)
 800a1fe:	4815      	ldr	r0, [pc, #84]	; (800a254 <pbuf_copy+0x184>)
 800a200:	f007 fdf2 	bl	8011de8 <iprintf>
 800a204:	f06f 0305 	mvn.w	r3, #5
 800a208:	e01b      	b.n	800a242 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d013      	beq.n	800a238 <pbuf_copy+0x168>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	895a      	ldrh	r2, [r3, #10]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	891b      	ldrh	r3, [r3, #8]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d10d      	bne.n	800a238 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d009      	beq.n	800a238 <pbuf_copy+0x168>
 800a224:	4b09      	ldr	r3, [pc, #36]	; (800a24c <pbuf_copy+0x17c>)
 800a226:	f240 32e2 	movw	r2, #994	; 0x3e2
 800a22a:	490e      	ldr	r1, [pc, #56]	; (800a264 <pbuf_copy+0x194>)
 800a22c:	4809      	ldr	r0, [pc, #36]	; (800a254 <pbuf_copy+0x184>)
 800a22e:	f007 fddb 	bl	8011de8 <iprintf>
 800a232:	f06f 0305 	mvn.w	r3, #5
 800a236:	e004      	b.n	800a242 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f47f af67 	bne.w	800a10e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	0801381c 	.word	0x0801381c
 800a250:	08013bac 	.word	0x08013bac
 800a254:	08013868 	.word	0x08013868
 800a258:	08013bdc 	.word	0x08013bdc
 800a25c:	08013bf4 	.word	0x08013bf4
 800a260:	08013c10 	.word	0x08013c10
 800a264:	08013c20 	.word	0x08013c20

0800a268 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b088      	sub	sp, #32
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	4611      	mov	r1, r2
 800a274:	461a      	mov	r2, r3
 800a276:	460b      	mov	r3, r1
 800a278:	80fb      	strh	r3, [r7, #6]
 800a27a:	4613      	mov	r3, r2
 800a27c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d108      	bne.n	800a29a <pbuf_copy_partial+0x32>
 800a288:	4b30      	ldr	r3, [pc, #192]	; (800a34c <pbuf_copy_partial+0xe4>)
 800a28a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a28e:	4930      	ldr	r1, [pc, #192]	; (800a350 <pbuf_copy_partial+0xe8>)
 800a290:	4830      	ldr	r0, [pc, #192]	; (800a354 <pbuf_copy_partial+0xec>)
 800a292:	f007 fda9 	bl	8011de8 <iprintf>
 800a296:	2300      	movs	r3, #0
 800a298:	e054      	b.n	800a344 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d108      	bne.n	800a2b2 <pbuf_copy_partial+0x4a>
 800a2a0:	4b2a      	ldr	r3, [pc, #168]	; (800a34c <pbuf_copy_partial+0xe4>)
 800a2a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a2a6:	492c      	ldr	r1, [pc, #176]	; (800a358 <pbuf_copy_partial+0xf0>)
 800a2a8:	482a      	ldr	r0, [pc, #168]	; (800a354 <pbuf_copy_partial+0xec>)
 800a2aa:	f007 fd9d 	bl	8011de8 <iprintf>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e048      	b.n	800a344 <pbuf_copy_partial+0xdc>

  left = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <pbuf_copy_partial+0x5a>
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <pbuf_copy_partial+0x5e>
    return 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	e03e      	b.n	800a344 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	61fb      	str	r3, [r7, #28]
 800a2ca:	e034      	b.n	800a336 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800a2cc:	88bb      	ldrh	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00a      	beq.n	800a2e8 <pbuf_copy_partial+0x80>
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	895b      	ldrh	r3, [r3, #10]
 800a2d6:	88ba      	ldrh	r2, [r7, #4]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d305      	bcc.n	800a2e8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	895b      	ldrh	r3, [r3, #10]
 800a2e0:	88ba      	ldrh	r2, [r7, #4]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	80bb      	strh	r3, [r7, #4]
 800a2e6:	e023      	b.n	800a330 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	895a      	ldrh	r2, [r3, #10]
 800a2ec:	88bb      	ldrh	r3, [r7, #4]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a2f2:	8b3a      	ldrh	r2, [r7, #24]
 800a2f4:	88fb      	ldrh	r3, [r7, #6]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d901      	bls.n	800a2fe <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a2fe:	8b7b      	ldrh	r3, [r7, #26]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	18d0      	adds	r0, r2, r3
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	88bb      	ldrh	r3, [r7, #4]
 800a30a:	4413      	add	r3, r2
 800a30c:	8b3a      	ldrh	r2, [r7, #24]
 800a30e:	4619      	mov	r1, r3
 800a310:	f007 fc94 	bl	8011c3c <memcpy>
      copied_total += buf_copy_len;
 800a314:	8afa      	ldrh	r2, [r7, #22]
 800a316:	8b3b      	ldrh	r3, [r7, #24]
 800a318:	4413      	add	r3, r2
 800a31a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800a31c:	8b7a      	ldrh	r2, [r7, #26]
 800a31e:	8b3b      	ldrh	r3, [r7, #24]
 800a320:	4413      	add	r3, r2
 800a322:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800a324:	88fa      	ldrh	r2, [r7, #6]
 800a326:	8b3b      	ldrh	r3, [r7, #24]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a32c:	2300      	movs	r3, #0
 800a32e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	61fb      	str	r3, [r7, #28]
 800a336:	88fb      	ldrh	r3, [r7, #6]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <pbuf_copy_partial+0xda>
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1c4      	bne.n	800a2cc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800a342:	8afb      	ldrh	r3, [r7, #22]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	0801381c 	.word	0x0801381c
 800a350:	08013c4c 	.word	0x08013c4c
 800a354:	08013868 	.word	0x08013868
 800a358:	08013c6c 	.word	0x08013c6c

0800a35c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800a36e:	2300      	movs	r3, #0
 800a370:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d109      	bne.n	800a38c <pbuf_take+0x30>
 800a378:	4b3a      	ldr	r3, [pc, #232]	; (800a464 <pbuf_take+0x108>)
 800a37a:	f240 4284 	movw	r2, #1156	; 0x484
 800a37e:	493a      	ldr	r1, [pc, #232]	; (800a468 <pbuf_take+0x10c>)
 800a380:	483a      	ldr	r0, [pc, #232]	; (800a46c <pbuf_take+0x110>)
 800a382:	f007 fd31 	bl	8011de8 <iprintf>
 800a386:	f06f 030f 	mvn.w	r3, #15
 800a38a:	e066      	b.n	800a45a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d109      	bne.n	800a3a6 <pbuf_take+0x4a>
 800a392:	4b34      	ldr	r3, [pc, #208]	; (800a464 <pbuf_take+0x108>)
 800a394:	f240 4285 	movw	r2, #1157	; 0x485
 800a398:	4935      	ldr	r1, [pc, #212]	; (800a470 <pbuf_take+0x114>)
 800a39a:	4834      	ldr	r0, [pc, #208]	; (800a46c <pbuf_take+0x110>)
 800a39c:	f007 fd24 	bl	8011de8 <iprintf>
 800a3a0:	f06f 030f 	mvn.w	r3, #15
 800a3a4:	e059      	b.n	800a45a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	891b      	ldrh	r3, [r3, #8]
 800a3aa:	88fa      	ldrh	r2, [r7, #6]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d909      	bls.n	800a3c4 <pbuf_take+0x68>
 800a3b0:	4b2c      	ldr	r3, [pc, #176]	; (800a464 <pbuf_take+0x108>)
 800a3b2:	f240 4286 	movw	r2, #1158	; 0x486
 800a3b6:	492f      	ldr	r1, [pc, #188]	; (800a474 <pbuf_take+0x118>)
 800a3b8:	482c      	ldr	r0, [pc, #176]	; (800a46c <pbuf_take+0x110>)
 800a3ba:	f007 fd15 	bl	8011de8 <iprintf>
 800a3be:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c2:	e04a      	b.n	800a45a <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d007      	beq.n	800a3da <pbuf_take+0x7e>
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d004      	beq.n	800a3da <pbuf_take+0x7e>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	891b      	ldrh	r3, [r3, #8]
 800a3d4:	88fa      	ldrh	r2, [r7, #6]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d902      	bls.n	800a3e0 <pbuf_take+0x84>
    return ERR_ARG;
 800a3da:	f06f 030f 	mvn.w	r3, #15
 800a3de:	e03c      	b.n	800a45a <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	61fb      	str	r3, [r7, #28]
 800a3e4:	e027      	b.n	800a436 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d106      	bne.n	800a3fa <pbuf_take+0x9e>
 800a3ec:	4b1d      	ldr	r3, [pc, #116]	; (800a464 <pbuf_take+0x108>)
 800a3ee:	f240 428e 	movw	r2, #1166	; 0x48e
 800a3f2:	4921      	ldr	r1, [pc, #132]	; (800a478 <pbuf_take+0x11c>)
 800a3f4:	481d      	ldr	r0, [pc, #116]	; (800a46c <pbuf_take+0x110>)
 800a3f6:	f007 fcf7 	bl	8011de8 <iprintf>
    buf_copy_len = total_copy_len;
 800a3fa:	8b3b      	ldrh	r3, [r7, #24]
 800a3fc:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	895b      	ldrh	r3, [r3, #10]
 800a402:	8b7a      	ldrh	r2, [r7, #26]
 800a404:	429a      	cmp	r2, r3
 800a406:	d902      	bls.n	800a40e <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	895b      	ldrh	r3, [r3, #10]
 800a40c:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	6858      	ldr	r0, [r3, #4]
 800a412:	8afb      	ldrh	r3, [r7, #22]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	4413      	add	r3, r2
 800a418:	8b7a      	ldrh	r2, [r7, #26]
 800a41a:	4619      	mov	r1, r3
 800a41c:	f007 fc0e 	bl	8011c3c <memcpy>
    total_copy_len -= buf_copy_len;
 800a420:	8b3a      	ldrh	r2, [r7, #24]
 800a422:	8b7b      	ldrh	r3, [r7, #26]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800a428:	8afa      	ldrh	r2, [r7, #22]
 800a42a:	8b7b      	ldrh	r3, [r7, #26]
 800a42c:	4413      	add	r3, r2
 800a42e:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	61fb      	str	r3, [r7, #28]
 800a436:	8b3b      	ldrh	r3, [r7, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1d4      	bne.n	800a3e6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a43c:	8b3b      	ldrh	r3, [r7, #24]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d103      	bne.n	800a44a <pbuf_take+0xee>
 800a442:	8afa      	ldrh	r2, [r7, #22]
 800a444:	88fb      	ldrh	r3, [r7, #6]
 800a446:	429a      	cmp	r2, r3
 800a448:	d006      	beq.n	800a458 <pbuf_take+0xfc>
 800a44a:	4b06      	ldr	r3, [pc, #24]	; (800a464 <pbuf_take+0x108>)
 800a44c:	f240 4299 	movw	r2, #1177	; 0x499
 800a450:	490a      	ldr	r1, [pc, #40]	; (800a47c <pbuf_take+0x120>)
 800a452:	4806      	ldr	r0, [pc, #24]	; (800a46c <pbuf_take+0x110>)
 800a454:	f007 fcc8 	bl	8011de8 <iprintf>
  return ERR_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3720      	adds	r7, #32
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	0801381c 	.word	0x0801381c
 800a468:	08013c90 	.word	0x08013c90
 800a46c:	08013868 	.word	0x08013868
 800a470:	08013ca8 	.word	0x08013ca8
 800a474:	08013cc4 	.word	0x08013cc4
 800a478:	08013ce4 	.word	0x08013ce4
 800a47c:	08013cfc 	.word	0x08013cfc

0800a480 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a484:	bf00      	nop
 800a486:	46bd      	mov	sp, r7
 800a488:	bc80      	pop	{r7}
 800a48a:	4770      	bx	lr

0800a48c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a490:	f000 fdfa 	bl	800b088 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a494:	4b07      	ldr	r3, [pc, #28]	; (800a4b4 <tcp_tmr+0x28>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	3301      	adds	r3, #1
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <tcp_tmr+0x28>)
 800a49e:	701a      	strb	r2, [r3, #0]
 800a4a0:	4b04      	ldr	r3, [pc, #16]	; (800a4b4 <tcp_tmr+0x28>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a4ac:	f000 fb2a 	bl	800ab04 <tcp_slowtmr>
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	20000409 	.word	0x20000409

0800a4b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60fb      	str	r3, [r7, #12]
 800a4c6:	e00a      	b.n	800a4de <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d102      	bne.n	800a4d8 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	60fb      	str	r3, [r7, #12]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1f1      	bne.n	800a4c8 <tcp_remove_listener+0x10>
      }
   }
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bc80      	pop	{r7}
 800a4ee:	4770      	bx	lr

0800a4f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d105      	bne.n	800a50a <tcp_listen_closed+0x1a>
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <tcp_listen_closed+0x5c>)
 800a500:	22c0      	movs	r2, #192	; 0xc0
 800a502:	4913      	ldr	r1, [pc, #76]	; (800a550 <tcp_listen_closed+0x60>)
 800a504:	4813      	ldr	r0, [pc, #76]	; (800a554 <tcp_listen_closed+0x64>)
 800a506:	f007 fc6f 	bl	8011de8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	7d1b      	ldrb	r3, [r3, #20]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d005      	beq.n	800a51e <tcp_listen_closed+0x2e>
 800a512:	4b0e      	ldr	r3, [pc, #56]	; (800a54c <tcp_listen_closed+0x5c>)
 800a514:	22c1      	movs	r2, #193	; 0xc1
 800a516:	4910      	ldr	r1, [pc, #64]	; (800a558 <tcp_listen_closed+0x68>)
 800a518:	480e      	ldr	r0, [pc, #56]	; (800a554 <tcp_listen_closed+0x64>)
 800a51a:	f007 fc65 	bl	8011de8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a51e:	2301      	movs	r3, #1
 800a520:	60fb      	str	r3, [r7, #12]
 800a522:	e00b      	b.n	800a53c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800a524:	4a0d      	ldr	r2, [pc, #52]	; (800a55c <tcp_listen_closed+0x6c>)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff ffc1 	bl	800a4b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3301      	adds	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b03      	cmp	r3, #3
 800a540:	d9f0      	bls.n	800a524 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a542:	bf00      	nop
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	08013da0 	.word	0x08013da0
 800a550:	08013dd0 	.word	0x08013dd0
 800a554:	08013ddc 	.word	0x08013ddc
 800a558:	08013e04 	.word	0x08013e04
 800a55c:	080152e8 	.word	0x080152e8

0800a560 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a560:	b5b0      	push	{r4, r5, r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af02      	add	r7, sp, #8
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d075      	beq.n	800a65e <tcp_close_shutdown+0xfe>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	7d1b      	ldrb	r3, [r3, #20]
 800a576:	2b04      	cmp	r3, #4
 800a578:	d003      	beq.n	800a582 <tcp_close_shutdown+0x22>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	7d1b      	ldrb	r3, [r3, #20]
 800a57e:	2b07      	cmp	r3, #7
 800a580:	d16d      	bne.n	800a65e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a586:	2b00      	cmp	r3, #0
 800a588:	d104      	bne.n	800a594 <tcp_close_shutdown+0x34>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a58e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a592:	d064      	beq.n	800a65e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	7e9b      	ldrb	r3, [r3, #26]
 800a598:	f003 0310 	and.w	r3, r3, #16
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d106      	bne.n	800a5ae <tcp_close_shutdown+0x4e>
 800a5a0:	4b5b      	ldr	r3, [pc, #364]	; (800a710 <tcp_close_shutdown+0x1b0>)
 800a5a2:	f240 120f 	movw	r2, #271	; 0x10f
 800a5a6:	495b      	ldr	r1, [pc, #364]	; (800a714 <tcp_close_shutdown+0x1b4>)
 800a5a8:	485b      	ldr	r0, [pc, #364]	; (800a718 <tcp_close_shutdown+0x1b8>)
 800a5aa:	f007 fc1d 	bl	8011de8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a5b6:	687c      	ldr	r4, [r7, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	1d1d      	adds	r5, r3, #4
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	8adb      	ldrh	r3, [r3, #22]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	8b12      	ldrh	r2, [r2, #24]
 800a5c4:	9201      	str	r2, [sp, #4]
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	462b      	mov	r3, r5
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	f004 f862 	bl	800e694 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 ffcf 	bl	800b574 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a5d6:	4b51      	ldr	r3, [pc, #324]	; (800a71c <tcp_close_shutdown+0x1bc>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d105      	bne.n	800a5ec <tcp_close_shutdown+0x8c>
 800a5e0:	4b4e      	ldr	r3, [pc, #312]	; (800a71c <tcp_close_shutdown+0x1bc>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	4a4d      	ldr	r2, [pc, #308]	; (800a71c <tcp_close_shutdown+0x1bc>)
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	e013      	b.n	800a614 <tcp_close_shutdown+0xb4>
 800a5ec:	4b4b      	ldr	r3, [pc, #300]	; (800a71c <tcp_close_shutdown+0x1bc>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	e00c      	b.n	800a60e <tcp_close_shutdown+0xae>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d104      	bne.n	800a608 <tcp_close_shutdown+0xa8>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	60da      	str	r2, [r3, #12]
 800a606:	e005      	b.n	800a614 <tcp_close_shutdown+0xb4>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1ef      	bne.n	800a5f4 <tcp_close_shutdown+0x94>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	60da      	str	r2, [r3, #12]
 800a61a:	4b41      	ldr	r3, [pc, #260]	; (800a720 <tcp_close_shutdown+0x1c0>)
 800a61c:	2201      	movs	r2, #1
 800a61e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	7d1b      	ldrb	r3, [r3, #20]
 800a624:	2b04      	cmp	r3, #4
 800a626:	d10c      	bne.n	800a642 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	220a      	movs	r2, #10
 800a62c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a62e:	4b3d      	ldr	r3, [pc, #244]	; (800a724 <tcp_close_shutdown+0x1c4>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	60da      	str	r2, [r3, #12]
 800a636:	4a3b      	ldr	r2, [pc, #236]	; (800a724 <tcp_close_shutdown+0x1c4>)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	f004 fa72 	bl	800eb24 <tcp_timer_needed>
 800a640:	e00b      	b.n	800a65a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800a642:	4b39      	ldr	r3, [pc, #228]	; (800a728 <tcp_close_shutdown+0x1c8>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d102      	bne.n	800a652 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800a64c:	f003 faf4 	bl	800dc38 <tcp_trigger_input_pcb_close>
 800a650:	e003      	b.n	800a65a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	2001      	movs	r0, #1
 800a656:	f7fe fed1 	bl	80093fc <memp_free>
        }
      }
      return ERR_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e053      	b.n	800a706 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	7d1b      	ldrb	r3, [r3, #20]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d03d      	beq.n	800a6e2 <tcp_close_shutdown+0x182>
 800a666:	2b02      	cmp	r3, #2
 800a668:	dc47      	bgt.n	800a6fa <tcp_close_shutdown+0x19a>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d002      	beq.n	800a674 <tcp_close_shutdown+0x114>
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d02b      	beq.n	800a6ca <tcp_close_shutdown+0x16a>
 800a672:	e042      	b.n	800a6fa <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	8adb      	ldrh	r3, [r3, #22]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d021      	beq.n	800a6c0 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800a67c:	4b2b      	ldr	r3, [pc, #172]	; (800a72c <tcp_close_shutdown+0x1cc>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	429a      	cmp	r2, r3
 800a684:	d105      	bne.n	800a692 <tcp_close_shutdown+0x132>
 800a686:	4b29      	ldr	r3, [pc, #164]	; (800a72c <tcp_close_shutdown+0x1cc>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	4a27      	ldr	r2, [pc, #156]	; (800a72c <tcp_close_shutdown+0x1cc>)
 800a68e:	6013      	str	r3, [r2, #0]
 800a690:	e013      	b.n	800a6ba <tcp_close_shutdown+0x15a>
 800a692:	4b26      	ldr	r3, [pc, #152]	; (800a72c <tcp_close_shutdown+0x1cc>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60bb      	str	r3, [r7, #8]
 800a698:	e00c      	b.n	800a6b4 <tcp_close_shutdown+0x154>
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d104      	bne.n	800a6ae <tcp_close_shutdown+0x14e>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68da      	ldr	r2, [r3, #12]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	60da      	str	r2, [r3, #12]
 800a6ac:	e005      	b.n	800a6ba <tcp_close_shutdown+0x15a>
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	60bb      	str	r3, [r7, #8]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1ef      	bne.n	800a69a <tcp_close_shutdown+0x13a>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800a6c0:	6879      	ldr	r1, [r7, #4]
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	f7fe fe9a 	bl	80093fc <memp_free>
    break;
 800a6c8:	e01c      	b.n	800a704 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff ff10 	bl	800a4f0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	4817      	ldr	r0, [pc, #92]	; (800a730 <tcp_close_shutdown+0x1d0>)
 800a6d4:	f000 ff90 	bl	800b5f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a6d8:	6879      	ldr	r1, [r7, #4]
 800a6da:	2002      	movs	r0, #2
 800a6dc:	f7fe fe8e 	bl	80093fc <memp_free>
    break;
 800a6e0:	e010      	b.n	800a704 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	480d      	ldr	r0, [pc, #52]	; (800a71c <tcp_close_shutdown+0x1bc>)
 800a6e6:	f000 ff87 	bl	800b5f8 <tcp_pcb_remove>
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <tcp_close_shutdown+0x1c0>)
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	f7fe fe82 	bl	80093fc <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800a6f8:	e004      	b.n	800a704 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f81a 	bl	800a734 <tcp_close_shutdown_fin>
 800a700:	4603      	mov	r3, r0
 800a702:	e000      	b.n	800a706 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bdb0      	pop	{r4, r5, r7, pc}
 800a70e:	bf00      	nop
 800a710:	08013da0 	.word	0x08013da0
 800a714:	08013e1c 	.word	0x08013e1c
 800a718:	08013ddc 	.word	0x08013ddc
 800a71c:	20006b88 	.word	0x20006b88
 800a720:	20006b84 	.word	0x20006b84
 800a724:	20006b98 	.word	0x20006b98
 800a728:	20006b9c 	.word	0x20006b9c
 800a72c:	20006b94 	.word	0x20006b94
 800a730:	20006b90 	.word	0x20006b90

0800a734 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d106      	bne.n	800a750 <tcp_close_shutdown_fin+0x1c>
 800a742:	4b2e      	ldr	r3, [pc, #184]	; (800a7fc <tcp_close_shutdown_fin+0xc8>)
 800a744:	f240 124d 	movw	r2, #333	; 0x14d
 800a748:	492d      	ldr	r1, [pc, #180]	; (800a800 <tcp_close_shutdown_fin+0xcc>)
 800a74a:	482e      	ldr	r0, [pc, #184]	; (800a804 <tcp_close_shutdown_fin+0xd0>)
 800a74c:	f007 fb4c 	bl	8011de8 <iprintf>

  switch (pcb->state) {
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7d1b      	ldrb	r3, [r3, #20]
 800a754:	2b07      	cmp	r3, #7
 800a756:	d020      	beq.n	800a79a <tcp_close_shutdown_fin+0x66>
 800a758:	2b07      	cmp	r3, #7
 800a75a:	dc2b      	bgt.n	800a7b4 <tcp_close_shutdown_fin+0x80>
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d002      	beq.n	800a766 <tcp_close_shutdown_fin+0x32>
 800a760:	2b04      	cmp	r3, #4
 800a762:	d00d      	beq.n	800a780 <tcp_close_shutdown_fin+0x4c>
 800a764:	e026      	b.n	800a7b4 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f003 faf0 	bl	800dd4c <tcp_send_fin>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d11f      	bne.n	800a7b8 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2205      	movs	r2, #5
 800a77c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a77e:	e01b      	b.n	800a7b8 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f003 fae3 	bl	800dd4c <tcp_send_fin>
 800a786:	4603      	mov	r3, r0
 800a788:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a78a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d114      	bne.n	800a7bc <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2205      	movs	r2, #5
 800a796:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a798:	e010      	b.n	800a7bc <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f003 fad6 	bl	800dd4c <tcp_send_fin>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a7a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d109      	bne.n	800a7c0 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2209      	movs	r2, #9
 800a7b0:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a7b2:	e005      	b.n	800a7c0 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	e01c      	b.n	800a7f2 <tcp_close_shutdown_fin+0xbe>
    break;
 800a7b8:	bf00      	nop
 800a7ba:	e002      	b.n	800a7c2 <tcp_close_shutdown_fin+0x8e>
    break;
 800a7bc:	bf00      	nop
 800a7be:	e000      	b.n	800a7c2 <tcp_close_shutdown_fin+0x8e>
    break;
 800a7c0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a7c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d103      	bne.n	800a7d2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f003 fcde 	bl	800e18c <tcp_output>
 800a7d0:	e00d      	b.n	800a7ee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7da:	d108      	bne.n	800a7ee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	7e9b      	ldrb	r3, [r3, #26]
 800a7e0:	f043 0308 	orr.w	r3, r3, #8
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e001      	b.n	800a7f2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	08013da0 	.word	0x08013da0
 800a800:	08013dd0 	.word	0x08013dd0
 800a804:	08013ddc 	.word	0x08013ddc

0800a808 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	7d1b      	ldrb	r3, [r3, #20]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d006      	beq.n	800a826 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	7e9b      	ldrb	r3, [r3, #26]
 800a81c:	f043 0310 	orr.w	r3, r3, #16
 800a820:	b2da      	uxtb	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a826:	2101      	movs	r1, #1
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff fe99 	bl	800a560 <tcp_close_shutdown>
 800a82e:	4603      	mov	r3, r0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08c      	sub	sp, #48	; 0x30
 800a83c:	af02      	add	r7, sp, #8
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	7d1b      	ldrb	r3, [r3, #20]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d106      	bne.n	800a858 <tcp_abandon+0x20>
 800a84a:	4b4d      	ldr	r3, [pc, #308]	; (800a980 <tcp_abandon+0x148>)
 800a84c:	f240 12df 	movw	r2, #479	; 0x1df
 800a850:	494c      	ldr	r1, [pc, #304]	; (800a984 <tcp_abandon+0x14c>)
 800a852:	484d      	ldr	r0, [pc, #308]	; (800a988 <tcp_abandon+0x150>)
 800a854:	f007 fac8 	bl	8011de8 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7d1b      	ldrb	r3, [r3, #20]
 800a85c:	2b0a      	cmp	r3, #10
 800a85e:	d108      	bne.n	800a872 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a860:	6879      	ldr	r1, [r7, #4]
 800a862:	484a      	ldr	r0, [pc, #296]	; (800a98c <tcp_abandon+0x154>)
 800a864:	f000 fec8 	bl	800b5f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800a868:	6879      	ldr	r1, [r7, #4]
 800a86a:	2001      	movs	r0, #1
 800a86c:	f7fe fdc6 	bl	80093fc <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800a870:	e081      	b.n	800a976 <tcp_abandon+0x13e>
    int send_rst = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a884:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a88c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7d1b      	ldrb	r3, [r3, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d126      	bne.n	800a8ea <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	8adb      	ldrh	r3, [r3, #22]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d02e      	beq.n	800a902 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a8a4:	4b3a      	ldr	r3, [pc, #232]	; (800a990 <tcp_abandon+0x158>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d105      	bne.n	800a8ba <tcp_abandon+0x82>
 800a8ae:	4b38      	ldr	r3, [pc, #224]	; (800a990 <tcp_abandon+0x158>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	4a36      	ldr	r2, [pc, #216]	; (800a990 <tcp_abandon+0x158>)
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	e013      	b.n	800a8e2 <tcp_abandon+0xaa>
 800a8ba:	4b35      	ldr	r3, [pc, #212]	; (800a990 <tcp_abandon+0x158>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	61fb      	str	r3, [r7, #28]
 800a8c0:	e00c      	b.n	800a8dc <tcp_abandon+0xa4>
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d104      	bne.n	800a8d6 <tcp_abandon+0x9e>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	60da      	str	r2, [r3, #12]
 800a8d4:	e005      	b.n	800a8e2 <tcp_abandon+0xaa>
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	61fb      	str	r3, [r7, #28]
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1ef      	bne.n	800a8c2 <tcp_abandon+0x8a>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	60da      	str	r2, [r3, #12]
 800a8e8:	e00b      	b.n	800a902 <tcp_abandon+0xca>
      send_rst = reset;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	8adb      	ldrh	r3, [r3, #22]
 800a8f2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a8f4:	6879      	ldr	r1, [r7, #4]
 800a8f6:	4827      	ldr	r0, [pc, #156]	; (800a994 <tcp_abandon+0x15c>)
 800a8f8:	f000 fe7e 	bl	800b5f8 <tcp_pcb_remove>
 800a8fc:	4b26      	ldr	r3, [pc, #152]	; (800a998 <tcp_abandon+0x160>)
 800a8fe:	2201      	movs	r2, #1
 800a900:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d004      	beq.n	800a914 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fc87 	bl	800b222 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d004      	beq.n	800a926 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a920:	4618      	mov	r0, r3
 800a922:	f000 fc7e 	bl	800b222 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fc75 	bl	800b222 <tcp_segs_free>
    if (send_rst) {
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00c      	beq.n	800a958 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	1d19      	adds	r1, r3, #4
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	8b1b      	ldrh	r3, [r3, #24]
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	460b      	mov	r3, r1
 800a950:	6979      	ldr	r1, [r7, #20]
 800a952:	69b8      	ldr	r0, [r7, #24]
 800a954:	f003 fe9e 	bl	800e694 <tcp_rst>
    last_state = pcb->state;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	7d1b      	ldrb	r3, [r3, #20]
 800a95c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	2001      	movs	r0, #1
 800a962:	f7fe fd4b 	bl	80093fc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d004      	beq.n	800a976 <tcp_abandon+0x13e>
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	f06f 010c 	mvn.w	r1, #12
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	4798      	blx	r3
}
 800a976:	bf00      	nop
 800a978:	3728      	adds	r7, #40	; 0x28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	08013da0 	.word	0x08013da0
 800a984:	08013e38 	.word	0x08013e38
 800a988:	08013ddc 	.word	0x08013ddc
 800a98c:	20006b98 	.word	0x20006b98
 800a990:	20006b94 	.word	0x20006b94
 800a994:	20006b88 	.word	0x20006b88
 800a998:	20006b84 	.word	0x20006b84

0800a99c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff ff46 	bl	800a838 <tcp_abandon>
}
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a9c4:	4413      	add	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a9d0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a9d4:	bf28      	it	cs
 800a9d6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a9da:	b292      	uxth	r2, r2
 800a9dc:	4413      	add	r3, r2
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	db08      	blt.n	800a9f8 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	e020      	b.n	800aa3a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dd03      	ble.n	800aa0e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa0c:	e014      	b.n	800aa38 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa20:	d306      	bcc.n	800aa30 <tcp_update_rcv_ann_wnd+0x7c>
 800aa22:	4b08      	ldr	r3, [pc, #32]	; (800aa44 <tcp_update_rcv_ann_wnd+0x90>)
 800aa24:	f44f 7242 	mov.w	r2, #776	; 0x308
 800aa28:	4907      	ldr	r1, [pc, #28]	; (800aa48 <tcp_update_rcv_ann_wnd+0x94>)
 800aa2a:	4808      	ldr	r0, [pc, #32]	; (800aa4c <tcp_update_rcv_ann_wnd+0x98>)
 800aa2c:	f007 f9dc 	bl	8011de8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800aa38:	2300      	movs	r3, #0
  }
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	08013da0 	.word	0x08013da0
 800aa48:	08013eb8 	.word	0x08013eb8
 800aa4c:	08013ddc 	.word	0x08013ddc

0800aa50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	7d1b      	ldrb	r3, [r3, #20]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d106      	bne.n	800aa72 <tcp_recved+0x22>
 800aa64:	4b23      	ldr	r3, [pc, #140]	; (800aaf4 <tcp_recved+0xa4>)
 800aa66:	f240 321f 	movw	r2, #799	; 0x31f
 800aa6a:	4923      	ldr	r1, [pc, #140]	; (800aaf8 <tcp_recved+0xa8>)
 800aa6c:	4823      	ldr	r0, [pc, #140]	; (800aafc <tcp_recved+0xac>)
 800aa6e:	f007 f9bb 	bl	8011de8 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa76:	887b      	ldrh	r3, [r7, #2]
 800aa78:	4413      	add	r3, r2
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa84:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aa88:	d904      	bls.n	800aa94 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aa90:	851a      	strh	r2, [r3, #40]	; 0x28
 800aa92:	e017      	b.n	800aac4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d113      	bne.n	800aac4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	7d1b      	ldrb	r3, [r3, #20]
 800aaa0:	2b07      	cmp	r3, #7
 800aaa2:	d003      	beq.n	800aaac <tcp_recved+0x5c>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	7d1b      	ldrb	r3, [r3, #20]
 800aaa8:	2b09      	cmp	r3, #9
 800aaaa:	d104      	bne.n	800aab6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aab2:	851a      	strh	r2, [r3, #40]	; 0x28
 800aab4:	e006      	b.n	800aac4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800aab6:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <tcp_recved+0xa4>)
 800aab8:	f240 322d 	movw	r2, #813	; 0x32d
 800aabc:	4910      	ldr	r1, [pc, #64]	; (800ab00 <tcp_recved+0xb0>)
 800aabe:	480f      	ldr	r0, [pc, #60]	; (800aafc <tcp_recved+0xac>)
 800aac0:	f007 f992 	bl	8011de8 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7ff ff75 	bl	800a9b4 <tcp_update_rcv_ann_wnd>
 800aaca:	4603      	mov	r3, r0
 800aacc:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800aad4:	db09      	blt.n	800aaea <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7e9b      	ldrb	r3, [r3, #26]
 800aada:	f043 0302 	orr.w	r3, r3, #2
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f003 fb51 	bl	800e18c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800aaea:	bf00      	nop
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	08013da0 	.word	0x08013da0
 800aaf8:	08013ed4 	.word	0x08013ed4
 800aafc:	08013ddc 	.word	0x08013ddc
 800ab00:	08013efc 	.word	0x08013efc

0800ab04 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ab04:	b5b0      	push	{r4, r5, r7, lr}
 800ab06:	b08c      	sub	sp, #48	; 0x30
 800ab08:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800ab0e:	4b97      	ldr	r3, [pc, #604]	; (800ad6c <tcp_slowtmr+0x268>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3301      	adds	r3, #1
 800ab14:	4a95      	ldr	r2, [pc, #596]	; (800ad6c <tcp_slowtmr+0x268>)
 800ab16:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ab18:	4b95      	ldr	r3, [pc, #596]	; (800ad70 <tcp_slowtmr+0x26c>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	4b93      	ldr	r3, [pc, #588]	; (800ad70 <tcp_slowtmr+0x26c>)
 800ab22:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800ab28:	4b92      	ldr	r3, [pc, #584]	; (800ad74 <tcp_slowtmr+0x270>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ab2e:	e227      	b.n	800af80 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	7d1b      	ldrb	r3, [r3, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d106      	bne.n	800ab46 <tcp_slowtmr+0x42>
 800ab38:	4b8f      	ldr	r3, [pc, #572]	; (800ad78 <tcp_slowtmr+0x274>)
 800ab3a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800ab3e:	498f      	ldr	r1, [pc, #572]	; (800ad7c <tcp_slowtmr+0x278>)
 800ab40:	488f      	ldr	r0, [pc, #572]	; (800ad80 <tcp_slowtmr+0x27c>)
 800ab42:	f007 f951 	bl	8011de8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	7d1b      	ldrb	r3, [r3, #20]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d106      	bne.n	800ab5c <tcp_slowtmr+0x58>
 800ab4e:	4b8a      	ldr	r3, [pc, #552]	; (800ad78 <tcp_slowtmr+0x274>)
 800ab50:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ab54:	498b      	ldr	r1, [pc, #556]	; (800ad84 <tcp_slowtmr+0x280>)
 800ab56:	488a      	ldr	r0, [pc, #552]	; (800ad80 <tcp_slowtmr+0x27c>)
 800ab58:	f007 f946 	bl	8011de8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	7d1b      	ldrb	r3, [r3, #20]
 800ab60:	2b0a      	cmp	r3, #10
 800ab62:	d106      	bne.n	800ab72 <tcp_slowtmr+0x6e>
 800ab64:	4b84      	ldr	r3, [pc, #528]	; (800ad78 <tcp_slowtmr+0x274>)
 800ab66:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800ab6a:	4987      	ldr	r1, [pc, #540]	; (800ad88 <tcp_slowtmr+0x284>)
 800ab6c:	4884      	ldr	r0, [pc, #528]	; (800ad80 <tcp_slowtmr+0x27c>)
 800ab6e:	f007 f93b 	bl	8011de8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	7f5a      	ldrb	r2, [r3, #29]
 800ab76:	4b7e      	ldr	r3, [pc, #504]	; (800ad70 <tcp_slowtmr+0x26c>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d103      	bne.n	800ab86 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800ab84:	e1fc      	b.n	800af80 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ab86:	4b7a      	ldr	r3, [pc, #488]	; (800ad70 <tcp_slowtmr+0x26c>)
 800ab88:	781a      	ldrb	r2, [r3, #0]
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	7d1b      	ldrb	r3, [r3, #20]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d108      	bne.n	800abb0 <tcp_slowtmr+0xac>
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aba4:	2b05      	cmp	r3, #5
 800aba6:	d903      	bls.n	800abb0 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800aba8:	7ffb      	ldrb	r3, [r7, #31]
 800abaa:	3301      	adds	r3, #1
 800abac:	77fb      	strb	r3, [r7, #31]
 800abae:	e0a2      	b.n	800acf6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abb6:	2b0b      	cmp	r3, #11
 800abb8:	d903      	bls.n	800abc2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800abba:	7ffb      	ldrb	r3, [r7, #31]
 800abbc:	3301      	adds	r3, #1
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	e099      	b.n	800acf6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d032      	beq.n	800ac32 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800abd2:	3b01      	subs	r3, #1
 800abd4:	4a6d      	ldr	r2, [pc, #436]	; (800ad8c <tcp_slowtmr+0x288>)
 800abd6:	5cd3      	ldrb	r3, [r2, r3]
 800abd8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800abe0:	7cfa      	ldrb	r2, [r7, #19]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d907      	bls.n	800abf6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800abec:	3301      	adds	r3, #1
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800abfc:	7cfa      	ldrb	r2, [r7, #19]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d879      	bhi.n	800acf6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800ac02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac04:	f003 fecd 	bl	800e9a2 <tcp_zero_window_probe>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d173      	bne.n	800acf6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ac1c:	2b06      	cmp	r3, #6
 800ac1e:	d86a      	bhi.n	800acf6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ac26:	3301      	adds	r3, #1
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800ac30:	e061      	b.n	800acf6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	db08      	blt.n	800ac4e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	3301      	adds	r3, #1
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	b21a      	sxth	r2, r3
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d04f      	beq.n	800acf6 <tcp_slowtmr+0x1f2>
 800ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac58:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ac62:	429a      	cmp	r2, r3
 800ac64:	db47      	blt.n	800acf6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	7d1b      	ldrb	r3, [r3, #20]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d018      	beq.n	800aca0 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac74:	2b0c      	cmp	r3, #12
 800ac76:	bf28      	it	cs
 800ac78:	230c      	movcs	r3, #12
 800ac7a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac82:	10db      	asrs	r3, r3, #3
 800ac84:	b21b      	sxth	r3, r3
 800ac86:	461a      	mov	r2, r3
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac8e:	4413      	add	r3, r2
 800ac90:	7dfa      	ldrb	r2, [r7, #23]
 800ac92:	493f      	ldr	r1, [pc, #252]	; (800ad90 <tcp_slowtmr+0x28c>)
 800ac94:	5c8a      	ldrb	r2, [r1, r2]
 800ac96:	4093      	lsls	r3, r2
 800ac98:	b21a      	sxth	r2, r3
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca2:	2200      	movs	r2, #0
 800aca4:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800aca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800acb2:	4293      	cmp	r3, r2
 800acb4:	bf28      	it	cs
 800acb6:	4613      	movcs	r3, r2
 800acb8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800acba:	8abb      	ldrh	r3, [r7, #20]
 800acbc:	085b      	lsrs	r3, r3, #1
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d206      	bcs.n	800ace6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	b29a      	uxth	r2, r3
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800acf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acf2:	f003 fd45 	bl	800e780 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	7d1b      	ldrb	r3, [r3, #20]
 800acfa:	2b06      	cmp	r3, #6
 800acfc:	d10f      	bne.n	800ad1e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	7e9b      	ldrb	r3, [r3, #26]
 800ad02:	f003 0310 	and.w	r3, r3, #16
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d009      	beq.n	800ad1e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad0a:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <tcp_slowtmr+0x268>)
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	2b28      	cmp	r3, #40	; 0x28
 800ad16:	d902      	bls.n	800ad1e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ad18:	7ffb      	ldrb	r3, [r7, #31]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad20:	7a1b      	ldrb	r3, [r3, #8]
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d05d      	beq.n	800ade6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d003      	beq.n	800ad3a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800ad36:	2b07      	cmp	r3, #7
 800ad38:	d155      	bne.n	800ade6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad3a:	4b0c      	ldr	r3, [pc, #48]	; (800ad6c <tcp_slowtmr+0x268>)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ad4e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ad52:	4910      	ldr	r1, [pc, #64]	; (800ad94 <tcp_slowtmr+0x290>)
 800ad54:	fba1 1303 	umull	r1, r3, r1, r3
 800ad58:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d91c      	bls.n	800ad98 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ad5e:	7ffb      	ldrb	r3, [r7, #31]
 800ad60:	3301      	adds	r3, #1
 800ad62:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800ad64:	7fbb      	ldrb	r3, [r7, #30]
 800ad66:	3301      	adds	r3, #1
 800ad68:	77bb      	strb	r3, [r7, #30]
 800ad6a:	e03c      	b.n	800ade6 <tcp_slowtmr+0x2e2>
 800ad6c:	20006b8c 	.word	0x20006b8c
 800ad70:	2000040a 	.word	0x2000040a
 800ad74:	20006b88 	.word	0x20006b88
 800ad78:	08013da0 	.word	0x08013da0
 800ad7c:	08013f50 	.word	0x08013f50
 800ad80:	08013ddc 	.word	0x08013ddc
 800ad84:	08013f7c 	.word	0x08013f7c
 800ad88:	08013fa8 	.word	0x08013fa8
 800ad8c:	080152e0 	.word	0x080152e0
 800ad90:	080152d0 	.word	0x080152d0
 800ad94:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad98:	4b97      	ldr	r3, [pc, #604]	; (800aff8 <tcp_slowtmr+0x4f4>)
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800adae:	4618      	mov	r0, r3
 800adb0:	4b92      	ldr	r3, [pc, #584]	; (800affc <tcp_slowtmr+0x4f8>)
 800adb2:	fb03 f300 	mul.w	r3, r3, r0
 800adb6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800adb8:	4991      	ldr	r1, [pc, #580]	; (800b000 <tcp_slowtmr+0x4fc>)
 800adba:	fba1 1303 	umull	r1, r3, r1, r3
 800adbe:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d910      	bls.n	800ade6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800adc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adc6:	f003 fdaf 	bl	800e928 <tcp_keepalive>
 800adca:	4603      	mov	r3, r0
 800adcc:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800adce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d107      	bne.n	800ade6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800addc:	3301      	adds	r3, #1
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adea:	2b00      	cmp	r3, #0
 800adec:	d016      	beq.n	800ae1c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800adee:	4b82      	ldr	r3, [pc, #520]	; (800aff8 <tcp_slowtmr+0x4f4>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	1ad2      	subs	r2, r2, r3
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800adfe:	4619      	mov	r1, r3
 800ae00:	460b      	mov	r3, r1
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	440b      	add	r3, r1
 800ae06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d307      	bcc.n	800ae1c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fa06 	bl	800b222 <tcp_segs_free>
      pcb->ooseq = NULL;
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	2200      	movs	r2, #0
 800ae1a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	7d1b      	ldrb	r3, [r3, #20]
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d109      	bne.n	800ae38 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae24:	4b74      	ldr	r3, [pc, #464]	; (800aff8 <tcp_slowtmr+0x4f4>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	2b28      	cmp	r3, #40	; 0x28
 800ae30:	d902      	bls.n	800ae38 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ae32:	7ffb      	ldrb	r3, [r7, #31]
 800ae34:	3301      	adds	r3, #1
 800ae36:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	7d1b      	ldrb	r3, [r3, #20]
 800ae3c:	2b09      	cmp	r3, #9
 800ae3e:	d109      	bne.n	800ae54 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ae40:	4b6d      	ldr	r3, [pc, #436]	; (800aff8 <tcp_slowtmr+0x4f4>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	6a1b      	ldr	r3, [r3, #32]
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	2bf0      	cmp	r3, #240	; 0xf0
 800ae4c:	d902      	bls.n	800ae54 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800ae4e:	7ffb      	ldrb	r3, [r7, #31]
 800ae50:	3301      	adds	r3, #1
 800ae52:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ae54:	7ffb      	ldrb	r3, [r7, #31]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d05d      	beq.n	800af16 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ae62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae64:	f000 fb86 	bl	800b574 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d010      	beq.n	800ae90 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ae6e:	4b65      	ldr	r3, [pc, #404]	; (800b004 <tcp_slowtmr+0x500>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d106      	bne.n	800ae86 <tcp_slowtmr+0x382>
 800ae78:	4b63      	ldr	r3, [pc, #396]	; (800b008 <tcp_slowtmr+0x504>)
 800ae7a:	f240 4289 	movw	r2, #1161	; 0x489
 800ae7e:	4963      	ldr	r1, [pc, #396]	; (800b00c <tcp_slowtmr+0x508>)
 800ae80:	4863      	ldr	r0, [pc, #396]	; (800b010 <tcp_slowtmr+0x50c>)
 800ae82:	f006 ffb1 	bl	8011de8 <iprintf>
        prev->next = pcb->next;
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	60da      	str	r2, [r3, #12]
 800ae8e:	e00f      	b.n	800aeb0 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ae90:	4b5c      	ldr	r3, [pc, #368]	; (800b004 <tcp_slowtmr+0x500>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d006      	beq.n	800aea8 <tcp_slowtmr+0x3a4>
 800ae9a:	4b5b      	ldr	r3, [pc, #364]	; (800b008 <tcp_slowtmr+0x504>)
 800ae9c:	f240 428d 	movw	r2, #1165	; 0x48d
 800aea0:	495c      	ldr	r1, [pc, #368]	; (800b014 <tcp_slowtmr+0x510>)
 800aea2:	485b      	ldr	r0, [pc, #364]	; (800b010 <tcp_slowtmr+0x50c>)
 800aea4:	f006 ffa0 	bl	8011de8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	4a55      	ldr	r2, [pc, #340]	; (800b004 <tcp_slowtmr+0x500>)
 800aeae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800aeb0:	7fbb      	ldrb	r3, [r7, #30]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d010      	beq.n	800aed8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aebe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	1d1d      	adds	r5, r3, #4
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	8adb      	ldrh	r3, [r3, #22]
 800aec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeca:	8b12      	ldrh	r2, [r2, #24]
 800aecc:	9201      	str	r2, [sp, #4]
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	462b      	mov	r3, r5
 800aed2:	4622      	mov	r2, r4
 800aed4:	f003 fbde 	bl	800e694 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	7d1b      	ldrb	r3, [r3, #20]
 800aee2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	2001      	movs	r0, #1
 800aef2:	f7fe fa83 	bl	80093fc <memp_free>

      tcp_active_pcbs_changed = 0;
 800aef6:	4b48      	ldr	r3, [pc, #288]	; (800b018 <tcp_slowtmr+0x514>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d004      	beq.n	800af0c <tcp_slowtmr+0x408>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f06f 010c 	mvn.w	r1, #12
 800af08:	68b8      	ldr	r0, [r7, #8]
 800af0a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800af0c:	4b42      	ldr	r3, [pc, #264]	; (800b018 <tcp_slowtmr+0x514>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d035      	beq.n	800af80 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800af14:	e606      	b.n	800ab24 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	7edb      	ldrb	r3, [r3, #27]
 800af24:	3301      	adds	r3, #1
 800af26:	b2da      	uxtb	r2, r3
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	7eda      	ldrb	r2, [r3, #27]
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	7f1b      	ldrb	r3, [r3, #28]
 800af34:	429a      	cmp	r2, r3
 800af36:	d323      	bcc.n	800af80 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	2200      	movs	r2, #0
 800af3c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800af3e:	4b36      	ldr	r3, [pc, #216]	; (800b018 <tcp_slowtmr+0x514>)
 800af40:	2200      	movs	r2, #0
 800af42:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <tcp_slowtmr+0x460>
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af54:	6a3a      	ldr	r2, [r7, #32]
 800af56:	6912      	ldr	r2, [r2, #16]
 800af58:	6a39      	ldr	r1, [r7, #32]
 800af5a:	4610      	mov	r0, r2
 800af5c:	4798      	blx	r3
 800af5e:	4603      	mov	r3, r0
 800af60:	777b      	strb	r3, [r7, #29]
 800af62:	e001      	b.n	800af68 <tcp_slowtmr+0x464>
 800af64:	2300      	movs	r3, #0
 800af66:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800af68:	4b2b      	ldr	r3, [pc, #172]	; (800b018 <tcp_slowtmr+0x514>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d000      	beq.n	800af72 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800af70:	e5d8      	b.n	800ab24 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800af72:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d102      	bne.n	800af80 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800af7a:	6a38      	ldr	r0, [r7, #32]
 800af7c:	f003 f906 	bl	800e18c <tcp_output>
  while (pcb != NULL) {
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	2b00      	cmp	r3, #0
 800af84:	f47f add4 	bne.w	800ab30 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800af88:	2300      	movs	r3, #0
 800af8a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800af8c:	4b23      	ldr	r3, [pc, #140]	; (800b01c <tcp_slowtmr+0x518>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800af92:	e068      	b.n	800b066 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af96:	7d1b      	ldrb	r3, [r3, #20]
 800af98:	2b0a      	cmp	r3, #10
 800af9a:	d006      	beq.n	800afaa <tcp_slowtmr+0x4a6>
 800af9c:	4b1a      	ldr	r3, [pc, #104]	; (800b008 <tcp_slowtmr+0x504>)
 800af9e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800afa2:	491f      	ldr	r1, [pc, #124]	; (800b020 <tcp_slowtmr+0x51c>)
 800afa4:	481a      	ldr	r0, [pc, #104]	; (800b010 <tcp_slowtmr+0x50c>)
 800afa6:	f006 ff1f 	bl	8011de8 <iprintf>
    pcb_remove = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800afae:	4b12      	ldr	r3, [pc, #72]	; (800aff8 <tcp_slowtmr+0x4f4>)
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	2bf0      	cmp	r3, #240	; 0xf0
 800afba:	d902      	bls.n	800afc2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800afbc:	7ffb      	ldrb	r3, [r7, #31]
 800afbe:	3301      	adds	r3, #1
 800afc0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800afc2:	7ffb      	ldrb	r3, [r7, #31]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d049      	beq.n	800b05c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800afc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afca:	f000 fad3 	bl	800b574 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d029      	beq.n	800b028 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800afd4:	4b11      	ldr	r3, [pc, #68]	; (800b01c <tcp_slowtmr+0x518>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afda:	429a      	cmp	r2, r3
 800afdc:	d106      	bne.n	800afec <tcp_slowtmr+0x4e8>
 800afde:	4b0a      	ldr	r3, [pc, #40]	; (800b008 <tcp_slowtmr+0x504>)
 800afe0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800afe4:	490f      	ldr	r1, [pc, #60]	; (800b024 <tcp_slowtmr+0x520>)
 800afe6:	480a      	ldr	r0, [pc, #40]	; (800b010 <tcp_slowtmr+0x50c>)
 800afe8:	f006 fefe 	bl	8011de8 <iprintf>
        prev->next = pcb->next;
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	68da      	ldr	r2, [r3, #12]
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	60da      	str	r2, [r3, #12]
 800aff4:	e028      	b.n	800b048 <tcp_slowtmr+0x544>
 800aff6:	bf00      	nop
 800aff8:	20006b8c 	.word	0x20006b8c
 800affc:	000124f8 	.word	0x000124f8
 800b000:	10624dd3 	.word	0x10624dd3
 800b004:	20006b88 	.word	0x20006b88
 800b008:	08013da0 	.word	0x08013da0
 800b00c:	08013fd8 	.word	0x08013fd8
 800b010:	08013ddc 	.word	0x08013ddc
 800b014:	08014004 	.word	0x08014004
 800b018:	20006b84 	.word	0x20006b84
 800b01c:	20006b98 	.word	0x20006b98
 800b020:	08014030 	.word	0x08014030
 800b024:	08014060 	.word	0x08014060
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b028:	4b13      	ldr	r3, [pc, #76]	; (800b078 <tcp_slowtmr+0x574>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b02e:	429a      	cmp	r2, r3
 800b030:	d006      	beq.n	800b040 <tcp_slowtmr+0x53c>
 800b032:	4b12      	ldr	r3, [pc, #72]	; (800b07c <tcp_slowtmr+0x578>)
 800b034:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800b038:	4911      	ldr	r1, [pc, #68]	; (800b080 <tcp_slowtmr+0x57c>)
 800b03a:	4812      	ldr	r0, [pc, #72]	; (800b084 <tcp_slowtmr+0x580>)
 800b03c:	f006 fed4 	bl	8011de8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	4a0c      	ldr	r2, [pc, #48]	; (800b078 <tcp_slowtmr+0x574>)
 800b046:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b052:	69b9      	ldr	r1, [r7, #24]
 800b054:	2001      	movs	r0, #1
 800b056:	f7fe f9d1 	bl	80093fc <memp_free>
 800b05a:	e004      	b.n	800b066 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d193      	bne.n	800af94 <tcp_slowtmr+0x490>
    }
  }
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	3728      	adds	r7, #40	; 0x28
 800b072:	46bd      	mov	sp, r7
 800b074:	bdb0      	pop	{r4, r5, r7, pc}
 800b076:	bf00      	nop
 800b078:	20006b98 	.word	0x20006b98
 800b07c:	08013da0 	.word	0x08013da0
 800b080:	08014088 	.word	0x08014088
 800b084:	08013ddc 	.word	0x08013ddc

0800b088 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b08e:	4b2d      	ldr	r3, [pc, #180]	; (800b144 <tcp_fasttmr+0xbc>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	3301      	adds	r3, #1
 800b094:	b2da      	uxtb	r2, r3
 800b096:	4b2b      	ldr	r3, [pc, #172]	; (800b144 <tcp_fasttmr+0xbc>)
 800b098:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b09a:	4b2b      	ldr	r3, [pc, #172]	; (800b148 <tcp_fasttmr+0xc0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b0a0:	e048      	b.n	800b134 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	7f5a      	ldrb	r2, [r3, #29]
 800b0a6:	4b27      	ldr	r3, [pc, #156]	; (800b144 <tcp_fasttmr+0xbc>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d03f      	beq.n	800b12e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b0ae:	4b25      	ldr	r3, [pc, #148]	; (800b144 <tcp_fasttmr+0xbc>)
 800b0b0:	781a      	ldrb	r2, [r3, #0]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	7e9b      	ldrb	r3, [r3, #26]
 800b0ba:	f003 0301 	and.w	r3, r3, #1
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d010      	beq.n	800b0e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	7e9b      	ldrb	r3, [r3, #26]
 800b0c6:	f043 0302 	orr.w	r3, r3, #2
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f003 f85b 	bl	800e18c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	7e9b      	ldrb	r3, [r3, #26]
 800b0da:	f023 0303 	bic.w	r3, r3, #3
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7e9b      	ldrb	r3, [r3, #26]
 800b0e8:	f003 0308 	and.w	r3, r3, #8
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d009      	beq.n	800b104 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	7e9b      	ldrb	r3, [r3, #26]
 800b0f4:	f023 0308 	bic.w	r3, r3, #8
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff fb18 	bl	800a734 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b112:	4b0e      	ldr	r3, [pc, #56]	; (800b14c <tcp_fasttmr+0xc4>)
 800b114:	2200      	movs	r2, #0
 800b116:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f819 	bl	800b150 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b11e:	4b0b      	ldr	r3, [pc, #44]	; (800b14c <tcp_fasttmr+0xc4>)
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d000      	beq.n	800b128 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b126:	e7b8      	b.n	800b09a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	607b      	str	r3, [r7, #4]
 800b12c:	e002      	b.n	800b134 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1b3      	bne.n	800b0a2 <tcp_fasttmr+0x1a>
    }
  }
}
 800b13a:	bf00      	nop
 800b13c:	bf00      	nop
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	2000040a 	.word	0x2000040a
 800b148:	20006b88 	.word	0x20006b88
 800b14c:	20006b84 	.word	0x20006b84

0800b150 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b150:	b590      	push	{r4, r7, lr}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b15c:	7b5b      	ldrb	r3, [r3, #13]
 800b15e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b164:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00b      	beq.n	800b18e <tcp_process_refused_data+0x3e>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6918      	ldr	r0, [r3, #16]
 800b180:	2300      	movs	r3, #0
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	6879      	ldr	r1, [r7, #4]
 800b186:	47a0      	blx	r4
 800b188:	4603      	mov	r3, r0
 800b18a:	73fb      	strb	r3, [r7, #15]
 800b18c:	e007      	b.n	800b19e <tcp_process_refused_data+0x4e>
 800b18e:	2300      	movs	r3, #0
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	6879      	ldr	r1, [r7, #4]
 800b194:	2000      	movs	r0, #0
 800b196:	f000 f88d 	bl	800b2b4 <tcp_recv_null>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d12a      	bne.n	800b1fc <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	f003 0320 	and.w	r3, r3, #32
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d033      	beq.n	800b218 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b1b8:	d005      	beq.n	800b1c6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1be:	3301      	adds	r3, #1
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00b      	beq.n	800b1e8 <tcp_process_refused_data+0x98>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6918      	ldr	r0, [r3, #16]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	2200      	movs	r2, #0
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	47a0      	blx	r4
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73fb      	strb	r3, [r7, #15]
 800b1e6:	e001      	b.n	800b1ec <tcp_process_refused_data+0x9c>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b1ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1f0:	f113 0f0d 	cmn.w	r3, #13
 800b1f4:	d110      	bne.n	800b218 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800b1f6:	f06f 030c 	mvn.w	r3, #12
 800b1fa:	e00e      	b.n	800b21a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800b1fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b200:	f113 0f0d 	cmn.w	r3, #13
 800b204:	d102      	bne.n	800b20c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b206:	f06f 030c 	mvn.w	r3, #12
 800b20a:	e006      	b.n	800b21a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800b212:	f06f 0304 	mvn.w	r3, #4
 800b216:	e000      	b.n	800b21a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd90      	pop	{r4, r7, pc}

0800b222 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b22a:	e007      	b.n	800b23c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f80a 	bl	800b24c <tcp_seg_free>
    seg = next;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f4      	bne.n	800b22c <tcp_segs_free+0xa>
  }
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00c      	beq.n	800b274 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d004      	beq.n	800b26c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fe00 	bl	8009e6c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	2003      	movs	r0, #3
 800b270:	f7fe f8c4 	bl	80093fc <memp_free>
  }
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b284:	2003      	movs	r0, #3
 800b286:	f7fe f86d 	bl	8009364 <memp_malloc>
 800b28a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <tcp_seg_copy+0x1a>
    return NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	e00a      	b.n	800b2ac <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b296:	2210      	movs	r2, #16
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f006 fcce 	bl	8011c3c <memcpy>
  pbuf_ref(cseg->p);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe fe8b 	bl	8009fc0 <pbuf_ref>
  return cseg;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d009      	beq.n	800b2dc <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	891b      	ldrh	r3, [r3, #8]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	68b8      	ldr	r0, [r7, #8]
 800b2d0:	f7ff fbbe 	bl	800aa50 <tcp_recved>
    pbuf_free(p);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7fe fdc9 	bl	8009e6c <pbuf_free>
 800b2da:	e008      	b.n	800b2ee <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800b2dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d104      	bne.n	800b2ee <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800b2e4:	68b8      	ldr	r0, [r7, #8]
 800b2e6:	f7ff fa8f 	bl	800a808 <tcp_close>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	e000      	b.n	800b2f0 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b306:	2b00      	cmp	r3, #0
 800b308:	db01      	blt.n	800b30e <tcp_kill_prio+0x16>
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	e000      	b.n	800b310 <tcp_kill_prio+0x18>
 800b30e:	237f      	movs	r3, #127	; 0x7f
 800b310:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b316:	2300      	movs	r3, #0
 800b318:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b31a:	4b16      	ldr	r3, [pc, #88]	; (800b374 <tcp_kill_prio+0x7c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	e01a      	b.n	800b358 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	7d5b      	ldrb	r3, [r3, #21]
 800b326:	7afa      	ldrb	r2, [r7, #11]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d312      	bcc.n	800b352 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b32c:	4b12      	ldr	r3, [pc, #72]	; (800b378 <tcp_kill_prio+0x80>)
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	6a1b      	ldr	r3, [r3, #32]
 800b334:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d80a      	bhi.n	800b352 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800b33c:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <tcp_kill_prio+0x80>)
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	6a1b      	ldr	r3, [r3, #32]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	7d5b      	ldrb	r3, [r3, #21]
 800b350:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	617b      	str	r3, [r7, #20]
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1e1      	bne.n	800b322 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b364:	6938      	ldr	r0, [r7, #16]
 800b366:	f7ff fb19 	bl	800a99c <tcp_abort>
  }
}
 800b36a:	bf00      	nop
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20006b88 	.word	0x20006b88
 800b378:	20006b8c 	.word	0x20006b8c

0800b37c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	2b08      	cmp	r3, #8
 800b38a:	d009      	beq.n	800b3a0 <tcp_kill_state+0x24>
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	2b09      	cmp	r3, #9
 800b390:	d006      	beq.n	800b3a0 <tcp_kill_state+0x24>
 800b392:	4b1a      	ldr	r3, [pc, #104]	; (800b3fc <tcp_kill_state+0x80>)
 800b394:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b398:	4919      	ldr	r1, [pc, #100]	; (800b400 <tcp_kill_state+0x84>)
 800b39a:	481a      	ldr	r0, [pc, #104]	; (800b404 <tcp_kill_state+0x88>)
 800b39c:	f006 fd24 	bl	8011de8 <iprintf>

  inactivity = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3a8:	4b17      	ldr	r3, [pc, #92]	; (800b408 <tcp_kill_state+0x8c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	e017      	b.n	800b3e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	7d1b      	ldrb	r3, [r3, #20]
 800b3b4:	79fa      	ldrb	r2, [r7, #7]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d10f      	bne.n	800b3da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3ba:	4b14      	ldr	r3, [pc, #80]	; (800b40c <tcp_kill_state+0x90>)
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d807      	bhi.n	800b3da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b3ca:	4b10      	ldr	r3, [pc, #64]	; (800b40c <tcp_kill_state+0x90>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1e4      	bne.n	800b3b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d003      	beq.n	800b3f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6938      	ldr	r0, [r7, #16]
 800b3f0:	f7ff fa22 	bl	800a838 <tcp_abandon>
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	08013da0 	.word	0x08013da0
 800b400:	080140b0 	.word	0x080140b0
 800b404:	08013ddc 	.word	0x08013ddc
 800b408:	20006b88 	.word	0x20006b88
 800b40c:	20006b8c 	.word	0x20006b8c

0800b410 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b41e:	4b12      	ldr	r3, [pc, #72]	; (800b468 <tcp_kill_timewait+0x58>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e012      	b.n	800b44c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b426:	4b11      	ldr	r3, [pc, #68]	; (800b46c <tcp_kill_timewait+0x5c>)
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d807      	bhi.n	800b446 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b436:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <tcp_kill_timewait+0x5c>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e9      	bne.n	800b426 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b458:	68b8      	ldr	r0, [r7, #8]
 800b45a:	f7ff fa9f 	bl	800a99c <tcp_abort>
  }
}
 800b45e:	bf00      	nop
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20006b98 	.word	0x20006b98
 800b46c:	20006b8c 	.word	0x20006b8c

0800b470 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b47a:	2001      	movs	r0, #1
 800b47c:	f7fd ff72 	bl	8009364 <memp_malloc>
 800b480:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d124      	bne.n	800b4d2 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b488:	f7ff ffc2 	bl	800b410 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b48c:	2001      	movs	r0, #1
 800b48e:	f7fd ff69 	bl	8009364 <memp_malloc>
 800b492:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d11b      	bne.n	800b4d2 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b49a:	2009      	movs	r0, #9
 800b49c:	f7ff ff6e 	bl	800b37c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	f7fd ff5f 	bl	8009364 <memp_malloc>
 800b4a6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d111      	bne.n	800b4d2 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b4ae:	2008      	movs	r0, #8
 800b4b0:	f7ff ff64 	bl	800b37c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	f7fd ff55 	bl	8009364 <memp_malloc>
 800b4ba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d107      	bne.n	800b4d2 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b4c2:	79fb      	ldrb	r3, [r7, #7]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff ff17 	bl	800b2f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	f7fd ff4a 	bl	8009364 <memp_malloc>
 800b4d0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d03f      	beq.n	800b558 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b4d8:	2298      	movs	r2, #152	; 0x98
 800b4da:	2100      	movs	r1, #0
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f006 fbd5 	bl	8011c8c <memset>
    pcb->prio = prio;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	79fa      	ldrb	r2, [r7, #7]
 800b4e6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b4ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b4f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	22ff      	movs	r2, #255	; 0xff
 800b506:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b50e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2206      	movs	r2, #6
 800b514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2206      	movs	r2, #6
 800b51c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b524:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2201      	movs	r2, #1
 800b52a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b52e:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <tcp_alloc+0xf4>)
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b536:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <tcp_alloc+0xf8>)
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b544:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4a08      	ldr	r2, [pc, #32]	; (800b56c <tcp_alloc+0xfc>)
 800b54c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4a07      	ldr	r2, [pc, #28]	; (800b570 <tcp_alloc+0x100>)
 800b554:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b558:	68fb      	ldr	r3, [r7, #12]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20006b8c 	.word	0x20006b8c
 800b568:	2000040a 	.word	0x2000040a
 800b56c:	0800b2b5 	.word	0x0800b2b5
 800b570:	006ddd00 	.word	0x006ddd00

0800b574 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	7d1b      	ldrb	r3, [r3, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d034      	beq.n	800b5ee <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b588:	2b0a      	cmp	r3, #10
 800b58a:	d030      	beq.n	800b5ee <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800b590:	2b01      	cmp	r3, #1
 800b592:	d02c      	beq.n	800b5ee <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d007      	beq.n	800b5ac <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe fc63 	bl	8009e6c <pbuf_free>
      pcb->refused_data = NULL;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7ff fe36 	bl	800b222 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5c2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fe2a 	bl	800b222 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff fe25 	bl	800b222 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	669a      	str	r2, [r3, #104]	; 0x68
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800b5ee:	bf00      	nop
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
	...

0800b5f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d105      	bne.n	800b618 <tcp_pcb_remove+0x20>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	e013      	b.n	800b640 <tcp_pcb_remove+0x48>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	60fb      	str	r3, [r7, #12]
 800b61e:	e00c      	b.n	800b63a <tcp_pcb_remove+0x42>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	429a      	cmp	r2, r3
 800b628:	d104      	bne.n	800b634 <tcp_pcb_remove+0x3c>
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	60da      	str	r2, [r3, #12]
 800b632:	e005      	b.n	800b640 <tcp_pcb_remove+0x48>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1ef      	bne.n	800b620 <tcp_pcb_remove+0x28>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2200      	movs	r2, #0
 800b644:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b646:	6838      	ldr	r0, [r7, #0]
 800b648:	f7ff ff94 	bl	800b574 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	7d1b      	ldrb	r3, [r3, #20]
 800b650:	2b0a      	cmp	r3, #10
 800b652:	d013      	beq.n	800b67c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d00f      	beq.n	800b67c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	7e9b      	ldrb	r3, [r3, #26]
 800b660:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800b664:	2b00      	cmp	r3, #0
 800b666:	d009      	beq.n	800b67c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	7e9b      	ldrb	r3, [r3, #26]
 800b66c:	f043 0302 	orr.w	r3, r3, #2
 800b670:	b2da      	uxtb	r2, r3
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b676:	6838      	ldr	r0, [r7, #0]
 800b678:	f002 fd88 	bl	800e18c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	7d1b      	ldrb	r3, [r3, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d020      	beq.n	800b6c6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d006      	beq.n	800b69a <tcp_pcb_remove+0xa2>
 800b68c:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <tcp_pcb_remove+0xe4>)
 800b68e:	f240 7253 	movw	r2, #1875	; 0x753
 800b692:	4913      	ldr	r1, [pc, #76]	; (800b6e0 <tcp_pcb_remove+0xe8>)
 800b694:	4813      	ldr	r0, [pc, #76]	; (800b6e4 <tcp_pcb_remove+0xec>)
 800b696:	f006 fba7 	bl	8011de8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d006      	beq.n	800b6b0 <tcp_pcb_remove+0xb8>
 800b6a2:	4b0e      	ldr	r3, [pc, #56]	; (800b6dc <tcp_pcb_remove+0xe4>)
 800b6a4:	f240 7254 	movw	r2, #1876	; 0x754
 800b6a8:	490f      	ldr	r1, [pc, #60]	; (800b6e8 <tcp_pcb_remove+0xf0>)
 800b6aa:	480e      	ldr	r0, [pc, #56]	; (800b6e4 <tcp_pcb_remove+0xec>)
 800b6ac:	f006 fb9c 	bl	8011de8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d006      	beq.n	800b6c6 <tcp_pcb_remove+0xce>
 800b6b8:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <tcp_pcb_remove+0xe4>)
 800b6ba:	f240 7256 	movw	r2, #1878	; 0x756
 800b6be:	490b      	ldr	r1, [pc, #44]	; (800b6ec <tcp_pcb_remove+0xf4>)
 800b6c0:	4808      	ldr	r0, [pc, #32]	; (800b6e4 <tcp_pcb_remove+0xec>)
 800b6c2:	f006 fb91 	bl	8011de8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08013da0 	.word	0x08013da0
 800b6e0:	08014158 	.word	0x08014158
 800b6e4:	08013ddc 	.word	0x08013ddc
 800b6e8:	08014170 	.word	0x08014170
 800b6ec:	0801418c 	.word	0x0801418c

0800b6f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b6f8:	4b06      	ldr	r3, [pc, #24]	; (800b714 <tcp_next_iss+0x24>)
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	4b06      	ldr	r3, [pc, #24]	; (800b718 <tcp_next_iss+0x28>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4413      	add	r3, r2
 800b702:	4a04      	ldr	r2, [pc, #16]	; (800b714 <tcp_next_iss+0x24>)
 800b704:	6013      	str	r3, [r2, #0]
  return iss;
 800b706:	4b03      	ldr	r3, [pc, #12]	; (800b714 <tcp_next_iss+0x24>)
 800b708:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	bc80      	pop	{r7}
 800b712:	4770      	bx	lr
 800b714:	20000010 	.word	0x20000010
 800b718:	20006b8c 	.word	0x20006b8c

0800b71c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	6039      	str	r1, [r7, #0]
 800b726:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800b728:	6838      	ldr	r0, [r7, #0]
 800b72a:	f004 ffd1 	bl	80106d0 <ip4_route>
 800b72e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800b736:	88fb      	ldrh	r3, [r7, #6]
 800b738:	e010      	b.n	800b75c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b73e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b740:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d008      	beq.n	800b75a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800b748:	897b      	ldrh	r3, [r7, #10]
 800b74a:	3b28      	subs	r3, #40	; 0x28
 800b74c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b74e:	893a      	ldrh	r2, [r7, #8]
 800b750:	88fb      	ldrh	r3, [r7, #6]
 800b752:	4293      	cmp	r3, r2
 800b754:	bf28      	it	cs
 800b756:	4613      	movcs	r3, r2
 800b758:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800b75a:	88fb      	ldrh	r3, [r7, #6]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b772:	e011      	b.n	800b798 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d108      	bne.n	800b792 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f7ff f908 	bl	800a99c <tcp_abort>
      pcb = next;
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	e002      	b.n	800b798 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1ea      	bne.n	800b774 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800b79e:	bf00      	nop
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d02c      	beq.n	800b812 <tcp_netif_ip_addr_changed+0x6a>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d028      	beq.n	800b812 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b7c0:	4b16      	ldr	r3, [pc, #88]	; (800b81c <tcp_netif_ip_addr_changed+0x74>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff ffcc 	bl	800b764 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b7cc:	4b14      	ldr	r3, [pc, #80]	; (800b820 <tcp_netif_ip_addr_changed+0x78>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff ffc6 	bl	800b764 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d019      	beq.n	800b812 <tcp_netif_ip_addr_changed+0x6a>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d015      	beq.n	800b812 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b7e6:	4b0f      	ldr	r3, [pc, #60]	; (800b824 <tcp_netif_ip_addr_changed+0x7c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	e00e      	b.n	800b80c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d103      	bne.n	800b808 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	60fb      	str	r3, [r7, #12]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1ed      	bne.n	800b7ee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b812:	bf00      	nop
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20006b88 	.word	0x20006b88
 800b820:	20006b94 	.word	0x20006b94
 800b824:	20006b90 	.word	0x20006b90

0800b828 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b828:	b590      	push	{r4, r7, lr}
 800b82a:	b08b      	sub	sp, #44	; 0x2c
 800b82c:	af02      	add	r7, sp, #8
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	4a82      	ldr	r2, [pc, #520]	; (800ba40 <tcp_input+0x218>)
 800b838:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	895b      	ldrh	r3, [r3, #10]
 800b83e:	2b13      	cmp	r3, #19
 800b840:	f240 838a 	bls.w	800bf58 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b844:	4b7f      	ldr	r3, [pc, #508]	; (800ba44 <tcp_input+0x21c>)
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	4a7e      	ldr	r2, [pc, #504]	; (800ba44 <tcp_input+0x21c>)
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f005 f9ba 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	f040 8380 	bne.w	800bf5c <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b85c:	4b79      	ldr	r3, [pc, #484]	; (800ba44 <tcp_input+0x21c>)
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b864:	2be0      	cmp	r3, #224	; 0xe0
 800b866:	f000 8379 	beq.w	800bf5c <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800b86a:	4b75      	ldr	r3, [pc, #468]	; (800ba40 <tcp_input+0x218>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	899b      	ldrh	r3, [r3, #12]
 800b870:	b29b      	uxth	r3, r3
 800b872:	4618      	mov	r0, r3
 800b874:	f7fd f9cd 	bl	8008c12 <lwip_htons>
 800b878:	4603      	mov	r3, r0
 800b87a:	0b1b      	lsrs	r3, r3, #12
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b884:	7cbb      	ldrb	r3, [r7, #18]
 800b886:	2b13      	cmp	r3, #19
 800b888:	f240 836a 	bls.w	800bf60 <tcp_input+0x738>
 800b88c:	7cbb      	ldrb	r3, [r7, #18]
 800b88e:	b29a      	uxth	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	891b      	ldrh	r3, [r3, #8]
 800b894:	429a      	cmp	r2, r3
 800b896:	f200 8363 	bhi.w	800bf60 <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800b89a:	7cbb      	ldrb	r3, [r7, #18]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	3b14      	subs	r3, #20
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	4b69      	ldr	r3, [pc, #420]	; (800ba48 <tcp_input+0x220>)
 800b8a4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b8a6:	4b69      	ldr	r3, [pc, #420]	; (800ba4c <tcp_input+0x224>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	895a      	ldrh	r2, [r3, #10]
 800b8b0:	7cbb      	ldrb	r3, [r7, #18]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d30d      	bcc.n	800b8d4 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b8b8:	4b63      	ldr	r3, [pc, #396]	; (800ba48 <tcp_input+0x220>)
 800b8ba:	881a      	ldrh	r2, [r3, #0]
 800b8bc:	4b64      	ldr	r3, [pc, #400]	; (800ba50 <tcp_input+0x228>)
 800b8be:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b8c0:	7cbb      	ldrb	r3, [r7, #18]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	425b      	negs	r3, r3
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	b21b      	sxth	r3, r3
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7fe faa9 	bl	8009e24 <pbuf_header>
 800b8d2:	e055      	b.n	800b980 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d105      	bne.n	800b8e8 <tcp_input+0xc0>
 800b8dc:	4b5d      	ldr	r3, [pc, #372]	; (800ba54 <tcp_input+0x22c>)
 800b8de:	22b2      	movs	r2, #178	; 0xb2
 800b8e0:	495d      	ldr	r1, [pc, #372]	; (800ba58 <tcp_input+0x230>)
 800b8e2:	485e      	ldr	r0, [pc, #376]	; (800ba5c <tcp_input+0x234>)
 800b8e4:	f006 fa80 	bl	8011de8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800b8e8:	f06f 0113 	mvn.w	r1, #19
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7fe fa99 	bl	8009e24 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	895a      	ldrh	r2, [r3, #10]
 800b8f6:	4b56      	ldr	r3, [pc, #344]	; (800ba50 <tcp_input+0x228>)
 800b8f8:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b8fa:	4b53      	ldr	r3, [pc, #332]	; (800ba48 <tcp_input+0x220>)
 800b8fc:	881a      	ldrh	r2, [r3, #0]
 800b8fe:	4b54      	ldr	r3, [pc, #336]	; (800ba50 <tcp_input+0x228>)
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800b906:	4b52      	ldr	r3, [pc, #328]	; (800ba50 <tcp_input+0x228>)
 800b908:	881b      	ldrh	r3, [r3, #0]
 800b90a:	425b      	negs	r3, r3
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	b21b      	sxth	r3, r3
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7fe fa86 	bl	8009e24 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	895b      	ldrh	r3, [r3, #10]
 800b91e:	8a3a      	ldrh	r2, [r7, #16]
 800b920:	429a      	cmp	r2, r3
 800b922:	f200 831f 	bhi.w	800bf64 <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	4a47      	ldr	r2, [pc, #284]	; (800ba4c <tcp_input+0x224>)
 800b92e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	8a3b      	ldrh	r3, [r7, #16]
 800b936:	425b      	negs	r3, r3
 800b938:	b29b      	uxth	r3, r3
 800b93a:	b21b      	sxth	r3, r3
 800b93c:	4619      	mov	r1, r3
 800b93e:	4610      	mov	r0, r2
 800b940:	f7fe fa70 	bl	8009e24 <pbuf_header>
    p->tot_len -= opt2len;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	891a      	ldrh	r2, [r3, #8]
 800b948:	8a3b      	ldrh	r3, [r7, #16]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	895b      	ldrh	r3, [r3, #10]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d005      	beq.n	800b966 <tcp_input+0x13e>
 800b95a:	4b3e      	ldr	r3, [pc, #248]	; (800ba54 <tcp_input+0x22c>)
 800b95c:	22cf      	movs	r2, #207	; 0xcf
 800b95e:	4940      	ldr	r1, [pc, #256]	; (800ba60 <tcp_input+0x238>)
 800b960:	483e      	ldr	r0, [pc, #248]	; (800ba5c <tcp_input+0x234>)
 800b962:	f006 fa41 	bl	8011de8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	891a      	ldrh	r2, [r3, #8]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	891b      	ldrh	r3, [r3, #8]
 800b970:	429a      	cmp	r2, r3
 800b972:	d005      	beq.n	800b980 <tcp_input+0x158>
 800b974:	4b37      	ldr	r3, [pc, #220]	; (800ba54 <tcp_input+0x22c>)
 800b976:	22d0      	movs	r2, #208	; 0xd0
 800b978:	493a      	ldr	r1, [pc, #232]	; (800ba64 <tcp_input+0x23c>)
 800b97a:	4838      	ldr	r0, [pc, #224]	; (800ba5c <tcp_input+0x234>)
 800b97c:	f006 fa34 	bl	8011de8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b980:	4b2f      	ldr	r3, [pc, #188]	; (800ba40 <tcp_input+0x218>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	b29b      	uxth	r3, r3
 800b988:	4a2d      	ldr	r2, [pc, #180]	; (800ba40 <tcp_input+0x218>)
 800b98a:	6814      	ldr	r4, [r2, #0]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fd f940 	bl	8008c12 <lwip_htons>
 800b992:	4603      	mov	r3, r0
 800b994:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b996:	4b2a      	ldr	r3, [pc, #168]	; (800ba40 <tcp_input+0x218>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	885b      	ldrh	r3, [r3, #2]
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	4a28      	ldr	r2, [pc, #160]	; (800ba40 <tcp_input+0x218>)
 800b9a0:	6814      	ldr	r4, [r2, #0]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fd f935 	bl	8008c12 <lwip_htons>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b9ac:	4b24      	ldr	r3, [pc, #144]	; (800ba40 <tcp_input+0x218>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	4a23      	ldr	r2, [pc, #140]	; (800ba40 <tcp_input+0x218>)
 800b9b4:	6814      	ldr	r4, [r2, #0]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fd f938 	bl	8008c2c <lwip_htonl>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	6063      	str	r3, [r4, #4]
 800b9c0:	6863      	ldr	r3, [r4, #4]
 800b9c2:	4a29      	ldr	r2, [pc, #164]	; (800ba68 <tcp_input+0x240>)
 800b9c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b9c6:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <tcp_input+0x218>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	4a1c      	ldr	r2, [pc, #112]	; (800ba40 <tcp_input+0x218>)
 800b9ce:	6814      	ldr	r4, [r2, #0]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fd f92b 	bl	8008c2c <lwip_htonl>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	60a3      	str	r3, [r4, #8]
 800b9da:	68a3      	ldr	r3, [r4, #8]
 800b9dc:	4a23      	ldr	r2, [pc, #140]	; (800ba6c <tcp_input+0x244>)
 800b9de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b9e0:	4b17      	ldr	r3, [pc, #92]	; (800ba40 <tcp_input+0x218>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	89db      	ldrh	r3, [r3, #14]
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	4a15      	ldr	r2, [pc, #84]	; (800ba40 <tcp_input+0x218>)
 800b9ea:	6814      	ldr	r4, [r2, #0]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fd f910 	bl	8008c12 <lwip_htons>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b9f6:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <tcp_input+0x218>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	899b      	ldrh	r3, [r3, #12]
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fd f907 	bl	8008c12 <lwip_htons>
 800ba04:	4603      	mov	r3, r0
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	4b18      	ldr	r3, [pc, #96]	; (800ba70 <tcp_input+0x248>)
 800ba10:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	891a      	ldrh	r2, [r3, #8]
 800ba16:	4b16      	ldr	r3, [pc, #88]	; (800ba70 <tcp_input+0x248>)
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	f003 0303 	and.w	r3, r3, #3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bf14      	ite	ne
 800ba22:	2301      	movne	r3, #1
 800ba24:	2300      	moveq	r3, #0
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	4413      	add	r3, r2
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	4b11      	ldr	r3, [pc, #68]	; (800ba74 <tcp_input+0x24c>)
 800ba30:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba36:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <tcp_input+0x250>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	61fb      	str	r3, [r7, #28]
 800ba3c:	e082      	b.n	800bb44 <tcp_input+0x31c>
 800ba3e:	bf00      	nop
 800ba40:	2000041c 	.word	0x2000041c
 800ba44:	20003658 	.word	0x20003658
 800ba48:	20000420 	.word	0x20000420
 800ba4c:	20000424 	.word	0x20000424
 800ba50:	20000422 	.word	0x20000422
 800ba54:	080141a4 	.word	0x080141a4
 800ba58:	080141d8 	.word	0x080141d8
 800ba5c:	080141e8 	.word	0x080141e8
 800ba60:	08014210 	.word	0x08014210
 800ba64:	0801421c 	.word	0x0801421c
 800ba68:	2000042c 	.word	0x2000042c
 800ba6c:	20000430 	.word	0x20000430
 800ba70:	20000438 	.word	0x20000438
 800ba74:	20000436 	.word	0x20000436
 800ba78:	20006b88 	.word	0x20006b88
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	7d1b      	ldrb	r3, [r3, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d105      	bne.n	800ba90 <tcp_input+0x268>
 800ba84:	4b8f      	ldr	r3, [pc, #572]	; (800bcc4 <tcp_input+0x49c>)
 800ba86:	22e2      	movs	r2, #226	; 0xe2
 800ba88:	498f      	ldr	r1, [pc, #572]	; (800bcc8 <tcp_input+0x4a0>)
 800ba8a:	4890      	ldr	r0, [pc, #576]	; (800bccc <tcp_input+0x4a4>)
 800ba8c:	f006 f9ac 	bl	8011de8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	7d1b      	ldrb	r3, [r3, #20]
 800ba94:	2b0a      	cmp	r3, #10
 800ba96:	d105      	bne.n	800baa4 <tcp_input+0x27c>
 800ba98:	4b8a      	ldr	r3, [pc, #552]	; (800bcc4 <tcp_input+0x49c>)
 800ba9a:	22e3      	movs	r2, #227	; 0xe3
 800ba9c:	498c      	ldr	r1, [pc, #560]	; (800bcd0 <tcp_input+0x4a8>)
 800ba9e:	488b      	ldr	r0, [pc, #556]	; (800bccc <tcp_input+0x4a4>)
 800baa0:	f006 f9a2 	bl	8011de8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	7d1b      	ldrb	r3, [r3, #20]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d105      	bne.n	800bab8 <tcp_input+0x290>
 800baac:	4b85      	ldr	r3, [pc, #532]	; (800bcc4 <tcp_input+0x49c>)
 800baae:	22e4      	movs	r2, #228	; 0xe4
 800bab0:	4988      	ldr	r1, [pc, #544]	; (800bcd4 <tcp_input+0x4ac>)
 800bab2:	4886      	ldr	r0, [pc, #536]	; (800bccc <tcp_input+0x4a4>)
 800bab4:	f006 f998 	bl	8011de8 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	8b1a      	ldrh	r2, [r3, #24]
 800babc:	4b86      	ldr	r3, [pc, #536]	; (800bcd8 <tcp_input+0x4b0>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d138      	bne.n	800bb3a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	8ada      	ldrh	r2, [r3, #22]
 800bacc:	4b82      	ldr	r3, [pc, #520]	; (800bcd8 <tcp_input+0x4b0>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	885b      	ldrh	r3, [r3, #2]
 800bad2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d130      	bne.n	800bb3a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	4b7f      	ldr	r3, [pc, #508]	; (800bcdc <tcp_input+0x4b4>)
 800bade:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d12a      	bne.n	800bb3a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	4b7c      	ldr	r3, [pc, #496]	; (800bcdc <tcp_input+0x4b4>)
 800baea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800baec:	429a      	cmp	r2, r3
 800baee:	d124      	bne.n	800bb3a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	69fa      	ldr	r2, [r7, #28]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d105      	bne.n	800bb06 <tcp_input+0x2de>
 800bafa:	4b72      	ldr	r3, [pc, #456]	; (800bcc4 <tcp_input+0x49c>)
 800bafc:	22ec      	movs	r2, #236	; 0xec
 800bafe:	4978      	ldr	r1, [pc, #480]	; (800bce0 <tcp_input+0x4b8>)
 800bb00:	4872      	ldr	r0, [pc, #456]	; (800bccc <tcp_input+0x4a4>)
 800bb02:	f006 f971 	bl	8011de8 <iprintf>
      if (prev != NULL) {
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00a      	beq.n	800bb22 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	68da      	ldr	r2, [r3, #12]
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bb14:	4b73      	ldr	r3, [pc, #460]	; (800bce4 <tcp_input+0x4bc>)
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bb1c:	4a71      	ldr	r2, [pc, #452]	; (800bce4 <tcp_input+0x4bc>)
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	69fa      	ldr	r2, [r7, #28]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d10f      	bne.n	800bb4c <tcp_input+0x324>
 800bb2c:	4b65      	ldr	r3, [pc, #404]	; (800bcc4 <tcp_input+0x49c>)
 800bb2e:	22f4      	movs	r2, #244	; 0xf4
 800bb30:	496d      	ldr	r1, [pc, #436]	; (800bce8 <tcp_input+0x4c0>)
 800bb32:	4866      	ldr	r0, [pc, #408]	; (800bccc <tcp_input+0x4a4>)
 800bb34:	f006 f958 	bl	8011de8 <iprintf>
      break;
 800bb38:	e008      	b.n	800bb4c <tcp_input+0x324>
    }
    prev = pcb;
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	61fb      	str	r3, [r7, #28]
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d198      	bne.n	800ba7c <tcp_input+0x254>
 800bb4a:	e000      	b.n	800bb4e <tcp_input+0x326>
      break;
 800bb4c:	bf00      	nop
  }

  if (pcb == NULL) {
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d173      	bne.n	800bc3c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb54:	4b65      	ldr	r3, [pc, #404]	; (800bcec <tcp_input+0x4c4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	e02f      	b.n	800bbbc <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	7d1b      	ldrb	r3, [r3, #20]
 800bb60:	2b0a      	cmp	r3, #10
 800bb62:	d005      	beq.n	800bb70 <tcp_input+0x348>
 800bb64:	4b57      	ldr	r3, [pc, #348]	; (800bcc4 <tcp_input+0x49c>)
 800bb66:	22fe      	movs	r2, #254	; 0xfe
 800bb68:	4961      	ldr	r1, [pc, #388]	; (800bcf0 <tcp_input+0x4c8>)
 800bb6a:	4858      	ldr	r0, [pc, #352]	; (800bccc <tcp_input+0x4a4>)
 800bb6c:	f006 f93c 	bl	8011de8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	8b1a      	ldrh	r2, [r3, #24]
 800bb74:	4b58      	ldr	r3, [pc, #352]	; (800bcd8 <tcp_input+0x4b0>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d11a      	bne.n	800bbb6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	8ada      	ldrh	r2, [r3, #22]
 800bb84:	4b54      	ldr	r3, [pc, #336]	; (800bcd8 <tcp_input+0x4b0>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	885b      	ldrh	r3, [r3, #2]
 800bb8a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d112      	bne.n	800bbb6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	4b51      	ldr	r3, [pc, #324]	; (800bcdc <tcp_input+0x4b4>)
 800bb96:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d10c      	bne.n	800bbb6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	4b4e      	ldr	r3, [pc, #312]	; (800bcdc <tcp_input+0x4b4>)
 800bba2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d106      	bne.n	800bbb6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800bba8:	69f8      	ldr	r0, [r7, #28]
 800bbaa:	f000 fb15 	bl	800c1d8 <tcp_timewait_input>
        pbuf_free(p);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7fe f95c 	bl	8009e6c <pbuf_free>
        return;
 800bbb4:	e1dc      	b.n	800bf70 <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	61fb      	str	r3, [r7, #28]
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1cc      	bne.n	800bb5c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bbc6:	4b4b      	ldr	r3, [pc, #300]	; (800bcf4 <tcp_input+0x4cc>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	617b      	str	r3, [r7, #20]
 800bbcc:	e019      	b.n	800bc02 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	8ada      	ldrh	r2, [r3, #22]
 800bbd2:	4b41      	ldr	r3, [pc, #260]	; (800bcd8 <tcp_input+0x4b0>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	885b      	ldrh	r3, [r3, #2]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d10c      	bne.n	800bbf8 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	4b3e      	ldr	r3, [pc, #248]	; (800bcdc <tcp_input+0x4b4>)
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d00f      	beq.n	800bc0a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00d      	beq.n	800bc0c <tcp_input+0x3e4>
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d009      	beq.n	800bc0c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	617b      	str	r3, [r7, #20]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1e2      	bne.n	800bbce <tcp_input+0x3a6>
 800bc08:	e000      	b.n	800bc0c <tcp_input+0x3e4>
            break;
 800bc0a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d014      	beq.n	800bc3c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00a      	beq.n	800bc2e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	68da      	ldr	r2, [r3, #12]
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bc20:	4b34      	ldr	r3, [pc, #208]	; (800bcf4 <tcp_input+0x4cc>)
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bc28:	4a32      	ldr	r2, [pc, #200]	; (800bcf4 <tcp_input+0x4cc>)
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800bc2e:	6978      	ldr	r0, [r7, #20]
 800bc30:	f000 f9f2 	bl	800c018 <tcp_listen_input>
      pbuf_free(p);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7fe f919 	bl	8009e6c <pbuf_free>
      return;
 800bc3a:	e199      	b.n	800bf70 <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f000 8164 	beq.w	800bf0c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bc44:	4b2c      	ldr	r3, [pc, #176]	; (800bcf8 <tcp_input+0x4d0>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	891a      	ldrh	r2, [r3, #8]
 800bc4e:	4b2a      	ldr	r3, [pc, #168]	; (800bcf8 <tcp_input+0x4d0>)
 800bc50:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bc52:	4a29      	ldr	r2, [pc, #164]	; (800bcf8 <tcp_input+0x4d0>)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bc58:	4b1f      	ldr	r3, [pc, #124]	; (800bcd8 <tcp_input+0x4b0>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a26      	ldr	r2, [pc, #152]	; (800bcf8 <tcp_input+0x4d0>)
 800bc5e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bc60:	4b26      	ldr	r3, [pc, #152]	; (800bcfc <tcp_input+0x4d4>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bc66:	4b26      	ldr	r3, [pc, #152]	; (800bd00 <tcp_input+0x4d8>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bc6c:	4b25      	ldr	r3, [pc, #148]	; (800bd04 <tcp_input+0x4dc>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bc72:	4b25      	ldr	r3, [pc, #148]	; (800bd08 <tcp_input+0x4e0>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	f003 0308 	and.w	r3, r3, #8
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d006      	beq.n	800bc8c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	7b5b      	ldrb	r3, [r3, #13]
 800bc82:	f043 0301 	orr.w	r3, r3, #1
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d03d      	beq.n	800bd10 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bc94:	69f8      	ldr	r0, [r7, #28]
 800bc96:	f7ff fa5b 	bl	800b150 <tcp_process_refused_data>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f113 0f0d 	cmn.w	r3, #13
 800bca0:	d007      	beq.n	800bcb2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d032      	beq.n	800bd10 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bcaa:	4b18      	ldr	r3, [pc, #96]	; (800bd0c <tcp_input+0x4e4>)
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d02e      	beq.n	800bd10 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f040 8108 	bne.w	800becc <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bcbc:	69f8      	ldr	r0, [r7, #28]
 800bcbe:	f002 fa09 	bl	800e0d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bcc2:	e103      	b.n	800becc <tcp_input+0x6a4>
 800bcc4:	080141a4 	.word	0x080141a4
 800bcc8:	0801423c 	.word	0x0801423c
 800bccc:	080141e8 	.word	0x080141e8
 800bcd0:	08014264 	.word	0x08014264
 800bcd4:	08014290 	.word	0x08014290
 800bcd8:	2000041c 	.word	0x2000041c
 800bcdc:	20003658 	.word	0x20003658
 800bce0:	080142b8 	.word	0x080142b8
 800bce4:	20006b88 	.word	0x20006b88
 800bce8:	080142e4 	.word	0x080142e4
 800bcec:	20006b98 	.word	0x20006b98
 800bcf0:	08014310 	.word	0x08014310
 800bcf4:	20006b90 	.word	0x20006b90
 800bcf8:	2000040c 	.word	0x2000040c
 800bcfc:	2000043c 	.word	0x2000043c
 800bd00:	20000439 	.word	0x20000439
 800bd04:	20000434 	.word	0x20000434
 800bd08:	20000438 	.word	0x20000438
 800bd0c:	20000436 	.word	0x20000436
      }
    }
    tcp_input_pcb = pcb;
 800bd10:	4a99      	ldr	r2, [pc, #612]	; (800bf78 <tcp_input+0x750>)
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bd16:	69f8      	ldr	r0, [r7, #28]
 800bd18:	f000 fac6 	bl	800c2a8 <tcp_process>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bd20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd24:	f113 0f0d 	cmn.w	r3, #13
 800bd28:	f000 80d2 	beq.w	800bed0 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800bd2c:	4b93      	ldr	r3, [pc, #588]	; (800bf7c <tcp_input+0x754>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	f003 0308 	and.w	r3, r3, #8
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d016      	beq.n	800bd66 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d008      	beq.n	800bd54 <tcp_input+0x52c>
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd48:	69fa      	ldr	r2, [r7, #28]
 800bd4a:	6912      	ldr	r2, [r2, #16]
 800bd4c:	f06f 010d 	mvn.w	r1, #13
 800bd50:	4610      	mov	r0, r2
 800bd52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bd54:	69f9      	ldr	r1, [r7, #28]
 800bd56:	488a      	ldr	r0, [pc, #552]	; (800bf80 <tcp_input+0x758>)
 800bd58:	f7ff fc4e 	bl	800b5f8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800bd5c:	69f9      	ldr	r1, [r7, #28]
 800bd5e:	2001      	movs	r0, #1
 800bd60:	f7fd fb4c 	bl	80093fc <memp_free>
 800bd64:	e0bf      	b.n	800bee6 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bd6a:	4b86      	ldr	r3, [pc, #536]	; (800bf84 <tcp_input+0x75c>)
 800bd6c:	881b      	ldrh	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d01b      	beq.n	800bdaa <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bd72:	4b84      	ldr	r3, [pc, #528]	; (800bf84 <tcp_input+0x75c>)
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d009      	beq.n	800bd94 <tcp_input+0x56c>
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd84:	69fa      	ldr	r2, [r7, #28]
 800bd86:	6910      	ldr	r0, [r2, #16]
 800bd88:	89fa      	ldrh	r2, [r7, #14]
 800bd8a:	69f9      	ldr	r1, [r7, #28]
 800bd8c:	4798      	blx	r3
 800bd8e:	4603      	mov	r3, r0
 800bd90:	74fb      	strb	r3, [r7, #19]
 800bd92:	e001      	b.n	800bd98 <tcp_input+0x570>
 800bd94:	2300      	movs	r3, #0
 800bd96:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bd98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd9c:	f113 0f0d 	cmn.w	r3, #13
 800bda0:	f000 8098 	beq.w	800bed4 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bda4:	4b77      	ldr	r3, [pc, #476]	; (800bf84 <tcp_input+0x75c>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bdaa:	69f8      	ldr	r0, [r7, #28]
 800bdac:	f000 f902 	bl	800bfb4 <tcp_input_delayed_close>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f040 8090 	bne.w	800bed8 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bdb8:	4b73      	ldr	r3, [pc, #460]	; (800bf88 <tcp_input+0x760>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d041      	beq.n	800be44 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d006      	beq.n	800bdd6 <tcp_input+0x5ae>
 800bdc8:	4b70      	ldr	r3, [pc, #448]	; (800bf8c <tcp_input+0x764>)
 800bdca:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800bdce:	4970      	ldr	r1, [pc, #448]	; (800bf90 <tcp_input+0x768>)
 800bdd0:	4870      	ldr	r0, [pc, #448]	; (800bf94 <tcp_input+0x76c>)
 800bdd2:	f006 f809 	bl	8011de8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	7e9b      	ldrb	r3, [r3, #26]
 800bdda:	f003 0310 	and.w	r3, r3, #16
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d008      	beq.n	800bdf4 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bde2:	4b69      	ldr	r3, [pc, #420]	; (800bf88 <tcp_input+0x760>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe f840 	bl	8009e6c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bdec:	69f8      	ldr	r0, [r7, #28]
 800bdee:	f7fe fdd5 	bl	800a99c <tcp_abort>
            goto aborted;
 800bdf2:	e078      	b.n	800bee6 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00c      	beq.n	800be18 <tcp_input+0x5f0>
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	6918      	ldr	r0, [r3, #16]
 800be08:	4b5f      	ldr	r3, [pc, #380]	; (800bf88 <tcp_input+0x760>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	2300      	movs	r3, #0
 800be0e:	69f9      	ldr	r1, [r7, #28]
 800be10:	47a0      	blx	r4
 800be12:	4603      	mov	r3, r0
 800be14:	74fb      	strb	r3, [r7, #19]
 800be16:	e008      	b.n	800be2a <tcp_input+0x602>
 800be18:	4b5b      	ldr	r3, [pc, #364]	; (800bf88 <tcp_input+0x760>)
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	2300      	movs	r3, #0
 800be1e:	69f9      	ldr	r1, [r7, #28]
 800be20:	2000      	movs	r0, #0
 800be22:	f7ff fa47 	bl	800b2b4 <tcp_recv_null>
 800be26:	4603      	mov	r3, r0
 800be28:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800be2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be2e:	f113 0f0d 	cmn.w	r3, #13
 800be32:	d053      	beq.n	800bedc <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800be34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800be3c:	4b52      	ldr	r3, [pc, #328]	; (800bf88 <tcp_input+0x760>)
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800be44:	4b4d      	ldr	r3, [pc, #308]	; (800bf7c <tcp_input+0x754>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	f003 0320 	and.w	r3, r3, #32
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d030      	beq.n	800beb2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be54:	2b00      	cmp	r3, #0
 800be56:	d009      	beq.n	800be6c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be5c:	7b5a      	ldrb	r2, [r3, #13]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be62:	f042 0220 	orr.w	r2, r2, #32
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	735a      	strb	r2, [r3, #13]
 800be6a:	e022      	b.n	800beb2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be70:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800be74:	d005      	beq.n	800be82 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7a:	3301      	adds	r3, #1
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <tcp_input+0x67c>
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	6918      	ldr	r0, [r3, #16]
 800be96:	2300      	movs	r3, #0
 800be98:	2200      	movs	r2, #0
 800be9a:	69f9      	ldr	r1, [r7, #28]
 800be9c:	47a0      	blx	r4
 800be9e:	4603      	mov	r3, r0
 800bea0:	74fb      	strb	r3, [r7, #19]
 800bea2:	e001      	b.n	800bea8 <tcp_input+0x680>
 800bea4:	2300      	movs	r3, #0
 800bea6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bea8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800beac:	f113 0f0d 	cmn.w	r3, #13
 800beb0:	d016      	beq.n	800bee0 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800beb2:	4b31      	ldr	r3, [pc, #196]	; (800bf78 <tcp_input+0x750>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800beb8:	69f8      	ldr	r0, [r7, #28]
 800beba:	f000 f87b 	bl	800bfb4 <tcp_input_delayed_close>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10f      	bne.n	800bee4 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bec4:	69f8      	ldr	r0, [r7, #28]
 800bec6:	f002 f961 	bl	800e18c <tcp_output>
 800beca:	e00c      	b.n	800bee6 <tcp_input+0x6be>
        goto aborted;
 800becc:	bf00      	nop
 800bece:	e00a      	b.n	800bee6 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bed0:	bf00      	nop
 800bed2:	e008      	b.n	800bee6 <tcp_input+0x6be>
              goto aborted;
 800bed4:	bf00      	nop
 800bed6:	e006      	b.n	800bee6 <tcp_input+0x6be>
          goto aborted;
 800bed8:	bf00      	nop
 800beda:	e004      	b.n	800bee6 <tcp_input+0x6be>
            goto aborted;
 800bedc:	bf00      	nop
 800bede:	e002      	b.n	800bee6 <tcp_input+0x6be>
              goto aborted;
 800bee0:	bf00      	nop
 800bee2:	e000      	b.n	800bee6 <tcp_input+0x6be>
          goto aborted;
 800bee4:	bf00      	nop
    tcp_input_pcb = NULL;
 800bee6:	4b24      	ldr	r3, [pc, #144]	; (800bf78 <tcp_input+0x750>)
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800beec:	4b26      	ldr	r3, [pc, #152]	; (800bf88 <tcp_input+0x760>)
 800beee:	2200      	movs	r2, #0
 800bef0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800bef2:	4b29      	ldr	r3, [pc, #164]	; (800bf98 <tcp_input+0x770>)
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d039      	beq.n	800bf6e <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 800befa:	4b27      	ldr	r3, [pc, #156]	; (800bf98 <tcp_input+0x770>)
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fd ffb4 	bl	8009e6c <pbuf_free>
      inseg.p = NULL;
 800bf04:	4b24      	ldr	r3, [pc, #144]	; (800bf98 <tcp_input+0x770>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bf0a:	e030      	b.n	800bf6e <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bf0c:	4b23      	ldr	r3, [pc, #140]	; (800bf9c <tcp_input+0x774>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	899b      	ldrh	r3, [r3, #12]
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7fc fe7c 	bl	8008c12 <lwip_htons>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d115      	bne.n	800bf50 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf24:	4b1e      	ldr	r3, [pc, #120]	; (800bfa0 <tcp_input+0x778>)
 800bf26:	6818      	ldr	r0, [r3, #0]
 800bf28:	4b1e      	ldr	r3, [pc, #120]	; (800bfa4 <tcp_input+0x77c>)
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	4b1e      	ldr	r3, [pc, #120]	; (800bfa8 <tcp_input+0x780>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf34:	4b19      	ldr	r3, [pc, #100]	; (800bf9c <tcp_input+0x774>)
 800bf36:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf38:	885b      	ldrh	r3, [r3, #2]
 800bf3a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf3c:	4a17      	ldr	r2, [pc, #92]	; (800bf9c <tcp_input+0x774>)
 800bf3e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf40:	8812      	ldrh	r2, [r2, #0]
 800bf42:	b292      	uxth	r2, r2
 800bf44:	9201      	str	r2, [sp, #4]
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	4b18      	ldr	r3, [pc, #96]	; (800bfac <tcp_input+0x784>)
 800bf4a:	4a19      	ldr	r2, [pc, #100]	; (800bfb0 <tcp_input+0x788>)
 800bf4c:	f002 fba2 	bl	800e694 <tcp_rst>
    pbuf_free(p);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7fd ff8b 	bl	8009e6c <pbuf_free>
  return;
 800bf56:	e00a      	b.n	800bf6e <tcp_input+0x746>
    goto dropped;
 800bf58:	bf00      	nop
 800bf5a:	e004      	b.n	800bf66 <tcp_input+0x73e>
    goto dropped;
 800bf5c:	bf00      	nop
 800bf5e:	e002      	b.n	800bf66 <tcp_input+0x73e>
    goto dropped;
 800bf60:	bf00      	nop
 800bf62:	e000      	b.n	800bf66 <tcp_input+0x73e>
      goto dropped;
 800bf64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7fd ff80 	bl	8009e6c <pbuf_free>
 800bf6c:	e000      	b.n	800bf70 <tcp_input+0x748>
  return;
 800bf6e:	bf00      	nop
}
 800bf70:	3724      	adds	r7, #36	; 0x24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd90      	pop	{r4, r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20006b9c 	.word	0x20006b9c
 800bf7c:	20000439 	.word	0x20000439
 800bf80:	20006b88 	.word	0x20006b88
 800bf84:	20000434 	.word	0x20000434
 800bf88:	2000043c 	.word	0x2000043c
 800bf8c:	080141a4 	.word	0x080141a4
 800bf90:	08014340 	.word	0x08014340
 800bf94:	080141e8 	.word	0x080141e8
 800bf98:	2000040c 	.word	0x2000040c
 800bf9c:	2000041c 	.word	0x2000041c
 800bfa0:	20000430 	.word	0x20000430
 800bfa4:	20000436 	.word	0x20000436
 800bfa8:	2000042c 	.word	0x2000042c
 800bfac:	20003668 	.word	0x20003668
 800bfb0:	2000366c 	.word	0x2000366c

0800bfb4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800bfbc:	4b14      	ldr	r3, [pc, #80]	; (800c010 <tcp_input_delayed_close+0x5c>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	f003 0310 	and.w	r3, r3, #16
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d01d      	beq.n	800c004 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	7e9b      	ldrb	r3, [r3, #26]
 800bfcc:	f003 0310 	and.w	r3, r3, #16
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10d      	bne.n	800bff0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d008      	beq.n	800bff0 <tcp_input_delayed_close+0x3c>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	6912      	ldr	r2, [r2, #16]
 800bfe8:	f06f 010e 	mvn.w	r1, #14
 800bfec:	4610      	mov	r0, r2
 800bfee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bff0:	6879      	ldr	r1, [r7, #4]
 800bff2:	4808      	ldr	r0, [pc, #32]	; (800c014 <tcp_input_delayed_close+0x60>)
 800bff4:	f7ff fb00 	bl	800b5f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800bff8:	6879      	ldr	r1, [r7, #4]
 800bffa:	2001      	movs	r0, #1
 800bffc:	f7fd f9fe 	bl	80093fc <memp_free>
    return 1;
 800c000:	2301      	movs	r3, #1
 800c002:	e000      	b.n	800c006 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	20000439 	.word	0x20000439
 800c014:	20006b88 	.word	0x20006b88

0800c018 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c020:	4b63      	ldr	r3, [pc, #396]	; (800c1b0 <tcp_listen_input+0x198>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f040 80bb 	bne.w	800c1a4 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c02e:	4b60      	ldr	r3, [pc, #384]	; (800c1b0 <tcp_listen_input+0x198>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f003 0310 	and.w	r3, r3, #16
 800c036:	2b00      	cmp	r3, #0
 800c038:	d016      	beq.n	800c068 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c03a:	4b5e      	ldr	r3, [pc, #376]	; (800c1b4 <tcp_listen_input+0x19c>)
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	4b5e      	ldr	r3, [pc, #376]	; (800c1b8 <tcp_listen_input+0x1a0>)
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	4b5d      	ldr	r3, [pc, #372]	; (800c1bc <tcp_listen_input+0x1a4>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c04a:	4b5d      	ldr	r3, [pc, #372]	; (800c1c0 <tcp_listen_input+0x1a8>)
 800c04c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c04e:	885b      	ldrh	r3, [r3, #2]
 800c050:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c052:	4a5b      	ldr	r2, [pc, #364]	; (800c1c0 <tcp_listen_input+0x1a8>)
 800c054:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c056:	8812      	ldrh	r2, [r2, #0]
 800c058:	b292      	uxth	r2, r2
 800c05a:	9201      	str	r2, [sp, #4]
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	4b59      	ldr	r3, [pc, #356]	; (800c1c4 <tcp_listen_input+0x1ac>)
 800c060:	4a59      	ldr	r2, [pc, #356]	; (800c1c8 <tcp_listen_input+0x1b0>)
 800c062:	f002 fb17 	bl	800e694 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c066:	e09f      	b.n	800c1a8 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800c068:	4b51      	ldr	r3, [pc, #324]	; (800c1b0 <tcp_listen_input+0x198>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	f003 0302 	and.w	r3, r3, #2
 800c070:	2b00      	cmp	r3, #0
 800c072:	f000 8099 	beq.w	800c1a8 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	7d5b      	ldrb	r3, [r3, #21]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7ff f9f8 	bl	800b470 <tcp_alloc>
 800c080:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d111      	bne.n	800c0ac <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00a      	beq.n	800c0a6 <tcp_listen_input+0x8e>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	6910      	ldr	r0, [r2, #16]
 800c098:	f04f 32ff 	mov.w	r2, #4294967295
 800c09c:	2100      	movs	r1, #0
 800c09e:	4798      	blx	r3
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73bb      	strb	r3, [r7, #14]
      return;
 800c0a4:	e081      	b.n	800c1aa <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c0a6:	23f0      	movs	r3, #240	; 0xf0
 800c0a8:	73bb      	strb	r3, [r7, #14]
      return;
 800c0aa:	e07e      	b.n	800c1aa <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c0ac:	4b47      	ldr	r3, [pc, #284]	; (800c1cc <tcp_listen_input+0x1b4>)
 800c0ae:	695a      	ldr	r2, [r3, #20]
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c0b4:	4b45      	ldr	r3, [pc, #276]	; (800c1cc <tcp_listen_input+0x1b4>)
 800c0b6:	691a      	ldr	r2, [r3, #16]
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	8ada      	ldrh	r2, [r3, #22]
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c0c4:	4b3e      	ldr	r3, [pc, #248]	; (800c1c0 <tcp_listen_input+0x1a8>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	881b      	ldrh	r3, [r3, #0]
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	2203      	movs	r2, #3
 800c0d4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c0d6:	4b39      	ldr	r3, [pc, #228]	; (800c1bc <tcp_listen_input+0x1a4>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c0e8:	6978      	ldr	r0, [r7, #20]
 800c0ea:	f7ff fb01 	bl	800b6f0 <tcp_next_iss>
 800c0ee:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c108:	4b2c      	ldr	r3, [pc, #176]	; (800c1bc <tcp_listen_input+0x1a4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	1e5a      	subs	r2, r3, #1
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	691a      	ldr	r2, [r3, #16]
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7a1b      	ldrb	r3, [r3, #8]
 800c124:	f003 030c 	and.w	r3, r3, #12
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c12e:	4b28      	ldr	r3, [pc, #160]	; (800c1d0 <tcp_listen_input+0x1b8>)
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	60da      	str	r2, [r3, #12]
 800c136:	4a26      	ldr	r2, [pc, #152]	; (800c1d0 <tcp_listen_input+0x1b8>)
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	f002 fcf2 	bl	800eb24 <tcp_timer_needed>
 800c140:	4b24      	ldr	r3, [pc, #144]	; (800c1d4 <tcp_listen_input+0x1bc>)
 800c142:	2201      	movs	r2, #1
 800c144:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c146:	6978      	ldr	r0, [r7, #20]
 800c148:	f001 fd10 	bl	800db6c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c14c:	4b1c      	ldr	r3, [pc, #112]	; (800c1c0 <tcp_listen_input+0x1a8>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	89db      	ldrh	r3, [r3, #14]
 800c152:	b29a      	uxth	r2, r3
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	3304      	adds	r3, #4
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7ff fad3 	bl	800b71c <tcp_eff_send_mss_impl>
 800c176:	4603      	mov	r3, r0
 800c178:	461a      	mov	r2, r3
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c17e:	2112      	movs	r1, #18
 800c180:	6978      	ldr	r0, [r7, #20]
 800c182:	f001 feab 	bl	800dedc <tcp_enqueue_flags>
 800c186:	4603      	mov	r3, r0
 800c188:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d004      	beq.n	800c19c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800c192:	2100      	movs	r1, #0
 800c194:	6978      	ldr	r0, [r7, #20]
 800c196:	f7fe fb4f 	bl	800a838 <tcp_abandon>
      return;
 800c19a:	e006      	b.n	800c1aa <tcp_listen_input+0x192>
    tcp_output(npcb);
 800c19c:	6978      	ldr	r0, [r7, #20]
 800c19e:	f001 fff5 	bl	800e18c <tcp_output>
  return;
 800c1a2:	e001      	b.n	800c1a8 <tcp_listen_input+0x190>
    return;
 800c1a4:	bf00      	nop
 800c1a6:	e000      	b.n	800c1aa <tcp_listen_input+0x192>
  return;
 800c1a8:	bf00      	nop
}
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20000438 	.word	0x20000438
 800c1b4:	20000430 	.word	0x20000430
 800c1b8:	20000436 	.word	0x20000436
 800c1bc:	2000042c 	.word	0x2000042c
 800c1c0:	2000041c 	.word	0x2000041c
 800c1c4:	20003668 	.word	0x20003668
 800c1c8:	2000366c 	.word	0x2000366c
 800c1cc:	20003658 	.word	0x20003658
 800c1d0:	20006b88 	.word	0x20006b88
 800c1d4:	20006b84 	.word	0x20006b84

0800c1d8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af02      	add	r7, sp, #8
 800c1de:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c1e0:	4b29      	ldr	r3, [pc, #164]	; (800c288 <tcp_timewait_input+0xb0>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d146      	bne.n	800c27a <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c1ec:	4b26      	ldr	r3, [pc, #152]	; (800c288 <tcp_timewait_input+0xb0>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	f003 0302 	and.w	r3, r3, #2
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d027      	beq.n	800c248 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c1f8:	4b24      	ldr	r3, [pc, #144]	; (800c28c <tcp_timewait_input+0xb4>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	2b00      	cmp	r3, #0
 800c204:	db2a      	blt.n	800c25c <tcp_timewait_input+0x84>
 800c206:	4b21      	ldr	r3, [pc, #132]	; (800c28c <tcp_timewait_input+0xb4>)
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c212:	440b      	add	r3, r1
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	2b00      	cmp	r3, #0
 800c218:	dc20      	bgt.n	800c25c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c21a:	4b1d      	ldr	r3, [pc, #116]	; (800c290 <tcp_timewait_input+0xb8>)
 800c21c:	6818      	ldr	r0, [r3, #0]
 800c21e:	4b1d      	ldr	r3, [pc, #116]	; (800c294 <tcp_timewait_input+0xbc>)
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	4b19      	ldr	r3, [pc, #100]	; (800c28c <tcp_timewait_input+0xb4>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c22a:	4b1b      	ldr	r3, [pc, #108]	; (800c298 <tcp_timewait_input+0xc0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c22e:	885b      	ldrh	r3, [r3, #2]
 800c230:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c232:	4a19      	ldr	r2, [pc, #100]	; (800c298 <tcp_timewait_input+0xc0>)
 800c234:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c236:	8812      	ldrh	r2, [r2, #0]
 800c238:	b292      	uxth	r2, r2
 800c23a:	9201      	str	r2, [sp, #4]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	4b17      	ldr	r3, [pc, #92]	; (800c29c <tcp_timewait_input+0xc4>)
 800c240:	4a17      	ldr	r2, [pc, #92]	; (800c2a0 <tcp_timewait_input+0xc8>)
 800c242:	f002 fa27 	bl	800e694 <tcp_rst>
      return;
 800c246:	e01b      	b.n	800c280 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800c248:	4b0f      	ldr	r3, [pc, #60]	; (800c288 <tcp_timewait_input+0xb0>)
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d003      	beq.n	800c25c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c254:	4b13      	ldr	r3, [pc, #76]	; (800c2a4 <tcp_timewait_input+0xcc>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c25c:	4b0d      	ldr	r3, [pc, #52]	; (800c294 <tcp_timewait_input+0xbc>)
 800c25e:	881b      	ldrh	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00c      	beq.n	800c27e <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7e9b      	ldrb	r3, [r3, #26]
 800c268:	f043 0302 	orr.w	r3, r3, #2
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f001 ff8a 	bl	800e18c <tcp_output>
  }
  return;
 800c278:	e001      	b.n	800c27e <tcp_timewait_input+0xa6>
    return;
 800c27a:	bf00      	nop
 800c27c:	e000      	b.n	800c280 <tcp_timewait_input+0xa8>
  return;
 800c27e:	bf00      	nop
}
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	20000438 	.word	0x20000438
 800c28c:	2000042c 	.word	0x2000042c
 800c290:	20000430 	.word	0x20000430
 800c294:	20000436 	.word	0x20000436
 800c298:	2000041c 	.word	0x2000041c
 800c29c:	20003668 	.word	0x20003668
 800c2a0:	2000366c 	.word	0x2000366c
 800c2a4:	20006b8c 	.word	0x20006b8c

0800c2a8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b08a      	sub	sp, #40	; 0x28
 800c2ac:	af02      	add	r7, sp, #8
 800c2ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c2b8:	4ba4      	ldr	r3, [pc, #656]	; (800c54c <tcp_process+0x2a4>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d04e      	beq.n	800c362 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7d1b      	ldrb	r3, [r3, #20]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d108      	bne.n	800c2de <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2d0:	4b9f      	ldr	r3, [pc, #636]	; (800c550 <tcp_process+0x2a8>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d123      	bne.n	800c320 <tcp_process+0x78>
        acceptable = 1;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	76fb      	strb	r3, [r7, #27]
 800c2dc:	e020      	b.n	800c320 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2e2:	4b9c      	ldr	r3, [pc, #624]	; (800c554 <tcp_process+0x2ac>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d102      	bne.n	800c2f0 <tcp_process+0x48>
        acceptable = 1;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	76fb      	strb	r3, [r7, #27]
 800c2ee:	e017      	b.n	800c320 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c2f0:	4b98      	ldr	r3, [pc, #608]	; (800c554 <tcp_process+0x2ac>)
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	db10      	blt.n	800c320 <tcp_process+0x78>
 800c2fe:	4b95      	ldr	r3, [pc, #596]	; (800c554 <tcp_process+0x2ac>)
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c30a:	440b      	add	r3, r1
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dc06      	bgt.n	800c320 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	7e9b      	ldrb	r3, [r3, #26]
 800c316:	f043 0302 	orr.w	r3, r3, #2
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c320:	7efb      	ldrb	r3, [r7, #27]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d01b      	beq.n	800c35e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	7d1b      	ldrb	r3, [r3, #20]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <tcp_process+0x94>
 800c32e:	4b8a      	ldr	r3, [pc, #552]	; (800c558 <tcp_process+0x2b0>)
 800c330:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c334:	4989      	ldr	r1, [pc, #548]	; (800c55c <tcp_process+0x2b4>)
 800c336:	488a      	ldr	r0, [pc, #552]	; (800c560 <tcp_process+0x2b8>)
 800c338:	f005 fd56 	bl	8011de8 <iprintf>
      recv_flags |= TF_RESET;
 800c33c:	4b89      	ldr	r3, [pc, #548]	; (800c564 <tcp_process+0x2bc>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	f043 0308 	orr.w	r3, r3, #8
 800c344:	b2da      	uxtb	r2, r3
 800c346:	4b87      	ldr	r3, [pc, #540]	; (800c564 <tcp_process+0x2bc>)
 800c348:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7e9b      	ldrb	r3, [r3, #26]
 800c34e:	f023 0301 	bic.w	r3, r3, #1
 800c352:	b2da      	uxtb	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800c358:	f06f 030d 	mvn.w	r3, #13
 800c35c:	e34d      	b.n	800c9fa <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	e34b      	b.n	800c9fa <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c362:	4b7a      	ldr	r3, [pc, #488]	; (800c54c <tcp_process+0x2a4>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	f003 0302 	and.w	r3, r3, #2
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d010      	beq.n	800c390 <tcp_process+0xe8>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7d1b      	ldrb	r3, [r3, #20]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d00c      	beq.n	800c390 <tcp_process+0xe8>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7d1b      	ldrb	r3, [r3, #20]
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d008      	beq.n	800c390 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	7e9b      	ldrb	r3, [r3, #26]
 800c382:	f043 0302 	orr.w	r3, r3, #2
 800c386:	b2da      	uxtb	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e334      	b.n	800c9fa <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	7e9b      	ldrb	r3, [r3, #26]
 800c394:	f003 0310 	and.w	r3, r3, #16
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c39c:	4b72      	ldr	r3, [pc, #456]	; (800c568 <tcp_process+0x2c0>)
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f001 fbdd 	bl	800db6c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	7d1b      	ldrb	r3, [r3, #20]
 800c3b6:	3b02      	subs	r3, #2
 800c3b8:	2b07      	cmp	r3, #7
 800c3ba:	f200 830e 	bhi.w	800c9da <tcp_process+0x732>
 800c3be:	a201      	add	r2, pc, #4	; (adr r2, 800c3c4 <tcp_process+0x11c>)
 800c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c4:	0800c3e5 	.word	0x0800c3e5
 800c3c8:	0800c5dd 	.word	0x0800c5dd
 800c3cc:	0800c735 	.word	0x0800c735
 800c3d0:	0800c75f 	.word	0x0800c75f
 800c3d4:	0800c889 	.word	0x0800c889
 800c3d8:	0800c735 	.word	0x0800c735
 800c3dc:	0800c915 	.word	0x0800c915
 800c3e0:	0800c9a5 	.word	0x0800c9a5
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c3e4:	4b59      	ldr	r3, [pc, #356]	; (800c54c <tcp_process+0x2a4>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f003 0310 	and.w	r3, r3, #16
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 80cb 	beq.w	800c588 <tcp_process+0x2e0>
 800c3f2:	4b56      	ldr	r3, [pc, #344]	; (800c54c <tcp_process+0x2a4>)
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	f003 0302 	and.w	r3, r3, #2
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 80c4 	beq.w	800c588 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	4b52      	ldr	r3, [pc, #328]	; (800c550 <tcp_process+0x2a8>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	f040 80bc 	bne.w	800c588 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800c410:	4b50      	ldr	r3, [pc, #320]	; (800c554 <tcp_process+0x2ac>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	1c5a      	adds	r2, r3, #1
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800c422:	4b4b      	ldr	r3, [pc, #300]	; (800c550 <tcp_process+0x2a8>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800c42a:	4b50      	ldr	r3, [pc, #320]	; (800c56c <tcp_process+0x2c4>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	89db      	ldrh	r3, [r3, #14]
 800c430:	b29a      	uxth	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c444:	4b43      	ldr	r3, [pc, #268]	; (800c554 <tcp_process+0x2ac>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	1e5a      	subs	r2, r3, #1
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2204      	movs	r2, #4
 800c452:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3304      	adds	r3, #4
 800c45c:	4619      	mov	r1, r3
 800c45e:	4610      	mov	r0, r2
 800c460:	f7ff f95c 	bl	800b71c <tcp_eff_send_mss_impl>
 800c464:	4603      	mov	r3, r0
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	f241 121c 	movw	r2, #4380	; 0x111c
 800c476:	429a      	cmp	r2, r3
 800c478:	bf38      	it	cc
 800c47a:	461a      	movcc	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4293      	cmp	r3, r2
 800c484:	bf28      	it	cs
 800c486:	4613      	movcs	r3, r2
 800c488:	b29a      	uxth	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c496:	2b00      	cmp	r3, #0
 800c498:	d106      	bne.n	800c4a8 <tcp_process+0x200>
 800c49a:	4b2f      	ldr	r3, [pc, #188]	; (800c558 <tcp_process+0x2b0>)
 800c49c:	f240 321a 	movw	r2, #794	; 0x31a
 800c4a0:	4933      	ldr	r1, [pc, #204]	; (800c570 <tcp_process+0x2c8>)
 800c4a2:	482f      	ldr	r0, [pc, #188]	; (800c560 <tcp_process+0x2b8>)
 800c4a4:	f005 fca0 	bl	8011de8 <iprintf>
      --pcb->snd_queuelen;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4bc:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d111      	bne.n	800c4e8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4c8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d106      	bne.n	800c4de <tcp_process+0x236>
 800c4d0:	4b21      	ldr	r3, [pc, #132]	; (800c558 <tcp_process+0x2b0>)
 800c4d2:	f240 3222 	movw	r2, #802	; 0x322
 800c4d6:	4927      	ldr	r1, [pc, #156]	; (800c574 <tcp_process+0x2cc>)
 800c4d8:	4821      	ldr	r0, [pc, #132]	; (800c560 <tcp_process+0x2b8>)
 800c4da:	f005 fc85 	bl	8011de8 <iprintf>
        pcb->unsent = rseg->next;
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	669a      	str	r2, [r3, #104]	; 0x68
 800c4e6:	e003      	b.n	800c4f0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800c4f0:	69f8      	ldr	r0, [r7, #28]
 800c4f2:	f7fe feab 	bl	800b24c <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d104      	bne.n	800c508 <tcp_process+0x260>
        pcb->rtime = -1;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c504:	861a      	strh	r2, [r3, #48]	; 0x30
 800c506:	e006      	b.n	800c516 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00a      	beq.n	800c536 <tcp_process+0x28e>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	6910      	ldr	r0, [r2, #16]
 800c52a:	2200      	movs	r2, #0
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	4798      	blx	r3
 800c530:	4603      	mov	r3, r0
 800c532:	76bb      	strb	r3, [r7, #26]
 800c534:	e001      	b.n	800c53a <tcp_process+0x292>
 800c536:	2300      	movs	r3, #0
 800c538:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800c53a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c53e:	f113 0f0d 	cmn.w	r3, #13
 800c542:	d119      	bne.n	800c578 <tcp_process+0x2d0>
        return ERR_ABRT;
 800c544:	f06f 030c 	mvn.w	r3, #12
 800c548:	e257      	b.n	800c9fa <tcp_process+0x752>
 800c54a:	bf00      	nop
 800c54c:	20000438 	.word	0x20000438
 800c550:	20000430 	.word	0x20000430
 800c554:	2000042c 	.word	0x2000042c
 800c558:	080141a4 	.word	0x080141a4
 800c55c:	0801435c 	.word	0x0801435c
 800c560:	080141e8 	.word	0x080141e8
 800c564:	20000439 	.word	0x20000439
 800c568:	20006b8c 	.word	0x20006b8c
 800c56c:	2000041c 	.word	0x2000041c
 800c570:	0801437c 	.word	0x0801437c
 800c574:	08014394 	.word	0x08014394
      }
      tcp_ack_now(pcb);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	7e9b      	ldrb	r3, [r3, #26]
 800c57c:	f043 0302 	orr.w	r3, r3, #2
 800c580:	b2da      	uxtb	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800c586:	e22a      	b.n	800c9de <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800c588:	4b9f      	ldr	r3, [pc, #636]	; (800c808 <tcp_process+0x560>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	f003 0310 	and.w	r3, r3, #16
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 8224 	beq.w	800c9de <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c596:	4b9d      	ldr	r3, [pc, #628]	; (800c80c <tcp_process+0x564>)
 800c598:	6818      	ldr	r0, [r3, #0]
 800c59a:	4b9d      	ldr	r3, [pc, #628]	; (800c810 <tcp_process+0x568>)
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	4b9c      	ldr	r3, [pc, #624]	; (800c814 <tcp_process+0x56c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5a6:	4b9c      	ldr	r3, [pc, #624]	; (800c818 <tcp_process+0x570>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5aa:	885b      	ldrh	r3, [r3, #2]
 800c5ac:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5ae:	4a9a      	ldr	r2, [pc, #616]	; (800c818 <tcp_process+0x570>)
 800c5b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5b2:	8812      	ldrh	r2, [r2, #0]
 800c5b4:	b292      	uxth	r2, r2
 800c5b6:	9201      	str	r2, [sp, #4]
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	4b98      	ldr	r3, [pc, #608]	; (800c81c <tcp_process+0x574>)
 800c5bc:	4a98      	ldr	r2, [pc, #608]	; (800c820 <tcp_process+0x578>)
 800c5be:	f002 f869 	bl	800e694 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5c8:	2b05      	cmp	r3, #5
 800c5ca:	f200 8208 	bhi.w	800c9de <tcp_process+0x736>
        pcb->rtime = 0;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f002 f8d3 	bl	800e780 <tcp_rexmit_rto>
    break;
 800c5da:	e200      	b.n	800c9de <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800c5dc:	4b8a      	ldr	r3, [pc, #552]	; (800c808 <tcp_process+0x560>)
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	f003 0310 	and.w	r3, r3, #16
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 8091 	beq.w	800c70c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c5ea:	4b88      	ldr	r3, [pc, #544]	; (800c80c <tcp_process+0x564>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	db71      	blt.n	800c6de <tcp_process+0x436>
 800c5fa:	4b84      	ldr	r3, [pc, #528]	; (800c80c <tcp_process+0x564>)
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	2b00      	cmp	r3, #0
 800c606:	dc6a      	bgt.n	800c6de <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2204      	movs	r2, #4
 800c60c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00b      	beq.n	800c62e <tcp_process+0x386>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d106      	bne.n	800c62e <tcp_process+0x386>
 800c620:	4b80      	ldr	r3, [pc, #512]	; (800c824 <tcp_process+0x57c>)
 800c622:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c626:	4980      	ldr	r1, [pc, #512]	; (800c828 <tcp_process+0x580>)
 800c628:	4880      	ldr	r0, [pc, #512]	; (800c82c <tcp_process+0x584>)
 800c62a:	f005 fbdd 	bl	8011de8 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c632:	2b00      	cmp	r3, #0
 800c634:	d102      	bne.n	800c63c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800c636:	23fa      	movs	r3, #250	; 0xfa
 800c638:	76bb      	strb	r3, [r7, #26]
 800c63a:	e011      	b.n	800c660 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00a      	beq.n	800c65c <tcp_process+0x3b4>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	6910      	ldr	r0, [r2, #16]
 800c650:	2200      	movs	r2, #0
 800c652:	6879      	ldr	r1, [r7, #4]
 800c654:	4798      	blx	r3
 800c656:	4603      	mov	r3, r0
 800c658:	76bb      	strb	r3, [r7, #26]
 800c65a:	e001      	b.n	800c660 <tcp_process+0x3b8>
 800c65c:	23f0      	movs	r3, #240	; 0xf0
 800c65e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800c660:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00a      	beq.n	800c67e <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800c668:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c66c:	f113 0f0d 	cmn.w	r3, #13
 800c670:	d002      	beq.n	800c678 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7fe f992 	bl	800a99c <tcp_abort>
          }
          return ERR_ABRT;
 800c678:	f06f 030c 	mvn.w	r3, #12
 800c67c:	e1bd      	b.n	800c9fa <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fa42 	bl	800cb08 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800c684:	4b6a      	ldr	r3, [pc, #424]	; (800c830 <tcp_process+0x588>)
 800c686:	881b      	ldrh	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d005      	beq.n	800c698 <tcp_process+0x3f0>
          recv_acked--;
 800c68c:	4b68      	ldr	r3, [pc, #416]	; (800c830 <tcp_process+0x588>)
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	3b01      	subs	r3, #1
 800c692:	b29a      	uxth	r2, r3
 800c694:	4b66      	ldr	r3, [pc, #408]	; (800c830 <tcp_process+0x588>)
 800c696:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	f241 121c 	movw	r2, #4380	; 0x111c
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	bf38      	it	cc
 800c6a6:	461a      	movcc	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	bf28      	it	cs
 800c6b2:	4613      	movcs	r3, r2
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800c6bc:	4b5d      	ldr	r3, [pc, #372]	; (800c834 <tcp_process+0x58c>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	f003 0320 	and.w	r3, r3, #32
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d034      	beq.n	800c732 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7e9b      	ldrb	r3, [r3, #26]
 800c6cc:	f043 0302 	orr.w	r3, r3, #2
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2207      	movs	r2, #7
 800c6da:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800c6dc:	e029      	b.n	800c732 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6de:	4b4b      	ldr	r3, [pc, #300]	; (800c80c <tcp_process+0x564>)
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	4b4b      	ldr	r3, [pc, #300]	; (800c810 <tcp_process+0x568>)
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	4b4a      	ldr	r3, [pc, #296]	; (800c814 <tcp_process+0x56c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6ee:	4b4a      	ldr	r3, [pc, #296]	; (800c818 <tcp_process+0x570>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6f2:	885b      	ldrh	r3, [r3, #2]
 800c6f4:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6f6:	4a48      	ldr	r2, [pc, #288]	; (800c818 <tcp_process+0x570>)
 800c6f8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6fa:	8812      	ldrh	r2, [r2, #0]
 800c6fc:	b292      	uxth	r2, r2
 800c6fe:	9201      	str	r2, [sp, #4]
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	4b46      	ldr	r3, [pc, #280]	; (800c81c <tcp_process+0x574>)
 800c704:	4a46      	ldr	r2, [pc, #280]	; (800c820 <tcp_process+0x578>)
 800c706:	f001 ffc5 	bl	800e694 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800c70a:	e16a      	b.n	800c9e2 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c70c:	4b3e      	ldr	r3, [pc, #248]	; (800c808 <tcp_process+0x560>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	f003 0302 	and.w	r3, r3, #2
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 8164 	beq.w	800c9e2 <tcp_process+0x73a>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	1e5a      	subs	r2, r3, #1
 800c720:	4b3c      	ldr	r3, [pc, #240]	; (800c814 <tcp_process+0x56c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	f040 815c 	bne.w	800c9e2 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f002 f85e 	bl	800e7ec <tcp_rexmit>
    break;
 800c730:	e157      	b.n	800c9e2 <tcp_process+0x73a>
 800c732:	e156      	b.n	800c9e2 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f9e7 	bl	800cb08 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c73a:	4b3e      	ldr	r3, [pc, #248]	; (800c834 <tcp_process+0x58c>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	f003 0320 	and.w	r3, r3, #32
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 814f 	beq.w	800c9e6 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7e9b      	ldrb	r3, [r3, #26]
 800c74c:	f043 0302 	orr.w	r3, r3, #2
 800c750:	b2da      	uxtb	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2207      	movs	r2, #7
 800c75a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c75c:	e143      	b.n	800c9e6 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f9d2 	bl	800cb08 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c764:	4b33      	ldr	r3, [pc, #204]	; (800c834 <tcp_process+0x58c>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	f003 0320 	and.w	r3, r3, #32
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d074      	beq.n	800c85a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c770:	4b25      	ldr	r3, [pc, #148]	; (800c808 <tcp_process+0x560>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	f003 0310 	and.w	r3, r3, #16
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d063      	beq.n	800c844 <tcp_process+0x59c>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c780:	4b22      	ldr	r3, [pc, #136]	; (800c80c <tcp_process+0x564>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	429a      	cmp	r2, r3
 800c786:	d15d      	bne.n	800c844 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d159      	bne.n	800c844 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7e9b      	ldrb	r3, [r3, #26]
 800c794:	f043 0302 	orr.w	r3, r3, #2
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7fe fee8 	bl	800b574 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c7a4:	4b24      	ldr	r3, [pc, #144]	; (800c838 <tcp_process+0x590>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d105      	bne.n	800c7ba <tcp_process+0x512>
 800c7ae:	4b22      	ldr	r3, [pc, #136]	; (800c838 <tcp_process+0x590>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	4a20      	ldr	r2, [pc, #128]	; (800c838 <tcp_process+0x590>)
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	e013      	b.n	800c7e2 <tcp_process+0x53a>
 800c7ba:	4b1f      	ldr	r3, [pc, #124]	; (800c838 <tcp_process+0x590>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	617b      	str	r3, [r7, #20]
 800c7c0:	e00c      	b.n	800c7dc <tcp_process+0x534>
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d104      	bne.n	800c7d6 <tcp_process+0x52e>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68da      	ldr	r2, [r3, #12]
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	60da      	str	r2, [r3, #12]
 800c7d4:	e005      	b.n	800c7e2 <tcp_process+0x53a>
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	617b      	str	r3, [r7, #20]
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1ef      	bne.n	800c7c2 <tcp_process+0x51a>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	60da      	str	r2, [r3, #12]
 800c7e8:	4b14      	ldr	r3, [pc, #80]	; (800c83c <tcp_process+0x594>)
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	220a      	movs	r2, #10
 800c7f2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c7f4:	4b12      	ldr	r3, [pc, #72]	; (800c840 <tcp_process+0x598>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	60da      	str	r2, [r3, #12]
 800c7fc:	4a10      	ldr	r2, [pc, #64]	; (800c840 <tcp_process+0x598>)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6013      	str	r3, [r2, #0]
 800c802:	f002 f98f 	bl	800eb24 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800c806:	e0f0      	b.n	800c9ea <tcp_process+0x742>
 800c808:	20000438 	.word	0x20000438
 800c80c:	20000430 	.word	0x20000430
 800c810:	20000436 	.word	0x20000436
 800c814:	2000042c 	.word	0x2000042c
 800c818:	2000041c 	.word	0x2000041c
 800c81c:	20003668 	.word	0x20003668
 800c820:	2000366c 	.word	0x2000366c
 800c824:	080141a4 	.word	0x080141a4
 800c828:	080143a8 	.word	0x080143a8
 800c82c:	080141e8 	.word	0x080141e8
 800c830:	20000434 	.word	0x20000434
 800c834:	20000439 	.word	0x20000439
 800c838:	20006b88 	.word	0x20006b88
 800c83c:	20006b84 	.word	0x20006b84
 800c840:	20006b98 	.word	0x20006b98
        tcp_ack_now(pcb);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	7e9b      	ldrb	r3, [r3, #26]
 800c848:	f043 0302 	orr.w	r3, r3, #2
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2208      	movs	r2, #8
 800c856:	751a      	strb	r2, [r3, #20]
    break;
 800c858:	e0c7      	b.n	800c9ea <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c85a:	4b6a      	ldr	r3, [pc, #424]	; (800ca04 <tcp_process+0x75c>)
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	f003 0310 	and.w	r3, r3, #16
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80c1 	beq.w	800c9ea <tcp_process+0x742>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c86c:	4b66      	ldr	r3, [pc, #408]	; (800ca08 <tcp_process+0x760>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	429a      	cmp	r2, r3
 800c872:	f040 80ba 	bne.w	800c9ea <tcp_process+0x742>
               pcb->unsent == NULL) {
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f040 80b5 	bne.w	800c9ea <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2206      	movs	r2, #6
 800c884:	751a      	strb	r2, [r3, #20]
    break;
 800c886:	e0b0      	b.n	800c9ea <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f93d 	bl	800cb08 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c88e:	4b5f      	ldr	r3, [pc, #380]	; (800ca0c <tcp_process+0x764>)
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 80a9 	beq.w	800c9ee <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	7e9b      	ldrb	r3, [r3, #26]
 800c8a0:	f043 0302 	orr.w	r3, r3, #2
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7fe fe62 	bl	800b574 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c8b0:	4b57      	ldr	r3, [pc, #348]	; (800ca10 <tcp_process+0x768>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d105      	bne.n	800c8c6 <tcp_process+0x61e>
 800c8ba:	4b55      	ldr	r3, [pc, #340]	; (800ca10 <tcp_process+0x768>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	4a53      	ldr	r2, [pc, #332]	; (800ca10 <tcp_process+0x768>)
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	e013      	b.n	800c8ee <tcp_process+0x646>
 800c8c6:	4b52      	ldr	r3, [pc, #328]	; (800ca10 <tcp_process+0x768>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	613b      	str	r3, [r7, #16]
 800c8cc:	e00c      	b.n	800c8e8 <tcp_process+0x640>
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d104      	bne.n	800c8e2 <tcp_process+0x63a>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68da      	ldr	r2, [r3, #12]
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	60da      	str	r2, [r3, #12]
 800c8e0:	e005      	b.n	800c8ee <tcp_process+0x646>
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	613b      	str	r3, [r7, #16]
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1ef      	bne.n	800c8ce <tcp_process+0x626>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	60da      	str	r2, [r3, #12]
 800c8f4:	4b47      	ldr	r3, [pc, #284]	; (800ca14 <tcp_process+0x76c>)
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	220a      	movs	r2, #10
 800c8fe:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c900:	4b45      	ldr	r3, [pc, #276]	; (800ca18 <tcp_process+0x770>)
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	60da      	str	r2, [r3, #12]
 800c908:	4a43      	ldr	r2, [pc, #268]	; (800ca18 <tcp_process+0x770>)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	f002 f909 	bl	800eb24 <tcp_timer_needed>
    }
    break;
 800c912:	e06c      	b.n	800c9ee <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 f8f7 	bl	800cb08 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c91a:	4b3a      	ldr	r3, [pc, #232]	; (800ca04 <tcp_process+0x75c>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	f003 0310 	and.w	r3, r3, #16
 800c922:	2b00      	cmp	r3, #0
 800c924:	d065      	beq.n	800c9f2 <tcp_process+0x74a>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c92a:	4b37      	ldr	r3, [pc, #220]	; (800ca08 <tcp_process+0x760>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d15f      	bne.n	800c9f2 <tcp_process+0x74a>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c936:	2b00      	cmp	r3, #0
 800c938:	d15b      	bne.n	800c9f2 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7fe fe1a 	bl	800b574 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c940:	4b33      	ldr	r3, [pc, #204]	; (800ca10 <tcp_process+0x768>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	429a      	cmp	r2, r3
 800c948:	d105      	bne.n	800c956 <tcp_process+0x6ae>
 800c94a:	4b31      	ldr	r3, [pc, #196]	; (800ca10 <tcp_process+0x768>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	4a2f      	ldr	r2, [pc, #188]	; (800ca10 <tcp_process+0x768>)
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	e013      	b.n	800c97e <tcp_process+0x6d6>
 800c956:	4b2e      	ldr	r3, [pc, #184]	; (800ca10 <tcp_process+0x768>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	60fb      	str	r3, [r7, #12]
 800c95c:	e00c      	b.n	800c978 <tcp_process+0x6d0>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	429a      	cmp	r2, r3
 800c966:	d104      	bne.n	800c972 <tcp_process+0x6ca>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68da      	ldr	r2, [r3, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	60da      	str	r2, [r3, #12]
 800c970:	e005      	b.n	800c97e <tcp_process+0x6d6>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	60fb      	str	r3, [r7, #12]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d1ef      	bne.n	800c95e <tcp_process+0x6b6>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	60da      	str	r2, [r3, #12]
 800c984:	4b23      	ldr	r3, [pc, #140]	; (800ca14 <tcp_process+0x76c>)
 800c986:	2201      	movs	r2, #1
 800c988:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	220a      	movs	r2, #10
 800c98e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c990:	4b21      	ldr	r3, [pc, #132]	; (800ca18 <tcp_process+0x770>)
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	60da      	str	r2, [r3, #12]
 800c998:	4a1f      	ldr	r2, [pc, #124]	; (800ca18 <tcp_process+0x770>)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6013      	str	r3, [r2, #0]
 800c99e:	f002 f8c1 	bl	800eb24 <tcp_timer_needed>
    }
    break;
 800c9a2:	e026      	b.n	800c9f2 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f8af 	bl	800cb08 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c9aa:	4b16      	ldr	r3, [pc, #88]	; (800ca04 <tcp_process+0x75c>)
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	f003 0310 	and.w	r3, r3, #16
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d01f      	beq.n	800c9f6 <tcp_process+0x74e>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9ba:	4b13      	ldr	r3, [pc, #76]	; (800ca08 <tcp_process+0x760>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d119      	bne.n	800c9f6 <tcp_process+0x74e>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d115      	bne.n	800c9f6 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800c9ca:	4b10      	ldr	r3, [pc, #64]	; (800ca0c <tcp_process+0x764>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	f043 0310 	orr.w	r3, r3, #16
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	4b0d      	ldr	r3, [pc, #52]	; (800ca0c <tcp_process+0x764>)
 800c9d6:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c9d8:	e00d      	b.n	800c9f6 <tcp_process+0x74e>
  default:
    break;
 800c9da:	bf00      	nop
 800c9dc:	e00c      	b.n	800c9f8 <tcp_process+0x750>
    break;
 800c9de:	bf00      	nop
 800c9e0:	e00a      	b.n	800c9f8 <tcp_process+0x750>
    break;
 800c9e2:	bf00      	nop
 800c9e4:	e008      	b.n	800c9f8 <tcp_process+0x750>
    break;
 800c9e6:	bf00      	nop
 800c9e8:	e006      	b.n	800c9f8 <tcp_process+0x750>
    break;
 800c9ea:	bf00      	nop
 800c9ec:	e004      	b.n	800c9f8 <tcp_process+0x750>
    break;
 800c9ee:	bf00      	nop
 800c9f0:	e002      	b.n	800c9f8 <tcp_process+0x750>
    break;
 800c9f2:	bf00      	nop
 800c9f4:	e000      	b.n	800c9f8 <tcp_process+0x750>
    break;
 800c9f6:	bf00      	nop
  }
  return ERR_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3720      	adds	r7, #32
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	20000438 	.word	0x20000438
 800ca08:	20000430 	.word	0x20000430
 800ca0c:	20000439 	.word	0x20000439
 800ca10:	20006b88 	.word	0x20006b88
 800ca14:	20006b84 	.word	0x20006b84
 800ca18:	20006b98 	.word	0x20006b98

0800ca1c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ca1c:	b590      	push	{r4, r7, lr}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	899b      	ldrh	r3, [r3, #12]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fc f8ef 	bl	8008c12 <lwip_htons>
 800ca34:	4603      	mov	r3, r0
 800ca36:	f003 0301 	and.w	r3, r3, #1
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d027      	beq.n	800ca8e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ca3e:	6838      	ldr	r0, [r7, #0]
 800ca40:	f7fe fbef 	bl	800b222 <tcp_segs_free>
    next = NULL;
 800ca44:	2300      	movs	r3, #0
 800ca46:	603b      	str	r3, [r7, #0]
 800ca48:	e055      	b.n	800caf6 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	899b      	ldrh	r3, [r3, #12]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fc f8dd 	bl	8008c12 <lwip_htons>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00d      	beq.n	800ca7e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	899b      	ldrh	r3, [r3, #12]
 800ca68:	b29c      	uxth	r4, r3
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	f7fc f8d1 	bl	8008c12 <lwip_htons>
 800ca70:	4603      	mov	r3, r0
 800ca72:	461a      	mov	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	4322      	orrs	r2, r4
 800ca7a:	b292      	uxth	r2, r2
 800ca7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f7fe fbdf 	bl	800b24c <tcp_seg_free>
    while (next &&
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00e      	beq.n	800cab2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	891b      	ldrh	r3, [r3, #8]
 800ca98:	461a      	mov	r2, r3
 800ca9a:	4b1a      	ldr	r3, [pc, #104]	; (800cb04 <tcp_oos_insert_segment+0xe8>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	441a      	add	r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	8909      	ldrh	r1, [r1, #8]
 800caaa:	440b      	add	r3, r1
 800caac:	1ad3      	subs	r3, r2, r3
    while (next &&
 800caae:	2b00      	cmp	r3, #0
 800cab0:	dacb      	bge.n	800ca4a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d01e      	beq.n	800caf6 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	891b      	ldrh	r3, [r3, #8]
 800cabc:	461a      	mov	r2, r3
 800cabe:	4b11      	ldr	r3, [pc, #68]	; (800cb04 <tcp_oos_insert_segment+0xe8>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	441a      	add	r2, r3
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dd12      	ble.n	800caf6 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	4b0a      	ldr	r3, [pc, #40]	; (800cb04 <tcp_oos_insert_segment+0xe8>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	891b      	ldrh	r3, [r3, #8]
 800caee:	4619      	mov	r1, r3
 800caf0:	4610      	mov	r0, r2
 800caf2:	f7fd f847 	bl	8009b84 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	601a      	str	r2, [r3, #0]
}
 800cafc:	bf00      	nop
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd90      	pop	{r4, r7, pc}
 800cb04:	2000042c 	.word	0x2000042c

0800cb08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0a:	b08d      	sub	sp, #52	; 0x34
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	7d1b      	ldrb	r3, [r3, #20]
 800cb18:	2b03      	cmp	r3, #3
 800cb1a:	d806      	bhi.n	800cb2a <tcp_receive+0x22>
 800cb1c:	4ba6      	ldr	r3, [pc, #664]	; (800cdb8 <tcp_receive+0x2b0>)
 800cb1e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800cb22:	49a6      	ldr	r1, [pc, #664]	; (800cdbc <tcp_receive+0x2b4>)
 800cb24:	48a6      	ldr	r0, [pc, #664]	; (800cdc0 <tcp_receive+0x2b8>)
 800cb26:	f005 f95f 	bl	8011de8 <iprintf>

  if (flags & TCP_ACK) {
 800cb2a:	4ba6      	ldr	r3, [pc, #664]	; (800cdc4 <tcp_receive+0x2bc>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	f003 0310 	and.w	r3, r3, #16
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f000 82bf 	beq.w	800d0b6 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb3e:	461a      	mov	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb44:	4413      	add	r3, r2
 800cb46:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb4c:	4b9e      	ldr	r3, [pc, #632]	; (800cdc8 <tcp_receive+0x2c0>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	db1b      	blt.n	800cb8e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb5a:	4b9b      	ldr	r3, [pc, #620]	; (800cdc8 <tcp_receive+0x2c0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d106      	bne.n	800cb70 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb66:	4b99      	ldr	r3, [pc, #612]	; (800cdcc <tcp_receive+0x2c4>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	db0e      	blt.n	800cb8e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb74:	4b95      	ldr	r3, [pc, #596]	; (800cdcc <tcp_receive+0x2c4>)
 800cb76:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d141      	bne.n	800cc00 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cb7c:	4b94      	ldr	r3, [pc, #592]	; (800cdd0 <tcp_receive+0x2c8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	89db      	ldrh	r3, [r3, #14]
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d938      	bls.n	800cc00 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cb8e:	4b90      	ldr	r3, [pc, #576]	; (800cdd0 <tcp_receive+0x2c8>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	89db      	ldrh	r3, [r3, #14]
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d205      	bcs.n	800cbb8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800cbb8:	4b83      	ldr	r3, [pc, #524]	; (800cdc8 <tcp_receive+0x2c0>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800cbc0:	4b82      	ldr	r3, [pc, #520]	; (800cdcc <tcp_receive+0x2c4>)
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10d      	bne.n	800cbee <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d111      	bne.n	800cc00 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800cbec:	e008      	b.n	800cc00 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d003      	beq.n	800cc00 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cc00:	4b72      	ldr	r3, [pc, #456]	; (800cdcc <tcp_receive+0x2c4>)
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dc53      	bgt.n	800ccb6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800cc0e:	4b71      	ldr	r3, [pc, #452]	; (800cdd4 <tcp_receive+0x2cc>)
 800cc10:	881b      	ldrh	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d146      	bne.n	800cca4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800cc20:	4413      	add	r3, r2
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d13d      	bne.n	800cca4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	db38      	blt.n	800cca4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc36:	4b65      	ldr	r3, [pc, #404]	; (800cdcc <tcp_receive+0x2c4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d132      	bne.n	800cca4 <tcp_receive+0x19c>
              found_dupack = 1;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc48:	2bff      	cmp	r3, #255	; 0xff
 800cc4a:	d007      	beq.n	800cc5c <tcp_receive+0x154>
                ++pcb->dupacks;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc52:	3301      	adds	r3, #1
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d916      	bls.n	800cc94 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc70:	4413      	add	r3, r2
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d912      	bls.n	800cca4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc88:	4413      	add	r3, r2
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cc92:	e007      	b.n	800cca4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d102      	bne.n	800cca4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f001 fdf4 	bl	800e88c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f040 8169 	bne.w	800cf7e <tcp_receive+0x476>
        pcb->dupacks = 0;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ccb4:	e163      	b.n	800cf7e <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ccb6:	4b45      	ldr	r3, [pc, #276]	; (800cdcc <tcp_receive+0x2c4>)
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f2c0 8107 	blt.w	800ced6 <tcp_receive+0x3ce>
 800ccc8:	4b40      	ldr	r3, [pc, #256]	; (800cdcc <tcp_receive+0x2c4>)
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f300 80ff 	bgt.w	800ced6 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	7e9b      	ldrb	r3, [r3, #26]
 800ccdc:	f003 0304 	and.w	r3, r3, #4
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00c      	beq.n	800ccfe <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	7e9b      	ldrb	r3, [r3, #26]
 800cce8:	f023 0304 	bic.w	r3, r3, #4
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd0c:	10db      	asrs	r3, r3, #3
 800cd0e:	b21b      	sxth	r3, r3
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	4413      	add	r3, r2
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	b21a      	sxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cd2e:	4b27      	ldr	r3, [pc, #156]	; (800cdcc <tcp_receive+0x2c4>)
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	7d1b      	ldrb	r3, [r3, #20]
 800cd3a:	2b03      	cmp	r3, #3
 800cd3c:	f240 8094 	bls.w	800ce68 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d216      	bcs.n	800cd7e <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd5a:	4413      	add	r3, r2
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d97f      	bls.n	800ce68 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd72:	4413      	add	r3, r2
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cd7c:	e074      	b.n	800ce68 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd88:	4619      	mov	r1, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd8e:	fb03 f301 	mul.w	r3, r3, r1
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800cd98:	fb93 f3f1 	sdiv	r3, r3, r1
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	4413      	add	r3, r2
 800cda0:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cda8:	8a7a      	ldrh	r2, [r7, #18]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d95c      	bls.n	800ce68 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	8a7a      	ldrh	r2, [r7, #18]
 800cdb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800cdb6:	e057      	b.n	800ce68 <tcp_receive+0x360>
 800cdb8:	080141a4 	.word	0x080141a4
 800cdbc:	080143c8 	.word	0x080143c8
 800cdc0:	080141e8 	.word	0x080141e8
 800cdc4:	20000438 	.word	0x20000438
 800cdc8:	2000042c 	.word	0x2000042c
 800cdcc:	20000430 	.word	0x20000430
 800cdd0:	2000041c 	.word	0x2000041c
 800cdd4:	20000436 	.word	0x20000436
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fd f8ce 	bl	8009f94 <pbuf_clen>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	429c      	cmp	r4, r3
 800cdfc:	d206      	bcs.n	800ce0c <tcp_receive+0x304>
 800cdfe:	4b70      	ldr	r3, [pc, #448]	; (800cfc0 <tcp_receive+0x4b8>)
 800ce00:	f240 429e 	movw	r2, #1182	; 0x49e
 800ce04:	496f      	ldr	r1, [pc, #444]	; (800cfc4 <tcp_receive+0x4bc>)
 800ce06:	4870      	ldr	r0, [pc, #448]	; (800cfc8 <tcp_receive+0x4c0>)
 800ce08:	f004 ffee 	bl	8011de8 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fd f8bf 	bl	8009f94 <pbuf_clen>
 800ce16:	4603      	mov	r3, r0
 800ce18:	461a      	mov	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce20:	1a9b      	subs	r3, r3, r2
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	891a      	ldrh	r2, [r3, #8]
 800ce2e:	4b67      	ldr	r3, [pc, #412]	; (800cfcc <tcp_receive+0x4c4>)
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	4413      	add	r3, r2
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	4b65      	ldr	r3, [pc, #404]	; (800cfcc <tcp_receive+0x4c4>)
 800ce38:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800ce3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce3c:	f7fe fa06 	bl	800b24c <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00e      	beq.n	800ce68 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10a      	bne.n	800ce68 <tcp_receive+0x360>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d106      	bne.n	800ce68 <tcp_receive+0x360>
 800ce5a:	4b59      	ldr	r3, [pc, #356]	; (800cfc0 <tcp_receive+0x4b8>)
 800ce5c:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800ce60:	495b      	ldr	r1, [pc, #364]	; (800cfd0 <tcp_receive+0x4c8>)
 800ce62:	4859      	ldr	r0, [pc, #356]	; (800cfc8 <tcp_receive+0x4c0>)
 800ce64:	f004 ffc0 	bl	8011de8 <iprintf>
      while (pcb->unacked != NULL &&
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d022      	beq.n	800ceb6 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fb fed7 	bl	8008c2c <lwip_htonl>
 800ce7e:	4604      	mov	r4, r0
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce84:	891b      	ldrh	r3, [r3, #8]
 800ce86:	461d      	mov	r5, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	899b      	ldrh	r3, [r3, #12]
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fb febd 	bl	8008c12 <lwip_htons>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	f003 0303 	and.w	r3, r3, #3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d001      	beq.n	800cea6 <tcp_receive+0x39e>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e000      	b.n	800cea8 <tcp_receive+0x3a0>
 800cea6:	2300      	movs	r3, #0
 800cea8:	442b      	add	r3, r5
 800ceaa:	18e2      	adds	r2, r4, r3
 800ceac:	4b49      	ldr	r3, [pc, #292]	; (800cfd4 <tcp_receive+0x4cc>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dd90      	ble.n	800cdd8 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d104      	bne.n	800cec8 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cec4:	861a      	strh	r2, [r3, #48]	; 0x30
 800cec6:	e002      	b.n	800cece <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	76da      	strb	r2, [r3, #27]
 800ced4:	e002      	b.n	800cedc <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f001 f8fc 	bl	800e0d4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800cedc:	e04f      	b.n	800cf7e <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cee2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d103      	bne.n	800cefe <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fd f843 	bl	8009f94 <pbuf_clen>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	429c      	cmp	r4, r3
 800cf12:	d206      	bcs.n	800cf22 <tcp_receive+0x41a>
 800cf14:	4b2a      	ldr	r3, [pc, #168]	; (800cfc0 <tcp_receive+0x4b8>)
 800cf16:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cf1a:	492a      	ldr	r1, [pc, #168]	; (800cfc4 <tcp_receive+0x4bc>)
 800cf1c:	482a      	ldr	r0, [pc, #168]	; (800cfc8 <tcp_receive+0x4c0>)
 800cf1e:	f004 ff63 	bl	8011de8 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fd f834 	bl	8009f94 <pbuf_clen>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	461a      	mov	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf36:	1a9b      	subs	r3, r3, r2
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf42:	891a      	ldrh	r2, [r3, #8]
 800cf44:	4b21      	ldr	r3, [pc, #132]	; (800cfcc <tcp_receive+0x4c4>)
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	4413      	add	r3, r2
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	4b1f      	ldr	r3, [pc, #124]	; (800cfcc <tcp_receive+0x4c4>)
 800cf4e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800cf50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf52:	f7fe f97b 	bl	800b24c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00e      	beq.n	800cf7e <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d10a      	bne.n	800cf7e <tcp_receive+0x476>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <tcp_receive+0x476>
 800cf70:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <tcp_receive+0x4b8>)
 800cf72:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800cf76:	4916      	ldr	r1, [pc, #88]	; (800cfd0 <tcp_receive+0x4c8>)
 800cf78:	4813      	ldr	r0, [pc, #76]	; (800cfc8 <tcp_receive+0x4c0>)
 800cf7a:	f004 ff35 	bl	8011de8 <iprintf>
    while (pcb->unsent != NULL &&
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d036      	beq.n	800cff4 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800cf86:	4b13      	ldr	r3, [pc, #76]	; (800cfd4 <tcp_receive+0x4cc>)
 800cf88:	681c      	ldr	r4, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fb fe4a 	bl	8008c2c <lwip_htonl>
 800cf98:	4605      	mov	r5, r0
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf9e:	891b      	ldrh	r3, [r3, #8]
 800cfa0:	461e      	mov	r6, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	899b      	ldrh	r3, [r3, #12]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fb fe30 	bl	8008c12 <lwip_htons>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	f003 0303 	and.w	r3, r3, #3
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00d      	beq.n	800cfd8 <tcp_receive+0x4d0>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e00c      	b.n	800cfda <tcp_receive+0x4d2>
 800cfc0:	080141a4 	.word	0x080141a4
 800cfc4:	080143e4 	.word	0x080143e4
 800cfc8:	080141e8 	.word	0x080141e8
 800cfcc:	20000434 	.word	0x20000434
 800cfd0:	0801440c 	.word	0x0801440c
 800cfd4:	20000430 	.word	0x20000430
 800cfd8:	2300      	movs	r3, #0
 800cfda:	4433      	add	r3, r6
 800cfdc:	442b      	add	r3, r5
 800cfde:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	db07      	blt.n	800cff4 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800cfe4:	4b8d      	ldr	r3, [pc, #564]	; (800d21c <tcp_receive+0x714>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfec:	1ad3      	subs	r3, r2, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f77f af75 	ble.w	800cede <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cffa:	4b89      	ldr	r3, [pc, #548]	; (800d220 <tcp_receive+0x718>)
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	4413      	add	r3, r2
 800d000:	b29a      	uxth	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d052      	beq.n	800d0b6 <tcp_receive+0x5ae>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d014:	4b81      	ldr	r3, [pc, #516]	; (800d21c <tcp_receive+0x714>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	da4b      	bge.n	800d0b6 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d01e:	4b81      	ldr	r3, [pc, #516]	; (800d224 <tcp_receive+0x71c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	b29a      	uxth	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d028:	b29b      	uxth	r3, r3
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800d030:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d038:	10db      	asrs	r3, r3, #3
 800d03a:	b21b      	sxth	r3, r3
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	b29b      	uxth	r3, r3
 800d042:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d04e:	4413      	add	r3, r2
 800d050:	b29b      	uxth	r3, r3
 800d052:	b21a      	sxth	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d058:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	da03      	bge.n	800d068 <tcp_receive+0x560>
        m = -m;
 800d060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d062:	425b      	negs	r3, r3
 800d064:	b29b      	uxth	r3, r3
 800d066:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800d068:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d070:	109b      	asrs	r3, r3, #2
 800d072:	b21b      	sxth	r3, r3
 800d074:	b29b      	uxth	r3, r3
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	b29b      	uxth	r3, r3
 800d07a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d082:	b29a      	uxth	r2, r3
 800d084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d086:	4413      	add	r3, r2
 800d088:	b29b      	uxth	r3, r3
 800d08a:	b21a      	sxth	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d096:	10db      	asrs	r3, r3, #3
 800d098:	b21b      	sxth	r3, r3
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	4413      	add	r3, r2
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	b21a      	sxth	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d0b6:	4b5c      	ldr	r3, [pc, #368]	; (800d228 <tcp_receive+0x720>)
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f000 84f1 	beq.w	800daa2 <tcp_receive+0xf9a>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	7d1b      	ldrb	r3, [r3, #20]
 800d0c4:	2b06      	cmp	r3, #6
 800d0c6:	f200 84ec 	bhi.w	800daa2 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0ce:	4b57      	ldr	r3, [pc, #348]	; (800d22c <tcp_receive+0x724>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f2c0 80b8 	blt.w	800d24c <tcp_receive+0x744>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0e0:	4b51      	ldr	r3, [pc, #324]	; (800d228 <tcp_receive+0x720>)
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4b51      	ldr	r3, [pc, #324]	; (800d22c <tcp_receive+0x724>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	440b      	add	r3, r1
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f300 80ab 	bgt.w	800d24c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d0f6:	4b4e      	ldr	r3, [pc, #312]	; (800d230 <tcp_receive+0x728>)
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d100:	4b4a      	ldr	r3, [pc, #296]	; (800d22c <tcp_receive+0x724>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d108:	4b49      	ldr	r3, [pc, #292]	; (800d230 <tcp_receive+0x728>)
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d106      	bne.n	800d11e <tcp_receive+0x616>
 800d110:	4b48      	ldr	r3, [pc, #288]	; (800d234 <tcp_receive+0x72c>)
 800d112:	f240 523c 	movw	r2, #1340	; 0x53c
 800d116:	4948      	ldr	r1, [pc, #288]	; (800d238 <tcp_receive+0x730>)
 800d118:	4848      	ldr	r0, [pc, #288]	; (800d23c <tcp_receive+0x734>)
 800d11a:	f004 fe65 	bl	8011de8 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d124:	4293      	cmp	r3, r2
 800d126:	dd06      	ble.n	800d136 <tcp_receive+0x62e>
 800d128:	4b42      	ldr	r3, [pc, #264]	; (800d234 <tcp_receive+0x72c>)
 800d12a:	f240 523d 	movw	r2, #1341	; 0x53d
 800d12e:	4944      	ldr	r1, [pc, #272]	; (800d240 <tcp_receive+0x738>)
 800d130:	4842      	ldr	r0, [pc, #264]	; (800d23c <tcp_receive+0x734>)
 800d132:	f004 fe59 	bl	8011de8 <iprintf>
      if (inseg.p->len < off) {
 800d136:	4b3e      	ldr	r3, [pc, #248]	; (800d230 <tcp_receive+0x728>)
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	895b      	ldrh	r3, [r3, #10]
 800d13c:	461a      	mov	r2, r3
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	4293      	cmp	r3, r2
 800d142:	dd3e      	ble.n	800d1c2 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d144:	4b3a      	ldr	r3, [pc, #232]	; (800d230 <tcp_receive+0x728>)
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	891b      	ldrh	r3, [r3, #8]
 800d14a:	461a      	mov	r2, r3
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	4293      	cmp	r3, r2
 800d150:	dd06      	ble.n	800d160 <tcp_receive+0x658>
 800d152:	4b38      	ldr	r3, [pc, #224]	; (800d234 <tcp_receive+0x72c>)
 800d154:	f240 523f 	movw	r2, #1343	; 0x53f
 800d158:	493a      	ldr	r1, [pc, #232]	; (800d244 <tcp_receive+0x73c>)
 800d15a:	4838      	ldr	r0, [pc, #224]	; (800d23c <tcp_receive+0x734>)
 800d15c:	f004 fe44 	bl	8011de8 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d160:	4b33      	ldr	r3, [pc, #204]	; (800d230 <tcp_receive+0x728>)
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	891a      	ldrh	r2, [r3, #8]
 800d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d168:	b29b      	uxth	r3, r3
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800d16e:	e00e      	b.n	800d18e <tcp_receive+0x686>
          off -= p->len;
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	895b      	ldrh	r3, [r3, #10]
 800d174:	461a      	mov	r2, r3
 800d176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d178:	1a9b      	subs	r3, r3, r2
 800d17a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	8a3a      	ldrh	r2, [r7, #16]
 800d180:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	2200      	movs	r2, #0
 800d186:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	895b      	ldrh	r3, [r3, #10]
 800d192:	461a      	mov	r2, r3
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d196:	4293      	cmp	r3, r2
 800d198:	dcea      	bgt.n	800d170 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	425b      	negs	r3, r3
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	b21b      	sxth	r3, r3
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	69b8      	ldr	r0, [r7, #24]
 800d1a8:	f7fc fe3c 	bl	8009e24 <pbuf_header>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d01c      	beq.n	800d1ec <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800d1b2:	4b20      	ldr	r3, [pc, #128]	; (800d234 <tcp_receive+0x72c>)
 800d1b4:	f240 524c 	movw	r2, #1356	; 0x54c
 800d1b8:	4923      	ldr	r1, [pc, #140]	; (800d248 <tcp_receive+0x740>)
 800d1ba:	4820      	ldr	r0, [pc, #128]	; (800d23c <tcp_receive+0x734>)
 800d1bc:	f004 fe14 	bl	8011de8 <iprintf>
 800d1c0:	e014      	b.n	800d1ec <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800d1c2:	4b1b      	ldr	r3, [pc, #108]	; (800d230 <tcp_receive+0x728>)
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1c8:	b292      	uxth	r2, r2
 800d1ca:	4252      	negs	r2, r2
 800d1cc:	b292      	uxth	r2, r2
 800d1ce:	b212      	sxth	r2, r2
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fc fe26 	bl	8009e24 <pbuf_header>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d006      	beq.n	800d1ec <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800d1de:	4b15      	ldr	r3, [pc, #84]	; (800d234 <tcp_receive+0x72c>)
 800d1e0:	f240 5251 	movw	r2, #1361	; 0x551
 800d1e4:	4918      	ldr	r1, [pc, #96]	; (800d248 <tcp_receive+0x740>)
 800d1e6:	4815      	ldr	r0, [pc, #84]	; (800d23c <tcp_receive+0x734>)
 800d1e8:	f004 fdfe 	bl	8011de8 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800d1ec:	4b10      	ldr	r3, [pc, #64]	; (800d230 <tcp_receive+0x728>)
 800d1ee:	891a      	ldrh	r2, [r3, #8]
 800d1f0:	4b0e      	ldr	r3, [pc, #56]	; (800d22c <tcp_receive+0x724>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	b299      	uxth	r1, r3
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	1acb      	subs	r3, r1, r3
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	4413      	add	r3, r2
 800d202:	b29a      	uxth	r2, r3
 800d204:	4b0a      	ldr	r3, [pc, #40]	; (800d230 <tcp_receive+0x728>)
 800d206:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20c:	4a07      	ldr	r2, [pc, #28]	; (800d22c <tcp_receive+0x724>)
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	4b07      	ldr	r3, [pc, #28]	; (800d230 <tcp_receive+0x728>)
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	4a05      	ldr	r2, [pc, #20]	; (800d22c <tcp_receive+0x724>)
 800d216:	6812      	ldr	r2, [r2, #0]
 800d218:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d21a:	e025      	b.n	800d268 <tcp_receive+0x760>
 800d21c:	20000430 	.word	0x20000430
 800d220:	20000434 	.word	0x20000434
 800d224:	20006b8c 	.word	0x20006b8c
 800d228:	20000436 	.word	0x20000436
 800d22c:	2000042c 	.word	0x2000042c
 800d230:	2000040c 	.word	0x2000040c
 800d234:	080141a4 	.word	0x080141a4
 800d238:	0801442c 	.word	0x0801442c
 800d23c:	080141e8 	.word	0x080141e8
 800d240:	0801443c 	.word	0x0801443c
 800d244:	0801444c 	.word	0x0801444c
 800d248:	0801445c 	.word	0x0801445c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d24c:	4b87      	ldr	r3, [pc, #540]	; (800d46c <tcp_receive+0x964>)
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	2b00      	cmp	r3, #0
 800d258:	da06      	bge.n	800d268 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	7e9b      	ldrb	r3, [r3, #26]
 800d25e:	f043 0302 	orr.w	r3, r3, #2
 800d262:	b2da      	uxtb	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d268:	4b80      	ldr	r3, [pc, #512]	; (800d46c <tcp_receive+0x964>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	2b00      	cmp	r3, #0
 800d274:	f2c0 8410 	blt.w	800da98 <tcp_receive+0xf90>
 800d278:	4b7c      	ldr	r3, [pc, #496]	; (800d46c <tcp_receive+0x964>)
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d284:	440b      	add	r3, r1
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	3301      	adds	r3, #1
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f300 8404 	bgt.w	800da98 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d294:	4b75      	ldr	r3, [pc, #468]	; (800d46c <tcp_receive+0x964>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	429a      	cmp	r2, r3
 800d29a:	f040 8287 	bne.w	800d7ac <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d29e:	4b74      	ldr	r3, [pc, #464]	; (800d470 <tcp_receive+0x968>)
 800d2a0:	891c      	ldrh	r4, [r3, #8]
 800d2a2:	4b73      	ldr	r3, [pc, #460]	; (800d470 <tcp_receive+0x968>)
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	899b      	ldrh	r3, [r3, #12]
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fb fcb1 	bl	8008c12 <lwip_htons>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	f003 0303 	and.w	r3, r3, #3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d001      	beq.n	800d2be <tcp_receive+0x7b6>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e000      	b.n	800d2c0 <tcp_receive+0x7b8>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	4423      	add	r3, r4
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	4b6b      	ldr	r3, [pc, #428]	; (800d474 <tcp_receive+0x96c>)
 800d2c6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2cc:	4b69      	ldr	r3, [pc, #420]	; (800d474 <tcp_receive+0x96c>)
 800d2ce:	881b      	ldrh	r3, [r3, #0]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d26e      	bcs.n	800d3b2 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d2d4:	4b66      	ldr	r3, [pc, #408]	; (800d470 <tcp_receive+0x968>)
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	899b      	ldrh	r3, [r3, #12]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fb fc98 	bl	8008c12 <lwip_htons>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01b      	beq.n	800d324 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d2ec:	4b60      	ldr	r3, [pc, #384]	; (800d470 <tcp_receive+0x968>)
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	899b      	ldrh	r3, [r3, #12]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d2f8:	b29c      	uxth	r4, r3
 800d2fa:	4b5d      	ldr	r3, [pc, #372]	; (800d470 <tcp_receive+0x968>)
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	899b      	ldrh	r3, [r3, #12]
 800d300:	b29b      	uxth	r3, r3
 800d302:	4618      	mov	r0, r3
 800d304:	f7fb fc85 	bl	8008c12 <lwip_htons>
 800d308:	4603      	mov	r3, r0
 800d30a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d30e:	b29b      	uxth	r3, r3
 800d310:	4618      	mov	r0, r3
 800d312:	f7fb fc7e 	bl	8008c12 <lwip_htons>
 800d316:	4603      	mov	r3, r0
 800d318:	461a      	mov	r2, r3
 800d31a:	4b55      	ldr	r3, [pc, #340]	; (800d470 <tcp_receive+0x968>)
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	4322      	orrs	r2, r4
 800d320:	b292      	uxth	r2, r2
 800d322:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d328:	4b51      	ldr	r3, [pc, #324]	; (800d470 <tcp_receive+0x968>)
 800d32a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d32c:	4b50      	ldr	r3, [pc, #320]	; (800d470 <tcp_receive+0x968>)
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	899b      	ldrh	r3, [r3, #12]
 800d332:	b29b      	uxth	r3, r3
 800d334:	4618      	mov	r0, r3
 800d336:	f7fb fc6c 	bl	8008c12 <lwip_htons>
 800d33a:	4603      	mov	r3, r0
 800d33c:	f003 0302 	and.w	r3, r3, #2
 800d340:	2b00      	cmp	r3, #0
 800d342:	d005      	beq.n	800d350 <tcp_receive+0x848>
            inseg.len -= 1;
 800d344:	4b4a      	ldr	r3, [pc, #296]	; (800d470 <tcp_receive+0x968>)
 800d346:	891b      	ldrh	r3, [r3, #8]
 800d348:	3b01      	subs	r3, #1
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	4b48      	ldr	r3, [pc, #288]	; (800d470 <tcp_receive+0x968>)
 800d34e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d350:	4b47      	ldr	r3, [pc, #284]	; (800d470 <tcp_receive+0x968>)
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	4a46      	ldr	r2, [pc, #280]	; (800d470 <tcp_receive+0x968>)
 800d356:	8912      	ldrh	r2, [r2, #8]
 800d358:	4611      	mov	r1, r2
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fc fc12 	bl	8009b84 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d360:	4b43      	ldr	r3, [pc, #268]	; (800d470 <tcp_receive+0x968>)
 800d362:	891c      	ldrh	r4, [r3, #8]
 800d364:	4b42      	ldr	r3, [pc, #264]	; (800d470 <tcp_receive+0x968>)
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	899b      	ldrh	r3, [r3, #12]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fb fc50 	bl	8008c12 <lwip_htons>
 800d372:	4603      	mov	r3, r0
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d001      	beq.n	800d380 <tcp_receive+0x878>
 800d37c:	2301      	movs	r3, #1
 800d37e:	e000      	b.n	800d382 <tcp_receive+0x87a>
 800d380:	2300      	movs	r3, #0
 800d382:	4423      	add	r3, r4
 800d384:	b29a      	uxth	r2, r3
 800d386:	4b3b      	ldr	r3, [pc, #236]	; (800d474 <tcp_receive+0x96c>)
 800d388:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d38a:	4b3a      	ldr	r3, [pc, #232]	; (800d474 <tcp_receive+0x96c>)
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	461a      	mov	r2, r3
 800d390:	4b36      	ldr	r3, [pc, #216]	; (800d46c <tcp_receive+0x964>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	441a      	add	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39a:	6879      	ldr	r1, [r7, #4]
 800d39c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d39e:	440b      	add	r3, r1
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d006      	beq.n	800d3b2 <tcp_receive+0x8aa>
 800d3a4:	4b34      	ldr	r3, [pc, #208]	; (800d478 <tcp_receive+0x970>)
 800d3a6:	f240 527e 	movw	r2, #1406	; 0x57e
 800d3aa:	4934      	ldr	r1, [pc, #208]	; (800d47c <tcp_receive+0x974>)
 800d3ac:	4834      	ldr	r0, [pc, #208]	; (800d480 <tcp_receive+0x978>)
 800d3ae:	f004 fd1b 	bl	8011de8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f000 80e1 	beq.w	800d57e <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d3bc:	4b2c      	ldr	r3, [pc, #176]	; (800d470 <tcp_receive+0x968>)
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	899b      	ldrh	r3, [r3, #12]
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fb fc24 	bl	8008c12 <lwip_htons>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d010      	beq.n	800d3f6 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d3d4:	e00a      	b.n	800d3ec <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3da:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800d3e6:	68b8      	ldr	r0, [r7, #8]
 800d3e8:	f7fd ff30 	bl	800b24c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1f0      	bne.n	800d3d6 <tcp_receive+0x8ce>
 800d3f4:	e0c3      	b.n	800d57e <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d3fc:	e04f      	b.n	800d49e <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	899b      	ldrh	r3, [r3, #12]
 800d404:	b29b      	uxth	r3, r3
 800d406:	4618      	mov	r0, r3
 800d408:	f7fb fc03 	bl	8008c12 <lwip_htons>
 800d40c:	4603      	mov	r3, r0
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	d03b      	beq.n	800d48e <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d416:	4b16      	ldr	r3, [pc, #88]	; (800d470 <tcp_receive+0x968>)
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	899b      	ldrh	r3, [r3, #12]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fb fbf7 	bl	8008c12 <lwip_htons>
 800d424:	4603      	mov	r3, r0
 800d426:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d12f      	bne.n	800d48e <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d42e:	4b10      	ldr	r3, [pc, #64]	; (800d470 <tcp_receive+0x968>)
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	899b      	ldrh	r3, [r3, #12]
 800d434:	b29c      	uxth	r4, r3
 800d436:	2001      	movs	r0, #1
 800d438:	f7fb fbeb 	bl	8008c12 <lwip_htons>
 800d43c:	4603      	mov	r3, r0
 800d43e:	461a      	mov	r2, r3
 800d440:	4b0b      	ldr	r3, [pc, #44]	; (800d470 <tcp_receive+0x968>)
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	4322      	orrs	r2, r4
 800d446:	b292      	uxth	r2, r2
 800d448:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d44a:	4b09      	ldr	r3, [pc, #36]	; (800d470 <tcp_receive+0x968>)
 800d44c:	891c      	ldrh	r4, [r3, #8]
 800d44e:	4b08      	ldr	r3, [pc, #32]	; (800d470 <tcp_receive+0x968>)
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	899b      	ldrh	r3, [r3, #12]
 800d454:	b29b      	uxth	r3, r3
 800d456:	4618      	mov	r0, r3
 800d458:	f7fb fbdb 	bl	8008c12 <lwip_htons>
 800d45c:	4603      	mov	r3, r0
 800d45e:	f003 0303 	and.w	r3, r3, #3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00e      	beq.n	800d484 <tcp_receive+0x97c>
 800d466:	2301      	movs	r3, #1
 800d468:	e00d      	b.n	800d486 <tcp_receive+0x97e>
 800d46a:	bf00      	nop
 800d46c:	2000042c 	.word	0x2000042c
 800d470:	2000040c 	.word	0x2000040c
 800d474:	20000436 	.word	0x20000436
 800d478:	080141a4 	.word	0x080141a4
 800d47c:	08014470 	.word	0x08014470
 800d480:	080141e8 	.word	0x080141e8
 800d484:	2300      	movs	r3, #0
 800d486:	4423      	add	r3, r4
 800d488:	b29a      	uxth	r2, r3
 800d48a:	4b95      	ldr	r3, [pc, #596]	; (800d6e0 <tcp_receive+0xbd8>)
 800d48c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800d492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800d498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d49a:	f7fd fed7 	bl	800b24c <tcp_seg_free>
            while (next &&
 800d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00e      	beq.n	800d4c2 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d4a4:	4b8e      	ldr	r3, [pc, #568]	; (800d6e0 <tcp_receive+0xbd8>)
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	4b8e      	ldr	r3, [pc, #568]	; (800d6e4 <tcp_receive+0xbdc>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	441a      	add	r2, r3
 800d4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4b8:	8909      	ldrh	r1, [r1, #8]
 800d4ba:	440b      	add	r3, r1
 800d4bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	da9d      	bge.n	800d3fe <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d057      	beq.n	800d578 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800d4c8:	4b85      	ldr	r3, [pc, #532]	; (800d6e0 <tcp_receive+0xbd8>)
 800d4ca:	881b      	ldrh	r3, [r3, #0]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	4b85      	ldr	r3, [pc, #532]	; (800d6e4 <tcp_receive+0xbdc>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	441a      	add	r2, r3
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	dd4b      	ble.n	800d578 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	4b7e      	ldr	r3, [pc, #504]	; (800d6e4 <tcp_receive+0xbdc>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	4b7d      	ldr	r3, [pc, #500]	; (800d6e8 <tcp_receive+0xbe0>)
 800d4f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d4f6:	4b7c      	ldr	r3, [pc, #496]	; (800d6e8 <tcp_receive+0xbe0>)
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	899b      	ldrh	r3, [r3, #12]
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fb fb87 	bl	8008c12 <lwip_htons>
 800d504:	4603      	mov	r3, r0
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d005      	beq.n	800d51a <tcp_receive+0xa12>
                inseg.len -= 1;
 800d50e:	4b76      	ldr	r3, [pc, #472]	; (800d6e8 <tcp_receive+0xbe0>)
 800d510:	891b      	ldrh	r3, [r3, #8]
 800d512:	3b01      	subs	r3, #1
 800d514:	b29a      	uxth	r2, r3
 800d516:	4b74      	ldr	r3, [pc, #464]	; (800d6e8 <tcp_receive+0xbe0>)
 800d518:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d51a:	4b73      	ldr	r3, [pc, #460]	; (800d6e8 <tcp_receive+0xbe0>)
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	4a72      	ldr	r2, [pc, #456]	; (800d6e8 <tcp_receive+0xbe0>)
 800d520:	8912      	ldrh	r2, [r2, #8]
 800d522:	4611      	mov	r1, r2
 800d524:	4618      	mov	r0, r3
 800d526:	f7fc fb2d 	bl	8009b84 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d52a:	4b6f      	ldr	r3, [pc, #444]	; (800d6e8 <tcp_receive+0xbe0>)
 800d52c:	891c      	ldrh	r4, [r3, #8]
 800d52e:	4b6e      	ldr	r3, [pc, #440]	; (800d6e8 <tcp_receive+0xbe0>)
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	899b      	ldrh	r3, [r3, #12]
 800d534:	b29b      	uxth	r3, r3
 800d536:	4618      	mov	r0, r3
 800d538:	f7fb fb6b 	bl	8008c12 <lwip_htons>
 800d53c:	4603      	mov	r3, r0
 800d53e:	f003 0303 	and.w	r3, r3, #3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <tcp_receive+0xa42>
 800d546:	2301      	movs	r3, #1
 800d548:	e000      	b.n	800d54c <tcp_receive+0xa44>
 800d54a:	2300      	movs	r3, #0
 800d54c:	4423      	add	r3, r4
 800d54e:	b29a      	uxth	r2, r3
 800d550:	4b63      	ldr	r3, [pc, #396]	; (800d6e0 <tcp_receive+0xbd8>)
 800d552:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d554:	4b62      	ldr	r3, [pc, #392]	; (800d6e0 <tcp_receive+0xbd8>)
 800d556:	881b      	ldrh	r3, [r3, #0]
 800d558:	461a      	mov	r2, r3
 800d55a:	4b62      	ldr	r3, [pc, #392]	; (800d6e4 <tcp_receive+0xbdc>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	441a      	add	r2, r3
 800d560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	429a      	cmp	r2, r3
 800d568:	d006      	beq.n	800d578 <tcp_receive+0xa70>
 800d56a:	4b60      	ldr	r3, [pc, #384]	; (800d6ec <tcp_receive+0xbe4>)
 800d56c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800d570:	495f      	ldr	r1, [pc, #380]	; (800d6f0 <tcp_receive+0xbe8>)
 800d572:	4860      	ldr	r0, [pc, #384]	; (800d6f4 <tcp_receive+0xbec>)
 800d574:	f004 fc38 	bl	8011de8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d57c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d57e:	4b58      	ldr	r3, [pc, #352]	; (800d6e0 <tcp_receive+0xbd8>)
 800d580:	881b      	ldrh	r3, [r3, #0]
 800d582:	461a      	mov	r2, r3
 800d584:	4b57      	ldr	r3, [pc, #348]	; (800d6e4 <tcp_receive+0xbdc>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	441a      	add	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d592:	4b53      	ldr	r3, [pc, #332]	; (800d6e0 <tcp_receive+0xbd8>)
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	429a      	cmp	r2, r3
 800d598:	d206      	bcs.n	800d5a8 <tcp_receive+0xaa0>
 800d59a:	4b54      	ldr	r3, [pc, #336]	; (800d6ec <tcp_receive+0xbe4>)
 800d59c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d5a0:	4955      	ldr	r1, [pc, #340]	; (800d6f8 <tcp_receive+0xbf0>)
 800d5a2:	4854      	ldr	r0, [pc, #336]	; (800d6f4 <tcp_receive+0xbec>)
 800d5a4:	f004 fc20 	bl	8011de8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d5ac:	4b4c      	ldr	r3, [pc, #304]	; (800d6e0 <tcp_receive+0xbd8>)
 800d5ae:	881b      	ldrh	r3, [r3, #0]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7fd f9fb 	bl	800a9b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d5be:	4b4a      	ldr	r3, [pc, #296]	; (800d6e8 <tcp_receive+0xbe0>)
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	891b      	ldrh	r3, [r3, #8]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d006      	beq.n	800d5d6 <tcp_receive+0xace>
          recv_data = inseg.p;
 800d5c8:	4b47      	ldr	r3, [pc, #284]	; (800d6e8 <tcp_receive+0xbe0>)
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	4a4b      	ldr	r2, [pc, #300]	; (800d6fc <tcp_receive+0xbf4>)
 800d5ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d5d0:	4b45      	ldr	r3, [pc, #276]	; (800d6e8 <tcp_receive+0xbe0>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d5d6:	4b44      	ldr	r3, [pc, #272]	; (800d6e8 <tcp_receive+0xbe0>)
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	899b      	ldrh	r3, [r3, #12]
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fb fb17 	bl	8008c12 <lwip_htons>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	f003 0301 	and.w	r3, r3, #1
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 80b4 	beq.w	800d758 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d5f0:	4b43      	ldr	r3, [pc, #268]	; (800d700 <tcp_receive+0xbf8>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	f043 0320 	orr.w	r3, r3, #32
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	4b41      	ldr	r3, [pc, #260]	; (800d700 <tcp_receive+0xbf8>)
 800d5fc:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d5fe:	e0ab      	b.n	800d758 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d604:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	4a35      	ldr	r2, [pc, #212]	; (800d6e4 <tcp_receive+0xbdc>)
 800d610:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	891b      	ldrh	r3, [r3, #8]
 800d616:	461c      	mov	r4, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	899b      	ldrh	r3, [r3, #12]
 800d61e:	b29b      	uxth	r3, r3
 800d620:	4618      	mov	r0, r3
 800d622:	f7fb faf6 	bl	8008c12 <lwip_htons>
 800d626:	4603      	mov	r3, r0
 800d628:	f003 0303 	and.w	r3, r3, #3
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <tcp_receive+0xb2c>
 800d630:	2301      	movs	r3, #1
 800d632:	e000      	b.n	800d636 <tcp_receive+0xb2e>
 800d634:	2300      	movs	r3, #0
 800d636:	191a      	adds	r2, r3, r4
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63c:	441a      	add	r2, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d646:	461c      	mov	r4, r3
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	891b      	ldrh	r3, [r3, #8]
 800d64c:	461d      	mov	r5, r3
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	899b      	ldrh	r3, [r3, #12]
 800d654:	b29b      	uxth	r3, r3
 800d656:	4618      	mov	r0, r3
 800d658:	f7fb fadb 	bl	8008c12 <lwip_htons>
 800d65c:	4603      	mov	r3, r0
 800d65e:	f003 0303 	and.w	r3, r3, #3
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <tcp_receive+0xb62>
 800d666:	2301      	movs	r3, #1
 800d668:	e000      	b.n	800d66c <tcp_receive+0xb64>
 800d66a:	2300      	movs	r3, #0
 800d66c:	442b      	add	r3, r5
 800d66e:	429c      	cmp	r4, r3
 800d670:	d206      	bcs.n	800d680 <tcp_receive+0xb78>
 800d672:	4b1e      	ldr	r3, [pc, #120]	; (800d6ec <tcp_receive+0xbe4>)
 800d674:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800d678:	4922      	ldr	r1, [pc, #136]	; (800d704 <tcp_receive+0xbfc>)
 800d67a:	481e      	ldr	r0, [pc, #120]	; (800d6f4 <tcp_receive+0xbec>)
 800d67c:	f004 fbb4 	bl	8011de8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	891b      	ldrh	r3, [r3, #8]
 800d684:	461c      	mov	r4, r3
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	899b      	ldrh	r3, [r3, #12]
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fb fabf 	bl	8008c12 <lwip_htons>
 800d694:	4603      	mov	r3, r0
 800d696:	f003 0303 	and.w	r3, r3, #3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <tcp_receive+0xb9a>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e000      	b.n	800d6a4 <tcp_receive+0xb9c>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	1919      	adds	r1, r3, r4
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d6aa:	b28b      	uxth	r3, r1
 800d6ac:	1ad3      	subs	r3, r2, r3
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7fd f97d 	bl	800a9b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	891b      	ldrh	r3, [r3, #8]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d028      	beq.n	800d716 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d6c4:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <tcp_receive+0xbf4>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d01d      	beq.n	800d708 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800d6cc:	4b0b      	ldr	r3, [pc, #44]	; (800d6fc <tcp_receive+0xbf4>)
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	f7fc fc94 	bl	800a004 <pbuf_cat>
 800d6dc:	e018      	b.n	800d710 <tcp_receive+0xc08>
 800d6de:	bf00      	nop
 800d6e0:	20000436 	.word	0x20000436
 800d6e4:	2000042c 	.word	0x2000042c
 800d6e8:	2000040c 	.word	0x2000040c
 800d6ec:	080141a4 	.word	0x080141a4
 800d6f0:	080144a8 	.word	0x080144a8
 800d6f4:	080141e8 	.word	0x080141e8
 800d6f8:	080144e4 	.word	0x080144e4
 800d6fc:	2000043c 	.word	0x2000043c
 800d700:	20000439 	.word	0x20000439
 800d704:	08014504 	.word	0x08014504
            } else {
              recv_data = cseg->p;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	4a71      	ldr	r2, [pc, #452]	; (800d8d4 <tcp_receive+0xdcc>)
 800d70e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2200      	movs	r2, #0
 800d714:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	899b      	ldrh	r3, [r3, #12]
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fb fa77 	bl	8008c12 <lwip_htons>
 800d724:	4603      	mov	r3, r0
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00d      	beq.n	800d74a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d72e:	4b6a      	ldr	r3, [pc, #424]	; (800d8d8 <tcp_receive+0xdd0>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	f043 0320 	orr.w	r3, r3, #32
 800d736:	b2da      	uxtb	r2, r3
 800d738:	4b67      	ldr	r3, [pc, #412]	; (800d8d8 <tcp_receive+0xdd0>)
 800d73a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	7d1b      	ldrb	r3, [r3, #20]
 800d740:	2b04      	cmp	r3, #4
 800d742:	d102      	bne.n	800d74a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2207      	movs	r2, #7
 800d748:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f7fd fd7a 	bl	800b24c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d008      	beq.n	800d772 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	685a      	ldr	r2, [r3, #4]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d76c:	429a      	cmp	r2, r3
 800d76e:	f43f af47 	beq.w	800d600 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	7e9b      	ldrb	r3, [r3, #26]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00e      	beq.n	800d79c <tcp_receive+0xc94>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	7e9b      	ldrb	r3, [r3, #26]
 800d782:	f023 0301 	bic.w	r3, r3, #1
 800d786:	b2da      	uxtb	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	769a      	strb	r2, [r3, #26]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	7e9b      	ldrb	r3, [r3, #26]
 800d790:	f043 0302 	orr.w	r3, r3, #2
 800d794:	b2da      	uxtb	r2, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d79a:	e181      	b.n	800daa0 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	7e9b      	ldrb	r3, [r3, #26]
 800d7a0:	f043 0301 	orr.w	r3, r3, #1
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d7aa:	e179      	b.n	800daa0 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fc91 	bl	800e0d4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d106      	bne.n	800d7c8 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d7ba:	4848      	ldr	r0, [pc, #288]	; (800d8dc <tcp_receive+0xdd4>)
 800d7bc:	f7fd fd5e 	bl	800b27c <tcp_seg_copy>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800d7c6:	e16b      	b.n	800daa0 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7d2:	e150      	b.n	800da76 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800d7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d6:	68db      	ldr	r3, [r3, #12]
 800d7d8:	685a      	ldr	r2, [r3, #4]
 800d7da:	4b41      	ldr	r3, [pc, #260]	; (800d8e0 <tcp_receive+0xdd8>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d11d      	bne.n	800d81e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d7e2:	4b3e      	ldr	r3, [pc, #248]	; (800d8dc <tcp_receive+0xdd4>)
 800d7e4:	891a      	ldrh	r2, [r3, #8]
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	891b      	ldrh	r3, [r3, #8]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	f240 8148 	bls.w	800da80 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800d7f0:	483a      	ldr	r0, [pc, #232]	; (800d8dc <tcp_receive+0xdd4>)
 800d7f2:	f7fd fd43 	bl	800b27c <tcp_seg_copy>
 800d7f6:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f000 8142 	beq.w	800da84 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800d800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d802:	2b00      	cmp	r3, #0
 800d804:	d003      	beq.n	800d80e <tcp_receive+0xd06>
                    prev->next = cseg;
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	e002      	b.n	800d814 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d814:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7ff f900 	bl	800ca1c <tcp_oos_insert_segment>
                }
                break;
 800d81c:	e132      	b.n	800da84 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d820:	2b00      	cmp	r3, #0
 800d822:	d117      	bne.n	800d854 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d824:	4b2e      	ldr	r3, [pc, #184]	; (800d8e0 <tcp_receive+0xdd8>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	2b00      	cmp	r3, #0
 800d832:	da57      	bge.n	800d8e4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800d834:	4829      	ldr	r0, [pc, #164]	; (800d8dc <tcp_receive+0xdd4>)
 800d836:	f7fd fd21 	bl	800b27c <tcp_seg_copy>
 800d83a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f000 8122 	beq.w	800da88 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800d84a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f7ff f8e5 	bl	800ca1c <tcp_oos_insert_segment>
                  }
                  break;
 800d852:	e119      	b.n	800da88 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800d854:	4b22      	ldr	r3, [pc, #136]	; (800d8e0 <tcp_receive+0xdd8>)
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	3b01      	subs	r3, #1
 800d862:	2b00      	cmp	r3, #0
 800d864:	db3e      	blt.n	800d8e4 <tcp_receive+0xddc>
 800d866:	4b1e      	ldr	r3, [pc, #120]	; (800d8e0 <tcp_receive+0xdd8>)
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	3301      	adds	r3, #1
 800d874:	2b00      	cmp	r3, #0
 800d876:	dc35      	bgt.n	800d8e4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800d878:	4818      	ldr	r0, [pc, #96]	; (800d8dc <tcp_receive+0xdd4>)
 800d87a:	f7fd fcff 	bl	800b27c <tcp_seg_copy>
 800d87e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 8102 	beq.w	800da8c <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d890:	8912      	ldrh	r2, [r2, #8]
 800d892:	441a      	add	r2, r3
 800d894:	4b12      	ldr	r3, [pc, #72]	; (800d8e0 <tcp_receive+0xdd8>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	dd12      	ble.n	800d8c4 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d89e:	4b10      	ldr	r3, [pc, #64]	; (800d8e0 <tcp_receive+0xdd8>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ba:	891b      	ldrh	r3, [r3, #8]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f7fc f960 	bl	8009b84 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d8ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f7ff f8a5 	bl	800ca1c <tcp_oos_insert_segment>
                  }
                  break;
 800d8d2:	e0db      	b.n	800da8c <tcp_receive+0xf84>
 800d8d4:	2000043c 	.word	0x2000043c
 800d8d8:	20000439 	.word	0x20000439
 800d8dc:	2000040c 	.word	0x2000040c
 800d8e0:	2000042c 	.word	0x2000042c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f040 80bf 	bne.w	800da6c <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d8ee:	4b7c      	ldr	r3, [pc, #496]	; (800dae0 <tcp_receive+0xfd8>)
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f340 80b6 	ble.w	800da6c <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	899b      	ldrh	r3, [r3, #12]
 800d906:	b29b      	uxth	r3, r3
 800d908:	4618      	mov	r0, r3
 800d90a:	f7fb f982 	bl	8008c12 <lwip_htons>
 800d90e:	4603      	mov	r3, r0
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	2b00      	cmp	r3, #0
 800d916:	f040 80bb 	bne.w	800da90 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d91a:	4872      	ldr	r0, [pc, #456]	; (800dae4 <tcp_receive+0xfdc>)
 800d91c:	f7fd fcae 	bl	800b27c <tcp_seg_copy>
 800d920:	4602      	mov	r2, r0
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f000 80b2 	beq.w	800da94 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d938:	8912      	ldrh	r2, [r2, #8]
 800d93a:	441a      	add	r2, r3
 800d93c:	4b68      	ldr	r3, [pc, #416]	; (800dae0 <tcp_receive+0xfd8>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	2b00      	cmp	r3, #0
 800d944:	dd12      	ble.n	800d96c <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d946:	4b66      	ldr	r3, [pc, #408]	; (800dae0 <tcp_receive+0xfd8>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	b29b      	uxth	r3, r3
 800d954:	1ad3      	subs	r3, r2, r3
 800d956:	b29a      	uxth	r2, r3
 800d958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95e:	685a      	ldr	r2, [r3, #4]
 800d960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d962:	891b      	ldrh	r3, [r3, #8]
 800d964:	4619      	mov	r1, r3
 800d966:	4610      	mov	r0, r2
 800d968:	f7fc f90c 	bl	8009b84 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d96c:	4b5e      	ldr	r3, [pc, #376]	; (800dae8 <tcp_receive+0xfe0>)
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	461a      	mov	r2, r3
 800d972:	4b5b      	ldr	r3, [pc, #364]	; (800dae0 <tcp_receive+0xfd8>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	441a      	add	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97c:	6879      	ldr	r1, [r7, #4]
 800d97e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d980:	440b      	add	r3, r1
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	2b00      	cmp	r3, #0
 800d986:	f340 8085 	ble.w	800da94 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	899b      	ldrh	r3, [r3, #12]
 800d992:	b29b      	uxth	r3, r3
 800d994:	4618      	mov	r0, r3
 800d996:	f7fb f93c 	bl	8008c12 <lwip_htons>
 800d99a:	4603      	mov	r3, r0
 800d99c:	f003 0301 	and.w	r3, r3, #1
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d01e      	beq.n	800d9e2 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	899b      	ldrh	r3, [r3, #12]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d9b2:	b29c      	uxth	r4, r3
 800d9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	899b      	ldrh	r3, [r3, #12]
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fb f927 	bl	8008c12 <lwip_htons>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fb f920 	bl	8008c12 <lwip_htons>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	4322      	orrs	r2, r4
 800d9de:	b292      	uxth	r2, r2
 800d9e0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9ec:	4413      	add	r3, r2
 800d9ee:	b299      	uxth	r1, r3
 800d9f0:	4b3b      	ldr	r3, [pc, #236]	; (800dae0 <tcp_receive+0xfd8>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	1a8a      	subs	r2, r1, r2
 800d9fc:	b292      	uxth	r2, r2
 800d9fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800da00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	685a      	ldr	r2, [r3, #4]
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	891b      	ldrh	r3, [r3, #8]
 800da0c:	4619      	mov	r1, r3
 800da0e:	4610      	mov	r0, r2
 800da10:	f7fc f8b8 	bl	8009b84 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800da14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	891c      	ldrh	r4, [r3, #8]
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	899b      	ldrh	r3, [r3, #12]
 800da22:	b29b      	uxth	r3, r3
 800da24:	4618      	mov	r0, r3
 800da26:	f7fb f8f4 	bl	8008c12 <lwip_htons>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f003 0303 	and.w	r3, r3, #3
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <tcp_receive+0xf30>
 800da34:	2301      	movs	r3, #1
 800da36:	e000      	b.n	800da3a <tcp_receive+0xf32>
 800da38:	2300      	movs	r3, #0
 800da3a:	4423      	add	r3, r4
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	4b2a      	ldr	r3, [pc, #168]	; (800dae8 <tcp_receive+0xfe0>)
 800da40:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800da42:	4b29      	ldr	r3, [pc, #164]	; (800dae8 <tcp_receive+0xfe0>)
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	461a      	mov	r2, r3
 800da48:	4b25      	ldr	r3, [pc, #148]	; (800dae0 <tcp_receive+0xfd8>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	441a      	add	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da52:	6879      	ldr	r1, [r7, #4]
 800da54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da56:	440b      	add	r3, r1
 800da58:	429a      	cmp	r2, r3
 800da5a:	d01b      	beq.n	800da94 <tcp_receive+0xf8c>
 800da5c:	4b23      	ldr	r3, [pc, #140]	; (800daec <tcp_receive+0xfe4>)
 800da5e:	f240 627a 	movw	r2, #1658	; 0x67a
 800da62:	4923      	ldr	r1, [pc, #140]	; (800daf0 <tcp_receive+0xfe8>)
 800da64:	4823      	ldr	r0, [pc, #140]	; (800daf4 <tcp_receive+0xfec>)
 800da66:	f004 f9bf 	bl	8011de8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800da6a:	e013      	b.n	800da94 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800da70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f47f aeab 	bne.w	800d7d4 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800da7e:	e00f      	b.n	800daa0 <tcp_receive+0xf98>
                break;
 800da80:	bf00      	nop
 800da82:	e00d      	b.n	800daa0 <tcp_receive+0xf98>
                break;
 800da84:	bf00      	nop
 800da86:	e00b      	b.n	800daa0 <tcp_receive+0xf98>
                  break;
 800da88:	bf00      	nop
 800da8a:	e009      	b.n	800daa0 <tcp_receive+0xf98>
                  break;
 800da8c:	bf00      	nop
 800da8e:	e007      	b.n	800daa0 <tcp_receive+0xf98>
                  break;
 800da90:	bf00      	nop
 800da92:	e005      	b.n	800daa0 <tcp_receive+0xf98>
                break;
 800da94:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800da96:	e003      	b.n	800daa0 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fb1b 	bl	800e0d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800da9e:	e01a      	b.n	800dad6 <tcp_receive+0xfce>
 800daa0:	e019      	b.n	800dad6 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800daa2:	4b0f      	ldr	r3, [pc, #60]	; (800dae0 <tcp_receive+0xfd8>)
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	db0a      	blt.n	800dac6 <tcp_receive+0xfbe>
 800dab0:	4b0b      	ldr	r3, [pc, #44]	; (800dae0 <tcp_receive+0xfd8>)
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab8:	6879      	ldr	r1, [r7, #4]
 800daba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dabc:	440b      	add	r3, r1
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	3301      	adds	r3, #1
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	dd07      	ble.n	800dad6 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7e9b      	ldrb	r3, [r3, #26]
 800daca:	f043 0302 	orr.w	r3, r3, #2
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800dad4:	e7ff      	b.n	800dad6 <tcp_receive+0xfce>
 800dad6:	bf00      	nop
 800dad8:	3734      	adds	r7, #52	; 0x34
 800dada:	46bd      	mov	sp, r7
 800dadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dade:	bf00      	nop
 800dae0:	2000042c 	.word	0x2000042c
 800dae4:	2000040c 	.word	0x2000040c
 800dae8:	20000436 	.word	0x20000436
 800daec:	080141a4 	.word	0x080141a4
 800daf0:	08014470 	.word	0x08014470
 800daf4:	080141e8 	.word	0x080141e8

0800daf8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800dafe:	4b17      	ldr	r3, [pc, #92]	; (800db5c <tcp_getoptbyte+0x64>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d005      	beq.n	800db12 <tcp_getoptbyte+0x1a>
 800db06:	4b16      	ldr	r3, [pc, #88]	; (800db60 <tcp_getoptbyte+0x68>)
 800db08:	881a      	ldrh	r2, [r3, #0]
 800db0a:	4b16      	ldr	r3, [pc, #88]	; (800db64 <tcp_getoptbyte+0x6c>)
 800db0c:	881b      	ldrh	r3, [r3, #0]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d20e      	bcs.n	800db30 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800db12:	4b15      	ldr	r3, [pc, #84]	; (800db68 <tcp_getoptbyte+0x70>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	3314      	adds	r3, #20
 800db18:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800db1a:	4b11      	ldr	r3, [pc, #68]	; (800db60 <tcp_getoptbyte+0x68>)
 800db1c:	881b      	ldrh	r3, [r3, #0]
 800db1e:	1c5a      	adds	r2, r3, #1
 800db20:	b291      	uxth	r1, r2
 800db22:	4a0f      	ldr	r2, [pc, #60]	; (800db60 <tcp_getoptbyte+0x68>)
 800db24:	8011      	strh	r1, [r2, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	4413      	add	r3, r2
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	e010      	b.n	800db52 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800db30:	4b0b      	ldr	r3, [pc, #44]	; (800db60 <tcp_getoptbyte+0x68>)
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	1c5a      	adds	r2, r3, #1
 800db36:	b291      	uxth	r1, r2
 800db38:	4a09      	ldr	r2, [pc, #36]	; (800db60 <tcp_getoptbyte+0x68>)
 800db3a:	8011      	strh	r1, [r2, #0]
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	4b09      	ldr	r3, [pc, #36]	; (800db64 <tcp_getoptbyte+0x6c>)
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800db48:	4b04      	ldr	r3, [pc, #16]	; (800db5c <tcp_getoptbyte+0x64>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	79fb      	ldrb	r3, [r7, #7]
 800db4e:	4413      	add	r3, r2
 800db50:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db52:	4618      	mov	r0, r3
 800db54:	370c      	adds	r7, #12
 800db56:	46bd      	mov	sp, r7
 800db58:	bc80      	pop	{r7}
 800db5a:	4770      	bx	lr
 800db5c:	20000424 	.word	0x20000424
 800db60:	20000428 	.word	0x20000428
 800db64:	20000422 	.word	0x20000422
 800db68:	2000041c 	.word	0x2000041c

0800db6c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800db74:	4b2e      	ldr	r3, [pc, #184]	; (800dc30 <tcp_parseopt+0xc4>)
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d055      	beq.n	800dc28 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800db7c:	4b2d      	ldr	r3, [pc, #180]	; (800dc34 <tcp_parseopt+0xc8>)
 800db7e:	2200      	movs	r2, #0
 800db80:	801a      	strh	r2, [r3, #0]
 800db82:	e045      	b.n	800dc10 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800db84:	f7ff ffb8 	bl	800daf8 <tcp_getoptbyte>
 800db88:	4603      	mov	r3, r0
 800db8a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
 800db8e:	2b02      	cmp	r3, #2
 800db90:	d006      	beq.n	800dba0 <tcp_parseopt+0x34>
 800db92:	2b02      	cmp	r3, #2
 800db94:	dc2b      	bgt.n	800dbee <tcp_parseopt+0x82>
 800db96:	2b00      	cmp	r3, #0
 800db98:	d041      	beq.n	800dc1e <tcp_parseopt+0xb2>
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d127      	bne.n	800dbee <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800db9e:	e037      	b.n	800dc10 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dba0:	f7ff ffaa 	bl	800daf8 <tcp_getoptbyte>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b04      	cmp	r3, #4
 800dba8:	d13b      	bne.n	800dc22 <tcp_parseopt+0xb6>
 800dbaa:	4b22      	ldr	r3, [pc, #136]	; (800dc34 <tcp_parseopt+0xc8>)
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	4a1f      	ldr	r2, [pc, #124]	; (800dc30 <tcp_parseopt+0xc4>)
 800dbb2:	8812      	ldrh	r2, [r2, #0]
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	da34      	bge.n	800dc22 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800dbb8:	f7ff ff9e 	bl	800daf8 <tcp_getoptbyte>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	021b      	lsls	r3, r3, #8
 800dbc2:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800dbc4:	f7ff ff98 	bl	800daf8 <tcp_getoptbyte>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	89bb      	ldrh	r3, [r7, #12]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dbd2:	89bb      	ldrh	r3, [r7, #12]
 800dbd4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dbd8:	d804      	bhi.n	800dbe4 <tcp_parseopt+0x78>
 800dbda:	89bb      	ldrh	r3, [r7, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <tcp_parseopt+0x78>
 800dbe0:	89ba      	ldrh	r2, [r7, #12]
 800dbe2:	e001      	b.n	800dbe8 <tcp_parseopt+0x7c>
 800dbe4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800dbec:	e010      	b.n	800dc10 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800dbee:	f7ff ff83 	bl	800daf8 <tcp_getoptbyte>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800dbf6:	7afb      	ldrb	r3, [r7, #11]
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d914      	bls.n	800dc26 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800dbfc:	7afb      	ldrb	r3, [r7, #11]
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	4b0c      	ldr	r3, [pc, #48]	; (800dc34 <tcp_parseopt+0xc8>)
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	4413      	add	r3, r2
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	3b02      	subs	r3, #2
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	4b09      	ldr	r3, [pc, #36]	; (800dc34 <tcp_parseopt+0xc8>)
 800dc0e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dc10:	4b08      	ldr	r3, [pc, #32]	; (800dc34 <tcp_parseopt+0xc8>)
 800dc12:	881a      	ldrh	r2, [r3, #0]
 800dc14:	4b06      	ldr	r3, [pc, #24]	; (800dc30 <tcp_parseopt+0xc4>)
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d3b3      	bcc.n	800db84 <tcp_parseopt+0x18>
 800dc1c:	e004      	b.n	800dc28 <tcp_parseopt+0xbc>
        return;
 800dc1e:	bf00      	nop
 800dc20:	e002      	b.n	800dc28 <tcp_parseopt+0xbc>
          return;
 800dc22:	bf00      	nop
 800dc24:	e000      	b.n	800dc28 <tcp_parseopt+0xbc>
          return;
 800dc26:	bf00      	nop
      }
    }
  }
}
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	20000420 	.word	0x20000420
 800dc34:	20000428 	.word	0x20000428

0800dc38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800dc3c:	4b05      	ldr	r3, [pc, #20]	; (800dc54 <tcp_trigger_input_pcb_close+0x1c>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	f043 0310 	orr.w	r3, r3, #16
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	4b03      	ldr	r3, [pc, #12]	; (800dc54 <tcp_trigger_input_pcb_close+0x1c>)
 800dc48:	701a      	strb	r2, [r3, #0]
}
 800dc4a:	bf00      	nop
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bc80      	pop	{r7}
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	20000439 	.word	0x20000439

0800dc58 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	607b      	str	r3, [r7, #4]
 800dc62:	460b      	mov	r3, r1
 800dc64:	817b      	strh	r3, [r7, #10]
 800dc66:	4613      	mov	r3, r2
 800dc68:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dc6a:	897a      	ldrh	r2, [r7, #10]
 800dc6c:	893b      	ldrh	r3, [r7, #8]
 800dc6e:	4413      	add	r3, r2
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	3314      	adds	r3, #20
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	2200      	movs	r2, #0
 800dc78:	4619      	mov	r1, r3
 800dc7a:	2001      	movs	r0, #1
 800dc7c:	f7fb fd84 	bl	8009788 <pbuf_alloc>
 800dc80:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d056      	beq.n	800dd36 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dc88:	897b      	ldrh	r3, [r7, #10]
 800dc8a:	3313      	adds	r3, #19
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	8952      	ldrh	r2, [r2, #10]
 800dc90:	4293      	cmp	r3, r2
 800dc92:	db05      	blt.n	800dca0 <tcp_output_alloc_header+0x48>
 800dc94:	4b2a      	ldr	r3, [pc, #168]	; (800dd40 <tcp_output_alloc_header+0xe8>)
 800dc96:	2272      	movs	r2, #114	; 0x72
 800dc98:	492a      	ldr	r1, [pc, #168]	; (800dd44 <tcp_output_alloc_header+0xec>)
 800dc9a:	482b      	ldr	r0, [pc, #172]	; (800dd48 <tcp_output_alloc_header+0xf0>)
 800dc9c:	f004 f8a4 	bl	8011de8 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	8adb      	ldrh	r3, [r3, #22]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7fa ffb1 	bl	8008c12 <lwip_htons>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	8b1b      	ldrh	r3, [r3, #24]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fa ffa8 	bl	8008c12 <lwip_htons>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fa ffa9 	bl	8008c2c <lwip_htonl>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800dce0:	897b      	ldrh	r3, [r7, #10]
 800dce2:	089b      	lsrs	r3, r3, #2
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	3305      	adds	r3, #5
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	031b      	lsls	r3, r3, #12
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	f043 0310 	orr.w	r3, r3, #16
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fa ff8c 	bl	8008c12 <lwip_htons>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fa ff83 	bl	8008c12 <lwip_htons>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	461a      	mov	r2, r3
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	2200      	movs	r2, #0
 800dd18:	741a      	strb	r2, [r3, #16]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	2200      	movs	r2, #0
 800dd22:	749a      	strb	r2, [r3, #18]
 800dd24:	2200      	movs	r2, #0
 800dd26:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dd30:	441a      	add	r2, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dd36:	697b      	ldr	r3, [r7, #20]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	0801452c 	.word	0x0801452c
 800dd44:	08014560 	.word	0x08014560
 800dd48:	08014590 	.word	0x08014590

0800dd4c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dd4c:	b590      	push	{r4, r7, lr}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d02d      	beq.n	800ddb8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd60:	60fb      	str	r3, [r7, #12]
 800dd62:	e002      	b.n	800dd6a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1f8      	bne.n	800dd64 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	899b      	ldrh	r3, [r3, #12]
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fa ff49 	bl	8008c12 <lwip_htons>
 800dd80:	4603      	mov	r3, r0
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d116      	bne.n	800ddb8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	899b      	ldrh	r3, [r3, #12]
 800dd90:	b29c      	uxth	r4, r3
 800dd92:	2001      	movs	r0, #1
 800dd94:	f7fa ff3d 	bl	8008c12 <lwip_htons>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	4322      	orrs	r2, r4
 800dda2:	b292      	uxth	r2, r2
 800dda4:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	7e9b      	ldrb	r3, [r3, #26]
 800ddaa:	f043 0320 	orr.w	r3, r3, #32
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	e004      	b.n	800ddc2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ddb8:	2101      	movs	r1, #1
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 f88e 	bl	800dedc <tcp_enqueue_flags>
 800ddc0:	4603      	mov	r3, r0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd90      	pop	{r4, r7, pc}
	...

0800ddcc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800ddcc:	b590      	push	{r4, r7, lr}
 800ddce:	b087      	sub	sp, #28
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	4613      	mov	r3, r2
 800ddda:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ddea:	2003      	movs	r0, #3
 800ddec:	f7fb faba 	bl	8009364 <memp_malloc>
 800ddf0:	6138      	str	r0, [r7, #16]
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d104      	bne.n	800de02 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ddf8:	68b8      	ldr	r0, [r7, #8]
 800ddfa:	f7fc f837 	bl	8009e6c <pbuf_free>
    return NULL;
 800ddfe:	2300      	movs	r3, #0
 800de00:	e061      	b.n	800dec6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800de08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2200      	movs	r2, #0
 800de0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	68ba      	ldr	r2, [r7, #8]
 800de14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	891a      	ldrh	r2, [r3, #8]
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	429a      	cmp	r2, r3
 800de20:	d205      	bcs.n	800de2e <tcp_create_segment+0x62>
 800de22:	4b2b      	ldr	r3, [pc, #172]	; (800ded0 <tcp_create_segment+0x104>)
 800de24:	22ba      	movs	r2, #186	; 0xba
 800de26:	492b      	ldr	r1, [pc, #172]	; (800ded4 <tcp_create_segment+0x108>)
 800de28:	482b      	ldr	r0, [pc, #172]	; (800ded8 <tcp_create_segment+0x10c>)
 800de2a:	f003 ffdd 	bl	8011de8 <iprintf>
  seg->len = p->tot_len - optlen;
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	891a      	ldrh	r2, [r3, #8]
 800de32:	7dfb      	ldrb	r3, [r7, #23]
 800de34:	b29b      	uxth	r3, r3
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	b29a      	uxth	r2, r3
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800de3e:	2114      	movs	r1, #20
 800de40:	68b8      	ldr	r0, [r7, #8]
 800de42:	f7fb ffef 	bl	8009e24 <pbuf_header>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d004      	beq.n	800de56 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800de4c:	6938      	ldr	r0, [r7, #16]
 800de4e:	f7fd f9fd 	bl	800b24c <tcp_seg_free>
    return NULL;
 800de52:	2300      	movs	r3, #0
 800de54:	e037      	b.n	800dec6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	685a      	ldr	r2, [r3, #4]
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	8ada      	ldrh	r2, [r3, #22]
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	68dc      	ldr	r4, [r3, #12]
 800de68:	4610      	mov	r0, r2
 800de6a:	f7fa fed2 	bl	8008c12 <lwip_htons>
 800de6e:	4603      	mov	r3, r0
 800de70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	8b1a      	ldrh	r2, [r3, #24]
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	68dc      	ldr	r4, [r3, #12]
 800de7a:	4610      	mov	r0, r2
 800de7c:	f7fa fec9 	bl	8008c12 <lwip_htons>
 800de80:	4603      	mov	r3, r0
 800de82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	68dc      	ldr	r4, [r3, #12]
 800de88:	6838      	ldr	r0, [r7, #0]
 800de8a:	f7fa fecf 	bl	8008c2c <lwip_htonl>
 800de8e:	4603      	mov	r3, r0
 800de90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800de92:	7dfb      	ldrb	r3, [r7, #23]
 800de94:	089b      	lsrs	r3, r3, #2
 800de96:	b2db      	uxtb	r3, r3
 800de98:	b29b      	uxth	r3, r3
 800de9a:	3305      	adds	r3, #5
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	031b      	lsls	r3, r3, #12
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	4313      	orrs	r3, r2
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	68dc      	ldr	r4, [r3, #12]
 800deae:	4610      	mov	r0, r2
 800deb0:	f7fa feaf 	bl	8008c12 <lwip_htons>
 800deb4:	4603      	mov	r3, r0
 800deb6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	2200      	movs	r2, #0
 800debe:	749a      	strb	r2, [r3, #18]
 800dec0:	2200      	movs	r2, #0
 800dec2:	74da      	strb	r2, [r3, #19]
  return seg;
 800dec4:	693b      	ldr	r3, [r7, #16]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	371c      	adds	r7, #28
 800deca:	46bd      	mov	sp, r7
 800decc:	bd90      	pop	{r4, r7, pc}
 800dece:	bf00      	nop
 800ded0:	0801452c 	.word	0x0801452c
 800ded4:	080145b8 	.word	0x080145b8
 800ded8:	08014590 	.word	0x08014590

0800dedc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b08a      	sub	sp, #40	; 0x28
 800dee0:	af02      	add	r7, sp, #8
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	460b      	mov	r3, r1
 800dee6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dee8:	2300      	movs	r3, #0
 800deea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800deec:	2300      	movs	r3, #0
 800deee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800def0:	78fb      	ldrb	r3, [r7, #3]
 800def2:	f003 0303 	and.w	r3, r3, #3
 800def6:	2b00      	cmp	r3, #0
 800def8:	d106      	bne.n	800df08 <tcp_enqueue_flags+0x2c>
 800defa:	4b6f      	ldr	r3, [pc, #444]	; (800e0b8 <tcp_enqueue_flags+0x1dc>)
 800defc:	f240 321a 	movw	r2, #794	; 0x31a
 800df00:	496e      	ldr	r1, [pc, #440]	; (800e0bc <tcp_enqueue_flags+0x1e0>)
 800df02:	486f      	ldr	r0, [pc, #444]	; (800e0c0 <tcp_enqueue_flags+0x1e4>)
 800df04:	f003 ff70 	bl	8011de8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df0e:	2b08      	cmp	r3, #8
 800df10:	d806      	bhi.n	800df20 <tcp_enqueue_flags+0x44>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df18:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d90e      	bls.n	800df3e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800df20:	78fb      	ldrb	r3, [r7, #3]
 800df22:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800df26:	2b00      	cmp	r3, #0
 800df28:	d109      	bne.n	800df3e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	7e9b      	ldrb	r3, [r3, #26]
 800df2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df32:	b2da      	uxtb	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800df38:	f04f 33ff 	mov.w	r3, #4294967295
 800df3c:	e0b7      	b.n	800e0ae <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800df3e:	78fb      	ldrb	r3, [r7, #3]
 800df40:	f003 0302 	and.w	r3, r3, #2
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800df48:	2301      	movs	r3, #1
 800df4a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800df4c:	7ffb      	ldrb	r3, [r7, #31]
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0304 	and.w	r3, r3, #4
 800df56:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	2200      	movs	r2, #0
 800df5e:	4619      	mov	r1, r3
 800df60:	2000      	movs	r0, #0
 800df62:	f7fb fc11 	bl	8009788 <pbuf_alloc>
 800df66:	6138      	str	r0, [r7, #16]
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d109      	bne.n	800df82 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	7e9b      	ldrb	r3, [r3, #26]
 800df72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df76:	b2da      	uxtb	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800df7c:	f04f 33ff 	mov.w	r3, #4294967295
 800df80:	e095      	b.n	800e0ae <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	895a      	ldrh	r2, [r3, #10]
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d206      	bcs.n	800df9c <tcp_enqueue_flags+0xc0>
 800df8e:	4b4a      	ldr	r3, [pc, #296]	; (800e0b8 <tcp_enqueue_flags+0x1dc>)
 800df90:	f44f 7250 	mov.w	r2, #832	; 0x340
 800df94:	494b      	ldr	r1, [pc, #300]	; (800e0c4 <tcp_enqueue_flags+0x1e8>)
 800df96:	484a      	ldr	r0, [pc, #296]	; (800e0c0 <tcp_enqueue_flags+0x1e4>)
 800df98:	f003 ff26 	bl	8011de8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800dfa0:	78fa      	ldrb	r2, [r7, #3]
 800dfa2:	7ffb      	ldrb	r3, [r7, #31]
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	6939      	ldr	r1, [r7, #16]
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7ff ff0e 	bl	800ddcc <tcp_create_segment>
 800dfb0:	60f8      	str	r0, [r7, #12]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d109      	bne.n	800dfcc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7e9b      	ldrb	r3, [r3, #26]
 800dfbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dfc0:	b2da      	uxtb	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dfc6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfca:	e070      	b.n	800e0ae <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	f003 0303 	and.w	r3, r3, #3
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d006      	beq.n	800dfe6 <tcp_enqueue_flags+0x10a>
 800dfd8:	4b37      	ldr	r3, [pc, #220]	; (800e0b8 <tcp_enqueue_flags+0x1dc>)
 800dfda:	f240 3249 	movw	r2, #841	; 0x349
 800dfde:	493a      	ldr	r1, [pc, #232]	; (800e0c8 <tcp_enqueue_flags+0x1ec>)
 800dfe0:	4837      	ldr	r0, [pc, #220]	; (800e0c0 <tcp_enqueue_flags+0x1e4>)
 800dfe2:	f003 ff01 	bl	8011de8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	891b      	ldrh	r3, [r3, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d006      	beq.n	800dffc <tcp_enqueue_flags+0x120>
 800dfee:	4b32      	ldr	r3, [pc, #200]	; (800e0b8 <tcp_enqueue_flags+0x1dc>)
 800dff0:	f240 324a 	movw	r2, #842	; 0x34a
 800dff4:	4935      	ldr	r1, [pc, #212]	; (800e0cc <tcp_enqueue_flags+0x1f0>)
 800dff6:	4832      	ldr	r0, [pc, #200]	; (800e0c0 <tcp_enqueue_flags+0x1e4>)
 800dff8:	f003 fef6 	bl	8011de8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e000:	2b00      	cmp	r3, #0
 800e002:	d103      	bne.n	800e00c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	669a      	str	r2, [r3, #104]	; 0x68
 800e00a:	e00d      	b.n	800e028 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e010:	61bb      	str	r3, [r7, #24]
 800e012:	e002      	b.n	800e01a <tcp_enqueue_flags+0x13e>
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	61bb      	str	r3, [r7, #24]
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1f8      	bne.n	800e014 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e030:	78fb      	ldrb	r3, [r7, #3]
 800e032:	f003 0302 	and.w	r3, r3, #2
 800e036:	2b00      	cmp	r3, #0
 800e038:	d104      	bne.n	800e044 <tcp_enqueue_flags+0x168>
 800e03a:	78fb      	ldrb	r3, [r7, #3]
 800e03c:	f003 0301 	and.w	r3, r3, #1
 800e040:	2b00      	cmp	r3, #0
 800e042:	d004      	beq.n	800e04e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e048:	1c5a      	adds	r2, r3, #1
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e04e:	78fb      	ldrb	r3, [r7, #3]
 800e050:	f003 0301 	and.w	r3, r3, #1
 800e054:	2b00      	cmp	r3, #0
 800e056:	d006      	beq.n	800e066 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	7e9b      	ldrb	r3, [r3, #26]
 800e05c:	f043 0320 	orr.w	r3, r3, #32
 800e060:	b2da      	uxtb	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fb ff92 	bl	8009f94 <pbuf_clen>
 800e070:	4603      	mov	r3, r0
 800e072:	461a      	mov	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e07a:	4413      	add	r3, r2
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d00e      	beq.n	800e0ac <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10a      	bne.n	800e0ac <tcp_enqueue_flags+0x1d0>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d106      	bne.n	800e0ac <tcp_enqueue_flags+0x1d0>
 800e09e:	4b06      	ldr	r3, [pc, #24]	; (800e0b8 <tcp_enqueue_flags+0x1dc>)
 800e0a0:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e0a4:	490a      	ldr	r1, [pc, #40]	; (800e0d0 <tcp_enqueue_flags+0x1f4>)
 800e0a6:	4806      	ldr	r0, [pc, #24]	; (800e0c0 <tcp_enqueue_flags+0x1e4>)
 800e0a8:	f003 fe9e 	bl	8011de8 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3720      	adds	r7, #32
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	0801452c 	.word	0x0801452c
 800e0bc:	08014830 	.word	0x08014830
 800e0c0:	08014590 	.word	0x08014590
 800e0c4:	08014888 	.word	0x08014888
 800e0c8:	080148c4 	.word	0x080148c4
 800e0cc:	080148dc 	.word	0x080148dc
 800e0d0:	08014908 	.word	0x08014908

0800e0d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e0d4:	b590      	push	{r4, r7, lr}
 800e0d6:	b08b      	sub	sp, #44	; 0x2c
 800e0d8:	af04      	add	r7, sp, #16
 800e0da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e0e0:	7dbb      	ldrb	r3, [r7, #22]
 800e0e2:	b29c      	uxth	r4, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fa fd9f 	bl	8008c2c <lwip_htonl>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	4621      	mov	r1, r4
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7ff fdaf 	bl	800dc58 <tcp_output_alloc_header>
 800e0fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d109      	bne.n	800e116 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	7e9b      	ldrb	r3, [r3, #26]
 800e106:	f043 0303 	orr.w	r3, r3, #3
 800e10a:	b2da      	uxtb	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e110:	f06f 0301 	mvn.w	r3, #1
 800e114:	e036      	b.n	800e184 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3304      	adds	r3, #4
 800e11a:	4618      	mov	r0, r3
 800e11c:	f002 fad8 	bl	80106d0 <ip4_route>
 800e120:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d102      	bne.n	800e12e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800e128:	23fc      	movs	r3, #252	; 0xfc
 800e12a:	75fb      	strb	r3, [r7, #23]
 800e12c:	e012      	b.n	800e154 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	1d18      	adds	r0, r3, #4
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	7a9c      	ldrb	r4, [r3, #10]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	7a5b      	ldrb	r3, [r3, #9]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	9202      	str	r2, [sp, #8]
 800e140:	2206      	movs	r2, #6
 800e142:	9201      	str	r2, [sp, #4]
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	4623      	mov	r3, r4
 800e148:	4602      	mov	r2, r0
 800e14a:	6938      	ldr	r0, [r7, #16]
 800e14c:	f002 fc6a 	bl	8010a24 <ip4_output_if>
 800e150:	4603      	mov	r3, r0
 800e152:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e154:	6938      	ldr	r0, [r7, #16]
 800e156:	f7fb fe89 	bl	8009e6c <pbuf_free>

  if (err != ERR_OK) {
 800e15a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d007      	beq.n	800e172 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	7e9b      	ldrb	r3, [r3, #26]
 800e166:	f043 0303 	orr.w	r3, r3, #3
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	769a      	strb	r2, [r3, #26]
 800e170:	e006      	b.n	800e180 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	7e9b      	ldrb	r3, [r3, #26]
 800e176:	f023 0303 	bic.w	r3, r3, #3
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800e180:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e184:	4618      	mov	r0, r3
 800e186:	371c      	adds	r7, #28
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd90      	pop	{r4, r7, pc}

0800e18c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e18c:	b5b0      	push	{r4, r5, r7, lr}
 800e18e:	b08a      	sub	sp, #40	; 0x28
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	7d1b      	ldrb	r3, [r3, #20]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d106      	bne.n	800e1aa <tcp_output+0x1e>
 800e19c:	4ba8      	ldr	r3, [pc, #672]	; (800e440 <tcp_output+0x2b4>)
 800e19e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e1a2:	49a8      	ldr	r1, [pc, #672]	; (800e444 <tcp_output+0x2b8>)
 800e1a4:	48a8      	ldr	r0, [pc, #672]	; (800e448 <tcp_output+0x2bc>)
 800e1a6:	f003 fe1f 	bl	8011de8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e1aa:	4ba8      	ldr	r3, [pc, #672]	; (800e44c <tcp_output+0x2c0>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d101      	bne.n	800e1b8 <tcp_output+0x2c>
    return ERR_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	e1cb      	b.n	800e550 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	bf28      	it	cs
 800e1c8:	4613      	movcs	r3, r2
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1d2:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	7e9b      	ldrb	r3, [r3, #26]
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d017      	beq.n	800e210 <tcp_output+0x84>
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00f      	beq.n	800e206 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fa fd1d 	bl	8008c2c <lwip_htonl>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1fc:	8912      	ldrh	r2, [r2, #8]
 800e1fe:	4413      	add	r3, r2
     (seg == NULL ||
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	429a      	cmp	r2, r3
 800e204:	d204      	bcs.n	800e210 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff ff64 	bl	800e0d4 <tcp_send_empty_ack>
 800e20c:	4603      	mov	r3, r0
 800e20e:	e19f      	b.n	800e550 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e214:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e216:	6a3b      	ldr	r3, [r7, #32]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d007      	beq.n	800e22c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800e21c:	e002      	b.n	800e224 <tcp_output+0x98>
 800e21e:	6a3b      	ldr	r3, [r7, #32]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	623b      	str	r3, [r7, #32]
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1f8      	bne.n	800e21e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	3304      	adds	r3, #4
 800e230:	4618      	mov	r0, r3
 800e232:	f002 fa4d 	bl	80106d0 <ip4_route>
 800e236:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <tcp_output+0xb8>
    return ERR_RTE;
 800e23e:	f06f 0303 	mvn.w	r3, #3
 800e242:	e185      	b.n	800e550 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d003      	beq.n	800e252 <tcp_output+0xc6>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d111      	bne.n	800e276 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <tcp_output+0xd2>
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	3304      	adds	r3, #4
 800e25c:	e000      	b.n	800e260 <tcp_output+0xd4>
 800e25e:	2300      	movs	r3, #0
 800e260:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d102      	bne.n	800e26e <tcp_output+0xe2>
      return ERR_RTE;
 800e268:	f06f 0303 	mvn.w	r3, #3
 800e26c:	e170      	b.n	800e550 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f000 813f 	beq.w	800e4fc <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	4618      	mov	r0, r3
 800e286:	f7fa fcd1 	bl	8008c2c <lwip_htonl>
 800e28a:	4602      	mov	r2, r0
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e294:	8912      	ldrh	r2, [r2, #8]
 800e296:	4413      	add	r3, r2
  if (seg != NULL &&
 800e298:	69ba      	ldr	r2, [r7, #24]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	f080 812e 	bcs.w	800e4fc <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 812a 	beq.w	800e4fc <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	f040 8122 	bne.w	800e4fc <tcp_output+0x370>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f040 811d 	bne.w	800e4fc <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f040 812c 	bne.w	800e526 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800e2de:	e122      	b.n	800e526 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	899b      	ldrh	r3, [r3, #12]
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fa fc92 	bl	8008c12 <lwip_htons>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	f003 0304 	and.w	r3, r3, #4
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d006      	beq.n	800e306 <tcp_output+0x17a>
 800e2f8:	4b51      	ldr	r3, [pc, #324]	; (800e440 <tcp_output+0x2b4>)
 800e2fa:	f240 4245 	movw	r2, #1093	; 0x445
 800e2fe:	4954      	ldr	r1, [pc, #336]	; (800e450 <tcp_output+0x2c4>)
 800e300:	4851      	ldr	r0, [pc, #324]	; (800e448 <tcp_output+0x2bc>)
 800e302:	f003 fd71 	bl	8011de8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d01f      	beq.n	800e34e <tcp_output+0x1c2>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	7e9b      	ldrb	r3, [r3, #26]
 800e312:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e316:	2b00      	cmp	r3, #0
 800e318:	d119      	bne.n	800e34e <tcp_output+0x1c2>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00b      	beq.n	800e33a <tcp_output+0x1ae>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d110      	bne.n	800e34e <tcp_output+0x1c2>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e330:	891a      	ldrh	r2, [r3, #8]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e336:	429a      	cmp	r2, r3
 800e338:	d209      	bcs.n	800e34e <tcp_output+0x1c2>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e340:	2b00      	cmp	r3, #0
 800e342:	d004      	beq.n	800e34e <tcp_output+0x1c2>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e34a:	2b08      	cmp	r3, #8
 800e34c:	d901      	bls.n	800e352 <tcp_output+0x1c6>
 800e34e:	2301      	movs	r3, #1
 800e350:	e000      	b.n	800e354 <tcp_output+0x1c8>
 800e352:	2300      	movs	r3, #0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d106      	bne.n	800e366 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	7e9b      	ldrb	r3, [r3, #26]
 800e35c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e360:	2b00      	cmp	r3, #0
 800e362:	f000 80e2 	beq.w	800e52a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	7d1b      	ldrb	r3, [r3, #20]
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d00d      	beq.n	800e38a <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	899b      	ldrh	r3, [r3, #12]
 800e374:	b29c      	uxth	r4, r3
 800e376:	2010      	movs	r0, #16
 800e378:	f7fa fc4b 	bl	8008c12 <lwip_htons>
 800e37c:	4603      	mov	r3, r0
 800e37e:	461a      	mov	r2, r3
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	4322      	orrs	r2, r4
 800e386:	b292      	uxth	r2, r2
 800e388:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	6879      	ldr	r1, [r7, #4]
 800e38e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e390:	f000 f8e2 	bl	800e558 <tcp_output_segment>
 800e394:	4603      	mov	r3, r0
 800e396:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d009      	beq.n	800e3b4 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	7e9b      	ldrb	r3, [r3, #26]
 800e3a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	769a      	strb	r2, [r3, #26]
      return err;
 800e3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3b2:	e0cd      	b.n	800e550 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7d1b      	ldrb	r3, [r3, #20]
 800e3c0:	2b02      	cmp	r3, #2
 800e3c2:	d006      	beq.n	800e3d2 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	7e9b      	ldrb	r3, [r3, #26]
 800e3c8:	f023 0303 	bic.w	r3, r3, #3
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fa fc27 	bl	8008c2c <lwip_htonl>
 800e3de:	4604      	mov	r4, r0
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	891b      	ldrh	r3, [r3, #8]
 800e3e4:	461d      	mov	r5, r3
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	899b      	ldrh	r3, [r3, #12]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fa fc0f 	bl	8008c12 <lwip_htons>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	f003 0303 	and.w	r3, r3, #3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <tcp_output+0x276>
 800e3fe:	2301      	movs	r3, #1
 800e400:	e000      	b.n	800e404 <tcp_output+0x278>
 800e402:	2300      	movs	r3, #0
 800e404:	442b      	add	r3, r5
 800e406:	4423      	add	r3, r4
 800e408:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	da02      	bge.n	800e41c <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	68ba      	ldr	r2, [r7, #8]
 800e41a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	891b      	ldrh	r3, [r3, #8]
 800e420:	461c      	mov	r4, r3
 800e422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	899b      	ldrh	r3, [r3, #12]
 800e428:	b29b      	uxth	r3, r3
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fa fbf1 	bl	8008c12 <lwip_htons>
 800e430:	4603      	mov	r3, r0
 800e432:	f003 0303 	and.w	r3, r3, #3
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00c      	beq.n	800e454 <tcp_output+0x2c8>
 800e43a:	2301      	movs	r3, #1
 800e43c:	e00b      	b.n	800e456 <tcp_output+0x2ca>
 800e43e:	bf00      	nop
 800e440:	0801452c 	.word	0x0801452c
 800e444:	08014930 	.word	0x08014930
 800e448:	08014590 	.word	0x08014590
 800e44c:	20006b9c 	.word	0x20006b9c
 800e450:	08014958 	.word	0x08014958
 800e454:	2300      	movs	r3, #0
 800e456:	4423      	add	r3, r4
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d049      	beq.n	800e4f0 <tcp_output+0x364>
      seg->next = NULL;
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	2200      	movs	r2, #0
 800e460:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e466:	2b00      	cmp	r3, #0
 800e468:	d105      	bne.n	800e476 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e46e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	623b      	str	r3, [r7, #32]
 800e474:	e03f      	b.n	800e4f6 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fa fbd5 	bl	8008c2c <lwip_htonl>
 800e482:	4604      	mov	r4, r0
 800e484:	6a3b      	ldr	r3, [r7, #32]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fa fbce 	bl	8008c2c <lwip_htonl>
 800e490:	4603      	mov	r3, r0
 800e492:	1ae3      	subs	r3, r4, r3
 800e494:	2b00      	cmp	r3, #0
 800e496:	da24      	bge.n	800e4e2 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	336c      	adds	r3, #108	; 0x6c
 800e49c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e49e:	e002      	b.n	800e4a6 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d011      	beq.n	800e4d2 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fa fbb8 	bl	8008c2c <lwip_htonl>
 800e4bc:	4604      	mov	r4, r0
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fa fbb1 	bl	8008c2c <lwip_htonl>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	dbe6      	blt.n	800e4a0 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	e009      	b.n	800e4f6 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4e6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e4e8:	6a3b      	ldr	r3, [r7, #32]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	623b      	str	r3, [r7, #32]
 800e4ee:	e002      	b.n	800e4f6 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e4f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4f2:	f7fc feab 	bl	800b24c <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d015      	beq.n	800e52e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fa fb8f 	bl	8008c2c <lwip_htonl>
 800e50e:	4602      	mov	r2, r0
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e518:	8912      	ldrh	r2, [r2, #8]
 800e51a:	4413      	add	r3, r2
  while (seg != NULL &&
 800e51c:	69ba      	ldr	r2, [r7, #24]
 800e51e:	429a      	cmp	r2, r3
 800e520:	f4bf aede 	bcs.w	800e2e0 <tcp_output+0x154>
  }
output_done:
 800e524:	e003      	b.n	800e52e <tcp_output+0x3a2>
    goto output_done;
 800e526:	bf00      	nop
 800e528:	e002      	b.n	800e530 <tcp_output+0x3a4>
      break;
 800e52a:	bf00      	nop
 800e52c:	e000      	b.n	800e530 <tcp_output+0x3a4>
output_done:
 800e52e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e534:	2b00      	cmp	r3, #0
 800e536:	d103      	bne.n	800e540 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	7e9b      	ldrb	r3, [r3, #26]
 800e544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3728      	adds	r7, #40	; 0x28
 800e554:	46bd      	mov	sp, r7
 800e556:	bdb0      	pop	{r4, r5, r7, pc}

0800e558 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e558:	b5b0      	push	{r4, r5, r7, lr}
 800e55a:	b08c      	sub	sp, #48	; 0x30
 800e55c:	af04      	add	r7, sp, #16
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	89db      	ldrh	r3, [r3, #14]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d001      	beq.n	800e572 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800e56e:	2300      	movs	r3, #0
 800e570:	e08a      	b.n	800e688 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	68dc      	ldr	r4, [r3, #12]
 800e57a:	4610      	mov	r0, r2
 800e57c:	f7fa fb56 	bl	8008c2c <lwip_htonl>
 800e580:	4603      	mov	r3, r0
 800e582:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	68dc      	ldr	r4, [r3, #12]
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7fa fb40 	bl	8008c12 <lwip_htons>
 800e592:	4603      	mov	r3, r0
 800e594:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e59e:	441a      	add	r2, r3
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	3314      	adds	r3, #20
 800e5aa:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	7a9b      	ldrb	r3, [r3, #10]
 800e5b0:	f003 0301 	and.w	r3, r3, #1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d014      	beq.n	800e5e2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	4619      	mov	r1, r3
 800e5be:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e5c2:	f7fd f8ab 	bl	800b71c <tcp_eff_send_mss_impl>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e5ca:	8b7b      	ldrh	r3, [r7, #26]
 800e5cc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fa fb2b 	bl	8008c2c <lwip_htonl>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	da02      	bge.n	800e5f2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d10c      	bne.n	800e614 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800e5fa:	4b25      	ldr	r3, [pc, #148]	; (800e690 <tcp_output_segment+0x138>)
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	4618      	mov	r0, r3
 800e60a:	f7fa fb0f 	bl	8008c2c <lwip_htonl>
 800e60e:	4602      	mov	r2, r0
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68da      	ldr	r2, [r3, #12]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	8959      	ldrh	r1, [r3, #10]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	8b3a      	ldrh	r2, [r7, #24]
 800e62e:	1a8a      	subs	r2, r1, r2
 800e630:	b292      	uxth	r2, r2
 800e632:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	8919      	ldrh	r1, [r3, #8]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	8b3a      	ldrh	r2, [r7, #24]
 800e640:	1a8a      	subs	r2, r1, r2
 800e642:	b292      	uxth	r2, r2
 800e644:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	68d2      	ldr	r2, [r2, #12]
 800e64e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	741a      	strb	r2, [r3, #16]
 800e658:	2200      	movs	r2, #0
 800e65a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6858      	ldr	r0, [r3, #4]
 800e660:	68b9      	ldr	r1, [r7, #8]
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	1d1c      	adds	r4, r3, #4
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	7a9d      	ldrb	r5, [r3, #10]
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	7a5b      	ldrb	r3, [r3, #9]
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	9202      	str	r2, [sp, #8]
 800e672:	2206      	movs	r2, #6
 800e674:	9201      	str	r2, [sp, #4]
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	462b      	mov	r3, r5
 800e67a:	4622      	mov	r2, r4
 800e67c:	f002 f9d2 	bl	8010a24 <ip4_output_if>
 800e680:	4603      	mov	r3, r0
 800e682:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800e684:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3720      	adds	r7, #32
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bdb0      	pop	{r4, r5, r7, pc}
 800e690:	20006b8c 	.word	0x20006b8c

0800e694 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b08c      	sub	sp, #48	; 0x30
 800e698:	af04      	add	r7, sp, #16
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
 800e6a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	2114      	movs	r1, #20
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	f7fb f86e 	bl	8009788 <pbuf_alloc>
 800e6ac:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d05b      	beq.n	800e76c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	895b      	ldrh	r3, [r3, #10]
 800e6b8:	2b13      	cmp	r3, #19
 800e6ba:	d806      	bhi.n	800e6ca <tcp_rst+0x36>
 800e6bc:	4b2d      	ldr	r3, [pc, #180]	; (800e774 <tcp_rst+0xe0>)
 800e6be:	f240 524c 	movw	r2, #1356	; 0x54c
 800e6c2:	492d      	ldr	r1, [pc, #180]	; (800e778 <tcp_rst+0xe4>)
 800e6c4:	482d      	ldr	r0, [pc, #180]	; (800e77c <tcp_rst+0xe8>)
 800e6c6:	f003 fb8f 	bl	8011de8 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800e6d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fa fa9d 	bl	8008c12 <lwip_htons>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	461a      	mov	r2, r3
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800e6e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fa fa95 	bl	8008c12 <lwip_htons>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f7fa fa9b 	bl	8008c2c <lwip_htonl>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800e6fc:	68b8      	ldr	r0, [r7, #8]
 800e6fe:	f7fa fa95 	bl	8008c2c <lwip_htonl>
 800e702:	4602      	mov	r2, r0
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800e708:	f245 0014 	movw	r0, #20500	; 0x5014
 800e70c:	f7fa fa81 	bl	8008c12 <lwip_htons>
 800e710:	4603      	mov	r3, r0
 800e712:	461a      	mov	r2, r3
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f042 0208 	orr.w	r2, r2, #8
 800e720:	739a      	strb	r2, [r3, #14]
 800e722:	2200      	movs	r2, #0
 800e724:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e728:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	2200      	movs	r2, #0
 800e72e:	741a      	strb	r2, [r3, #16]
 800e730:	2200      	movs	r2, #0
 800e732:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	2200      	movs	r2, #0
 800e738:	749a      	strb	r2, [r3, #18]
 800e73a:	2200      	movs	r2, #0
 800e73c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800e73e:	6838      	ldr	r0, [r7, #0]
 800e740:	f001 ffc6 	bl	80106d0 <ip4_route>
 800e744:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00b      	beq.n	800e764 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	9302      	str	r3, [sp, #8]
 800e750:	2306      	movs	r3, #6
 800e752:	9301      	str	r3, [sp, #4]
 800e754:	2300      	movs	r3, #0
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	23ff      	movs	r3, #255	; 0xff
 800e75a:	683a      	ldr	r2, [r7, #0]
 800e75c:	6879      	ldr	r1, [r7, #4]
 800e75e:	69f8      	ldr	r0, [r7, #28]
 800e760:	f002 f960 	bl	8010a24 <ip4_output_if>
  }
  pbuf_free(p);
 800e764:	69f8      	ldr	r0, [r7, #28]
 800e766:	f7fb fb81 	bl	8009e6c <pbuf_free>
 800e76a:	e000      	b.n	800e76e <tcp_rst+0xda>
    return;
 800e76c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e76e:	3720      	adds	r7, #32
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	0801452c 	.word	0x0801452c
 800e778:	08014560 	.word	0x08014560
 800e77c:	08014590 	.word	0x08014590

0800e780 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d029      	beq.n	800e7e4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e794:	60fb      	str	r3, [r7, #12]
 800e796:	e002      	b.n	800e79e <tcp_rexmit_rto+0x1e>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1f8      	bne.n	800e798 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7c2:	2bff      	cmp	r3, #255	; 0xff
 800e7c4:	d007      	beq.n	800e7d6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f7ff fcd5 	bl	800e18c <tcp_output>
 800e7e2:	e000      	b.n	800e7e6 <tcp_rexmit_rto+0x66>
    return;
 800e7e4:	bf00      	nop
}
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e7ec:	b590      	push	{r4, r7, lr}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d043      	beq.n	800e884 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e800:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	3368      	adds	r3, #104	; 0x68
 800e80e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e810:	e002      	b.n	800e818 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d011      	beq.n	800e844 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fa f9ff 	bl	8008c2c <lwip_htonl>
 800e82e:	4604      	mov	r4, r0
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	4618      	mov	r0, r3
 800e838:	f7fa f9f8 	bl	8008c2c <lwip_htonl>
 800e83c:	4603      	mov	r3, r0
 800e83e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e840:	2b00      	cmp	r3, #0
 800e842:	dbe6      	blt.n	800e812 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d103      	bne.n	800e862 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e868:	2bff      	cmp	r3, #255	; 0xff
 800e86a:	d007      	beq.n	800e87c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e872:	3301      	adds	r3, #1
 800e874:	b2da      	uxtb	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	635a      	str	r2, [r3, #52]	; 0x34
 800e882:	e000      	b.n	800e886 <tcp_rexmit+0x9a>
    return;
 800e884:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd90      	pop	{r4, r7, pc}

0800e88c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d041      	beq.n	800e920 <tcp_rexmit_fast+0x94>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	7e9b      	ldrb	r3, [r3, #26]
 800e8a0:	f003 0304 	and.w	r3, r3, #4
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d13b      	bne.n	800e920 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7ff ff9f 	bl	800e7ec <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	bf28      	it	cs
 800e8be:	4613      	movcs	r3, r2
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	0fda      	lsrs	r2, r3, #31
 800e8c4:	4413      	add	r3, r2
 800e8c6:	105b      	asrs	r3, r3, #1
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8dc:	005b      	lsls	r3, r3, #1
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d206      	bcs.n	800e8f0 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	0049      	lsls	r1, r1, #1
 800e8fe:	440b      	add	r3, r1
 800e900:	b29b      	uxth	r3, r3
 800e902:	4413      	add	r3, r2
 800e904:	b29a      	uxth	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	7e9b      	ldrb	r3, [r3, #26]
 800e910:	f043 0304 	orr.w	r3, r3, #4
 800e914:	b2da      	uxtb	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b08a      	sub	sp, #40	; 0x28
 800e92c:	af04      	add	r7, sp, #16
 800e92e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e934:	3b01      	subs	r3, #1
 800e936:	4618      	mov	r0, r3
 800e938:	f7fa f978 	bl	8008c2c <lwip_htonl>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2200      	movs	r2, #0
 800e940:	2100      	movs	r1, #0
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff f988 	bl	800dc58 <tcp_output_alloc_header>
 800e948:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d102      	bne.n	800e956 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e950:	f04f 33ff 	mov.w	r3, #4294967295
 800e954:	e021      	b.n	800e99a <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	3304      	adds	r3, #4
 800e95a:	4618      	mov	r0, r3
 800e95c:	f001 feb8 	bl	80106d0 <ip4_route>
 800e960:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d102      	bne.n	800e96e <tcp_keepalive+0x46>
    err = ERR_RTE;
 800e968:	23fc      	movs	r3, #252	; 0xfc
 800e96a:	75fb      	strb	r3, [r7, #23]
 800e96c:	e010      	b.n	800e990 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800e96e:	6879      	ldr	r1, [r7, #4]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	1d1a      	adds	r2, r3, #4
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	7a98      	ldrb	r0, [r3, #10]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	9302      	str	r3, [sp, #8]
 800e97c:	2306      	movs	r3, #6
 800e97e:	9301      	str	r3, [sp, #4]
 800e980:	2300      	movs	r3, #0
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	4603      	mov	r3, r0
 800e986:	6938      	ldr	r0, [r7, #16]
 800e988:	f002 f84c 	bl	8010a24 <ip4_output_if>
 800e98c:	4603      	mov	r3, r0
 800e98e:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e990:	6938      	ldr	r0, [r7, #16]
 800e992:	f7fb fa6b 	bl	8009e6c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e996:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3718      	adds	r7, #24
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e9a2:	b590      	push	{r4, r7, lr}
 800e9a4:	b08f      	sub	sp, #60	; 0x3c
 800e9a6:	af04      	add	r7, sp, #16
 800e9a8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9ae:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d102      	bne.n	800e9bc <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ba:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	e085      	b.n	800ead2 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	899b      	ldrh	r3, [r3, #12]
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fa f91f 	bl	8008c12 <lwip_htons>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	f003 0301 	and.w	r3, r3, #1
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d005      	beq.n	800e9ea <tcp_zero_window_probe+0x48>
 800e9de:	6a3b      	ldr	r3, [r7, #32]
 800e9e0:	891b      	ldrh	r3, [r3, #8]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <tcp_zero_window_probe+0x48>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	e000      	b.n	800e9ec <tcp_zero_window_probe+0x4a>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e9ee:	7ffb      	ldrb	r3, [r7, #31]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	bf0c      	ite	eq
 800e9f4:	2301      	moveq	r3, #1
 800e9f6:	2300      	movne	r3, #0
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e9fc:	6a3b      	ldr	r3, [r7, #32]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	8bba      	ldrh	r2, [r7, #28]
 800ea04:	2100      	movs	r1, #0
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7ff f926 	bl	800dc58 <tcp_output_alloc_header>
 800ea0c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d102      	bne.n	800ea1a <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ea14:	f04f 33ff 	mov.w	r3, #4294967295
 800ea18:	e05b      	b.n	800ead2 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ea20:	7ffb      	ldrb	r3, [r7, #31]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d00e      	beq.n	800ea44 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	899b      	ldrh	r3, [r3, #12]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea30:	b29c      	uxth	r4, r3
 800ea32:	2011      	movs	r0, #17
 800ea34:	f7fa f8ed 	bl	8008c12 <lwip_htons>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	4323      	orrs	r3, r4
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	819a      	strh	r2, [r3, #12]
 800ea42:	e010      	b.n	800ea66 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	3314      	adds	r3, #20
 800ea4a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	6858      	ldr	r0, [r3, #4]
 800ea50:	6a3b      	ldr	r3, [r7, #32]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	891a      	ldrh	r2, [r3, #8]
 800ea56:	6a3b      	ldr	r3, [r7, #32]
 800ea58:	891b      	ldrh	r3, [r3, #8]
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	2201      	movs	r2, #1
 800ea60:	6939      	ldr	r1, [r7, #16]
 800ea62:	f7fb fc01 	bl	800a268 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ea66:	6a3b      	ldr	r3, [r7, #32]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7fa f8dd 	bl	8008c2c <lwip_htonl>
 800ea72:	4603      	mov	r3, r0
 800ea74:	3301      	adds	r3, #1
 800ea76:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	da02      	bge.n	800ea8a <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3304      	adds	r3, #4
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f001 fe1e 	bl	80106d0 <ip4_route>
 800ea94:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d103      	bne.n	800eaa4 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800ea9c:	23fc      	movs	r3, #252	; 0xfc
 800ea9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eaa2:	e011      	b.n	800eac8 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eaa4:	6879      	ldr	r1, [r7, #4]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	1d1a      	adds	r2, r3, #4
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	7a98      	ldrb	r0, [r3, #10]
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	9302      	str	r3, [sp, #8]
 800eab2:	2306      	movs	r3, #6
 800eab4:	9301      	str	r3, [sp, #4]
 800eab6:	2300      	movs	r3, #0
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	4603      	mov	r3, r0
 800eabc:	69b8      	ldr	r0, [r7, #24]
 800eabe:	f001 ffb1 	bl	8010a24 <ip4_output_if>
 800eac2:	4603      	mov	r3, r0
 800eac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800eac8:	69b8      	ldr	r0, [r7, #24]
 800eaca:	f7fb f9cf 	bl	8009e6c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	372c      	adds	r7, #44	; 0x2c
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd90      	pop	{r4, r7, pc}
	...

0800eadc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eae4:	f7fb fcd2 	bl	800a48c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eae8:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <tcpip_tcp_timer+0x38>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d103      	bne.n	800eaf8 <tcpip_tcp_timer+0x1c>
 800eaf0:	4b09      	ldr	r3, [pc, #36]	; (800eb18 <tcpip_tcp_timer+0x3c>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d005      	beq.n	800eb04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4908      	ldr	r1, [pc, #32]	; (800eb1c <tcpip_tcp_timer+0x40>)
 800eafc:	20fa      	movs	r0, #250	; 0xfa
 800eafe:	f000 f86f 	bl	800ebe0 <sys_timeout>
 800eb02:	e003      	b.n	800eb0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eb04:	4b06      	ldr	r3, [pc, #24]	; (800eb20 <tcpip_tcp_timer+0x44>)
 800eb06:	2200      	movs	r2, #0
 800eb08:	601a      	str	r2, [r3, #0]
  }
}
 800eb0a:	bf00      	nop
 800eb0c:	bf00      	nop
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	20006b88 	.word	0x20006b88
 800eb18:	20006b98 	.word	0x20006b98
 800eb1c:	0800eadd 	.word	0x0800eadd
 800eb20:	20000448 	.word	0x20000448

0800eb24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eb28:	4b0a      	ldr	r3, [pc, #40]	; (800eb54 <tcp_timer_needed+0x30>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10f      	bne.n	800eb50 <tcp_timer_needed+0x2c>
 800eb30:	4b09      	ldr	r3, [pc, #36]	; (800eb58 <tcp_timer_needed+0x34>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d103      	bne.n	800eb40 <tcp_timer_needed+0x1c>
 800eb38:	4b08      	ldr	r3, [pc, #32]	; (800eb5c <tcp_timer_needed+0x38>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d007      	beq.n	800eb50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eb40:	4b04      	ldr	r3, [pc, #16]	; (800eb54 <tcp_timer_needed+0x30>)
 800eb42:	2201      	movs	r2, #1
 800eb44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb46:	2200      	movs	r2, #0
 800eb48:	4905      	ldr	r1, [pc, #20]	; (800eb60 <tcp_timer_needed+0x3c>)
 800eb4a:	20fa      	movs	r0, #250	; 0xfa
 800eb4c:	f000 f848 	bl	800ebe0 <sys_timeout>
  }
}
 800eb50:	bf00      	nop
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	20000448 	.word	0x20000448
 800eb58:	20006b88 	.word	0x20006b88
 800eb5c:	20006b98 	.word	0x20006b98
 800eb60:	0800eadd 	.word	0x0800eadd

0800eb64 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	4903      	ldr	r1, [pc, #12]	; (800eb8c <cyclic_timer+0x28>)
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f000 f82e 	bl	800ebe0 <sys_timeout>
}
 800eb84:	bf00      	nop
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	0800eb65 	.word	0x0800eb65

0800eb90 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eb96:	2301      	movs	r3, #1
 800eb98:	607b      	str	r3, [r7, #4]
 800eb9a:	e00e      	b.n	800ebba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800eb9c:	4a0d      	ldr	r2, [pc, #52]	; (800ebd4 <sys_timeouts_init+0x44>)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	00db      	lsls	r3, r3, #3
 800eba8:	4a0a      	ldr	r2, [pc, #40]	; (800ebd4 <sys_timeouts_init+0x44>)
 800ebaa:	4413      	add	r3, r2
 800ebac:	461a      	mov	r2, r3
 800ebae:	490a      	ldr	r1, [pc, #40]	; (800ebd8 <sys_timeouts_init+0x48>)
 800ebb0:	f000 f816 	bl	800ebe0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	607b      	str	r3, [r7, #4]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d9ed      	bls.n	800eb9c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800ebc0:	f7f9 ff9a 	bl	8008af8 <sys_now>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	4a05      	ldr	r2, [pc, #20]	; (800ebdc <sys_timeouts_init+0x4c>)
 800ebc8:	6013      	str	r3, [r2, #0]
}
 800ebca:	bf00      	nop
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	080152f8 	.word	0x080152f8
 800ebd8:	0800eb65 	.word	0x0800eb65
 800ebdc:	20000444 	.word	0x20000444

0800ebe0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b088      	sub	sp, #32
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ebec:	2006      	movs	r0, #6
 800ebee:	f7fa fbb9 	bl	8009364 <memp_malloc>
 800ebf2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d10a      	bne.n	800ec10 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f040 8084 	bne.w	800ed0a <sys_timeout+0x12a>
 800ec02:	4b44      	ldr	r3, [pc, #272]	; (800ed14 <sys_timeout+0x134>)
 800ec04:	22d4      	movs	r2, #212	; 0xd4
 800ec06:	4944      	ldr	r1, [pc, #272]	; (800ed18 <sys_timeout+0x138>)
 800ec08:	4844      	ldr	r0, [pc, #272]	; (800ed1c <sys_timeout+0x13c>)
 800ec0a:	f003 f8ed 	bl	8011de8 <iprintf>
    return;
 800ec0e:	e07c      	b.n	800ed0a <sys_timeout+0x12a>
  }

  now = sys_now();
 800ec10:	f7f9 ff72 	bl	8008af8 <sys_now>
 800ec14:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800ec16:	4b42      	ldr	r3, [pc, #264]	; (800ed20 <sys_timeout+0x140>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d105      	bne.n	800ec2a <sys_timeout+0x4a>
    diff = 0;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800ec22:	4a40      	ldr	r2, [pc, #256]	; (800ed24 <sys_timeout+0x144>)
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	e004      	b.n	800ec34 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800ec2a:	4b3e      	ldr	r3, [pc, #248]	; (800ed24 <sys_timeout+0x144>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	693a      	ldr	r2, [r7, #16]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	2200      	movs	r2, #0
 800ec38:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	441a      	add	r2, r3
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ec50:	4b33      	ldr	r3, [pc, #204]	; (800ed20 <sys_timeout+0x140>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d103      	bne.n	800ec60 <sys_timeout+0x80>
    next_timeout = timeout;
 800ec58:	4a31      	ldr	r2, [pc, #196]	; (800ed20 <sys_timeout+0x140>)
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	6013      	str	r3, [r2, #0]
    return;
 800ec5e:	e055      	b.n	800ed0c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800ec60:	4b2f      	ldr	r3, [pc, #188]	; (800ed20 <sys_timeout+0x140>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d20f      	bcs.n	800ec8c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800ec6c:	4b2c      	ldr	r3, [pc, #176]	; (800ed20 <sys_timeout+0x140>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6859      	ldr	r1, [r3, #4]
 800ec72:	4b2b      	ldr	r3, [pc, #172]	; (800ed20 <sys_timeout+0x140>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	1a8a      	subs	r2, r1, r2
 800ec7a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800ec7c:	4b28      	ldr	r3, [pc, #160]	; (800ed20 <sys_timeout+0x140>)
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ec84:	4a26      	ldr	r2, [pc, #152]	; (800ed20 <sys_timeout+0x140>)
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6013      	str	r3, [r2, #0]
 800ec8a:	e03f      	b.n	800ed0c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec8c:	4b24      	ldr	r3, [pc, #144]	; (800ed20 <sys_timeout+0x140>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	61fb      	str	r3, [r7, #28]
 800ec92:	e036      	b.n	800ed02 <sys_timeout+0x122>
      timeout->time -= t->time;
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	1ad2      	subs	r2, r2, r3
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d006      	beq.n	800ecb8 <sys_timeout+0xd8>
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	685a      	ldr	r2, [r3, #4]
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d921      	bls.n	800ecfc <sys_timeout+0x11c>
        if (t->next != NULL) {
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d009      	beq.n	800ecd4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	6859      	ldr	r1, [r3, #4]
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	685a      	ldr	r2, [r3, #4]
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	1a8a      	subs	r2, r1, r2
 800ecd0:	605a      	str	r2, [r3, #4]
 800ecd2:	e00b      	b.n	800ecec <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	68fa      	ldr	r2, [r7, #12]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d206      	bcs.n	800ecec <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800ecde:	4b10      	ldr	r3, [pc, #64]	; (800ed20 <sys_timeout+0x140>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	685a      	ldr	r2, [r3, #4]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	441a      	add	r2, r3
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	697a      	ldr	r2, [r7, #20]
 800ecf8:	601a      	str	r2, [r3, #0]
        break;
 800ecfa:	e007      	b.n	800ed0c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	61fb      	str	r3, [r7, #28]
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1c5      	bne.n	800ec94 <sys_timeout+0xb4>
 800ed08:	e000      	b.n	800ed0c <sys_timeout+0x12c>
    return;
 800ed0a:	bf00      	nop
      }
    }
  }
}
 800ed0c:	3720      	adds	r7, #32
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	08014970 	.word	0x08014970
 800ed18:	080149a4 	.word	0x080149a4
 800ed1c:	080149e4 	.word	0x080149e4
 800ed20:	20000440 	.word	0x20000440
 800ed24:	20000444 	.word	0x20000444

0800ed28 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b086      	sub	sp, #24
 800ed2c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800ed2e:	4b24      	ldr	r3, [pc, #144]	; (800edc0 <sys_check_timeouts+0x98>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d040      	beq.n	800edb8 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800ed36:	f7f9 fedf 	bl	8008af8 <sys_now>
 800ed3a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800ed3c:	4b21      	ldr	r3, [pc, #132]	; (800edc4 <sys_check_timeouts+0x9c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	1ad3      	subs	r3, r2, r3
 800ed44:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800ed46:	4b20      	ldr	r3, [pc, #128]	; (800edc8 <sys_check_timeouts+0xa0>)
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <sys_check_timeouts+0x2c>
 800ed50:	f7fa fcea 	bl	8009728 <pbuf_free_ooseq>
      had_one = 0;
 800ed54:	2300      	movs	r3, #0
 800ed56:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800ed58:	4b19      	ldr	r3, [pc, #100]	; (800edc0 <sys_check_timeouts+0x98>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d026      	beq.n	800edb2 <sys_check_timeouts+0x8a>
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	697a      	ldr	r2, [r7, #20]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d321      	bcc.n	800edb2 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	685a      	ldr	r2, [r3, #4]
 800ed76:	4b13      	ldr	r3, [pc, #76]	; (800edc4 <sys_check_timeouts+0x9c>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	4a11      	ldr	r2, [pc, #68]	; (800edc4 <sys_check_timeouts+0x9c>)
 800ed7e:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	1ad3      	subs	r3, r2, r3
 800ed88:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a0c      	ldr	r2, [pc, #48]	; (800edc0 <sys_check_timeouts+0x98>)
 800ed90:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ed9e:	68b9      	ldr	r1, [r7, #8]
 800eda0:	2006      	movs	r0, #6
 800eda2:	f7fa fb2b 	bl	80093fc <memp_free>
        if (handler != NULL) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d002      	beq.n	800edb2 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6838      	ldr	r0, [r7, #0]
 800edb0:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800edb2:	7cfb      	ldrb	r3, [r7, #19]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d1c6      	bne.n	800ed46 <sys_check_timeouts+0x1e>
  }
}
 800edb8:	bf00      	nop
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	20000440 	.word	0x20000440
 800edc4:	20000444 	.word	0x20000444
 800edc8:	20006b80 	.word	0x20006b80

0800edcc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800edcc:	b480      	push	{r7}
 800edce:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800edd0:	bf00      	nop
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bc80      	pop	{r7}
 800edd6:	4770      	bx	lr

0800edd8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ede2:	4b17      	ldr	r3, [pc, #92]	; (800ee40 <udp_new_port+0x68>)
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	1c5a      	adds	r2, r3, #1
 800ede8:	b291      	uxth	r1, r2
 800edea:	4a15      	ldr	r2, [pc, #84]	; (800ee40 <udp_new_port+0x68>)
 800edec:	8011      	strh	r1, [r2, #0]
 800edee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d103      	bne.n	800edfe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800edf6:	4b12      	ldr	r3, [pc, #72]	; (800ee40 <udp_new_port+0x68>)
 800edf8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800edfc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800edfe:	4b11      	ldr	r3, [pc, #68]	; (800ee44 <udp_new_port+0x6c>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	603b      	str	r3, [r7, #0]
 800ee04:	e011      	b.n	800ee2a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	8a5a      	ldrh	r2, [r3, #18]
 800ee0a:	4b0d      	ldr	r3, [pc, #52]	; (800ee40 <udp_new_port+0x68>)
 800ee0c:	881b      	ldrh	r3, [r3, #0]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d108      	bne.n	800ee24 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ee12:	88fb      	ldrh	r3, [r7, #6]
 800ee14:	3301      	adds	r3, #1
 800ee16:	80fb      	strh	r3, [r7, #6]
 800ee18:	88fb      	ldrh	r3, [r7, #6]
 800ee1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee1e:	d3e0      	bcc.n	800ede2 <udp_new_port+0xa>
        return 0;
 800ee20:	2300      	movs	r3, #0
 800ee22:	e007      	b.n	800ee34 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	603b      	str	r3, [r7, #0]
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d1ea      	bne.n	800ee06 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ee30:	4b03      	ldr	r3, [pc, #12]	; (800ee40 <udp_new_port+0x68>)
 800ee32:	881b      	ldrh	r3, [r3, #0]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bc80      	pop	{r7}
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	20000014 	.word	0x20000014
 800ee44:	20006ba0 	.word	0x20006ba0

0800ee48 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	4613      	mov	r3, r2
 800ee54:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ee56:	79fb      	ldrb	r3, [r7, #7]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d018      	beq.n	800ee8e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d013      	beq.n	800ee8a <udp_input_local_match+0x42>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00f      	beq.n	800ee8a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee6a:	4b13      	ldr	r3, [pc, #76]	; (800eeb8 <udp_input_local_match+0x70>)
 800ee6c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee72:	d00a      	beq.n	800ee8a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	4b0f      	ldr	r3, [pc, #60]	; (800eeb8 <udp_input_local_match+0x70>)
 800ee7a:	695b      	ldr	r3, [r3, #20]
 800ee7c:	405a      	eors	r2, r3
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	3308      	adds	r3, #8
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d110      	bne.n	800eeac <udp_input_local_match+0x64>
          return 1;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e00f      	b.n	800eeae <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d009      	beq.n	800eea8 <udp_input_local_match+0x60>
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d005      	beq.n	800eea8 <udp_input_local_match+0x60>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	4b05      	ldr	r3, [pc, #20]	; (800eeb8 <udp_input_local_match+0x70>)
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d101      	bne.n	800eeac <udp_input_local_match+0x64>
      return 1;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e000      	b.n	800eeae <udp_input_local_match+0x66>
    }
  }

  return 0;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3714      	adds	r7, #20
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bc80      	pop	{r7}
 800eeb6:	4770      	bx	lr
 800eeb8:	20003658 	.word	0x20003658

0800eebc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eebc:	b590      	push	{r4, r7, lr}
 800eebe:	b08d      	sub	sp, #52	; 0x34
 800eec0:	af02      	add	r7, sp, #8
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800eec6:	2300      	movs	r3, #0
 800eec8:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	895b      	ldrh	r3, [r3, #10]
 800eece:	2b07      	cmp	r3, #7
 800eed0:	d803      	bhi.n	800eeda <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fa ffca 	bl	8009e6c <pbuf_free>
    goto end;
 800eed8:	e0c6      	b.n	800f068 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eee0:	4b63      	ldr	r3, [pc, #396]	; (800f070 <udp_input+0x1b4>)
 800eee2:	695b      	ldr	r3, [r3, #20]
 800eee4:	4a62      	ldr	r2, [pc, #392]	; (800f070 <udp_input+0x1b4>)
 800eee6:	6812      	ldr	r2, [r2, #0]
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f001 fe6c 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 800eef0:	4603      	mov	r3, r0
 800eef2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	881b      	ldrh	r3, [r3, #0]
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7f9 fe89 	bl	8008c12 <lwip_htons>
 800ef00:	4603      	mov	r3, r0
 800ef02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	885b      	ldrh	r3, [r3, #2]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7f9 fe81 	bl	8008c12 <lwip_htons>
 800ef10:	4603      	mov	r3, r0
 800ef12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ef14:	2300      	movs	r3, #0
 800ef16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef20:	4b54      	ldr	r3, [pc, #336]	; (800f074 <udp_input+0x1b8>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	627b      	str	r3, [r7, #36]	; 0x24
 800ef26:	e03b      	b.n	800efa0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2a:	8a5b      	ldrh	r3, [r3, #18]
 800ef2c:	89fa      	ldrh	r2, [r7, #14]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d131      	bne.n	800ef96 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ef32:	7cfb      	ldrb	r3, [r7, #19]
 800ef34:	461a      	mov	r2, r3
 800ef36:	6839      	ldr	r1, [r7, #0]
 800ef38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef3a:	f7ff ff85 	bl	800ee48 <udp_input_local_match>
 800ef3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d028      	beq.n	800ef96 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef46:	7c1b      	ldrb	r3, [r3, #16]
 800ef48:	f003 0304 	and.w	r3, r3, #4
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d104      	bne.n	800ef5a <udp_input+0x9e>
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d101      	bne.n	800ef5a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ef5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5c:	8a9b      	ldrh	r3, [r3, #20]
 800ef5e:	8a3a      	ldrh	r2, [r7, #16]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d118      	bne.n	800ef96 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d005      	beq.n	800ef78 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	4b3f      	ldr	r3, [pc, #252]	; (800f070 <udp_input+0x1b4>)
 800ef72:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d10e      	bne.n	800ef96 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d014      	beq.n	800efa8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ef7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef80:	68da      	ldr	r2, [r3, #12]
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ef86:	4b3b      	ldr	r3, [pc, #236]	; (800f074 <udp_input+0x1b8>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ef8e:	4a39      	ldr	r2, [pc, #228]	; (800f074 <udp_input+0x1b8>)
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ef94:	e008      	b.n	800efa8 <udp_input+0xec>
      }
    }

    prev = pcb;
 800ef96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef98:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	627b      	str	r3, [r7, #36]	; 0x24
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1c0      	bne.n	800ef28 <udp_input+0x6c>
 800efa6:	e000      	b.n	800efaa <udp_input+0xee>
        break;
 800efa8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	2b00      	cmp	r3, #0
 800efae:	d101      	bne.n	800efb4 <udp_input+0xf8>
    pcb = uncon_pcb;
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d002      	beq.n	800efc0 <udp_input+0x104>
    for_us = 1;
 800efba:	2301      	movs	r3, #1
 800efbc:	76fb      	strb	r3, [r7, #27]
 800efbe:	e00a      	b.n	800efd6 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	3304      	adds	r3, #4
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	4b2a      	ldr	r3, [pc, #168]	; (800f070 <udp_input+0x1b4>)
 800efc8:	695b      	ldr	r3, [r3, #20]
 800efca:	429a      	cmp	r2, r3
 800efcc:	bf0c      	ite	eq
 800efce:	2301      	moveq	r3, #1
 800efd0:	2300      	movne	r3, #0
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800efd6:	7efb      	ldrb	r3, [r7, #27]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d042      	beq.n	800f062 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800efdc:	f06f 0107 	mvn.w	r1, #7
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f7fa ff1f 	bl	8009e24 <pbuf_header>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00a      	beq.n	800f002 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800efec:	4b22      	ldr	r3, [pc, #136]	; (800f078 <udp_input+0x1bc>)
 800efee:	f240 1255 	movw	r2, #341	; 0x155
 800eff2:	4922      	ldr	r1, [pc, #136]	; (800f07c <udp_input+0x1c0>)
 800eff4:	4822      	ldr	r0, [pc, #136]	; (800f080 <udp_input+0x1c4>)
 800eff6:	f002 fef7 	bl	8011de8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7fa ff36 	bl	8009e6c <pbuf_free>
      goto end;
 800f000:	e032      	b.n	800f068 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f004:	2b00      	cmp	r3, #0
 800f006:	d012      	beq.n	800f02e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	699b      	ldr	r3, [r3, #24]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00a      	beq.n	800f026 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	699c      	ldr	r4, [r3, #24]
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	69d8      	ldr	r0, [r3, #28]
 800f018:	8a3b      	ldrh	r3, [r7, #16]
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	4b19      	ldr	r3, [pc, #100]	; (800f084 <udp_input+0x1c8>)
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f022:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f024:	e021      	b.n	800f06a <udp_input+0x1ae>
        pbuf_free(p);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7fa ff20 	bl	8009e6c <pbuf_free>
        goto end;
 800f02c:	e01c      	b.n	800f068 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f02e:	7cfb      	ldrb	r3, [r7, #19]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d112      	bne.n	800f05a <udp_input+0x19e>
 800f034:	4b0e      	ldr	r3, [pc, #56]	; (800f070 <udp_input+0x1b4>)
 800f036:	695b      	ldr	r3, [r3, #20]
 800f038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f03c:	2be0      	cmp	r3, #224	; 0xe0
 800f03e:	d00c      	beq.n	800f05a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f040:	4b0b      	ldr	r3, [pc, #44]	; (800f070 <udp_input+0x1b4>)
 800f042:	899b      	ldrh	r3, [r3, #12]
 800f044:	3308      	adds	r3, #8
 800f046:	b29b      	uxth	r3, r3
 800f048:	b21b      	sxth	r3, r3
 800f04a:	4619      	mov	r1, r3
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7fa fefb 	bl	8009e48 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f052:	2103      	movs	r1, #3
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f001 fab3 	bl	80105c0 <icmp_dest_unreach>
      pbuf_free(p);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f7fa ff06 	bl	8009e6c <pbuf_free>
  return;
 800f060:	e003      	b.n	800f06a <udp_input+0x1ae>
    pbuf_free(p);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7fa ff02 	bl	8009e6c <pbuf_free>
  return;
 800f068:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f06a:	372c      	adds	r7, #44	; 0x2c
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd90      	pop	{r4, r7, pc}
 800f070:	20003658 	.word	0x20003658
 800f074:	20006ba0 	.word	0x20006ba0
 800f078:	08014a0c 	.word	0x08014a0c
 800f07c:	08014a3c 	.word	0x08014a3c
 800f080:	08014a50 	.word	0x08014a50
 800f084:	20003668 	.word	0x20003668

0800f088 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d102      	bne.n	800f09e <udp_send+0x16>
    return ERR_VAL;
 800f098:	f06f 0305 	mvn.w	r3, #5
 800f09c:	e008      	b.n	800f0b0 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	1d1a      	adds	r2, r3, #4
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	8a9b      	ldrh	r3, [r3, #20]
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 f805 	bl	800f0b8 <udp_sendto>
 800f0ae:	4603      	mov	r3, r0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b088      	sub	sp, #32
 800f0bc:	af02      	add	r7, sp, #8
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
 800f0c4:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d002      	beq.n	800f0d6 <udp_sendto+0x1e>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <udp_sendto+0x24>
    return ERR_VAL;
 800f0d6:	f06f 0305 	mvn.w	r3, #5
 800f0da:	e013      	b.n	800f104 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800f0dc:	6978      	ldr	r0, [r7, #20]
 800f0de:	f001 faf7 	bl	80106d0 <ip4_route>
 800f0e2:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d102      	bne.n	800f0f0 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800f0ea:	f06f 0303 	mvn.w	r3, #3
 800f0ee:	e009      	b.n	800f104 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f0f0:	887a      	ldrh	r2, [r7, #2]
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	68b9      	ldr	r1, [r7, #8]
 800f0fc:	68f8      	ldr	r0, [r7, #12]
 800f0fe:	f000 f805 	bl	800f10c <udp_sendto_if>
 800f102:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f104:	4618      	mov	r0, r3
 800f106:	3718      	adds	r7, #24
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b088      	sub	sp, #32
 800f110:	af02      	add	r7, sp, #8
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
 800f118:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d002      	beq.n	800f126 <udp_sendto_if+0x1a>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d102      	bne.n	800f12c <udp_sendto_if+0x20>
    return ERR_VAL;
 800f126:	f06f 0305 	mvn.w	r3, #5
 800f12a:	e028      	b.n	800f17e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d009      	beq.n	800f146 <udp_sendto_if+0x3a>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d005      	beq.n	800f146 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f142:	2be0      	cmp	r3, #224	; 0xe0
 800f144:	d103      	bne.n	800f14e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800f146:	6a3b      	ldr	r3, [r7, #32]
 800f148:	3304      	adds	r3, #4
 800f14a:	617b      	str	r3, [r7, #20]
 800f14c:	e00b      	b.n	800f166 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	6a3b      	ldr	r3, [r7, #32]
 800f154:	3304      	adds	r3, #4
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d002      	beq.n	800f162 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800f15c:	f06f 0303 	mvn.w	r3, #3
 800f160:	e00d      	b.n	800f17e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f166:	887a      	ldrh	r2, [r7, #2]
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	6a3b      	ldr	r3, [r7, #32]
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	4613      	mov	r3, r2
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	68b9      	ldr	r1, [r7, #8]
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	f000 f806 	bl	800f188 <udp_sendto_if_src>
 800f17c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3718      	adds	r7, #24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
	...

0800f188 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08c      	sub	sp, #48	; 0x30
 800f18c:	af04      	add	r7, sp, #16
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d002      	beq.n	800f1a2 <udp_sendto_if_src+0x1a>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d102      	bne.n	800f1a8 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800f1a2:	f06f 0305 	mvn.w	r3, #5
 800f1a6:	e07e      	b.n	800f2a6 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	8a5b      	ldrh	r3, [r3, #18]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d10f      	bne.n	800f1d0 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f1b0:	68f9      	ldr	r1, [r7, #12]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	8a5b      	ldrh	r3, [r3, #18]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f000 f87f 	bl	800f2bc <udp_bind>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f1c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f1ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f1ce:	e06a      	b.n	800f2a6 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800f1d0:	2108      	movs	r1, #8
 800f1d2:	68b8      	ldr	r0, [r7, #8]
 800f1d4:	f7fa fe26 	bl	8009e24 <pbuf_header>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d014      	beq.n	800f208 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f1de:	2200      	movs	r2, #0
 800f1e0:	2108      	movs	r1, #8
 800f1e2:	2001      	movs	r0, #1
 800f1e4:	f7fa fad0 	bl	8009788 <pbuf_alloc>
 800f1e8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d102      	bne.n	800f1f6 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f4:	e057      	b.n	800f2a6 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	891b      	ldrh	r3, [r3, #8]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d006      	beq.n	800f20c <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f1fe:	68b9      	ldr	r1, [r7, #8]
 800f200:	69f8      	ldr	r0, [r7, #28]
 800f202:	f7fa ff55 	bl	800a0b0 <pbuf_chain>
 800f206:	e001      	b.n	800f20c <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	895b      	ldrh	r3, [r3, #10]
 800f210:	2b07      	cmp	r3, #7
 800f212:	d806      	bhi.n	800f222 <udp_sendto_if_src+0x9a>
 800f214:	4b26      	ldr	r3, [pc, #152]	; (800f2b0 <udp_sendto_if_src+0x128>)
 800f216:	f240 22db 	movw	r2, #731	; 0x2db
 800f21a:	4926      	ldr	r1, [pc, #152]	; (800f2b4 <udp_sendto_if_src+0x12c>)
 800f21c:	4826      	ldr	r0, [pc, #152]	; (800f2b8 <udp_sendto_if_src+0x130>)
 800f21e:	f002 fde3 	bl	8011de8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	8a5b      	ldrh	r3, [r3, #18]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7f9 fcf0 	bl	8008c12 <lwip_htons>
 800f232:	4603      	mov	r3, r0
 800f234:	461a      	mov	r2, r3
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f23a:	887b      	ldrh	r3, [r7, #2]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7f9 fce8 	bl	8008c12 <lwip_htons>
 800f242:	4603      	mov	r3, r0
 800f244:	461a      	mov	r2, r3
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	2200      	movs	r2, #0
 800f24e:	719a      	strb	r2, [r3, #6]
 800f250:	2200      	movs	r2, #0
 800f252:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	891b      	ldrh	r3, [r3, #8]
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f9 fcda 	bl	8008c12 <lwip_htons>
 800f25e:	4603      	mov	r3, r0
 800f260:	461a      	mov	r2, r3
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f266:	2311      	movs	r3, #17
 800f268:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	7a9b      	ldrb	r3, [r3, #10]
 800f26e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	7a5b      	ldrb	r3, [r3, #9]
 800f274:	7cb9      	ldrb	r1, [r7, #18]
 800f276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f278:	9202      	str	r2, [sp, #8]
 800f27a:	7cfa      	ldrb	r2, [r7, #19]
 800f27c:	9201      	str	r2, [sp, #4]
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	460b      	mov	r3, r1
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f286:	69f8      	ldr	r0, [r7, #28]
 800f288:	f001 fbf6 	bl	8010a78 <ip4_output_if_src>
 800f28c:	4603      	mov	r3, r0
 800f28e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f290:	69fa      	ldr	r2, [r7, #28]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	429a      	cmp	r2, r3
 800f296:	d004      	beq.n	800f2a2 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800f298:	69f8      	ldr	r0, [r7, #28]
 800f29a:	f7fa fde7 	bl	8009e6c <pbuf_free>
    q = NULL;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f2a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3720      	adds	r7, #32
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	08014a0c 	.word	0x08014a0c
 800f2b4:	08014a78 	.word	0x08014a78
 800f2b8:	08014a50 	.word	0x08014a50

0800f2bc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d101      	bne.n	800f2d4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f2d0:	4b30      	ldr	r3, [pc, #192]	; (800f394 <udp_bind+0xd8>)
 800f2d2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d002      	beq.n	800f2e0 <udp_bind+0x24>
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d102      	bne.n	800f2e6 <udp_bind+0x2a>
    return ERR_VAL;
 800f2e0:	f06f 0305 	mvn.w	r3, #5
 800f2e4:	e052      	b.n	800f38c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f2ea:	4b2b      	ldr	r3, [pc, #172]	; (800f398 <udp_bind+0xdc>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	617b      	str	r3, [r7, #20]
 800f2f0:	e009      	b.n	800f306 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d102      	bne.n	800f300 <udp_bind+0x44>
      rebind = 1;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	74fb      	strb	r3, [r7, #19]
      break;
 800f2fe:	e005      	b.n	800f30c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	617b      	str	r3, [r7, #20]
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1f2      	bne.n	800f2f2 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800f30c:	88fb      	ldrh	r3, [r7, #6]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d109      	bne.n	800f326 <udp_bind+0x6a>
    port = udp_new_port();
 800f312:	f7ff fd61 	bl	800edd8 <udp_new_port>
 800f316:	4603      	mov	r3, r0
 800f318:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f31a:	88fb      	ldrh	r3, [r7, #6]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d11e      	bne.n	800f35e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f320:	f06f 0307 	mvn.w	r3, #7
 800f324:	e032      	b.n	800f38c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f326:	4b1c      	ldr	r3, [pc, #112]	; (800f398 <udp_bind+0xdc>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	617b      	str	r3, [r7, #20]
 800f32c:	e014      	b.n	800f358 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	429a      	cmp	r2, r3
 800f334:	d00d      	beq.n	800f352 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	8a5b      	ldrh	r3, [r3, #18]
 800f33a:	88fa      	ldrh	r2, [r7, #6]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d108      	bne.n	800f352 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f348:	429a      	cmp	r2, r3
 800f34a:	d102      	bne.n	800f352 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f34c:	f06f 0307 	mvn.w	r3, #7
 800f350:	e01c      	b.n	800f38c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	617b      	str	r3, [r7, #20]
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d1e7      	bne.n	800f32e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d002      	beq.n	800f36a <udp_bind+0xae>
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	e000      	b.n	800f36c <udp_bind+0xb0>
 800f36a:	2300      	movs	r3, #0
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	88fa      	ldrh	r2, [r7, #6]
 800f374:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f376:	7cfb      	ldrb	r3, [r7, #19]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d106      	bne.n	800f38a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f37c:	4b06      	ldr	r3, [pc, #24]	; (800f398 <udp_bind+0xdc>)
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f384:	4a04      	ldr	r2, [pc, #16]	; (800f398 <udp_bind+0xdc>)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3718      	adds	r7, #24
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	08015310 	.word	0x08015310
 800f398:	20006ba0 	.word	0x20006ba0

0800f39c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d002      	beq.n	800f3b6 <udp_connect+0x1a>
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d102      	bne.n	800f3bc <udp_connect+0x20>
    return ERR_VAL;
 800f3b6:	f06f 0305 	mvn.w	r3, #5
 800f3ba:	e03e      	b.n	800f43a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	8a5b      	ldrh	r3, [r3, #18]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10f      	bne.n	800f3e4 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f3c4:	68f9      	ldr	r1, [r7, #12]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	8a5b      	ldrh	r3, [r3, #18]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f7ff ff75 	bl	800f2bc <udp_bind>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f3d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <udp_connect+0x48>
      return err;
 800f3de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3e2:	e02a      	b.n	800f43a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d002      	beq.n	800f3f0 <udp_connect+0x54>
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	e000      	b.n	800f3f2 <udp_connect+0x56>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	88fa      	ldrh	r2, [r7, #6]
 800f3fa:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	7c1b      	ldrb	r3, [r3, #16]
 800f400:	f043 0304 	orr.w	r3, r3, #4
 800f404:	b2da      	uxtb	r2, r3
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f40a:	4b0e      	ldr	r3, [pc, #56]	; (800f444 <udp_connect+0xa8>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	617b      	str	r3, [r7, #20]
 800f410:	e008      	b.n	800f424 <udp_connect+0x88>
    if (pcb == ipcb) {
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	429a      	cmp	r2, r3
 800f418:	d101      	bne.n	800f41e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800f41a:	2300      	movs	r3, #0
 800f41c:	e00d      	b.n	800f43a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	68db      	ldr	r3, [r3, #12]
 800f422:	617b      	str	r3, [r7, #20]
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1f3      	bne.n	800f412 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f42a:	4b06      	ldr	r3, [pc, #24]	; (800f444 <udp_connect+0xa8>)
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f432:	4a04      	ldr	r2, [pc, #16]	; (800f444 <udp_connect+0xa8>)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3718      	adds	r7, #24
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	20006ba0 	.word	0x20006ba0

0800f448 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	7c1b      	ldrb	r3, [r3, #16]
 800f460:	f023 0304 	bic.w	r3, r3, #4
 800f464:	b2da      	uxtb	r2, r3
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	741a      	strb	r2, [r3, #16]
}
 800f46a:	bf00      	nop
 800f46c:	370c      	adds	r7, #12
 800f46e:	46bd      	mov	sp, r7
 800f470:	bc80      	pop	{r7}
 800f472:	4770      	bx	lr

0800f474 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f474:	b480      	push	{r7}
 800f476:	b085      	sub	sp, #20
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	61da      	str	r2, [r3, #28]
}
 800f48c:	bf00      	nop
 800f48e:	3714      	adds	r7, #20
 800f490:	46bd      	mov	sp, r7
 800f492:	bc80      	pop	{r7}
 800f494:	4770      	bx	lr
	...

0800f498 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f4a0:	4b15      	ldr	r3, [pc, #84]	; (800f4f8 <udp_remove+0x60>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d105      	bne.n	800f4b6 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f4aa:	4b13      	ldr	r3, [pc, #76]	; (800f4f8 <udp_remove+0x60>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	4a11      	ldr	r2, [pc, #68]	; (800f4f8 <udp_remove+0x60>)
 800f4b2:	6013      	str	r3, [r2, #0]
 800f4b4:	e017      	b.n	800f4e6 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f4b6:	4b10      	ldr	r3, [pc, #64]	; (800f4f8 <udp_remove+0x60>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	e010      	b.n	800f4e0 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d009      	beq.n	800f4da <udp_remove+0x42>
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d104      	bne.n	800f4da <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	68da      	ldr	r2, [r3, #12]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	60da      	str	r2, [r3, #12]
        break;
 800f4d8:	e005      	b.n	800f4e6 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1eb      	bne.n	800f4be <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f4e6:	6879      	ldr	r1, [r7, #4]
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	f7f9 ff87 	bl	80093fc <memp_free>
}
 800f4ee:	bf00      	nop
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20006ba0 	.word	0x20006ba0

0800f4fc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f502:	2000      	movs	r0, #0
 800f504:	f7f9 ff2e 	bl	8009364 <memp_malloc>
 800f508:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d007      	beq.n	800f520 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f510:	2220      	movs	r2, #32
 800f512:	2100      	movs	r1, #0
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f002 fbb9 	bl	8011c8c <memset>
    pcb->ttl = UDP_TTL;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	22ff      	movs	r2, #255	; 0xff
 800f51e:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f520:	687b      	ldr	r3, [r7, #4]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
	...

0800f52c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d01e      	beq.n	800f57a <udp_netif_ip_addr_changed+0x4e>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d01a      	beq.n	800f57a <udp_netif_ip_addr_changed+0x4e>
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d017      	beq.n	800f57a <udp_netif_ip_addr_changed+0x4e>
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d013      	beq.n	800f57a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f552:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <udp_netif_ip_addr_changed+0x58>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	60fb      	str	r3, [r7, #12]
 800f558:	e00c      	b.n	800f574 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d103      	bne.n	800f56e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	60fb      	str	r3, [r7, #12]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1ef      	bne.n	800f55a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f57a:	bf00      	nop
 800f57c:	3714      	adds	r7, #20
 800f57e:	46bd      	mov	sp, r7
 800f580:	bc80      	pop	{r7}
 800f582:	4770      	bx	lr
 800f584:	20006ba0 	.word	0x20006ba0

0800f588 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f590:	4915      	ldr	r1, [pc, #84]	; (800f5e8 <etharp_free_entry+0x60>)
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	4613      	mov	r3, r2
 800f596:	005b      	lsls	r3, r3, #1
 800f598:	4413      	add	r3, r2
 800f59a:	00db      	lsls	r3, r3, #3
 800f59c:	440b      	add	r3, r1
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d013      	beq.n	800f5cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f5a4:	4910      	ldr	r1, [pc, #64]	; (800f5e8 <etharp_free_entry+0x60>)
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	005b      	lsls	r3, r3, #1
 800f5ac:	4413      	add	r3, r2
 800f5ae:	00db      	lsls	r3, r3, #3
 800f5b0:	440b      	add	r3, r1
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fa fc59 	bl	8009e6c <pbuf_free>
    arp_table[i].q = NULL;
 800f5ba:	490b      	ldr	r1, [pc, #44]	; (800f5e8 <etharp_free_entry+0x60>)
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	4613      	mov	r3, r2
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	4413      	add	r3, r2
 800f5c4:	00db      	lsls	r3, r3, #3
 800f5c6:	440b      	add	r3, r1
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f5cc:	4906      	ldr	r1, [pc, #24]	; (800f5e8 <etharp_free_entry+0x60>)
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	4413      	add	r3, r2
 800f5d6:	00db      	lsls	r3, r3, #3
 800f5d8:	440b      	add	r3, r1
 800f5da:	3314      	adds	r3, #20
 800f5dc:	2200      	movs	r2, #0
 800f5de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f5e0:	bf00      	nop
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	2000044c 	.word	0x2000044c

0800f5ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	71fb      	strb	r3, [r7, #7]
 800f5f6:	e096      	b.n	800f726 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f5f8:	79fa      	ldrb	r2, [r7, #7]
 800f5fa:	494f      	ldr	r1, [pc, #316]	; (800f738 <etharp_tmr+0x14c>)
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	005b      	lsls	r3, r3, #1
 800f600:	4413      	add	r3, r2
 800f602:	00db      	lsls	r3, r3, #3
 800f604:	440b      	add	r3, r1
 800f606:	3314      	adds	r3, #20
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800f60c:	79bb      	ldrb	r3, [r7, #6]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f000 8086 	beq.w	800f720 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800f614:	79fa      	ldrb	r2, [r7, #7]
 800f616:	4948      	ldr	r1, [pc, #288]	; (800f738 <etharp_tmr+0x14c>)
 800f618:	4613      	mov	r3, r2
 800f61a:	005b      	lsls	r3, r3, #1
 800f61c:	4413      	add	r3, r2
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	440b      	add	r3, r1
 800f622:	3312      	adds	r3, #18
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	3301      	adds	r3, #1
 800f628:	b298      	uxth	r0, r3
 800f62a:	4943      	ldr	r1, [pc, #268]	; (800f738 <etharp_tmr+0x14c>)
 800f62c:	4613      	mov	r3, r2
 800f62e:	005b      	lsls	r3, r3, #1
 800f630:	4413      	add	r3, r2
 800f632:	00db      	lsls	r3, r3, #3
 800f634:	440b      	add	r3, r1
 800f636:	3312      	adds	r3, #18
 800f638:	4602      	mov	r2, r0
 800f63a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f63c:	79fa      	ldrb	r2, [r7, #7]
 800f63e:	493e      	ldr	r1, [pc, #248]	; (800f738 <etharp_tmr+0x14c>)
 800f640:	4613      	mov	r3, r2
 800f642:	005b      	lsls	r3, r3, #1
 800f644:	4413      	add	r3, r2
 800f646:	00db      	lsls	r3, r3, #3
 800f648:	440b      	add	r3, r1
 800f64a:	3312      	adds	r3, #18
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f652:	d215      	bcs.n	800f680 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f654:	79fa      	ldrb	r2, [r7, #7]
 800f656:	4938      	ldr	r1, [pc, #224]	; (800f738 <etharp_tmr+0x14c>)
 800f658:	4613      	mov	r3, r2
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	4413      	add	r3, r2
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	440b      	add	r3, r1
 800f662:	3314      	adds	r3, #20
 800f664:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f666:	2b01      	cmp	r3, #1
 800f668:	d10f      	bne.n	800f68a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f66a:	79fa      	ldrb	r2, [r7, #7]
 800f66c:	4932      	ldr	r1, [pc, #200]	; (800f738 <etharp_tmr+0x14c>)
 800f66e:	4613      	mov	r3, r2
 800f670:	005b      	lsls	r3, r3, #1
 800f672:	4413      	add	r3, r2
 800f674:	00db      	lsls	r3, r3, #3
 800f676:	440b      	add	r3, r1
 800f678:	3312      	adds	r3, #18
 800f67a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f67c:	2b04      	cmp	r3, #4
 800f67e:	d904      	bls.n	800f68a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f680:	79fb      	ldrb	r3, [r7, #7]
 800f682:	4618      	mov	r0, r3
 800f684:	f7ff ff80 	bl	800f588 <etharp_free_entry>
 800f688:	e04a      	b.n	800f720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f68a:	79fa      	ldrb	r2, [r7, #7]
 800f68c:	492a      	ldr	r1, [pc, #168]	; (800f738 <etharp_tmr+0x14c>)
 800f68e:	4613      	mov	r3, r2
 800f690:	005b      	lsls	r3, r3, #1
 800f692:	4413      	add	r3, r2
 800f694:	00db      	lsls	r3, r3, #3
 800f696:	440b      	add	r3, r1
 800f698:	3314      	adds	r3, #20
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	2b03      	cmp	r3, #3
 800f69e:	d10a      	bne.n	800f6b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f6a0:	79fa      	ldrb	r2, [r7, #7]
 800f6a2:	4925      	ldr	r1, [pc, #148]	; (800f738 <etharp_tmr+0x14c>)
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	005b      	lsls	r3, r3, #1
 800f6a8:	4413      	add	r3, r2
 800f6aa:	00db      	lsls	r3, r3, #3
 800f6ac:	440b      	add	r3, r1
 800f6ae:	3314      	adds	r3, #20
 800f6b0:	2204      	movs	r2, #4
 800f6b2:	701a      	strb	r2, [r3, #0]
 800f6b4:	e034      	b.n	800f720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f6b6:	79fa      	ldrb	r2, [r7, #7]
 800f6b8:	491f      	ldr	r1, [pc, #124]	; (800f738 <etharp_tmr+0x14c>)
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	005b      	lsls	r3, r3, #1
 800f6be:	4413      	add	r3, r2
 800f6c0:	00db      	lsls	r3, r3, #3
 800f6c2:	440b      	add	r3, r1
 800f6c4:	3314      	adds	r3, #20
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	2b04      	cmp	r3, #4
 800f6ca:	d10a      	bne.n	800f6e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f6cc:	79fa      	ldrb	r2, [r7, #7]
 800f6ce:	491a      	ldr	r1, [pc, #104]	; (800f738 <etharp_tmr+0x14c>)
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	005b      	lsls	r3, r3, #1
 800f6d4:	4413      	add	r3, r2
 800f6d6:	00db      	lsls	r3, r3, #3
 800f6d8:	440b      	add	r3, r1
 800f6da:	3314      	adds	r3, #20
 800f6dc:	2202      	movs	r2, #2
 800f6de:	701a      	strb	r2, [r3, #0]
 800f6e0:	e01e      	b.n	800f720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f6e2:	79fa      	ldrb	r2, [r7, #7]
 800f6e4:	4914      	ldr	r1, [pc, #80]	; (800f738 <etharp_tmr+0x14c>)
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	4413      	add	r3, r2
 800f6ec:	00db      	lsls	r3, r3, #3
 800f6ee:	440b      	add	r3, r1
 800f6f0:	3314      	adds	r3, #20
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d113      	bne.n	800f720 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f6f8:	79fa      	ldrb	r2, [r7, #7]
 800f6fa:	490f      	ldr	r1, [pc, #60]	; (800f738 <etharp_tmr+0x14c>)
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	005b      	lsls	r3, r3, #1
 800f700:	4413      	add	r3, r2
 800f702:	00db      	lsls	r3, r3, #3
 800f704:	440b      	add	r3, r1
 800f706:	3308      	adds	r3, #8
 800f708:	6818      	ldr	r0, [r3, #0]
 800f70a:	79fa      	ldrb	r2, [r7, #7]
 800f70c:	4613      	mov	r3, r2
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	4413      	add	r3, r2
 800f712:	00db      	lsls	r3, r3, #3
 800f714:	4a08      	ldr	r2, [pc, #32]	; (800f738 <etharp_tmr+0x14c>)
 800f716:	4413      	add	r3, r2
 800f718:	3304      	adds	r3, #4
 800f71a:	4619      	mov	r1, r3
 800f71c:	f000 fe38 	bl	8010390 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f720:	79fb      	ldrb	r3, [r7, #7]
 800f722:	3301      	adds	r3, #1
 800f724:	71fb      	strb	r3, [r7, #7]
 800f726:	79fb      	ldrb	r3, [r7, #7]
 800f728:	2b09      	cmp	r3, #9
 800f72a:	f67f af65 	bls.w	800f5f8 <etharp_tmr+0xc>
      }
    }
  }
}
 800f72e:	bf00      	nop
 800f730:	bf00      	nop
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	2000044c 	.word	0x2000044c

0800f73c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b088      	sub	sp, #32
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	460b      	mov	r3, r1
 800f746:	607a      	str	r2, [r7, #4]
 800f748:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f74a:	230a      	movs	r3, #10
 800f74c:	77fb      	strb	r3, [r7, #31]
 800f74e:	230a      	movs	r3, #10
 800f750:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800f752:	230a      	movs	r3, #10
 800f754:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800f75a:	230a      	movs	r3, #10
 800f75c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	833b      	strh	r3, [r7, #24]
 800f762:	2300      	movs	r3, #0
 800f764:	82fb      	strh	r3, [r7, #22]
 800f766:	2300      	movs	r3, #0
 800f768:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f76a:	2300      	movs	r3, #0
 800f76c:	773b      	strb	r3, [r7, #28]
 800f76e:	e093      	b.n	800f898 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800f770:	7f3a      	ldrb	r2, [r7, #28]
 800f772:	4990      	ldr	r1, [pc, #576]	; (800f9b4 <etharp_find_entry+0x278>)
 800f774:	4613      	mov	r3, r2
 800f776:	005b      	lsls	r3, r3, #1
 800f778:	4413      	add	r3, r2
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	440b      	add	r3, r1
 800f77e:	3314      	adds	r3, #20
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f784:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f788:	2b0a      	cmp	r3, #10
 800f78a:	d105      	bne.n	800f798 <etharp_find_entry+0x5c>
 800f78c:	7cfb      	ldrb	r3, [r7, #19]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d102      	bne.n	800f798 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800f792:	7f3b      	ldrb	r3, [r7, #28]
 800f794:	777b      	strb	r3, [r7, #29]
 800f796:	e07c      	b.n	800f892 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f798:	7cfb      	ldrb	r3, [r7, #19]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d079      	beq.n	800f892 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f79e:	7cfb      	ldrb	r3, [r7, #19]
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d009      	beq.n	800f7b8 <etharp_find_entry+0x7c>
 800f7a4:	7cfb      	ldrb	r3, [r7, #19]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d806      	bhi.n	800f7b8 <etharp_find_entry+0x7c>
 800f7aa:	4b83      	ldr	r3, [pc, #524]	; (800f9b8 <etharp_find_entry+0x27c>)
 800f7ac:	f240 1225 	movw	r2, #293	; 0x125
 800f7b0:	4982      	ldr	r1, [pc, #520]	; (800f9bc <etharp_find_entry+0x280>)
 800f7b2:	4883      	ldr	r0, [pc, #524]	; (800f9c0 <etharp_find_entry+0x284>)
 800f7b4:	f002 fb18 	bl	8011de8 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00f      	beq.n	800f7de <etharp_find_entry+0xa2>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6819      	ldr	r1, [r3, #0]
 800f7c2:	7f3a      	ldrb	r2, [r7, #28]
 800f7c4:	487b      	ldr	r0, [pc, #492]	; (800f9b4 <etharp_find_entry+0x278>)
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	005b      	lsls	r3, r3, #1
 800f7ca:	4413      	add	r3, r2
 800f7cc:	00db      	lsls	r3, r3, #3
 800f7ce:	4403      	add	r3, r0
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4299      	cmp	r1, r3
 800f7d6:	d102      	bne.n	800f7de <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f7d8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f7dc:	e0e5      	b.n	800f9aa <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f7de:	7cfb      	ldrb	r3, [r7, #19]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d13b      	bne.n	800f85c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f7e4:	7f3a      	ldrb	r2, [r7, #28]
 800f7e6:	4973      	ldr	r1, [pc, #460]	; (800f9b4 <etharp_find_entry+0x278>)
 800f7e8:	4613      	mov	r3, r2
 800f7ea:	005b      	lsls	r3, r3, #1
 800f7ec:	4413      	add	r3, r2
 800f7ee:	00db      	lsls	r3, r3, #3
 800f7f0:	440b      	add	r3, r1
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d018      	beq.n	800f82a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800f7f8:	7f3a      	ldrb	r2, [r7, #28]
 800f7fa:	496e      	ldr	r1, [pc, #440]	; (800f9b4 <etharp_find_entry+0x278>)
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	005b      	lsls	r3, r3, #1
 800f800:	4413      	add	r3, r2
 800f802:	00db      	lsls	r3, r3, #3
 800f804:	440b      	add	r3, r1
 800f806:	3312      	adds	r3, #18
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	8b3a      	ldrh	r2, [r7, #24]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d840      	bhi.n	800f892 <etharp_find_entry+0x156>
            old_queue = i;
 800f810:	7f3b      	ldrb	r3, [r7, #28]
 800f812:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800f814:	7f3a      	ldrb	r2, [r7, #28]
 800f816:	4967      	ldr	r1, [pc, #412]	; (800f9b4 <etharp_find_entry+0x278>)
 800f818:	4613      	mov	r3, r2
 800f81a:	005b      	lsls	r3, r3, #1
 800f81c:	4413      	add	r3, r2
 800f81e:	00db      	lsls	r3, r3, #3
 800f820:	440b      	add	r3, r1
 800f822:	3312      	adds	r3, #18
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	833b      	strh	r3, [r7, #24]
 800f828:	e033      	b.n	800f892 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f82a:	7f3a      	ldrb	r2, [r7, #28]
 800f82c:	4961      	ldr	r1, [pc, #388]	; (800f9b4 <etharp_find_entry+0x278>)
 800f82e:	4613      	mov	r3, r2
 800f830:	005b      	lsls	r3, r3, #1
 800f832:	4413      	add	r3, r2
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	440b      	add	r3, r1
 800f838:	3312      	adds	r3, #18
 800f83a:	881b      	ldrh	r3, [r3, #0]
 800f83c:	8afa      	ldrh	r2, [r7, #22]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d827      	bhi.n	800f892 <etharp_find_entry+0x156>
            old_pending = i;
 800f842:	7f3b      	ldrb	r3, [r7, #28]
 800f844:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800f846:	7f3a      	ldrb	r2, [r7, #28]
 800f848:	495a      	ldr	r1, [pc, #360]	; (800f9b4 <etharp_find_entry+0x278>)
 800f84a:	4613      	mov	r3, r2
 800f84c:	005b      	lsls	r3, r3, #1
 800f84e:	4413      	add	r3, r2
 800f850:	00db      	lsls	r3, r3, #3
 800f852:	440b      	add	r3, r1
 800f854:	3312      	adds	r3, #18
 800f856:	881b      	ldrh	r3, [r3, #0]
 800f858:	82fb      	strh	r3, [r7, #22]
 800f85a:	e01a      	b.n	800f892 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f85c:	7cfb      	ldrb	r3, [r7, #19]
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d917      	bls.n	800f892 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f862:	7f3a      	ldrb	r2, [r7, #28]
 800f864:	4953      	ldr	r1, [pc, #332]	; (800f9b4 <etharp_find_entry+0x278>)
 800f866:	4613      	mov	r3, r2
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4413      	add	r3, r2
 800f86c:	00db      	lsls	r3, r3, #3
 800f86e:	440b      	add	r3, r1
 800f870:	3312      	adds	r3, #18
 800f872:	881b      	ldrh	r3, [r3, #0]
 800f874:	8aba      	ldrh	r2, [r7, #20]
 800f876:	429a      	cmp	r2, r3
 800f878:	d80b      	bhi.n	800f892 <etharp_find_entry+0x156>
            old_stable = i;
 800f87a:	7f3b      	ldrb	r3, [r7, #28]
 800f87c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800f87e:	7f3a      	ldrb	r2, [r7, #28]
 800f880:	494c      	ldr	r1, [pc, #304]	; (800f9b4 <etharp_find_entry+0x278>)
 800f882:	4613      	mov	r3, r2
 800f884:	005b      	lsls	r3, r3, #1
 800f886:	4413      	add	r3, r2
 800f888:	00db      	lsls	r3, r3, #3
 800f88a:	440b      	add	r3, r1
 800f88c:	3312      	adds	r3, #18
 800f88e:	881b      	ldrh	r3, [r3, #0]
 800f890:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f892:	7f3b      	ldrb	r3, [r7, #28]
 800f894:	3301      	adds	r3, #1
 800f896:	773b      	strb	r3, [r7, #28]
 800f898:	7f3b      	ldrb	r3, [r7, #28]
 800f89a:	2b09      	cmp	r3, #9
 800f89c:	f67f af68 	bls.w	800f770 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f8a0:	7afb      	ldrb	r3, [r7, #11]
 800f8a2:	f003 0302 	and.w	r3, r3, #2
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d108      	bne.n	800f8bc <etharp_find_entry+0x180>
 800f8aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f8ae:	2b0a      	cmp	r3, #10
 800f8b0:	d107      	bne.n	800f8c2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f8b2:	7afb      	ldrb	r3, [r7, #11]
 800f8b4:	f003 0301 	and.w	r3, r3, #1
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d102      	bne.n	800f8c2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800f8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c0:	e073      	b.n	800f9aa <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f8c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f8c6:	2b09      	cmp	r3, #9
 800f8c8:	dc02      	bgt.n	800f8d0 <etharp_find_entry+0x194>
    i = empty;
 800f8ca:	7f7b      	ldrb	r3, [r7, #29]
 800f8cc:	773b      	strb	r3, [r7, #28]
 800f8ce:	e036      	b.n	800f93e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f8d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f8d4:	2b09      	cmp	r3, #9
 800f8d6:	dc13      	bgt.n	800f900 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800f8d8:	7fbb      	ldrb	r3, [r7, #30]
 800f8da:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f8dc:	7f3a      	ldrb	r2, [r7, #28]
 800f8de:	4935      	ldr	r1, [pc, #212]	; (800f9b4 <etharp_find_entry+0x278>)
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	005b      	lsls	r3, r3, #1
 800f8e4:	4413      	add	r3, r2
 800f8e6:	00db      	lsls	r3, r3, #3
 800f8e8:	440b      	add	r3, r1
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d018      	beq.n	800f922 <etharp_find_entry+0x1e6>
 800f8f0:	4b31      	ldr	r3, [pc, #196]	; (800f9b8 <etharp_find_entry+0x27c>)
 800f8f2:	f240 126f 	movw	r2, #367	; 0x16f
 800f8f6:	4933      	ldr	r1, [pc, #204]	; (800f9c4 <etharp_find_entry+0x288>)
 800f8f8:	4831      	ldr	r0, [pc, #196]	; (800f9c0 <etharp_find_entry+0x284>)
 800f8fa:	f002 fa75 	bl	8011de8 <iprintf>
 800f8fe:	e010      	b.n	800f922 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f900:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f904:	2b09      	cmp	r3, #9
 800f906:	dc02      	bgt.n	800f90e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800f908:	7ffb      	ldrb	r3, [r7, #31]
 800f90a:	773b      	strb	r3, [r7, #28]
 800f90c:	e009      	b.n	800f922 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f90e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f912:	2b09      	cmp	r3, #9
 800f914:	dc02      	bgt.n	800f91c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f916:	7efb      	ldrb	r3, [r7, #27]
 800f918:	773b      	strb	r3, [r7, #28]
 800f91a:	e002      	b.n	800f922 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800f91c:	f04f 33ff 	mov.w	r3, #4294967295
 800f920:	e043      	b.n	800f9aa <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f922:	7f3b      	ldrb	r3, [r7, #28]
 800f924:	2b09      	cmp	r3, #9
 800f926:	d906      	bls.n	800f936 <etharp_find_entry+0x1fa>
 800f928:	4b23      	ldr	r3, [pc, #140]	; (800f9b8 <etharp_find_entry+0x27c>)
 800f92a:	f240 1281 	movw	r2, #385	; 0x181
 800f92e:	4926      	ldr	r1, [pc, #152]	; (800f9c8 <etharp_find_entry+0x28c>)
 800f930:	4823      	ldr	r0, [pc, #140]	; (800f9c0 <etharp_find_entry+0x284>)
 800f932:	f002 fa59 	bl	8011de8 <iprintf>
    etharp_free_entry(i);
 800f936:	7f3b      	ldrb	r3, [r7, #28]
 800f938:	4618      	mov	r0, r3
 800f93a:	f7ff fe25 	bl	800f588 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f93e:	7f3b      	ldrb	r3, [r7, #28]
 800f940:	2b09      	cmp	r3, #9
 800f942:	d906      	bls.n	800f952 <etharp_find_entry+0x216>
 800f944:	4b1c      	ldr	r3, [pc, #112]	; (800f9b8 <etharp_find_entry+0x27c>)
 800f946:	f240 1285 	movw	r2, #389	; 0x185
 800f94a:	491f      	ldr	r1, [pc, #124]	; (800f9c8 <etharp_find_entry+0x28c>)
 800f94c:	481c      	ldr	r0, [pc, #112]	; (800f9c0 <etharp_find_entry+0x284>)
 800f94e:	f002 fa4b 	bl	8011de8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f952:	7f3a      	ldrb	r2, [r7, #28]
 800f954:	4917      	ldr	r1, [pc, #92]	; (800f9b4 <etharp_find_entry+0x278>)
 800f956:	4613      	mov	r3, r2
 800f958:	005b      	lsls	r3, r3, #1
 800f95a:	4413      	add	r3, r2
 800f95c:	00db      	lsls	r3, r3, #3
 800f95e:	440b      	add	r3, r1
 800f960:	3314      	adds	r3, #20
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d006      	beq.n	800f976 <etharp_find_entry+0x23a>
 800f968:	4b13      	ldr	r3, [pc, #76]	; (800f9b8 <etharp_find_entry+0x27c>)
 800f96a:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800f96e:	4917      	ldr	r1, [pc, #92]	; (800f9cc <etharp_find_entry+0x290>)
 800f970:	4813      	ldr	r0, [pc, #76]	; (800f9c0 <etharp_find_entry+0x284>)
 800f972:	f002 fa39 	bl	8011de8 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d00a      	beq.n	800f992 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f97c:	7f3a      	ldrb	r2, [r7, #28]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	6819      	ldr	r1, [r3, #0]
 800f982:	480c      	ldr	r0, [pc, #48]	; (800f9b4 <etharp_find_entry+0x278>)
 800f984:	4613      	mov	r3, r2
 800f986:	005b      	lsls	r3, r3, #1
 800f988:	4413      	add	r3, r2
 800f98a:	00db      	lsls	r3, r3, #3
 800f98c:	4403      	add	r3, r0
 800f98e:	3304      	adds	r3, #4
 800f990:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f992:	7f3a      	ldrb	r2, [r7, #28]
 800f994:	4907      	ldr	r1, [pc, #28]	; (800f9b4 <etharp_find_entry+0x278>)
 800f996:	4613      	mov	r3, r2
 800f998:	005b      	lsls	r3, r3, #1
 800f99a:	4413      	add	r3, r2
 800f99c:	00db      	lsls	r3, r3, #3
 800f99e:	440b      	add	r3, r1
 800f9a0:	3312      	adds	r3, #18
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800f9a6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3720      	adds	r7, #32
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	2000044c 	.word	0x2000044c
 800f9b8:	08014aa8 	.word	0x08014aa8
 800f9bc:	08014ae0 	.word	0x08014ae0
 800f9c0:	08014b20 	.word	0x08014b20
 800f9c4:	08014b48 	.word	0x08014b48
 800f9c8:	08014b60 	.word	0x08014b60
 800f9cc:	08014b74 	.word	0x08014b74

0800f9d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b088      	sub	sp, #32
 800f9d4:	af02      	add	r7, sp, #8
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	607a      	str	r2, [r7, #4]
 800f9dc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9e4:	2b06      	cmp	r3, #6
 800f9e6:	d006      	beq.n	800f9f6 <etharp_update_arp_entry+0x26>
 800f9e8:	4b48      	ldr	r3, [pc, #288]	; (800fb0c <etharp_update_arp_entry+0x13c>)
 800f9ea:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f9ee:	4948      	ldr	r1, [pc, #288]	; (800fb10 <etharp_update_arp_entry+0x140>)
 800f9f0:	4848      	ldr	r0, [pc, #288]	; (800fb14 <etharp_update_arp_entry+0x144>)
 800f9f2:	f002 f9f9 	bl	8011de8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d012      	beq.n	800fa22 <etharp_update_arp_entry+0x52>
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00e      	beq.n	800fa22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	68f9      	ldr	r1, [r7, #12]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f001 f8dc 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 800fa10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d105      	bne.n	800fa22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fa1e:	2be0      	cmp	r3, #224	; 0xe0
 800fa20:	d102      	bne.n	800fa28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fa22:	f06f 030f 	mvn.w	r3, #15
 800fa26:	e06c      	b.n	800fb02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fa28:	78fb      	ldrb	r3, [r7, #3]
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	68b8      	ldr	r0, [r7, #8]
 800fa30:	f7ff fe84 	bl	800f73c <etharp_find_entry>
 800fa34:	4603      	mov	r3, r0
 800fa36:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fa38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	da02      	bge.n	800fa46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fa40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa44:	e05d      	b.n	800fb02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fa46:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa4a:	4933      	ldr	r1, [pc, #204]	; (800fb18 <etharp_update_arp_entry+0x148>)
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	005b      	lsls	r3, r3, #1
 800fa50:	4413      	add	r3, r2
 800fa52:	00db      	lsls	r3, r3, #3
 800fa54:	440b      	add	r3, r1
 800fa56:	3314      	adds	r3, #20
 800fa58:	2202      	movs	r2, #2
 800fa5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fa5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa60:	492d      	ldr	r1, [pc, #180]	; (800fb18 <etharp_update_arp_entry+0x148>)
 800fa62:	4613      	mov	r3, r2
 800fa64:	005b      	lsls	r3, r3, #1
 800fa66:	4413      	add	r3, r2
 800fa68:	00db      	lsls	r3, r3, #3
 800fa6a:	440b      	add	r3, r1
 800fa6c:	3308      	adds	r3, #8
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800fa72:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa76:	4613      	mov	r3, r2
 800fa78:	005b      	lsls	r3, r3, #1
 800fa7a:	4413      	add	r3, r2
 800fa7c:	00db      	lsls	r3, r3, #3
 800fa7e:	3308      	adds	r3, #8
 800fa80:	4a25      	ldr	r2, [pc, #148]	; (800fb18 <etharp_update_arp_entry+0x148>)
 800fa82:	4413      	add	r3, r2
 800fa84:	3304      	adds	r3, #4
 800fa86:	2206      	movs	r2, #6
 800fa88:	6879      	ldr	r1, [r7, #4]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f002 f8d6 	bl	8011c3c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fa90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fa94:	4920      	ldr	r1, [pc, #128]	; (800fb18 <etharp_update_arp_entry+0x148>)
 800fa96:	4613      	mov	r3, r2
 800fa98:	005b      	lsls	r3, r3, #1
 800fa9a:	4413      	add	r3, r2
 800fa9c:	00db      	lsls	r3, r3, #3
 800fa9e:	440b      	add	r3, r1
 800faa0:	3312      	adds	r3, #18
 800faa2:	2200      	movs	r2, #0
 800faa4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800faa6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800faaa:	491b      	ldr	r1, [pc, #108]	; (800fb18 <etharp_update_arp_entry+0x148>)
 800faac:	4613      	mov	r3, r2
 800faae:	005b      	lsls	r3, r3, #1
 800fab0:	4413      	add	r3, r2
 800fab2:	00db      	lsls	r3, r3, #3
 800fab4:	440b      	add	r3, r1
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d021      	beq.n	800fb00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fabc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fac0:	4915      	ldr	r1, [pc, #84]	; (800fb18 <etharp_update_arp_entry+0x148>)
 800fac2:	4613      	mov	r3, r2
 800fac4:	005b      	lsls	r3, r3, #1
 800fac6:	4413      	add	r3, r2
 800fac8:	00db      	lsls	r3, r3, #3
 800faca:	440b      	add	r3, r1
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fad0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fad4:	4910      	ldr	r1, [pc, #64]	; (800fb18 <etharp_update_arp_entry+0x148>)
 800fad6:	4613      	mov	r3, r2
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	440b      	add	r3, r1
 800fae0:	2200      	movs	r2, #0
 800fae2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800faea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6939      	ldr	r1, [r7, #16]
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f001 ff0d 	bl	8011914 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fafa:	6938      	ldr	r0, [r7, #16]
 800fafc:	f7fa f9b6 	bl	8009e6c <pbuf_free>
  }
  return ERR_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	08014aa8 	.word	0x08014aa8
 800fb10:	08014ba0 	.word	0x08014ba0
 800fb14:	08014b20 	.word	0x08014b20
 800fb18:	2000044c 	.word	0x2000044c

0800fb1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb24:	2300      	movs	r3, #0
 800fb26:	73fb      	strb	r3, [r7, #15]
 800fb28:	e01f      	b.n	800fb6a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800fb2a:	7bfa      	ldrb	r2, [r7, #15]
 800fb2c:	4913      	ldr	r1, [pc, #76]	; (800fb7c <etharp_cleanup_netif+0x60>)
 800fb2e:	4613      	mov	r3, r2
 800fb30:	005b      	lsls	r3, r3, #1
 800fb32:	4413      	add	r3, r2
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	440b      	add	r3, r1
 800fb38:	3314      	adds	r3, #20
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fb3e:	7bbb      	ldrb	r3, [r7, #14]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00f      	beq.n	800fb64 <etharp_cleanup_netif+0x48>
 800fb44:	7bfa      	ldrb	r2, [r7, #15]
 800fb46:	490d      	ldr	r1, [pc, #52]	; (800fb7c <etharp_cleanup_netif+0x60>)
 800fb48:	4613      	mov	r3, r2
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	4413      	add	r3, r2
 800fb4e:	00db      	lsls	r3, r3, #3
 800fb50:	440b      	add	r3, r1
 800fb52:	3308      	adds	r3, #8
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	687a      	ldr	r2, [r7, #4]
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d103      	bne.n	800fb64 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7ff fd12 	bl	800f588 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb64:	7bfb      	ldrb	r3, [r7, #15]
 800fb66:	3301      	adds	r3, #1
 800fb68:	73fb      	strb	r3, [r7, #15]
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
 800fb6c:	2b09      	cmp	r3, #9
 800fb6e:	d9dc      	bls.n	800fb2a <etharp_cleanup_netif+0xe>
    }
  }
}
 800fb70:	bf00      	nop
 800fb72:	bf00      	nop
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	2000044c 	.word	0x2000044c

0800fb80 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fb80:	b5b0      	push	{r4, r5, r7, lr}
 800fb82:	b08a      	sub	sp, #40	; 0x28
 800fb84:	af04      	add	r7, sp, #16
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d107      	bne.n	800fba0 <etharp_input+0x20>
 800fb90:	4b3d      	ldr	r3, [pc, #244]	; (800fc88 <etharp_input+0x108>)
 800fb92:	f44f 7222 	mov.w	r2, #648	; 0x288
 800fb96:	493d      	ldr	r1, [pc, #244]	; (800fc8c <etharp_input+0x10c>)
 800fb98:	483d      	ldr	r0, [pc, #244]	; (800fc90 <etharp_input+0x110>)
 800fb9a:	f002 f925 	bl	8011de8 <iprintf>
 800fb9e:	e06f      	b.n	800fc80 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbb0:	d10c      	bne.n	800fbcc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800fbb6:	2b06      	cmp	r3, #6
 800fbb8:	d108      	bne.n	800fbcc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fbbe:	2b04      	cmp	r3, #4
 800fbc0:	d104      	bne.n	800fbcc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	885b      	ldrh	r3, [r3, #2]
 800fbc6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fbc8:	2b08      	cmp	r3, #8
 800fbca:	d003      	beq.n	800fbd4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7fa f94d 	bl	8009e6c <pbuf_free>
    return;
 800fbd2:	e055      	b.n	800fc80 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	330e      	adds	r3, #14
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	3318      	adds	r3, #24
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d102      	bne.n	800fbf4 <etharp_input+0x74>
    for_us = 0;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	75fb      	strb	r3, [r7, #23]
 800fbf2:	e009      	b.n	800fc08 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fbf4:	68ba      	ldr	r2, [r7, #8]
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	3304      	adds	r3, #4
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	bf0c      	ite	eq
 800fc00:	2301      	moveq	r3, #1
 800fc02:	2300      	movne	r3, #0
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	f103 0208 	add.w	r2, r3, #8
 800fc0e:	7dfb      	ldrb	r3, [r7, #23]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d001      	beq.n	800fc18 <etharp_input+0x98>
 800fc14:	2301      	movs	r3, #1
 800fc16:	e000      	b.n	800fc1a <etharp_input+0x9a>
 800fc18:	2302      	movs	r3, #2
 800fc1a:	f107 010c 	add.w	r1, r7, #12
 800fc1e:	6838      	ldr	r0, [r7, #0]
 800fc20:	f7ff fed6 	bl	800f9d0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	88db      	ldrh	r3, [r3, #6]
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc2e:	d003      	beq.n	800fc38 <etharp_input+0xb8>
 800fc30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc34:	d01e      	beq.n	800fc74 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800fc36:	e020      	b.n	800fc7a <etharp_input+0xfa>
    if (for_us) {
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d01c      	beq.n	800fc78 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800fc54:	693a      	ldr	r2, [r7, #16]
 800fc56:	3208      	adds	r2, #8
      etharp_raw(netif,
 800fc58:	2102      	movs	r1, #2
 800fc5a:	9103      	str	r1, [sp, #12]
 800fc5c:	f107 010c 	add.w	r1, r7, #12
 800fc60:	9102      	str	r1, [sp, #8]
 800fc62:	9201      	str	r2, [sp, #4]
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	462b      	mov	r3, r5
 800fc68:	4622      	mov	r2, r4
 800fc6a:	4601      	mov	r1, r0
 800fc6c:	6838      	ldr	r0, [r7, #0]
 800fc6e:	f000 fae1 	bl	8010234 <etharp_raw>
    break;
 800fc72:	e001      	b.n	800fc78 <etharp_input+0xf8>
    break;
 800fc74:	bf00      	nop
 800fc76:	e000      	b.n	800fc7a <etharp_input+0xfa>
    break;
 800fc78:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f7fa f8f6 	bl	8009e6c <pbuf_free>
}
 800fc80:	3718      	adds	r7, #24
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bdb0      	pop	{r4, r5, r7, pc}
 800fc86:	bf00      	nop
 800fc88:	08014aa8 	.word	0x08014aa8
 800fc8c:	08014bf8 	.word	0x08014bf8
 800fc90:	08014b20 	.word	0x08014b20

0800fc94 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af02      	add	r7, sp, #8
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	4613      	mov	r3, r2
 800fca0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fca2:	79fa      	ldrb	r2, [r7, #7]
 800fca4:	4944      	ldr	r1, [pc, #272]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fca6:	4613      	mov	r3, r2
 800fca8:	005b      	lsls	r3, r3, #1
 800fcaa:	4413      	add	r3, r2
 800fcac:	00db      	lsls	r3, r3, #3
 800fcae:	440b      	add	r3, r1
 800fcb0:	3314      	adds	r3, #20
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d806      	bhi.n	800fcc6 <etharp_output_to_arp_index+0x32>
 800fcb8:	4b40      	ldr	r3, [pc, #256]	; (800fdbc <etharp_output_to_arp_index+0x128>)
 800fcba:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800fcbe:	4940      	ldr	r1, [pc, #256]	; (800fdc0 <etharp_output_to_arp_index+0x12c>)
 800fcc0:	4840      	ldr	r0, [pc, #256]	; (800fdc4 <etharp_output_to_arp_index+0x130>)
 800fcc2:	f002 f891 	bl	8011de8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fcc6:	79fa      	ldrb	r2, [r7, #7]
 800fcc8:	493b      	ldr	r1, [pc, #236]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fcca:	4613      	mov	r3, r2
 800fccc:	005b      	lsls	r3, r3, #1
 800fcce:	4413      	add	r3, r2
 800fcd0:	00db      	lsls	r3, r3, #3
 800fcd2:	440b      	add	r3, r1
 800fcd4:	3314      	adds	r3, #20
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b02      	cmp	r3, #2
 800fcda:	d153      	bne.n	800fd84 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fcdc:	79fa      	ldrb	r2, [r7, #7]
 800fcde:	4936      	ldr	r1, [pc, #216]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fce0:	4613      	mov	r3, r2
 800fce2:	005b      	lsls	r3, r3, #1
 800fce4:	4413      	add	r3, r2
 800fce6:	00db      	lsls	r3, r3, #3
 800fce8:	440b      	add	r3, r1
 800fcea:	3312      	adds	r3, #18
 800fcec:	881b      	ldrh	r3, [r3, #0]
 800fcee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fcf2:	d919      	bls.n	800fd28 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fcf4:	79fa      	ldrb	r2, [r7, #7]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	4413      	add	r3, r2
 800fcfc:	00db      	lsls	r3, r3, #3
 800fcfe:	4a2e      	ldr	r2, [pc, #184]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fd00:	4413      	add	r3, r2
 800fd02:	3304      	adds	r3, #4
 800fd04:	4619      	mov	r1, r3
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f000 fb42 	bl	8010390 <etharp_request>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d138      	bne.n	800fd84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fd12:	79fa      	ldrb	r2, [r7, #7]
 800fd14:	4928      	ldr	r1, [pc, #160]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fd16:	4613      	mov	r3, r2
 800fd18:	005b      	lsls	r3, r3, #1
 800fd1a:	4413      	add	r3, r2
 800fd1c:	00db      	lsls	r3, r3, #3
 800fd1e:	440b      	add	r3, r1
 800fd20:	3314      	adds	r3, #20
 800fd22:	2203      	movs	r2, #3
 800fd24:	701a      	strb	r2, [r3, #0]
 800fd26:	e02d      	b.n	800fd84 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fd28:	79fa      	ldrb	r2, [r7, #7]
 800fd2a:	4923      	ldr	r1, [pc, #140]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	005b      	lsls	r3, r3, #1
 800fd30:	4413      	add	r3, r2
 800fd32:	00db      	lsls	r3, r3, #3
 800fd34:	440b      	add	r3, r1
 800fd36:	3312      	adds	r3, #18
 800fd38:	881b      	ldrh	r3, [r3, #0]
 800fd3a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fd3e:	d321      	bcc.n	800fd84 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fd40:	79fa      	ldrb	r2, [r7, #7]
 800fd42:	4613      	mov	r3, r2
 800fd44:	005b      	lsls	r3, r3, #1
 800fd46:	4413      	add	r3, r2
 800fd48:	00db      	lsls	r3, r3, #3
 800fd4a:	4a1b      	ldr	r2, [pc, #108]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fd4c:	4413      	add	r3, r2
 800fd4e:	1d19      	adds	r1, r3, #4
 800fd50:	79fa      	ldrb	r2, [r7, #7]
 800fd52:	4613      	mov	r3, r2
 800fd54:	005b      	lsls	r3, r3, #1
 800fd56:	4413      	add	r3, r2
 800fd58:	00db      	lsls	r3, r3, #3
 800fd5a:	3308      	adds	r3, #8
 800fd5c:	4a16      	ldr	r2, [pc, #88]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fd5e:	4413      	add	r3, r2
 800fd60:	3304      	adds	r3, #4
 800fd62:	461a      	mov	r2, r3
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f000 faf1 	bl	801034c <etharp_request_dst>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d109      	bne.n	800fd84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fd70:	79fa      	ldrb	r2, [r7, #7]
 800fd72:	4911      	ldr	r1, [pc, #68]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fd74:	4613      	mov	r3, r2
 800fd76:	005b      	lsls	r3, r3, #1
 800fd78:	4413      	add	r3, r2
 800fd7a:	00db      	lsls	r3, r3, #3
 800fd7c:	440b      	add	r3, r1
 800fd7e:	3314      	adds	r3, #20
 800fd80:	2203      	movs	r2, #3
 800fd82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800fd8a:	79fa      	ldrb	r2, [r7, #7]
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	005b      	lsls	r3, r3, #1
 800fd90:	4413      	add	r3, r2
 800fd92:	00db      	lsls	r3, r3, #3
 800fd94:	3308      	adds	r3, #8
 800fd96:	4a08      	ldr	r2, [pc, #32]	; (800fdb8 <etharp_output_to_arp_index+0x124>)
 800fd98:	4413      	add	r3, r2
 800fd9a:	3304      	adds	r3, #4
 800fd9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fda0:	9200      	str	r2, [sp, #0]
 800fda2:	460a      	mov	r2, r1
 800fda4:	68b9      	ldr	r1, [r7, #8]
 800fda6:	68f8      	ldr	r0, [r7, #12]
 800fda8:	f001 fdb4 	bl	8011914 <ethernet_output>
 800fdac:	4603      	mov	r3, r0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3710      	adds	r7, #16
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	2000044c 	.word	0x2000044c
 800fdbc:	08014aa8 	.word	0x08014aa8
 800fdc0:	08014c18 	.word	0x08014c18
 800fdc4:	08014b20 	.word	0x08014b20

0800fdc8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b08a      	sub	sp, #40	; 0x28
 800fdcc:	af02      	add	r7, sp, #8
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d106      	bne.n	800fdec <etharp_output+0x24>
 800fdde:	4b69      	ldr	r3, [pc, #420]	; (800ff84 <etharp_output+0x1bc>)
 800fde0:	f240 321b 	movw	r2, #795	; 0x31b
 800fde4:	4968      	ldr	r1, [pc, #416]	; (800ff88 <etharp_output+0x1c0>)
 800fde6:	4869      	ldr	r0, [pc, #420]	; (800ff8c <etharp_output+0x1c4>)
 800fde8:	f001 fffe 	bl	8011de8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d106      	bne.n	800fe00 <etharp_output+0x38>
 800fdf2:	4b64      	ldr	r3, [pc, #400]	; (800ff84 <etharp_output+0x1bc>)
 800fdf4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fdf8:	4965      	ldr	r1, [pc, #404]	; (800ff90 <etharp_output+0x1c8>)
 800fdfa:	4864      	ldr	r0, [pc, #400]	; (800ff8c <etharp_output+0x1c4>)
 800fdfc:	f001 fff4 	bl	8011de8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d106      	bne.n	800fe14 <etharp_output+0x4c>
 800fe06:	4b5f      	ldr	r3, [pc, #380]	; (800ff84 <etharp_output+0x1bc>)
 800fe08:	f240 321d 	movw	r2, #797	; 0x31d
 800fe0c:	4961      	ldr	r1, [pc, #388]	; (800ff94 <etharp_output+0x1cc>)
 800fe0e:	485f      	ldr	r0, [pc, #380]	; (800ff8c <etharp_output+0x1c4>)
 800fe10:	f001 ffea 	bl	8011de8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	68f9      	ldr	r1, [r7, #12]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f000 fed4 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fe26:	4b5c      	ldr	r3, [pc, #368]	; (800ff98 <etharp_output+0x1d0>)
 800fe28:	61fb      	str	r3, [r7, #28]
 800fe2a:	e09b      	b.n	800ff64 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe34:	2be0      	cmp	r3, #224	; 0xe0
 800fe36:	d118      	bne.n	800fe6a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fe40:	235e      	movs	r3, #94	; 0x5e
 800fe42:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	3301      	adds	r3, #1
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	3302      	adds	r3, #2
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	3303      	adds	r3, #3
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fe62:	f107 0310 	add.w	r3, r7, #16
 800fe66:	61fb      	str	r3, [r7, #28]
 800fe68:	e07c      	b.n	800ff64 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	3304      	adds	r3, #4
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	405a      	eors	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	3308      	adds	r3, #8
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4013      	ands	r3, r2
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d012      	beq.n	800fea8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fe88:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d00b      	beq.n	800fea8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	330c      	adds	r3, #12
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d003      	beq.n	800fea2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	330c      	adds	r3, #12
 800fe9e:	61bb      	str	r3, [r7, #24]
 800fea0:	e002      	b.n	800fea8 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fea2:	f06f 0303 	mvn.w	r3, #3
 800fea6:	e069      	b.n	800ff7c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fea8:	4b3c      	ldr	r3, [pc, #240]	; (800ff9c <etharp_output+0x1d4>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	4619      	mov	r1, r3
 800feae:	4a3c      	ldr	r2, [pc, #240]	; (800ffa0 <etharp_output+0x1d8>)
 800feb0:	460b      	mov	r3, r1
 800feb2:	005b      	lsls	r3, r3, #1
 800feb4:	440b      	add	r3, r1
 800feb6:	00db      	lsls	r3, r3, #3
 800feb8:	4413      	add	r3, r2
 800feba:	3314      	adds	r3, #20
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d917      	bls.n	800fef2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	4b35      	ldr	r3, [pc, #212]	; (800ff9c <etharp_output+0x1d4>)
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	4618      	mov	r0, r3
 800fecc:	4934      	ldr	r1, [pc, #208]	; (800ffa0 <etharp_output+0x1d8>)
 800fece:	4603      	mov	r3, r0
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	4403      	add	r3, r0
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	440b      	add	r3, r1
 800fed8:	3304      	adds	r3, #4
 800feda:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fedc:	429a      	cmp	r2, r3
 800fede:	d108      	bne.n	800fef2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fee0:	4b2e      	ldr	r3, [pc, #184]	; (800ff9c <etharp_output+0x1d4>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	68b9      	ldr	r1, [r7, #8]
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f7ff fed3 	bl	800fc94 <etharp_output_to_arp_index>
 800feee:	4603      	mov	r3, r0
 800fef0:	e044      	b.n	800ff7c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fef2:	2300      	movs	r3, #0
 800fef4:	75fb      	strb	r3, [r7, #23]
 800fef6:	e02a      	b.n	800ff4e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fef8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800fefc:	4928      	ldr	r1, [pc, #160]	; (800ffa0 <etharp_output+0x1d8>)
 800fefe:	4613      	mov	r3, r2
 800ff00:	005b      	lsls	r3, r3, #1
 800ff02:	4413      	add	r3, r2
 800ff04:	00db      	lsls	r3, r3, #3
 800ff06:	440b      	add	r3, r1
 800ff08:	3314      	adds	r3, #20
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d918      	bls.n	800ff42 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ff10:	69bb      	ldr	r3, [r7, #24]
 800ff12:	6819      	ldr	r1, [r3, #0]
 800ff14:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ff18:	4821      	ldr	r0, [pc, #132]	; (800ffa0 <etharp_output+0x1d8>)
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	4413      	add	r3, r2
 800ff20:	00db      	lsls	r3, r3, #3
 800ff22:	4403      	add	r3, r0
 800ff24:	3304      	adds	r3, #4
 800ff26:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ff28:	4299      	cmp	r1, r3
 800ff2a:	d10a      	bne.n	800ff42 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800ff2c:	7dfa      	ldrb	r2, [r7, #23]
 800ff2e:	4b1b      	ldr	r3, [pc, #108]	; (800ff9c <etharp_output+0x1d4>)
 800ff30:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	461a      	mov	r2, r3
 800ff36:	68b9      	ldr	r1, [r7, #8]
 800ff38:	68f8      	ldr	r0, [r7, #12]
 800ff3a:	f7ff feab 	bl	800fc94 <etharp_output_to_arp_index>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	e01c      	b.n	800ff7c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ff42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	3301      	adds	r3, #1
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	75fb      	strb	r3, [r7, #23]
 800ff4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff52:	2b09      	cmp	r3, #9
 800ff54:	ddd0      	ble.n	800fef8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ff56:	68ba      	ldr	r2, [r7, #8]
 800ff58:	69b9      	ldr	r1, [r7, #24]
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f000 f822 	bl	800ffa4 <etharp_query>
 800ff60:	4603      	mov	r3, r0
 800ff62:	e00b      	b.n	800ff7c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800ff6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f001 fccd 	bl	8011914 <ethernet_output>
 800ff7a:	4603      	mov	r3, r0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3720      	adds	r7, #32
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	08014aa8 	.word	0x08014aa8
 800ff88:	08014bf8 	.word	0x08014bf8
 800ff8c:	08014b20 	.word	0x08014b20
 800ff90:	08014c48 	.word	0x08014c48
 800ff94:	08014be8 	.word	0x08014be8
 800ff98:	08015314 	.word	0x08015314
 800ff9c:	2000053c 	.word	0x2000053c
 800ffa0:	2000044c 	.word	0x2000044c

0800ffa4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b08c      	sub	sp, #48	; 0x30
 800ffa8:	af02      	add	r7, sp, #8
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	3329      	adds	r3, #41	; 0x29
 800ffb4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ffb6:	23ff      	movs	r3, #255	; 0xff
 800ffb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	68f9      	ldr	r1, [r7, #12]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f000 fdfe 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10c      	bne.n	800ffec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ffda:	2be0      	cmp	r3, #224	; 0xe0
 800ffdc:	d006      	beq.n	800ffec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d003      	beq.n	800ffec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d102      	bne.n	800fff2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ffec:	f06f 030f 	mvn.w	r3, #15
 800fff0:	e10e      	b.n	8010210 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	2101      	movs	r1, #1
 800fff6:	68b8      	ldr	r0, [r7, #8]
 800fff8:	f7ff fba0 	bl	800f73c <etharp_find_entry>
 800fffc:	4603      	mov	r3, r0
 800fffe:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010004:	2b00      	cmp	r3, #0
 8010006:	da02      	bge.n	801000e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010008:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801000c:	e100      	b.n	8010210 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801000e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010012:	4981      	ldr	r1, [pc, #516]	; (8010218 <etharp_query+0x274>)
 8010014:	4613      	mov	r3, r2
 8010016:	005b      	lsls	r3, r3, #1
 8010018:	4413      	add	r3, r2
 801001a:	00db      	lsls	r3, r3, #3
 801001c:	440b      	add	r3, r1
 801001e:	3314      	adds	r3, #20
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d117      	bne.n	8010056 <etharp_query+0xb2>
    is_new_entry = 1;
 8010026:	2301      	movs	r3, #1
 8010028:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801002a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801002e:	497a      	ldr	r1, [pc, #488]	; (8010218 <etharp_query+0x274>)
 8010030:	4613      	mov	r3, r2
 8010032:	005b      	lsls	r3, r3, #1
 8010034:	4413      	add	r3, r2
 8010036:	00db      	lsls	r3, r3, #3
 8010038:	440b      	add	r3, r1
 801003a:	3314      	adds	r3, #20
 801003c:	2201      	movs	r2, #1
 801003e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010040:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010044:	4974      	ldr	r1, [pc, #464]	; (8010218 <etharp_query+0x274>)
 8010046:	4613      	mov	r3, r2
 8010048:	005b      	lsls	r3, r3, #1
 801004a:	4413      	add	r3, r2
 801004c:	00db      	lsls	r3, r3, #3
 801004e:	440b      	add	r3, r1
 8010050:	3308      	adds	r3, #8
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010056:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801005a:	496f      	ldr	r1, [pc, #444]	; (8010218 <etharp_query+0x274>)
 801005c:	4613      	mov	r3, r2
 801005e:	005b      	lsls	r3, r3, #1
 8010060:	4413      	add	r3, r2
 8010062:	00db      	lsls	r3, r3, #3
 8010064:	440b      	add	r3, r1
 8010066:	3314      	adds	r3, #20
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	2b01      	cmp	r3, #1
 801006c:	d012      	beq.n	8010094 <etharp_query+0xf0>
 801006e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010072:	4969      	ldr	r1, [pc, #420]	; (8010218 <etharp_query+0x274>)
 8010074:	4613      	mov	r3, r2
 8010076:	005b      	lsls	r3, r3, #1
 8010078:	4413      	add	r3, r2
 801007a:	00db      	lsls	r3, r3, #3
 801007c:	440b      	add	r3, r1
 801007e:	3314      	adds	r3, #20
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	2b01      	cmp	r3, #1
 8010084:	d806      	bhi.n	8010094 <etharp_query+0xf0>
 8010086:	4b65      	ldr	r3, [pc, #404]	; (801021c <etharp_query+0x278>)
 8010088:	f240 32c7 	movw	r2, #967	; 0x3c7
 801008c:	4964      	ldr	r1, [pc, #400]	; (8010220 <etharp_query+0x27c>)
 801008e:	4865      	ldr	r0, [pc, #404]	; (8010224 <etharp_query+0x280>)
 8010090:	f001 feaa 	bl	8011de8 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d102      	bne.n	80100a0 <etharp_query+0xfc>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10c      	bne.n	80100ba <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80100a0:	68b9      	ldr	r1, [r7, #8]
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f000 f974 	bl	8010390 <etharp_request>
 80100a8:	4603      	mov	r3, r0
 80100aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d102      	bne.n	80100ba <etharp_query+0x116>
      return result;
 80100b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80100b8:	e0aa      	b.n	8010210 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d106      	bne.n	80100ce <etharp_query+0x12a>
 80100c0:	4b56      	ldr	r3, [pc, #344]	; (801021c <etharp_query+0x278>)
 80100c2:	f240 32db 	movw	r2, #987	; 0x3db
 80100c6:	4958      	ldr	r1, [pc, #352]	; (8010228 <etharp_query+0x284>)
 80100c8:	4856      	ldr	r0, [pc, #344]	; (8010224 <etharp_query+0x280>)
 80100ca:	f001 fe8d 	bl	8011de8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80100ce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80100d2:	4951      	ldr	r1, [pc, #324]	; (8010218 <etharp_query+0x274>)
 80100d4:	4613      	mov	r3, r2
 80100d6:	005b      	lsls	r3, r3, #1
 80100d8:	4413      	add	r3, r2
 80100da:	00db      	lsls	r3, r3, #3
 80100dc:	440b      	add	r3, r1
 80100de:	3314      	adds	r3, #20
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	d918      	bls.n	8010118 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80100e6:	7cfa      	ldrb	r2, [r7, #19]
 80100e8:	4b50      	ldr	r3, [pc, #320]	; (801022c <etharp_query+0x288>)
 80100ea:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80100ec:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80100f0:	4613      	mov	r3, r2
 80100f2:	005b      	lsls	r3, r3, #1
 80100f4:	4413      	add	r3, r2
 80100f6:	00db      	lsls	r3, r3, #3
 80100f8:	3308      	adds	r3, #8
 80100fa:	4a47      	ldr	r2, [pc, #284]	; (8010218 <etharp_query+0x274>)
 80100fc:	4413      	add	r3, r2
 80100fe:	3304      	adds	r3, #4
 8010100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010104:	9200      	str	r2, [sp, #0]
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	6879      	ldr	r1, [r7, #4]
 801010a:	68f8      	ldr	r0, [r7, #12]
 801010c:	f001 fc02 	bl	8011914 <ethernet_output>
 8010110:	4603      	mov	r3, r0
 8010112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010116:	e079      	b.n	801020c <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010118:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801011c:	493e      	ldr	r1, [pc, #248]	; (8010218 <etharp_query+0x274>)
 801011e:	4613      	mov	r3, r2
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	4413      	add	r3, r2
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	440b      	add	r3, r1
 8010128:	3314      	adds	r3, #20
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	2b01      	cmp	r3, #1
 801012e:	d16d      	bne.n	801020c <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010130:	2300      	movs	r3, #0
 8010132:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010138:	e01a      	b.n	8010170 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	895a      	ldrh	r2, [r3, #10]
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	891b      	ldrh	r3, [r3, #8]
 8010142:	429a      	cmp	r2, r3
 8010144:	d10a      	bne.n	801015c <etharp_query+0x1b8>
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d006      	beq.n	801015c <etharp_query+0x1b8>
 801014e:	4b33      	ldr	r3, [pc, #204]	; (801021c <etharp_query+0x278>)
 8010150:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8010154:	4936      	ldr	r1, [pc, #216]	; (8010230 <etharp_query+0x28c>)
 8010156:	4833      	ldr	r0, [pc, #204]	; (8010224 <etharp_query+0x280>)
 8010158:	f001 fe46 	bl	8011de8 <iprintf>
      if (p->type != PBUF_ROM) {
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	7b1b      	ldrb	r3, [r3, #12]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d002      	beq.n	801016a <etharp_query+0x1c6>
        copy_needed = 1;
 8010164:	2301      	movs	r3, #1
 8010166:	61bb      	str	r3, [r7, #24]
        break;
 8010168:	e005      	b.n	8010176 <etharp_query+0x1d2>
      }
      p = p->next;
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1e1      	bne.n	801013a <etharp_query+0x196>
    }
    if (copy_needed) {
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d017      	beq.n	80101ac <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	891b      	ldrh	r3, [r3, #8]
 8010180:	2200      	movs	r2, #0
 8010182:	4619      	mov	r1, r3
 8010184:	2002      	movs	r0, #2
 8010186:	f7f9 faff 	bl	8009788 <pbuf_alloc>
 801018a:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d011      	beq.n	80101b6 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8010192:	6879      	ldr	r1, [r7, #4]
 8010194:	69f8      	ldr	r0, [r7, #28]
 8010196:	f7f9 ff9b 	bl	800a0d0 <pbuf_copy>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00a      	beq.n	80101b6 <etharp_query+0x212>
          pbuf_free(p);
 80101a0:	69f8      	ldr	r0, [r7, #28]
 80101a2:	f7f9 fe63 	bl	8009e6c <pbuf_free>
          p = NULL;
 80101a6:	2300      	movs	r3, #0
 80101a8:	61fb      	str	r3, [r7, #28]
 80101aa:	e004      	b.n	80101b6 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80101b0:	69f8      	ldr	r0, [r7, #28]
 80101b2:	f7f9 ff05 	bl	8009fc0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d024      	beq.n	8010206 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80101bc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80101c0:	4915      	ldr	r1, [pc, #84]	; (8010218 <etharp_query+0x274>)
 80101c2:	4613      	mov	r3, r2
 80101c4:	005b      	lsls	r3, r3, #1
 80101c6:	4413      	add	r3, r2
 80101c8:	00db      	lsls	r3, r3, #3
 80101ca:	440b      	add	r3, r1
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00b      	beq.n	80101ea <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80101d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80101d6:	4910      	ldr	r1, [pc, #64]	; (8010218 <etharp_query+0x274>)
 80101d8:	4613      	mov	r3, r2
 80101da:	005b      	lsls	r3, r3, #1
 80101dc:	4413      	add	r3, r2
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	440b      	add	r3, r1
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7f9 fe41 	bl	8009e6c <pbuf_free>
      }
      arp_table[i].q = p;
 80101ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80101ee:	490a      	ldr	r1, [pc, #40]	; (8010218 <etharp_query+0x274>)
 80101f0:	4613      	mov	r3, r2
 80101f2:	005b      	lsls	r3, r3, #1
 80101f4:	4413      	add	r3, r2
 80101f6:	00db      	lsls	r3, r3, #3
 80101f8:	440b      	add	r3, r1
 80101fa:	69fa      	ldr	r2, [r7, #28]
 80101fc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80101fe:	2300      	movs	r3, #0
 8010200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010204:	e002      	b.n	801020c <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010206:	23ff      	movs	r3, #255	; 0xff
 8010208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801020c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010210:	4618      	mov	r0, r3
 8010212:	3728      	adds	r7, #40	; 0x28
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	2000044c 	.word	0x2000044c
 801021c:	08014aa8 	.word	0x08014aa8
 8010220:	08014c54 	.word	0x08014c54
 8010224:	08014b20 	.word	0x08014b20
 8010228:	08014c48 	.word	0x08014c48
 801022c:	2000053c 	.word	0x2000053c
 8010230:	08014c7c 	.word	0x08014c7c

08010234 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b08a      	sub	sp, #40	; 0x28
 8010238:	af02      	add	r7, sp, #8
 801023a:	60f8      	str	r0, [r7, #12]
 801023c:	60b9      	str	r1, [r7, #8]
 801023e:	607a      	str	r2, [r7, #4]
 8010240:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010242:	2300      	movs	r3, #0
 8010244:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d106      	bne.n	801025a <etharp_raw+0x26>
 801024c:	4b3a      	ldr	r3, [pc, #232]	; (8010338 <etharp_raw+0x104>)
 801024e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8010252:	493a      	ldr	r1, [pc, #232]	; (801033c <etharp_raw+0x108>)
 8010254:	483a      	ldr	r0, [pc, #232]	; (8010340 <etharp_raw+0x10c>)
 8010256:	f001 fdc7 	bl	8011de8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801025a:	2200      	movs	r2, #0
 801025c:	211c      	movs	r1, #28
 801025e:	2002      	movs	r0, #2
 8010260:	f7f9 fa92 	bl	8009788 <pbuf_alloc>
 8010264:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d102      	bne.n	8010272 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801026c:	f04f 33ff 	mov.w	r3, #4294967295
 8010270:	e05d      	b.n	801032e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	895b      	ldrh	r3, [r3, #10]
 8010276:	2b1b      	cmp	r3, #27
 8010278:	d806      	bhi.n	8010288 <etharp_raw+0x54>
 801027a:	4b2f      	ldr	r3, [pc, #188]	; (8010338 <etharp_raw+0x104>)
 801027c:	f240 4263 	movw	r2, #1123	; 0x463
 8010280:	4930      	ldr	r1, [pc, #192]	; (8010344 <etharp_raw+0x110>)
 8010282:	482f      	ldr	r0, [pc, #188]	; (8010340 <etharp_raw+0x10c>)
 8010284:	f001 fdb0 	bl	8011de8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010288:	69bb      	ldr	r3, [r7, #24]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801028e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010290:	4618      	mov	r0, r3
 8010292:	f7f8 fcbe 	bl	8008c12 <lwip_htons>
 8010296:	4603      	mov	r3, r0
 8010298:	461a      	mov	r2, r3
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102a4:	2b06      	cmp	r3, #6
 80102a6:	d006      	beq.n	80102b6 <etharp_raw+0x82>
 80102a8:	4b23      	ldr	r3, [pc, #140]	; (8010338 <etharp_raw+0x104>)
 80102aa:	f240 426a 	movw	r2, #1130	; 0x46a
 80102ae:	4926      	ldr	r1, [pc, #152]	; (8010348 <etharp_raw+0x114>)
 80102b0:	4823      	ldr	r0, [pc, #140]	; (8010340 <etharp_raw+0x10c>)
 80102b2:	f001 fd99 	bl	8011de8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	3308      	adds	r3, #8
 80102ba:	2206      	movs	r2, #6
 80102bc:	6839      	ldr	r1, [r7, #0]
 80102be:	4618      	mov	r0, r3
 80102c0:	f001 fcbc 	bl	8011c3c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	3312      	adds	r3, #18
 80102c8:	2206      	movs	r2, #6
 80102ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102cc:	4618      	mov	r0, r3
 80102ce:	f001 fcb5 	bl	8011c3c <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	330e      	adds	r3, #14
 80102d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102d8:	6812      	ldr	r2, [r2, #0]
 80102da:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	3318      	adds	r3, #24
 80102e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102e2:	6812      	ldr	r2, [r2, #0]
 80102e4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	2200      	movs	r2, #0
 80102ea:	701a      	strb	r2, [r3, #0]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f042 0201 	orr.w	r2, r2, #1
 80102f2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f042 0208 	orr.w	r2, r2, #8
 80102fc:	709a      	strb	r2, [r3, #2]
 80102fe:	2200      	movs	r2, #0
 8010300:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	2206      	movs	r2, #6
 8010306:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	2204      	movs	r2, #4
 801030c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801030e:	f640 0306 	movw	r3, #2054	; 0x806
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	68ba      	ldr	r2, [r7, #8]
 8010318:	69b9      	ldr	r1, [r7, #24]
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f001 fafa 	bl	8011914 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010320:	69b8      	ldr	r0, [r7, #24]
 8010322:	f7f9 fda3 	bl	8009e6c <pbuf_free>
  p = NULL;
 8010326:	2300      	movs	r3, #0
 8010328:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801032a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801032e:	4618      	mov	r0, r3
 8010330:	3720      	adds	r7, #32
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	08014aa8 	.word	0x08014aa8
 801033c:	08014bf8 	.word	0x08014bf8
 8010340:	08014b20 	.word	0x08014b20
 8010344:	08014c98 	.word	0x08014c98
 8010348:	08014ccc 	.word	0x08014ccc

0801034c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b088      	sub	sp, #32
 8010350:	af04      	add	r7, sp, #16
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010368:	2201      	movs	r2, #1
 801036a:	9203      	str	r2, [sp, #12]
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	9202      	str	r2, [sp, #8]
 8010370:	4a06      	ldr	r2, [pc, #24]	; (801038c <etharp_request_dst+0x40>)
 8010372:	9201      	str	r2, [sp, #4]
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	4603      	mov	r3, r0
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f7ff ff5a 	bl	8010234 <etharp_raw>
 8010380:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010382:	4618      	mov	r0, r3
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	0801531c 	.word	0x0801531c

08010390 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801039a:	4a05      	ldr	r2, [pc, #20]	; (80103b0 <etharp_request+0x20>)
 801039c:	6839      	ldr	r1, [r7, #0]
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7ff ffd4 	bl	801034c <etharp_request_dst>
 80103a4:	4603      	mov	r3, r0
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	08015314 	.word	0x08015314

080103b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b08e      	sub	sp, #56	; 0x38
 80103b8:	af04      	add	r7, sp, #16
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80103be:	4b7a      	ldr	r3, [pc, #488]	; (80105a8 <icmp_input+0x1f4>)
 80103c0:	689b      	ldr	r3, [r3, #8]
 80103c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80103c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	f003 030f 	and.w	r3, r3, #15
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80103d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103d6:	2b13      	cmp	r3, #19
 80103d8:	f240 80d1 	bls.w	801057e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	895b      	ldrh	r3, [r3, #10]
 80103e0:	2b03      	cmp	r3, #3
 80103e2:	f240 80ce 	bls.w	8010582 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80103f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 80bb 	beq.w	8010570 <icmp_input+0x1bc>
 80103fa:	2b08      	cmp	r3, #8
 80103fc:	f040 80bb 	bne.w	8010576 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8010400:	4b6a      	ldr	r3, [pc, #424]	; (80105ac <icmp_input+0x1f8>)
 8010402:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010404:	4b68      	ldr	r3, [pc, #416]	; (80105a8 <icmp_input+0x1f4>)
 8010406:	695b      	ldr	r3, [r3, #20]
 8010408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801040c:	2be0      	cmp	r3, #224	; 0xe0
 801040e:	f000 80bf 	beq.w	8010590 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010412:	4b65      	ldr	r3, [pc, #404]	; (80105a8 <icmp_input+0x1f4>)
 8010414:	695b      	ldr	r3, [r3, #20]
 8010416:	4a64      	ldr	r2, [pc, #400]	; (80105a8 <icmp_input+0x1f4>)
 8010418:	6812      	ldr	r2, [r2, #0]
 801041a:	4611      	mov	r1, r2
 801041c:	4618      	mov	r0, r3
 801041e:	f000 fbd3 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	f040 80b5 	bne.w	8010594 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	891b      	ldrh	r3, [r3, #8]
 801042e:	2b07      	cmp	r3, #7
 8010430:	f240 80a9 	bls.w	8010586 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8010434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010436:	330e      	adds	r3, #14
 8010438:	b29b      	uxth	r3, r3
 801043a:	b21b      	sxth	r3, r3
 801043c:	4619      	mov	r1, r3
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7f9 fcf0 	bl	8009e24 <pbuf_header>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d046      	beq.n	80104d8 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	891a      	ldrh	r2, [r3, #8]
 801044e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010450:	4413      	add	r3, r2
 8010452:	b29b      	uxth	r3, r3
 8010454:	2200      	movs	r2, #0
 8010456:	4619      	mov	r1, r3
 8010458:	2002      	movs	r0, #2
 801045a:	f7f9 f995 	bl	8009788 <pbuf_alloc>
 801045e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8010460:	69bb      	ldr	r3, [r7, #24]
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 8098 	beq.w	8010598 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010468:	69bb      	ldr	r3, [r7, #24]
 801046a:	895b      	ldrh	r3, [r3, #10]
 801046c:	461a      	mov	r2, r3
 801046e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010470:	3308      	adds	r3, #8
 8010472:	429a      	cmp	r2, r3
 8010474:	d203      	bcs.n	801047e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8010476:	69b8      	ldr	r0, [r7, #24]
 8010478:	f7f9 fcf8 	bl	8009e6c <pbuf_free>
        goto icmperr;
 801047c:	e08d      	b.n	801059a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010486:	4618      	mov	r0, r3
 8010488:	f001 fbd8 	bl	8011c3c <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801048c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801048e:	425b      	negs	r3, r3
 8010490:	b29b      	uxth	r3, r3
 8010492:	b21b      	sxth	r3, r3
 8010494:	4619      	mov	r1, r3
 8010496:	69b8      	ldr	r0, [r7, #24]
 8010498:	f7f9 fcc4 	bl	8009e24 <pbuf_header>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d009      	beq.n	80104b6 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80104a2:	4b43      	ldr	r3, [pc, #268]	; (80105b0 <icmp_input+0x1fc>)
 80104a4:	22af      	movs	r2, #175	; 0xaf
 80104a6:	4943      	ldr	r1, [pc, #268]	; (80105b4 <icmp_input+0x200>)
 80104a8:	4843      	ldr	r0, [pc, #268]	; (80105b8 <icmp_input+0x204>)
 80104aa:	f001 fc9d 	bl	8011de8 <iprintf>
        pbuf_free(r);
 80104ae:	69b8      	ldr	r0, [r7, #24]
 80104b0:	f7f9 fcdc 	bl	8009e6c <pbuf_free>
        goto icmperr;
 80104b4:	e071      	b.n	801059a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80104b6:	6879      	ldr	r1, [r7, #4]
 80104b8:	69b8      	ldr	r0, [r7, #24]
 80104ba:	f7f9 fe09 	bl	800a0d0 <pbuf_copy>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d003      	beq.n	80104cc <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80104c4:	69b8      	ldr	r0, [r7, #24]
 80104c6:	f7f9 fcd1 	bl	8009e6c <pbuf_free>
        goto icmperr;
 80104ca:	e066      	b.n	801059a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f7f9 fccd 	bl	8009e6c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80104d2:	69bb      	ldr	r3, [r7, #24]
 80104d4:	607b      	str	r3, [r7, #4]
 80104d6:	e015      	b.n	8010504 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80104d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104da:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80104de:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80104e2:	33f2      	adds	r3, #242	; 0xf2
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	b21b      	sxth	r3, r3
 80104e8:	4619      	mov	r1, r3
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f7f9 fc9a 	bl	8009e24 <pbuf_header>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d006      	beq.n	8010504 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80104f6:	4b2e      	ldr	r3, [pc, #184]	; (80105b0 <icmp_input+0x1fc>)
 80104f8:	22c0      	movs	r2, #192	; 0xc0
 80104fa:	4930      	ldr	r1, [pc, #192]	; (80105bc <icmp_input+0x208>)
 80104fc:	482e      	ldr	r0, [pc, #184]	; (80105b8 <icmp_input+0x204>)
 80104fe:	f001 fc73 	bl	8011de8 <iprintf>
        goto icmperr;
 8010502:	e04a      	b.n	801059a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801050a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801050e:	4619      	mov	r1, r3
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7f9 fc87 	bl	8009e24 <pbuf_header>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d12b      	bne.n	8010574 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8010522:	69fb      	ldr	r3, [r7, #28]
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801052a:	4b1f      	ldr	r3, [pc, #124]	; (80105a8 <icmp_input+0x1f4>)
 801052c:	691a      	ldr	r2, [r3, #16]
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2200      	movs	r2, #0
 8010536:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	2200      	movs	r2, #0
 801053c:	709a      	strb	r2, [r3, #2]
 801053e:	2200      	movs	r2, #0
 8010540:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	22ff      	movs	r2, #255	; 0xff
 8010546:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	2200      	movs	r2, #0
 801054c:	729a      	strb	r2, [r3, #10]
 801054e:	2200      	movs	r2, #0
 8010550:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	9302      	str	r3, [sp, #8]
 8010556:	2301      	movs	r3, #1
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	2300      	movs	r3, #0
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	23ff      	movs	r3, #255	; 0xff
 8010560:	2200      	movs	r2, #0
 8010562:	69f9      	ldr	r1, [r7, #28]
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 fa5d 	bl	8010a24 <ip4_output_if>
 801056a:	4603      	mov	r3, r0
 801056c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801056e:	e001      	b.n	8010574 <icmp_input+0x1c0>
    break;
 8010570:	bf00      	nop
 8010572:	e000      	b.n	8010576 <icmp_input+0x1c2>
    break;
 8010574:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7f9 fc78 	bl	8009e6c <pbuf_free>
  return;
 801057c:	e011      	b.n	80105a2 <icmp_input+0x1ee>
    goto lenerr;
 801057e:	bf00      	nop
 8010580:	e002      	b.n	8010588 <icmp_input+0x1d4>
    goto lenerr;
 8010582:	bf00      	nop
 8010584:	e000      	b.n	8010588 <icmp_input+0x1d4>
      goto lenerr;
 8010586:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7f9 fc6f 	bl	8009e6c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801058e:	e008      	b.n	80105a2 <icmp_input+0x1ee>
      goto icmperr;
 8010590:	bf00      	nop
 8010592:	e002      	b.n	801059a <icmp_input+0x1e6>
      goto icmperr;
 8010594:	bf00      	nop
 8010596:	e000      	b.n	801059a <icmp_input+0x1e6>
        goto icmperr;
 8010598:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7f9 fc66 	bl	8009e6c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80105a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80105a2:	3728      	adds	r7, #40	; 0x28
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	20003658 	.word	0x20003658
 80105ac:	2000366c 	.word	0x2000366c
 80105b0:	08014d10 	.word	0x08014d10
 80105b4:	08014d48 	.word	0x08014d48
 80105b8:	08014d80 	.word	0x08014d80
 80105bc:	08014da8 	.word	0x08014da8

080105c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	460b      	mov	r3, r1
 80105ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80105cc:	78fb      	ldrb	r3, [r7, #3]
 80105ce:	461a      	mov	r2, r3
 80105d0:	2103      	movs	r1, #3
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 f814 	bl	8010600 <icmp_send_response>
}
 80105d8:	bf00      	nop
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	460b      	mov	r3, r1
 80105ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80105ec:	78fb      	ldrb	r3, [r7, #3]
 80105ee:	461a      	mov	r2, r3
 80105f0:	210b      	movs	r1, #11
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f000 f804 	bl	8010600 <icmp_send_response>
}
 80105f8:	bf00      	nop
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b08c      	sub	sp, #48	; 0x30
 8010604:	af04      	add	r7, sp, #16
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	460b      	mov	r3, r1
 801060a:	70fb      	strb	r3, [r7, #3]
 801060c:	4613      	mov	r3, r2
 801060e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010610:	2200      	movs	r2, #0
 8010612:	2124      	movs	r1, #36	; 0x24
 8010614:	2001      	movs	r0, #1
 8010616:	f7f9 f8b7 	bl	8009788 <pbuf_alloc>
 801061a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d04c      	beq.n	80106bc <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	895b      	ldrh	r3, [r3, #10]
 8010626:	2b23      	cmp	r3, #35	; 0x23
 8010628:	d806      	bhi.n	8010638 <icmp_send_response+0x38>
 801062a:	4b26      	ldr	r3, [pc, #152]	; (80106c4 <icmp_send_response+0xc4>)
 801062c:	f240 1261 	movw	r2, #353	; 0x161
 8010630:	4925      	ldr	r1, [pc, #148]	; (80106c8 <icmp_send_response+0xc8>)
 8010632:	4826      	ldr	r0, [pc, #152]	; (80106cc <icmp_send_response+0xcc>)
 8010634:	f001 fbd8 	bl	8011de8 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	78fa      	ldrb	r2, [r7, #3]
 8010648:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	78ba      	ldrb	r2, [r7, #2]
 801064e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	2200      	movs	r2, #0
 8010654:	711a      	strb	r2, [r3, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	2200      	movs	r2, #0
 801065e:	719a      	strb	r2, [r3, #6]
 8010660:	2200      	movs	r2, #0
 8010662:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	f103 0008 	add.w	r0, r3, #8
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	221c      	movs	r2, #28
 8010672:	4619      	mov	r1, r3
 8010674:	f001 fae2 	bl	8011c3c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801067e:	f107 030c 	add.w	r3, r7, #12
 8010682:	4618      	mov	r0, r3
 8010684:	f000 f824 	bl	80106d0 <ip4_route>
 8010688:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d011      	beq.n	80106b4 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	2200      	movs	r2, #0
 8010694:	709a      	strb	r2, [r3, #2]
 8010696:	2200      	movs	r2, #0
 8010698:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801069a:	f107 020c 	add.w	r2, r7, #12
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	9302      	str	r3, [sp, #8]
 80106a2:	2301      	movs	r3, #1
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	2300      	movs	r3, #0
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	23ff      	movs	r3, #255	; 0xff
 80106ac:	2100      	movs	r1, #0
 80106ae:	69f8      	ldr	r0, [r7, #28]
 80106b0:	f000 f9b8 	bl	8010a24 <ip4_output_if>
  }
  pbuf_free(q);
 80106b4:	69f8      	ldr	r0, [r7, #28]
 80106b6:	f7f9 fbd9 	bl	8009e6c <pbuf_free>
 80106ba:	e000      	b.n	80106be <icmp_send_response+0xbe>
    return;
 80106bc:	bf00      	nop
}
 80106be:	3720      	adds	r7, #32
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	08014d10 	.word	0x08014d10
 80106c8:	08014ddc 	.word	0x08014ddc
 80106cc:	08014d80 	.word	0x08014d80

080106d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80106d8:	4b30      	ldr	r3, [pc, #192]	; (801079c <ip4_route+0xcc>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	60fb      	str	r3, [r7, #12]
 80106de:	e036      	b.n	801074e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106e6:	f003 0301 	and.w	r3, r3, #1
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d02b      	beq.n	8010748 <ip4_route+0x78>
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106f6:	089b      	lsrs	r3, r3, #2
 80106f8:	f003 0301 	and.w	r3, r3, #1
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d022      	beq.n	8010748 <ip4_route+0x78>
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3304      	adds	r3, #4
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d01d      	beq.n	8010748 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	3304      	adds	r3, #4
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	405a      	eors	r2, r3
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	3308      	adds	r3, #8
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4013      	ands	r3, r2
 8010720:	2b00      	cmp	r3, #0
 8010722:	d101      	bne.n	8010728 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	e033      	b.n	8010790 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801072e:	f003 0302 	and.w	r3, r3, #2
 8010732:	2b00      	cmp	r3, #0
 8010734:	d108      	bne.n	8010748 <ip4_route+0x78>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	330c      	adds	r3, #12
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	429a      	cmp	r2, r3
 8010742:	d101      	bne.n	8010748 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	e023      	b.n	8010790 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	60fb      	str	r3, [r7, #12]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d1c5      	bne.n	80106e0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010754:	4b12      	ldr	r3, [pc, #72]	; (80107a0 <ip4_route+0xd0>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d015      	beq.n	8010788 <ip4_route+0xb8>
 801075c:	4b10      	ldr	r3, [pc, #64]	; (80107a0 <ip4_route+0xd0>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010764:	f003 0301 	and.w	r3, r3, #1
 8010768:	2b00      	cmp	r3, #0
 801076a:	d00d      	beq.n	8010788 <ip4_route+0xb8>
 801076c:	4b0c      	ldr	r3, [pc, #48]	; (80107a0 <ip4_route+0xd0>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010774:	f003 0304 	and.w	r3, r3, #4
 8010778:	2b00      	cmp	r3, #0
 801077a:	d005      	beq.n	8010788 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801077c:	4b08      	ldr	r3, [pc, #32]	; (80107a0 <ip4_route+0xd0>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	3304      	adds	r3, #4
 8010782:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010784:	2b00      	cmp	r3, #0
 8010786:	d101      	bne.n	801078c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010788:	2300      	movs	r3, #0
 801078a:	e001      	b.n	8010790 <ip4_route+0xc0>
  }

  return netif_default;
 801078c:	4b04      	ldr	r3, [pc, #16]	; (80107a0 <ip4_route+0xd0>)
 801078e:	681b      	ldr	r3, [r3, #0]
}
 8010790:	4618      	mov	r0, r3
 8010792:	3714      	adds	r7, #20
 8010794:	46bd      	mov	sp, r7
 8010796:	bc80      	pop	{r7}
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	20006b78 	.word	0x20006b78
 80107a0:	20006b7c 	.word	0x20006b7c

080107a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b086      	sub	sp, #24
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	091b      	lsrs	r3, r3, #4
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	2b04      	cmp	r3, #4
 80107be:	d004      	beq.n	80107ca <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7f9 fb53 	bl	8009e6c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80107c6:	2300      	movs	r3, #0
 80107c8:	e124      	b.n	8010a14 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	f003 030f 	and.w	r3, r3, #15
 80107d4:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80107d6:	897b      	ldrh	r3, [r7, #10]
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	885b      	ldrh	r3, [r3, #2]
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f8 fa15 	bl	8008c12 <lwip_htons>
 80107e8:	4603      	mov	r3, r0
 80107ea:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	891b      	ldrh	r3, [r3, #8]
 80107f0:	893a      	ldrh	r2, [r7, #8]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d204      	bcs.n	8010800 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 80107f6:	893b      	ldrh	r3, [r7, #8]
 80107f8:	4619      	mov	r1, r3
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7f9 f9c2 	bl	8009b84 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	895b      	ldrh	r3, [r3, #10]
 8010804:	897a      	ldrh	r2, [r7, #10]
 8010806:	429a      	cmp	r2, r3
 8010808:	d807      	bhi.n	801081a <ip4_input+0x76>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	891b      	ldrh	r3, [r3, #8]
 801080e:	893a      	ldrh	r2, [r7, #8]
 8010810:	429a      	cmp	r2, r3
 8010812:	d802      	bhi.n	801081a <ip4_input+0x76>
 8010814:	897b      	ldrh	r3, [r7, #10]
 8010816:	2b13      	cmp	r3, #19
 8010818:	d804      	bhi.n	8010824 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7f9 fb26 	bl	8009e6c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010820:	2300      	movs	r3, #0
 8010822:	e0f7      	b.n	8010a14 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	691b      	ldr	r3, [r3, #16]
 8010828:	4a7c      	ldr	r2, [pc, #496]	; (8010a1c <ip4_input+0x278>)
 801082a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	4a7a      	ldr	r2, [pc, #488]	; (8010a1c <ip4_input+0x278>)
 8010832:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010834:	4b79      	ldr	r3, [pc, #484]	; (8010a1c <ip4_input+0x278>)
 8010836:	695b      	ldr	r3, [r3, #20]
 8010838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801083c:	2be0      	cmp	r3, #224	; 0xe0
 801083e:	d112      	bne.n	8010866 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010846:	f003 0301 	and.w	r3, r3, #1
 801084a:	b2db      	uxtb	r3, r3
 801084c:	2b00      	cmp	r3, #0
 801084e:	d007      	beq.n	8010860 <ip4_input+0xbc>
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	3304      	adds	r3, #4
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d002      	beq.n	8010860 <ip4_input+0xbc>
      netif = inp;
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	613b      	str	r3, [r7, #16]
 801085e:	e041      	b.n	80108e4 <ip4_input+0x140>
    } else {
      netif = NULL;
 8010860:	2300      	movs	r3, #0
 8010862:	613b      	str	r3, [r7, #16]
 8010864:	e03e      	b.n	80108e4 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8010866:	2301      	movs	r3, #1
 8010868:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010874:	f003 0301 	and.w	r3, r3, #1
 8010878:	b2db      	uxtb	r3, r3
 801087a:	2b00      	cmp	r3, #0
 801087c:	d014      	beq.n	80108a8 <ip4_input+0x104>
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	3304      	adds	r3, #4
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d00f      	beq.n	80108a8 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010888:	4b64      	ldr	r3, [pc, #400]	; (8010a1c <ip4_input+0x278>)
 801088a:	695a      	ldr	r2, [r3, #20]
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	3304      	adds	r3, #4
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	429a      	cmp	r2, r3
 8010894:	d026      	beq.n	80108e4 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010896:	4b61      	ldr	r3, [pc, #388]	; (8010a1c <ip4_input+0x278>)
 8010898:	695b      	ldr	r3, [r3, #20]
 801089a:	6939      	ldr	r1, [r7, #16]
 801089c:	4618      	mov	r0, r3
 801089e:	f000 f993 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 80108a2:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d11d      	bne.n	80108e4 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d00d      	beq.n	80108ca <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80108ae:	4b5b      	ldr	r3, [pc, #364]	; (8010a1c <ip4_input+0x278>)
 80108b0:	695b      	ldr	r3, [r3, #20]
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	2b7f      	cmp	r3, #127	; 0x7f
 80108b6:	d102      	bne.n	80108be <ip4_input+0x11a>
          netif = NULL;
 80108b8:	2300      	movs	r3, #0
 80108ba:	613b      	str	r3, [r7, #16]
          break;
 80108bc:	e012      	b.n	80108e4 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80108be:	2300      	movs	r3, #0
 80108c0:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 80108c2:	4b57      	ldr	r3, [pc, #348]	; (8010a20 <ip4_input+0x27c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	613b      	str	r3, [r7, #16]
 80108c8:	e002      	b.n	80108d0 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 80108d0:	693a      	ldr	r2, [r7, #16]
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d102      	bne.n	80108de <ip4_input+0x13a>
        netif = netif->next;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1c4      	bne.n	801086e <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80108e4:	4b4d      	ldr	r3, [pc, #308]	; (8010a1c <ip4_input+0x278>)
 80108e6:	691b      	ldr	r3, [r3, #16]
 80108e8:	6839      	ldr	r1, [r7, #0]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f000 f96c 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d105      	bne.n	8010902 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80108f6:	4b49      	ldr	r3, [pc, #292]	; (8010a1c <ip4_input+0x278>)
 80108f8:	691b      	ldr	r3, [r3, #16]
 80108fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80108fe:	2be0      	cmp	r3, #224	; 0xe0
 8010900:	d104      	bne.n	801090c <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f7f9 fab2 	bl	8009e6c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010908:	2300      	movs	r3, #0
 801090a:	e083      	b.n	8010a14 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d104      	bne.n	801091c <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7f9 faaa 	bl	8009e6c <pbuf_free>
    return ERR_OK;
 8010918:	2300      	movs	r3, #0
 801091a:	e07b      	b.n	8010a14 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	88db      	ldrh	r3, [r3, #6]
 8010920:	b29b      	uxth	r3, r3
 8010922:	461a      	mov	r2, r3
 8010924:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010928:	4013      	ands	r3, r2
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00b      	beq.n	8010946 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 fc8e 	bl	8011250 <ip4_reass>
 8010934:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d101      	bne.n	8010940 <ip4_input+0x19c>
      return ERR_OK;
 801093c:	2300      	movs	r3, #0
 801093e:	e069      	b.n	8010a14 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010946:	4a35      	ldr	r2, [pc, #212]	; (8010a1c <ip4_input+0x278>)
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801094c:	4a33      	ldr	r2, [pc, #204]	; (8010a1c <ip4_input+0x278>)
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010952:	4a32      	ldr	r2, [pc, #200]	; (8010a1c <ip4_input+0x278>)
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	b29b      	uxth	r3, r3
 801095e:	f003 030f 	and.w	r3, r3, #15
 8010962:	b29b      	uxth	r3, r3
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	b29a      	uxth	r2, r3
 8010968:	4b2c      	ldr	r3, [pc, #176]	; (8010a1c <ip4_input+0x278>)
 801096a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801096c:	897b      	ldrh	r3, [r7, #10]
 801096e:	425b      	negs	r3, r3
 8010970:	b29b      	uxth	r3, r3
 8010972:	b21b      	sxth	r3, r3
 8010974:	4619      	mov	r1, r3
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f7f9 fa54 	bl	8009e24 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	7a5b      	ldrb	r3, [r3, #9]
 8010980:	2b11      	cmp	r3, #17
 8010982:	d006      	beq.n	8010992 <ip4_input+0x1ee>
 8010984:	2b11      	cmp	r3, #17
 8010986:	dc13      	bgt.n	80109b0 <ip4_input+0x20c>
 8010988:	2b01      	cmp	r3, #1
 801098a:	d00c      	beq.n	80109a6 <ip4_input+0x202>
 801098c:	2b06      	cmp	r3, #6
 801098e:	d005      	beq.n	801099c <ip4_input+0x1f8>
 8010990:	e00e      	b.n	80109b0 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8010992:	6839      	ldr	r1, [r7, #0]
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f7fe fa91 	bl	800eebc <udp_input>
      break;
 801099a:	e028      	b.n	80109ee <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801099c:	6839      	ldr	r1, [r7, #0]
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7fa ff42 	bl	800b828 <tcp_input>
      break;
 80109a4:	e023      	b.n	80109ee <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 80109a6:	6839      	ldr	r1, [r7, #0]
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff fd03 	bl	80103b4 <icmp_input>
      break;
 80109ae:	e01e      	b.n	80109ee <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80109b0:	4b1a      	ldr	r3, [pc, #104]	; (8010a1c <ip4_input+0x278>)
 80109b2:	695b      	ldr	r3, [r3, #20]
 80109b4:	6939      	ldr	r1, [r7, #16]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 f906 	bl	8010bc8 <ip4_addr_isbroadcast_u32>
 80109bc:	4603      	mov	r3, r0
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d112      	bne.n	80109e8 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80109c2:	4b16      	ldr	r3, [pc, #88]	; (8010a1c <ip4_input+0x278>)
 80109c4:	695b      	ldr	r3, [r3, #20]
 80109c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80109ca:	2be0      	cmp	r3, #224	; 0xe0
 80109cc:	d00c      	beq.n	80109e8 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80109ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80109d2:	4619      	mov	r1, r3
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7f9 fa37 	bl	8009e48 <pbuf_header_force>
        p->payload = iphdr;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	697a      	ldr	r2, [r7, #20]
 80109de:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80109e0:	2102      	movs	r1, #2
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f7ff fdec 	bl	80105c0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7f9 fa3f 	bl	8009e6c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80109ee:	4b0b      	ldr	r3, [pc, #44]	; (8010a1c <ip4_input+0x278>)
 80109f0:	2200      	movs	r2, #0
 80109f2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80109f4:	4b09      	ldr	r3, [pc, #36]	; (8010a1c <ip4_input+0x278>)
 80109f6:	2200      	movs	r2, #0
 80109f8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80109fa:	4b08      	ldr	r3, [pc, #32]	; (8010a1c <ip4_input+0x278>)
 80109fc:	2200      	movs	r2, #0
 80109fe:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010a00:	4b06      	ldr	r3, [pc, #24]	; (8010a1c <ip4_input+0x278>)
 8010a02:	2200      	movs	r2, #0
 8010a04:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010a06:	4b05      	ldr	r3, [pc, #20]	; (8010a1c <ip4_input+0x278>)
 8010a08:	2200      	movs	r2, #0
 8010a0a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010a0c:	4b03      	ldr	r3, [pc, #12]	; (8010a1c <ip4_input+0x278>)
 8010a0e:	2200      	movs	r2, #0
 8010a10:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3718      	adds	r7, #24
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	20003658 	.word	0x20003658
 8010a20:	20006b78 	.word	0x20006b78

08010a24 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b08a      	sub	sp, #40	; 0x28
 8010a28:	af04      	add	r7, sp, #16
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	607a      	str	r2, [r7, #4]
 8010a30:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d009      	beq.n	8010a50 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d003      	beq.n	8010a4a <ip4_output_if+0x26>
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d102      	bne.n	8010a50 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010a50:	78fa      	ldrb	r2, [r7, #3]
 8010a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a54:	9302      	str	r3, [sp, #8]
 8010a56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a5a:	9301      	str	r3, [sp, #4]
 8010a5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	4613      	mov	r3, r2
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	6979      	ldr	r1, [r7, #20]
 8010a68:	68f8      	ldr	r0, [r7, #12]
 8010a6a:	f000 f805 	bl	8010a78 <ip4_output_if_src>
 8010a6e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3718      	adds	r7, #24
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b088      	sub	sp, #32
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
 8010a84:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	89db      	ldrh	r3, [r3, #14]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d006      	beq.n	8010a9c <ip4_output_if_src+0x24>
 8010a8e:	4b48      	ldr	r3, [pc, #288]	; (8010bb0 <ip4_output_if_src+0x138>)
 8010a90:	f240 3233 	movw	r2, #819	; 0x333
 8010a94:	4947      	ldr	r1, [pc, #284]	; (8010bb4 <ip4_output_if_src+0x13c>)
 8010a96:	4848      	ldr	r0, [pc, #288]	; (8010bb8 <ip4_output_if_src+0x140>)
 8010a98:	f001 f9a6 	bl	8011de8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d060      	beq.n	8010b64 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010aa2:	2314      	movs	r3, #20
 8010aa4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8010aa6:	2114      	movs	r1, #20
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f7f9 f9bb 	bl	8009e24 <pbuf_header>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d002      	beq.n	8010aba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010ab4:	f06f 0301 	mvn.w	r3, #1
 8010ab8:	e075      	b.n	8010ba6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	895b      	ldrh	r3, [r3, #10]
 8010ac4:	2b13      	cmp	r3, #19
 8010ac6:	d806      	bhi.n	8010ad6 <ip4_output_if_src+0x5e>
 8010ac8:	4b39      	ldr	r3, [pc, #228]	; (8010bb0 <ip4_output_if_src+0x138>)
 8010aca:	f44f 7258 	mov.w	r2, #864	; 0x360
 8010ace:	493b      	ldr	r1, [pc, #236]	; (8010bbc <ip4_output_if_src+0x144>)
 8010ad0:	4839      	ldr	r0, [pc, #228]	; (8010bb8 <ip4_output_if_src+0x140>)
 8010ad2:	f001 f989 	bl	8011de8 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010ad6:	69fb      	ldr	r3, [r7, #28]
 8010ad8:	78fa      	ldrb	r2, [r7, #3]
 8010ada:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010ae2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010aec:	8b7b      	ldrh	r3, [r7, #26]
 8010aee:	089b      	lsrs	r3, r3, #2
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	b2db      	uxtb	r3, r3
 8010af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010af8:	b2da      	uxtb	r2, r3
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010b04:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	891b      	ldrh	r3, [r3, #8]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7f8 f881 	bl	8008c12 <lwip_htons>
 8010b10:	4603      	mov	r3, r0
 8010b12:	461a      	mov	r2, r3
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	719a      	strb	r2, [r3, #6]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010b22:	4b27      	ldr	r3, [pc, #156]	; (8010bc0 <ip4_output_if_src+0x148>)
 8010b24:	881b      	ldrh	r3, [r3, #0]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7f8 f873 	bl	8008c12 <lwip_htons>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	461a      	mov	r2, r3
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010b34:	4b22      	ldr	r3, [pc, #136]	; (8010bc0 <ip4_output_if_src+0x148>)
 8010b36:	881b      	ldrh	r3, [r3, #0]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	4b20      	ldr	r3, [pc, #128]	; (8010bc0 <ip4_output_if_src+0x148>)
 8010b3e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d104      	bne.n	8010b50 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010b46:	4b1f      	ldr	r3, [pc, #124]	; (8010bc4 <ip4_output_if_src+0x14c>)
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	60da      	str	r2, [r3, #12]
 8010b4e:	e003      	b.n	8010b58 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	69fb      	ldr	r3, [r7, #28]
 8010b56:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	729a      	strb	r2, [r3, #10]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	72da      	strb	r2, [r3, #11]
 8010b62:	e008      	b.n	8010b76 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	691b      	ldr	r3, [r3, #16]
 8010b6e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010b70:	f107 0314 	add.w	r3, r7, #20
 8010b74:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00c      	beq.n	8010b98 <ip4_output_if_src+0x120>
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	891a      	ldrh	r2, [r3, #8]
 8010b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d906      	bls.n	8010b98 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f000 fd0a 	bl	80115a8 <ip4_frag>
 8010b94:	4603      	mov	r3, r0
 8010b96:	e006      	b.n	8010ba6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9a:	695b      	ldr	r3, [r3, #20]
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	68f9      	ldr	r1, [r7, #12]
 8010ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ba2:	4798      	blx	r3
 8010ba4:	4603      	mov	r3, r0
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3720      	adds	r7, #32
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	08014e08 	.word	0x08014e08
 8010bb4:	08014e3c 	.word	0x08014e3c
 8010bb8:	08014e48 	.word	0x08014e48
 8010bbc:	08014e70 	.word	0x08014e70
 8010bc0:	2000053e 	.word	0x2000053e
 8010bc4:	08015310 	.word	0x08015310

08010bc8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bdc:	d002      	beq.n	8010be4 <ip4_addr_isbroadcast_u32+0x1c>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d101      	bne.n	8010be8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010be4:	2301      	movs	r3, #1
 8010be6:	e02a      	b.n	8010c3e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010bee:	f003 0302 	and.w	r3, r3, #2
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d101      	bne.n	8010bfa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e021      	b.n	8010c3e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	3304      	adds	r3, #4
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d101      	bne.n	8010c0a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	e019      	b.n	8010c3e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	3304      	adds	r3, #4
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	405a      	eors	r2, r3
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	3308      	adds	r3, #8
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	4013      	ands	r3, r2
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d10d      	bne.n	8010c3c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	3308      	adds	r3, #8
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	43da      	mvns	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	3308      	adds	r3, #8
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d101      	bne.n	8010c3c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e000      	b.n	8010c3e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010c3c:	2300      	movs	r3, #0
  }
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3714      	adds	r7, #20
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bc80      	pop	{r7}
 8010c46:	4770      	bx	lr

08010c48 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010c52:	4b12      	ldr	r3, [pc, #72]	; (8010c9c <ip_reass_tmr+0x54>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010c58:	e018      	b.n	8010c8c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	7fdb      	ldrb	r3, [r3, #31]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d00b      	beq.n	8010c7a <ip_reass_tmr+0x32>
      r->timer--;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	7fdb      	ldrb	r3, [r3, #31]
 8010c66:	3b01      	subs	r3, #1
 8010c68:	b2da      	uxtb	r2, r3
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	60fb      	str	r3, [r7, #12]
 8010c78:	e008      	b.n	8010c8c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010c84:	68b9      	ldr	r1, [r7, #8]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 f80a 	bl	8010ca0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1e3      	bne.n	8010c5a <ip_reass_tmr+0x12>
     }
   }
}
 8010c92:	bf00      	nop
 8010c94:	bf00      	nop
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	20000540 	.word	0x20000540

08010ca0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010caa:	2300      	movs	r3, #0
 8010cac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010cae:	683a      	ldr	r2, [r7, #0]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d105      	bne.n	8010cc2 <ip_reass_free_complete_datagram+0x22>
 8010cb6:	4b45      	ldr	r3, [pc, #276]	; (8010dcc <ip_reass_free_complete_datagram+0x12c>)
 8010cb8:	22ab      	movs	r2, #171	; 0xab
 8010cba:	4945      	ldr	r1, [pc, #276]	; (8010dd0 <ip_reass_free_complete_datagram+0x130>)
 8010cbc:	4845      	ldr	r0, [pc, #276]	; (8010dd4 <ip_reass_free_complete_datagram+0x134>)
 8010cbe:	f001 f893 	bl	8011de8 <iprintf>
  if (prev != NULL) {
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00a      	beq.n	8010cde <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d005      	beq.n	8010cde <ip_reass_free_complete_datagram+0x3e>
 8010cd2:	4b3e      	ldr	r3, [pc, #248]	; (8010dcc <ip_reass_free_complete_datagram+0x12c>)
 8010cd4:	22ad      	movs	r2, #173	; 0xad
 8010cd6:	4940      	ldr	r1, [pc, #256]	; (8010dd8 <ip_reass_free_complete_datagram+0x138>)
 8010cd8:	483e      	ldr	r0, [pc, #248]	; (8010dd4 <ip_reass_free_complete_datagram+0x134>)
 8010cda:	f001 f885 	bl	8011de8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	889b      	ldrh	r3, [r3, #4]
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d12a      	bne.n	8010d46 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	6858      	ldr	r0, [r3, #4]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	3308      	adds	r3, #8
 8010d06:	2214      	movs	r2, #20
 8010d08:	4619      	mov	r1, r3
 8010d0a:	f000 ff97 	bl	8011c3c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010d0e:	2101      	movs	r1, #1
 8010d10:	69b8      	ldr	r0, [r7, #24]
 8010d12:	f7ff fc65 	bl	80105e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010d16:	69b8      	ldr	r0, [r7, #24]
 8010d18:	f7f9 f93c 	bl	8009f94 <pbuf_clen>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010d20:	8bfa      	ldrh	r2, [r7, #30]
 8010d22:	8a7b      	ldrh	r3, [r7, #18]
 8010d24:	4413      	add	r3, r2
 8010d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d2a:	db05      	blt.n	8010d38 <ip_reass_free_complete_datagram+0x98>
 8010d2c:	4b27      	ldr	r3, [pc, #156]	; (8010dcc <ip_reass_free_complete_datagram+0x12c>)
 8010d2e:	22bc      	movs	r2, #188	; 0xbc
 8010d30:	492a      	ldr	r1, [pc, #168]	; (8010ddc <ip_reass_free_complete_datagram+0x13c>)
 8010d32:	4828      	ldr	r0, [pc, #160]	; (8010dd4 <ip_reass_free_complete_datagram+0x134>)
 8010d34:	f001 f858 	bl	8011de8 <iprintf>
    pbufs_freed += clen;
 8010d38:	8bfa      	ldrh	r2, [r7, #30]
 8010d3a:	8a7b      	ldrh	r3, [r7, #18]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010d40:	69b8      	ldr	r0, [r7, #24]
 8010d42:	f7f9 f893 	bl	8009e6c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010d4c:	e01f      	b.n	8010d8e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010d4e:	69bb      	ldr	r3, [r7, #24]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010d54:	69bb      	ldr	r3, [r7, #24]
 8010d56:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f7f9 f918 	bl	8009f94 <pbuf_clen>
 8010d64:	4603      	mov	r3, r0
 8010d66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010d68:	8bfa      	ldrh	r2, [r7, #30]
 8010d6a:	8a7b      	ldrh	r3, [r7, #18]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d72:	db05      	blt.n	8010d80 <ip_reass_free_complete_datagram+0xe0>
 8010d74:	4b15      	ldr	r3, [pc, #84]	; (8010dcc <ip_reass_free_complete_datagram+0x12c>)
 8010d76:	22cc      	movs	r2, #204	; 0xcc
 8010d78:	4918      	ldr	r1, [pc, #96]	; (8010ddc <ip_reass_free_complete_datagram+0x13c>)
 8010d7a:	4816      	ldr	r0, [pc, #88]	; (8010dd4 <ip_reass_free_complete_datagram+0x134>)
 8010d7c:	f001 f834 	bl	8011de8 <iprintf>
    pbufs_freed += clen;
 8010d80:	8bfa      	ldrh	r2, [r7, #30]
 8010d82:	8a7b      	ldrh	r3, [r7, #18]
 8010d84:	4413      	add	r3, r2
 8010d86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f7f9 f86f 	bl	8009e6c <pbuf_free>
  while (p != NULL) {
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d1dc      	bne.n	8010d4e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010d94:	6839      	ldr	r1, [r7, #0]
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f000 f8c2 	bl	8010f20 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8010d9c:	4b10      	ldr	r3, [pc, #64]	; (8010de0 <ip_reass_free_complete_datagram+0x140>)
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	8bfa      	ldrh	r2, [r7, #30]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d905      	bls.n	8010db2 <ip_reass_free_complete_datagram+0x112>
 8010da6:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <ip_reass_free_complete_datagram+0x12c>)
 8010da8:	22d2      	movs	r2, #210	; 0xd2
 8010daa:	490e      	ldr	r1, [pc, #56]	; (8010de4 <ip_reass_free_complete_datagram+0x144>)
 8010dac:	4809      	ldr	r0, [pc, #36]	; (8010dd4 <ip_reass_free_complete_datagram+0x134>)
 8010dae:	f001 f81b 	bl	8011de8 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8010db2:	4b0b      	ldr	r3, [pc, #44]	; (8010de0 <ip_reass_free_complete_datagram+0x140>)
 8010db4:	881a      	ldrh	r2, [r3, #0]
 8010db6:	8bfb      	ldrh	r3, [r7, #30]
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	4b08      	ldr	r3, [pc, #32]	; (8010de0 <ip_reass_free_complete_datagram+0x140>)
 8010dbe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010dc0:	8bfb      	ldrh	r3, [r7, #30]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3720      	adds	r7, #32
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	08014ea0 	.word	0x08014ea0
 8010dd0:	08014edc 	.word	0x08014edc
 8010dd4:	08014ee8 	.word	0x08014ee8
 8010dd8:	08014f10 	.word	0x08014f10
 8010ddc:	08014f24 	.word	0x08014f24
 8010de0:	20000544 	.word	0x20000544
 8010de4:	08014f44 	.word	0x08014f44

08010de8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b08a      	sub	sp, #40	; 0x28
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010df2:	2300      	movs	r3, #0
 8010df4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010df6:	2300      	movs	r3, #0
 8010df8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010e02:	2300      	movs	r3, #0
 8010e04:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010e06:	4b28      	ldr	r3, [pc, #160]	; (8010ea8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010e0c:	e030      	b.n	8010e70 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e10:	695a      	ldr	r2, [r3, #20]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d10c      	bne.n	8010e34 <ip_reass_remove_oldest_datagram+0x4c>
 8010e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1c:	699a      	ldr	r2, [r3, #24]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d106      	bne.n	8010e34 <ip_reass_remove_oldest_datagram+0x4c>
 8010e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e28:	899a      	ldrh	r2, [r3, #12]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	889b      	ldrh	r3, [r3, #4]
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d014      	beq.n	8010e5e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	3301      	adds	r3, #1
 8010e38:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010e3a:	6a3b      	ldr	r3, [r7, #32]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d104      	bne.n	8010e4a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e42:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	61bb      	str	r3, [r7, #24]
 8010e48:	e009      	b.n	8010e5e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4c:	7fda      	ldrb	r2, [r3, #31]
 8010e4e:	6a3b      	ldr	r3, [r7, #32]
 8010e50:	7fdb      	ldrb	r3, [r3, #31]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d803      	bhi.n	8010e5e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e58:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d001      	beq.n	8010e6a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e68:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d1cb      	bne.n	8010e0e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010e76:	6a3b      	ldr	r3, [r7, #32]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d008      	beq.n	8010e8e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010e7c:	69b9      	ldr	r1, [r7, #24]
 8010e7e:	6a38      	ldr	r0, [r7, #32]
 8010e80:	f7ff ff0e 	bl	8010ca0 <ip_reass_free_complete_datagram>
 8010e84:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	4413      	add	r3, r2
 8010e8c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010e8e:	697a      	ldr	r2, [r7, #20]
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	da02      	bge.n	8010e9c <ip_reass_remove_oldest_datagram+0xb4>
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	dcac      	bgt.n	8010df6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010e9c:	697b      	ldr	r3, [r7, #20]
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3728      	adds	r7, #40	; 0x28
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	20000540 	.word	0x20000540

08010eac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b084      	sub	sp, #16
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010eb6:	2004      	movs	r0, #4
 8010eb8:	f7f8 fa54 	bl	8009364 <memp_malloc>
 8010ebc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d110      	bne.n	8010ee6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010ec4:	6839      	ldr	r1, [r7, #0]
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f7ff ff8e 	bl	8010de8 <ip_reass_remove_oldest_datagram>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	dc03      	bgt.n	8010edc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010ed4:	2004      	movs	r0, #4
 8010ed6:	f7f8 fa45 	bl	8009364 <memp_malloc>
 8010eda:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d101      	bne.n	8010ee6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	e016      	b.n	8010f14 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010ee6:	2220      	movs	r2, #32
 8010ee8:	2100      	movs	r1, #0
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f000 fece 	bl	8011c8c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2203      	movs	r2, #3
 8010ef4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010ef6:	4b09      	ldr	r3, [pc, #36]	; (8010f1c <ip_reass_enqueue_new_datagram+0x70>)
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010efe:	4a07      	ldr	r2, [pc, #28]	; (8010f1c <ip_reass_enqueue_new_datagram+0x70>)
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	3308      	adds	r3, #8
 8010f08:	2214      	movs	r2, #20
 8010f0a:	6879      	ldr	r1, [r7, #4]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f000 fe95 	bl	8011c3c <memcpy>
  return ipr;
 8010f12:	68fb      	ldr	r3, [r7, #12]
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	20000540 	.word	0x20000540

08010f20 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010f2a:	4b10      	ldr	r3, [pc, #64]	; (8010f6c <ip_reass_dequeue_datagram+0x4c>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d104      	bne.n	8010f3e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4a0c      	ldr	r2, [pc, #48]	; (8010f6c <ip_reass_dequeue_datagram+0x4c>)
 8010f3a:	6013      	str	r3, [r2, #0]
 8010f3c:	e00d      	b.n	8010f5a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d106      	bne.n	8010f52 <ip_reass_dequeue_datagram+0x32>
 8010f44:	4b0a      	ldr	r3, [pc, #40]	; (8010f70 <ip_reass_dequeue_datagram+0x50>)
 8010f46:	f240 1245 	movw	r2, #325	; 0x145
 8010f4a:	490a      	ldr	r1, [pc, #40]	; (8010f74 <ip_reass_dequeue_datagram+0x54>)
 8010f4c:	480a      	ldr	r0, [pc, #40]	; (8010f78 <ip_reass_dequeue_datagram+0x58>)
 8010f4e:	f000 ff4b 	bl	8011de8 <iprintf>
    prev->next = ipr->next;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010f5a:	6879      	ldr	r1, [r7, #4]
 8010f5c:	2004      	movs	r0, #4
 8010f5e:	f7f8 fa4d 	bl	80093fc <memp_free>
}
 8010f62:	bf00      	nop
 8010f64:	3708      	adds	r7, #8
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	20000540 	.word	0x20000540
 8010f70:	08014ea0 	.word	0x08014ea0
 8010f74:	08014f60 	.word	0x08014f60
 8010f78:	08014ee8 	.word	0x08014ee8

08010f7c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b08c      	sub	sp, #48	; 0x30
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8010f96:	69fb      	ldr	r3, [r7, #28]
 8010f98:	885b      	ldrh	r3, [r3, #2]
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7f7 fe38 	bl	8008c12 <lwip_htons>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	f003 030f 	and.w	r3, r3, #15
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	009b      	lsls	r3, r3, #2
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	88db      	ldrh	r3, [r3, #6]
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7f7 fe26 	bl	8008c12 <lwip_htons>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	00db      	lsls	r3, r3, #3
 8010fd0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fda:	2200      	movs	r2, #0
 8010fdc:	701a      	strb	r2, [r3, #0]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	705a      	strb	r2, [r3, #1]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	709a      	strb	r2, [r3, #2]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fec:	8b3a      	ldrh	r2, [r7, #24]
 8010fee:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8010ff0:	8b3a      	ldrh	r2, [r7, #24]
 8010ff2:	8b7b      	ldrh	r3, [r7, #26]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffa:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	627b      	str	r3, [r7, #36]	; 0x24
 8011002:	e061      	b.n	80110c8 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100c:	889b      	ldrh	r3, [r3, #4]
 801100e:	b29a      	uxth	r2, r3
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	889b      	ldrh	r3, [r3, #4]
 8011014:	b29b      	uxth	r3, r3
 8011016:	429a      	cmp	r2, r3
 8011018:	d232      	bcs.n	8011080 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801101e:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011022:	2b00      	cmp	r3, #0
 8011024:	d01f      	beq.n	8011066 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011028:	889b      	ldrh	r3, [r3, #4]
 801102a:	b29a      	uxth	r2, r3
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102e:	88db      	ldrh	r3, [r3, #6]
 8011030:	b29b      	uxth	r3, r3
 8011032:	429a      	cmp	r2, r3
 8011034:	f0c0 80e3 	bcc.w	80111fe <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	88db      	ldrh	r3, [r3, #6]
 801103c:	b29a      	uxth	r2, r3
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	889b      	ldrh	r3, [r3, #4]
 8011042:	b29b      	uxth	r3, r3
 8011044:	429a      	cmp	r2, r3
 8011046:	f200 80da 	bhi.w	80111fe <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011052:	88db      	ldrh	r3, [r3, #6]
 8011054:	b29a      	uxth	r2, r3
 8011056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011058:	889b      	ldrh	r3, [r3, #4]
 801105a:	b29b      	uxth	r3, r3
 801105c:	429a      	cmp	r2, r3
 801105e:	d037      	beq.n	80110d0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011060:	2300      	movs	r3, #0
 8011062:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011064:	e034      	b.n	80110d0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8011066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011068:	88db      	ldrh	r3, [r3, #6]
 801106a:	b29a      	uxth	r2, r3
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	889b      	ldrh	r3, [r3, #4]
 8011070:	b29b      	uxth	r3, r3
 8011072:	429a      	cmp	r2, r3
 8011074:	f200 80c5 	bhi.w	8011202 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	605a      	str	r2, [r3, #4]
      break;
 801107e:	e027      	b.n	80110d0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8011080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011082:	889b      	ldrh	r3, [r3, #4]
 8011084:	b29a      	uxth	r2, r3
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	889b      	ldrh	r3, [r3, #4]
 801108a:	b29b      	uxth	r3, r3
 801108c:	429a      	cmp	r2, r3
 801108e:	f000 80ba 	beq.w	8011206 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	889b      	ldrh	r3, [r3, #4]
 8011096:	b29a      	uxth	r2, r3
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	88db      	ldrh	r3, [r3, #6]
 801109c:	b29b      	uxth	r3, r3
 801109e:	429a      	cmp	r2, r3
 80110a0:	f0c0 80b3 	bcc.w	801120a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80110a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d009      	beq.n	80110be <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 80110aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ac:	88db      	ldrh	r3, [r3, #6]
 80110ae:	b29a      	uxth	r2, r3
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	889b      	ldrh	r3, [r3, #4]
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d001      	beq.n	80110be <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80110c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d19a      	bne.n	8011004 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 80110ce:	e000      	b.n	80110d2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 80110d0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80110d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d12d      	bne.n	8011134 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80110d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d01c      	beq.n	8011118 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80110de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e0:	88db      	ldrh	r3, [r3, #6]
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e6:	889b      	ldrh	r3, [r3, #4]
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d906      	bls.n	80110fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80110ee:	4b51      	ldr	r3, [pc, #324]	; (8011234 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80110f0:	f240 12ab 	movw	r2, #427	; 0x1ab
 80110f4:	4950      	ldr	r1, [pc, #320]	; (8011238 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80110f6:	4851      	ldr	r0, [pc, #324]	; (801123c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80110f8:	f000 fe76 	bl	8011de8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80110fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fe:	68ba      	ldr	r2, [r7, #8]
 8011100:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011104:	88db      	ldrh	r3, [r3, #6]
 8011106:	b29a      	uxth	r2, r3
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	889b      	ldrh	r3, [r3, #4]
 801110c:	b29b      	uxth	r3, r3
 801110e:	429a      	cmp	r2, r3
 8011110:	d010      	beq.n	8011134 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	623b      	str	r3, [r7, #32]
 8011116:	e00d      	b.n	8011134 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d006      	beq.n	801112e <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8011120:	4b44      	ldr	r3, [pc, #272]	; (8011234 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011122:	f240 12b3 	movw	r2, #435	; 0x1b3
 8011126:	4946      	ldr	r1, [pc, #280]	; (8011240 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011128:	4844      	ldr	r0, [pc, #272]	; (801123c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801112a:	f000 fe5d 	bl	8011de8 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	68ba      	ldr	r2, [r7, #8]
 8011132:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d105      	bne.n	8011146 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	7f9b      	ldrb	r3, [r3, #30]
 801113e:	f003 0301 	and.w	r3, r3, #1
 8011142:	2b00      	cmp	r3, #0
 8011144:	d059      	beq.n	80111fa <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8011146:	6a3b      	ldr	r3, [r7, #32]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d04f      	beq.n	80111ec <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d006      	beq.n	8011162 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	889b      	ldrh	r3, [r3, #4]
 801115c:	b29b      	uxth	r3, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	d002      	beq.n	8011168 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011162:	2300      	movs	r3, #0
 8011164:	623b      	str	r3, [r7, #32]
 8011166:	e041      	b.n	80111ec <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011172:	e012      	b.n	801119a <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117c:	88db      	ldrh	r3, [r3, #6]
 801117e:	b29a      	uxth	r2, r3
 8011180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011182:	889b      	ldrh	r3, [r3, #4]
 8011184:	b29b      	uxth	r3, r3
 8011186:	429a      	cmp	r2, r3
 8011188:	d002      	beq.n	8011190 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	623b      	str	r3, [r7, #32]
            break;
 801118e:	e007      	b.n	80111a0 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8011190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011192:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1e9      	bne.n	8011174 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d022      	beq.n	80111ec <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d106      	bne.n	80111bc <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80111ae:	4b21      	ldr	r3, [pc, #132]	; (8011234 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80111b0:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80111b4:	4923      	ldr	r1, [pc, #140]	; (8011244 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80111b6:	4821      	ldr	r0, [pc, #132]	; (801123c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80111b8:	f000 fe16 	bl	8011de8 <iprintf>
          LWIP_ASSERT("sanity check",
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d106      	bne.n	80111d6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 80111c8:	4b1a      	ldr	r3, [pc, #104]	; (8011234 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80111ca:	f240 12d5 	movw	r2, #469	; 0x1d5
 80111ce:	491d      	ldr	r1, [pc, #116]	; (8011244 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80111d0:	481a      	ldr	r0, [pc, #104]	; (801123c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80111d2:	f000 fe09 	bl	8011de8 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80111d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d006      	beq.n	80111ec <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80111de:	4b15      	ldr	r3, [pc, #84]	; (8011234 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80111e0:	f240 12d7 	movw	r2, #471	; 0x1d7
 80111e4:	4918      	ldr	r1, [pc, #96]	; (8011248 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80111e6:	4815      	ldr	r0, [pc, #84]	; (801123c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80111e8:	f000 fdfe 	bl	8011de8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80111ec:	6a3b      	ldr	r3, [r7, #32]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	bf14      	ite	ne
 80111f2:	2301      	movne	r3, #1
 80111f4:	2300      	moveq	r3, #0
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	e018      	b.n	801122c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80111fa:	2300      	movs	r3, #0
 80111fc:	e016      	b.n	801122c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 80111fe:	bf00      	nop
 8011200:	e004      	b.n	801120c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8011202:	bf00      	nop
 8011204:	e002      	b.n	801120c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011206:	bf00      	nop
 8011208:	e000      	b.n	801120c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801120a:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801120c:	68b8      	ldr	r0, [r7, #8]
 801120e:	f7f8 fec1 	bl	8009f94 <pbuf_clen>
 8011212:	4603      	mov	r3, r0
 8011214:	461a      	mov	r2, r3
 8011216:	4b0d      	ldr	r3, [pc, #52]	; (801124c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011218:	881b      	ldrh	r3, [r3, #0]
 801121a:	1a9b      	subs	r3, r3, r2
 801121c:	b29a      	uxth	r2, r3
 801121e:	4b0b      	ldr	r3, [pc, #44]	; (801124c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011220:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8011222:	68b8      	ldr	r0, [r7, #8]
 8011224:	f7f8 fe22 	bl	8009e6c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011228:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 801122c:	4618      	mov	r0, r3
 801122e:	3730      	adds	r7, #48	; 0x30
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	08014ea0 	.word	0x08014ea0
 8011238:	08014f7c 	.word	0x08014f7c
 801123c:	08014ee8 	.word	0x08014ee8
 8011240:	08014f9c 	.word	0x08014f9c
 8011244:	08014fd4 	.word	0x08014fd4
 8011248:	08014fe4 	.word	0x08014fe4
 801124c:	20000544 	.word	0x20000544

08011250 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b08e      	sub	sp, #56	; 0x38
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	f003 030f 	and.w	r3, r3, #15
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	2b14      	cmp	r3, #20
 801126a:	f040 8131 	bne.w	80114d0 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011270:	88db      	ldrh	r3, [r3, #6]
 8011272:	b29b      	uxth	r3, r3
 8011274:	4618      	mov	r0, r3
 8011276:	f7f7 fccc 	bl	8008c12 <lwip_htons>
 801127a:	4603      	mov	r3, r0
 801127c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011280:	b29b      	uxth	r3, r3
 8011282:	00db      	lsls	r3, r3, #3
 8011284:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011288:	885b      	ldrh	r3, [r3, #2]
 801128a:	b29b      	uxth	r3, r3
 801128c:	4618      	mov	r0, r3
 801128e:	f7f7 fcc0 	bl	8008c12 <lwip_htons>
 8011292:	4603      	mov	r3, r0
 8011294:	461a      	mov	r2, r3
 8011296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	b29b      	uxth	r3, r3
 801129c:	f003 030f 	and.w	r3, r3, #15
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7f8 fe72 	bl	8009f94 <pbuf_clen>
 80112b0:	4603      	mov	r3, r0
 80112b2:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80112b4:	4b8e      	ldr	r3, [pc, #568]	; (80114f0 <ip4_reass+0x2a0>)
 80112b6:	881b      	ldrh	r3, [r3, #0]
 80112b8:	461a      	mov	r2, r3
 80112ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112bc:	4413      	add	r3, r2
 80112be:	2b0a      	cmp	r3, #10
 80112c0:	dd10      	ble.n	80112e4 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80112c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112c4:	4619      	mov	r1, r3
 80112c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112c8:	f7ff fd8e 	bl	8010de8 <ip_reass_remove_oldest_datagram>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	f000 8100 	beq.w	80114d4 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80112d4:	4b86      	ldr	r3, [pc, #536]	; (80114f0 <ip4_reass+0x2a0>)
 80112d6:	881b      	ldrh	r3, [r3, #0]
 80112d8:	461a      	mov	r2, r3
 80112da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112dc:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80112de:	2b0a      	cmp	r3, #10
 80112e0:	f300 80f8 	bgt.w	80114d4 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80112e4:	4b83      	ldr	r3, [pc, #524]	; (80114f4 <ip4_reass+0x2a4>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	633b      	str	r3, [r7, #48]	; 0x30
 80112ea:	e015      	b.n	8011318 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80112ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ee:	695a      	ldr	r2, [r3, #20]
 80112f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d10c      	bne.n	8011312 <ip4_reass+0xc2>
 80112f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fa:	699a      	ldr	r2, [r3, #24]
 80112fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fe:	691b      	ldr	r3, [r3, #16]
 8011300:	429a      	cmp	r2, r3
 8011302:	d106      	bne.n	8011312 <ip4_reass+0xc2>
 8011304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011306:	899a      	ldrh	r2, [r3, #12]
 8011308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130a:	889b      	ldrh	r3, [r3, #4]
 801130c:	b29b      	uxth	r3, r3
 801130e:	429a      	cmp	r2, r3
 8011310:	d006      	beq.n	8011320 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	633b      	str	r3, [r7, #48]	; 0x30
 8011318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1e6      	bne.n	80112ec <ip4_reass+0x9c>
 801131e:	e000      	b.n	8011322 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011320:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011324:	2b00      	cmp	r3, #0
 8011326:	d109      	bne.n	801133c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011328:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801132a:	4619      	mov	r1, r3
 801132c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801132e:	f7ff fdbd 	bl	8010eac <ip_reass_enqueue_new_datagram>
 8011332:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011336:	2b00      	cmp	r3, #0
 8011338:	d11c      	bne.n	8011374 <ip4_reass+0x124>
      goto nullreturn;
 801133a:	e0d0      	b.n	80114de <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133e:	88db      	ldrh	r3, [r3, #6]
 8011340:	b29b      	uxth	r3, r3
 8011342:	4618      	mov	r0, r3
 8011344:	f7f7 fc65 	bl	8008c12 <lwip_htons>
 8011348:	4603      	mov	r3, r0
 801134a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801134e:	2b00      	cmp	r3, #0
 8011350:	d110      	bne.n	8011374 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011354:	89db      	ldrh	r3, [r3, #14]
 8011356:	4618      	mov	r0, r3
 8011358:	f7f7 fc5b 	bl	8008c12 <lwip_htons>
 801135c:	4603      	mov	r3, r0
 801135e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011362:	2b00      	cmp	r3, #0
 8011364:	d006      	beq.n	8011374 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	3308      	adds	r3, #8
 801136a:	2214      	movs	r2, #20
 801136c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801136e:	4618      	mov	r0, r3
 8011370:	f000 fc64 	bl	8011c3c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011376:	88db      	ldrh	r3, [r3, #6]
 8011378:	b29b      	uxth	r3, r3
 801137a:	f003 0320 	and.w	r3, r3, #32
 801137e:	2b00      	cmp	r3, #0
 8011380:	bf0c      	ite	eq
 8011382:	2301      	moveq	r3, #1
 8011384:	2300      	movne	r3, #0
 8011386:	b2db      	uxtb	r3, r3
 8011388:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801138a:	69fb      	ldr	r3, [r7, #28]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d00e      	beq.n	80113ae <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8011390:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011394:	4413      	add	r3, r2
 8011396:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011398:	8b7a      	ldrh	r2, [r7, #26]
 801139a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801139c:	429a      	cmp	r2, r3
 801139e:	f0c0 809b 	bcc.w	80114d8 <ip4_reass+0x288>
 80113a2:	8b7b      	ldrh	r3, [r7, #26]
 80113a4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80113a8:	4293      	cmp	r3, r2
 80113aa:	f200 8095 	bhi.w	80114d8 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80113ae:	69fa      	ldr	r2, [r7, #28]
 80113b0:	6879      	ldr	r1, [r7, #4]
 80113b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113b4:	f7ff fde2 	bl	8010f7c <ip_reass_chain_frag_into_datagram_and_validate>
 80113b8:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c0:	f000 808c 	beq.w	80114dc <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80113c4:	4b4a      	ldr	r3, [pc, #296]	; (80114f0 <ip4_reass+0x2a0>)
 80113c6:	881a      	ldrh	r2, [r3, #0]
 80113c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113ca:	4413      	add	r3, r2
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	4b48      	ldr	r3, [pc, #288]	; (80114f0 <ip4_reass+0x2a0>)
 80113d0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d00d      	beq.n	80113f4 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80113d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80113da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113dc:	4413      	add	r3, r2
 80113de:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80113e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e2:	8a7a      	ldrh	r2, [r7, #18]
 80113e4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80113e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e8:	7f9b      	ldrb	r3, [r3, #30]
 80113ea:	f043 0301 	orr.w	r3, r3, #1
 80113ee:	b2da      	uxtb	r2, r3
 80113f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f2:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d168      	bne.n	80114cc <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80113fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fc:	8b9b      	ldrh	r3, [r3, #28]
 80113fe:	3314      	adds	r3, #20
 8011400:	b29a      	uxth	r2, r3
 8011402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011404:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8011406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8011410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141a:	3308      	adds	r3, #8
 801141c:	2214      	movs	r2, #20
 801141e:	4619      	mov	r1, r3
 8011420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011422:	f000 fc0b 	bl	8011c3c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8011426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011428:	8b9b      	ldrh	r3, [r3, #28]
 801142a:	4618      	mov	r0, r3
 801142c:	f7f7 fbf1 	bl	8008c12 <lwip_htons>
 8011430:	4603      	mov	r3, r0
 8011432:	461a      	mov	r2, r3
 8011434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011436:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143a:	2200      	movs	r2, #0
 801143c:	719a      	strb	r2, [r3, #6]
 801143e:	2200      	movs	r2, #0
 8011440:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011444:	2200      	movs	r2, #0
 8011446:	729a      	strb	r2, [r3, #10]
 8011448:	2200      	movs	r2, #0
 801144a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011452:	e00e      	b.n	8011472 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8011454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801145a:	f06f 0113 	mvn.w	r1, #19
 801145e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011460:	f7f8 fce0 	bl	8009e24 <pbuf_header>
      pbuf_cat(p, r);
 8011464:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7f8 fdcc 	bl	800a004 <pbuf_cat>
      r = iprh->next_pbuf;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011474:	2b00      	cmp	r3, #0
 8011476:	d1ed      	bne.n	8011454 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011478:	4b1e      	ldr	r3, [pc, #120]	; (80114f4 <ip4_reass+0x2a4>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801147e:	429a      	cmp	r2, r3
 8011480:	d102      	bne.n	8011488 <ip4_reass+0x238>
      ipr_prev = NULL;
 8011482:	2300      	movs	r3, #0
 8011484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011486:	e010      	b.n	80114aa <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011488:	4b1a      	ldr	r3, [pc, #104]	; (80114f4 <ip4_reass+0x2a4>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801148e:	e007      	b.n	80114a0 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8011490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011496:	429a      	cmp	r2, r3
 8011498:	d006      	beq.n	80114a8 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80114a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1f4      	bne.n	8011490 <ip4_reass+0x240>
 80114a6:	e000      	b.n	80114aa <ip4_reass+0x25a>
          break;
 80114a8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80114aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80114ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114ae:	f7ff fd37 	bl	8010f20 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7f8 fd6e 	bl	8009f94 <pbuf_clen>
 80114b8:	4603      	mov	r3, r0
 80114ba:	461a      	mov	r2, r3
 80114bc:	4b0c      	ldr	r3, [pc, #48]	; (80114f0 <ip4_reass+0x2a0>)
 80114be:	881b      	ldrh	r3, [r3, #0]
 80114c0:	1a9b      	subs	r3, r3, r2
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	4b0a      	ldr	r3, [pc, #40]	; (80114f0 <ip4_reass+0x2a0>)
 80114c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	e00c      	b.n	80114e6 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80114cc:	2300      	movs	r3, #0
 80114ce:	e00a      	b.n	80114e6 <ip4_reass+0x296>
    goto nullreturn;
 80114d0:	bf00      	nop
 80114d2:	e004      	b.n	80114de <ip4_reass+0x28e>
      goto nullreturn;
 80114d4:	bf00      	nop
 80114d6:	e002      	b.n	80114de <ip4_reass+0x28e>
      goto nullreturn;
 80114d8:	bf00      	nop
 80114da:	e000      	b.n	80114de <ip4_reass+0x28e>
    goto nullreturn;
 80114dc:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f7f8 fcc4 	bl	8009e6c <pbuf_free>
  return NULL;
 80114e4:	2300      	movs	r3, #0
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3738      	adds	r7, #56	; 0x38
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop
 80114f0:	20000544 	.word	0x20000544
 80114f4:	20000540 	.word	0x20000540

080114f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80114fc:	2005      	movs	r0, #5
 80114fe:	f7f7 ff31 	bl	8009364 <memp_malloc>
 8011502:	4603      	mov	r3, r0
}
 8011504:	4618      	mov	r0, r3
 8011506:	bd80      	pop	{r7, pc}

08011508 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d106      	bne.n	8011524 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011516:	4b07      	ldr	r3, [pc, #28]	; (8011534 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011518:	f240 22ae 	movw	r2, #686	; 0x2ae
 801151c:	4906      	ldr	r1, [pc, #24]	; (8011538 <ip_frag_free_pbuf_custom_ref+0x30>)
 801151e:	4807      	ldr	r0, [pc, #28]	; (801153c <ip_frag_free_pbuf_custom_ref+0x34>)
 8011520:	f000 fc62 	bl	8011de8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011524:	6879      	ldr	r1, [r7, #4]
 8011526:	2005      	movs	r0, #5
 8011528:	f7f7 ff68 	bl	80093fc <memp_free>
}
 801152c:	bf00      	nop
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	08014ea0 	.word	0x08014ea0
 8011538:	08015008 	.word	0x08015008
 801153c:	08014ee8 	.word	0x08014ee8

08011540 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d106      	bne.n	8011560 <ipfrag_free_pbuf_custom+0x20>
 8011552:	4b11      	ldr	r3, [pc, #68]	; (8011598 <ipfrag_free_pbuf_custom+0x58>)
 8011554:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8011558:	4910      	ldr	r1, [pc, #64]	; (801159c <ipfrag_free_pbuf_custom+0x5c>)
 801155a:	4811      	ldr	r0, [pc, #68]	; (80115a0 <ipfrag_free_pbuf_custom+0x60>)
 801155c:	f000 fc44 	bl	8011de8 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	429a      	cmp	r2, r3
 8011566:	d006      	beq.n	8011576 <ipfrag_free_pbuf_custom+0x36>
 8011568:	4b0b      	ldr	r3, [pc, #44]	; (8011598 <ipfrag_free_pbuf_custom+0x58>)
 801156a:	f240 22b9 	movw	r2, #697	; 0x2b9
 801156e:	490d      	ldr	r1, [pc, #52]	; (80115a4 <ipfrag_free_pbuf_custom+0x64>)
 8011570:	480b      	ldr	r0, [pc, #44]	; (80115a0 <ipfrag_free_pbuf_custom+0x60>)
 8011572:	f000 fc39 	bl	8011de8 <iprintf>
  if (pcr->original != NULL) {
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	695b      	ldr	r3, [r3, #20]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d004      	beq.n	8011588 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	695b      	ldr	r3, [r3, #20]
 8011582:	4618      	mov	r0, r3
 8011584:	f7f8 fc72 	bl	8009e6c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	f7ff ffbd 	bl	8011508 <ip_frag_free_pbuf_custom_ref>
}
 801158e:	bf00      	nop
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	08014ea0 	.word	0x08014ea0
 801159c:	08015014 	.word	0x08015014
 80115a0:	08014ee8 	.word	0x08014ee8
 80115a4:	08015020 	.word	0x08015020

080115a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b092      	sub	sp, #72	; 0x48
 80115ac:	af02      	add	r7, sp, #8
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80115b4:	2300      	movs	r3, #0
 80115b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80115bc:	3b14      	subs	r3, #20
 80115be:	2b00      	cmp	r3, #0
 80115c0:	da00      	bge.n	80115c4 <ip4_frag+0x1c>
 80115c2:	3307      	adds	r3, #7
 80115c4:	10db      	asrs	r3, r3, #3
 80115c6:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80115c8:	2314      	movs	r3, #20
 80115ca:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80115d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d4:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80115d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	f003 030f 	and.w	r3, r3, #15
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	2b14      	cmp	r3, #20
 80115e2:	d009      	beq.n	80115f8 <ip4_frag+0x50>
 80115e4:	4b7a      	ldr	r3, [pc, #488]	; (80117d0 <ip4_frag+0x228>)
 80115e6:	f240 22e1 	movw	r2, #737	; 0x2e1
 80115ea:	497a      	ldr	r1, [pc, #488]	; (80117d4 <ip4_frag+0x22c>)
 80115ec:	487a      	ldr	r0, [pc, #488]	; (80117d8 <ip4_frag+0x230>)
 80115ee:	f000 fbfb 	bl	8011de8 <iprintf>
 80115f2:	f06f 0305 	mvn.w	r3, #5
 80115f6:	e0e6      	b.n	80117c6 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80115f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fa:	88db      	ldrh	r3, [r3, #6]
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	4618      	mov	r0, r3
 8011600:	f7f7 fb07 	bl	8008c12 <lwip_htons>
 8011604:	4603      	mov	r3, r0
 8011606:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8011608:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801160a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801160e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8011610:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011616:	2b00      	cmp	r3, #0
 8011618:	d009      	beq.n	801162e <ip4_frag+0x86>
 801161a:	4b6d      	ldr	r3, [pc, #436]	; (80117d0 <ip4_frag+0x228>)
 801161c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011620:	496e      	ldr	r1, [pc, #440]	; (80117dc <ip4_frag+0x234>)
 8011622:	486d      	ldr	r0, [pc, #436]	; (80117d8 <ip4_frag+0x230>)
 8011624:	f000 fbe0 	bl	8011de8 <iprintf>
 8011628:	f06f 0305 	mvn.w	r3, #5
 801162c:	e0cb      	b.n	80117c6 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	891b      	ldrh	r3, [r3, #8]
 8011632:	3b14      	subs	r3, #20
 8011634:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8011636:	e0bd      	b.n	80117b4 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8011638:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801163a:	00da      	lsls	r2, r3, #3
 801163c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801163e:	4293      	cmp	r3, r2
 8011640:	bfa8      	it	ge
 8011642:	4613      	movge	r3, r2
 8011644:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011646:	2200      	movs	r2, #0
 8011648:	2114      	movs	r1, #20
 801164a:	2002      	movs	r0, #2
 801164c:	f7f8 f89c 	bl	8009788 <pbuf_alloc>
 8011650:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8011652:	6a3b      	ldr	r3, [r7, #32]
 8011654:	2b00      	cmp	r3, #0
 8011656:	f000 80b3 	beq.w	80117c0 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	895b      	ldrh	r3, [r3, #10]
 801165e:	2b13      	cmp	r3, #19
 8011660:	d806      	bhi.n	8011670 <ip4_frag+0xc8>
 8011662:	4b5b      	ldr	r3, [pc, #364]	; (80117d0 <ip4_frag+0x228>)
 8011664:	f44f 7242 	mov.w	r2, #776	; 0x308
 8011668:	495d      	ldr	r1, [pc, #372]	; (80117e0 <ip4_frag+0x238>)
 801166a:	485b      	ldr	r0, [pc, #364]	; (80117d8 <ip4_frag+0x230>)
 801166c:	f000 fbbc 	bl	8011de8 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011670:	6a3b      	ldr	r3, [r7, #32]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	2214      	movs	r2, #20
 8011676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011678:	4618      	mov	r0, r3
 801167a:	f000 fadf 	bl	8011c3c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801167e:	6a3b      	ldr	r3, [r7, #32]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8011684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011686:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8011688:	e04f      	b.n	801172a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	895a      	ldrh	r2, [r3, #10]
 801168e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011694:	8b7a      	ldrh	r2, [r7, #26]
 8011696:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011698:	4293      	cmp	r3, r2
 801169a:	bf28      	it	cs
 801169c:	4613      	movcs	r3, r2
 801169e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80116a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d105      	bne.n	80116b2 <ip4_frag+0x10a>
        poff = 0;
 80116a6:	2300      	movs	r3, #0
 80116a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	60fb      	str	r3, [r7, #12]
        continue;
 80116b0:	e03b      	b.n	801172a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80116b2:	f7ff ff21 	bl	80114f8 <ip_frag_alloc_pbuf_custom_ref>
 80116b6:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d103      	bne.n	80116c6 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80116be:	6a38      	ldr	r0, [r7, #32]
 80116c0:	f7f8 fbd4 	bl	8009e6c <pbuf_free>
        goto memerr;
 80116c4:	e07d      	b.n	80117c2 <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80116c6:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80116cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80116ce:	4413      	add	r3, r2
 80116d0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80116d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80116d4:	9201      	str	r2, [sp, #4]
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	4603      	mov	r3, r0
 80116da:	2202      	movs	r2, #2
 80116dc:	2004      	movs	r0, #4
 80116de:	f7f8 f9e7 	bl	8009ab0 <pbuf_alloced_custom>
 80116e2:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d106      	bne.n	80116f8 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80116ea:	6978      	ldr	r0, [r7, #20]
 80116ec:	f7ff ff0c 	bl	8011508 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80116f0:	6a38      	ldr	r0, [r7, #32]
 80116f2:	f7f8 fbbb 	bl	8009e6c <pbuf_free>
        goto memerr;
 80116f6:	e064      	b.n	80117c2 <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 80116f8:	68f8      	ldr	r0, [r7, #12]
 80116fa:	f7f8 fc61 	bl	8009fc0 <pbuf_ref>
      pcr->original = p;
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	68fa      	ldr	r2, [r7, #12]
 8011702:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	4a37      	ldr	r2, [pc, #220]	; (80117e4 <ip4_frag+0x23c>)
 8011708:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801170a:	6939      	ldr	r1, [r7, #16]
 801170c:	6a38      	ldr	r0, [r7, #32]
 801170e:	f7f8 fc79 	bl	800a004 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8011712:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8011714:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011716:	1ad3      	subs	r3, r2, r3
 8011718:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801171a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801171c:	2b00      	cmp	r3, #0
 801171e:	d004      	beq.n	801172a <ip4_frag+0x182>
        poff = 0;
 8011720:	2300      	movs	r3, #0
 8011722:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801172a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1ac      	bne.n	801168a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8011730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011732:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011734:	4413      	add	r3, r2
 8011736:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801173c:	f1a3 0213 	sub.w	r2, r3, #19
 8011740:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011742:	429a      	cmp	r2, r3
 8011744:	bfcc      	ite	gt
 8011746:	2301      	movgt	r3, #1
 8011748:	2300      	movle	r3, #0
 801174a:	b2db      	uxtb	r3, r3
 801174c:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801174e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011754:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8011756:	69fb      	ldr	r3, [r7, #28]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d103      	bne.n	8011764 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 801175c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801175e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011762:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011764:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011766:	4618      	mov	r0, r3
 8011768:	f7f7 fa53 	bl	8008c12 <lwip_htons>
 801176c:	4603      	mov	r3, r0
 801176e:	461a      	mov	r2, r3
 8011770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011772:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8011774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011776:	3314      	adds	r3, #20
 8011778:	b29b      	uxth	r3, r3
 801177a:	4618      	mov	r0, r3
 801177c:	f7f7 fa49 	bl	8008c12 <lwip_htons>
 8011780:	4603      	mov	r3, r0
 8011782:	461a      	mov	r2, r3
 8011784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011786:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178a:	2200      	movs	r2, #0
 801178c:	729a      	strb	r2, [r3, #10]
 801178e:	2200      	movs	r2, #0
 8011790:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	695b      	ldr	r3, [r3, #20]
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	6a39      	ldr	r1, [r7, #32]
 801179a:	68b8      	ldr	r0, [r7, #8]
 801179c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801179e:	6a38      	ldr	r0, [r7, #32]
 80117a0:	f7f8 fb64 	bl	8009e6c <pbuf_free>
    left -= fragsize;
 80117a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80117a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117a8:	1ad3      	subs	r3, r2, r3
 80117aa:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80117ac:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80117ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80117b0:	4413      	add	r3, r2
 80117b2:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 80117b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	f47f af3e 	bne.w	8011638 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80117bc:	2300      	movs	r3, #0
 80117be:	e002      	b.n	80117c6 <ip4_frag+0x21e>
      goto memerr;
 80117c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80117c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3740      	adds	r7, #64	; 0x40
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	08014ea0 	.word	0x08014ea0
 80117d4:	0801502c 	.word	0x0801502c
 80117d8:	08014ee8 	.word	0x08014ee8
 80117dc:	08015054 	.word	0x08015054
 80117e0:	08015070 	.word	0x08015070
 80117e4:	08011541 	.word	0x08011541

080117e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b086      	sub	sp, #24
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80117f2:	230e      	movs	r3, #14
 80117f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	895b      	ldrh	r3, [r3, #10]
 80117fa:	2b0e      	cmp	r3, #14
 80117fc:	d977      	bls.n	80118ee <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	7b1a      	ldrb	r2, [r3, #12]
 8011808:	7b5b      	ldrb	r3, [r3, #13]
 801180a:	021b      	lsls	r3, r3, #8
 801180c:	4313      	orrs	r3, r2
 801180e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	f003 0301 	and.w	r3, r3, #1
 8011818:	2b00      	cmp	r3, #0
 801181a:	d023      	beq.n	8011864 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	2b01      	cmp	r3, #1
 8011822:	d10f      	bne.n	8011844 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	785b      	ldrb	r3, [r3, #1]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d11b      	bne.n	8011864 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011830:	2b5e      	cmp	r3, #94	; 0x5e
 8011832:	d117      	bne.n	8011864 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	7b5b      	ldrb	r3, [r3, #13]
 8011838:	f043 0310 	orr.w	r3, r3, #16
 801183c:	b2da      	uxtb	r2, r3
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	735a      	strb	r2, [r3, #13]
 8011842:	e00f      	b.n	8011864 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	2206      	movs	r2, #6
 8011848:	4931      	ldr	r1, [pc, #196]	; (8011910 <ethernet_input+0x128>)
 801184a:	4618      	mov	r0, r3
 801184c:	f000 f9e8 	bl	8011c20 <memcmp>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d106      	bne.n	8011864 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	7b5b      	ldrb	r3, [r3, #13]
 801185a:	f043 0308 	orr.w	r3, r3, #8
 801185e:	b2da      	uxtb	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011864:	89fb      	ldrh	r3, [r7, #14]
 8011866:	2b08      	cmp	r3, #8
 8011868:	d003      	beq.n	8011872 <ethernet_input+0x8a>
 801186a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801186e:	d01e      	beq.n	80118ae <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011870:	e046      	b.n	8011900 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011878:	f003 0308 	and.w	r3, r3, #8
 801187c:	2b00      	cmp	r3, #0
 801187e:	d038      	beq.n	80118f2 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	895b      	ldrh	r3, [r3, #10]
 8011884:	461a      	mov	r2, r3
 8011886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801188a:	429a      	cmp	r2, r3
 801188c:	db33      	blt.n	80118f6 <ethernet_input+0x10e>
 801188e:	8afb      	ldrh	r3, [r7, #22]
 8011890:	425b      	negs	r3, r3
 8011892:	b29b      	uxth	r3, r3
 8011894:	b21b      	sxth	r3, r3
 8011896:	4619      	mov	r1, r3
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7f8 fac3 	bl	8009e24 <pbuf_header>
 801189e:	4603      	mov	r3, r0
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d128      	bne.n	80118f6 <ethernet_input+0x10e>
        ip4_input(p, netif);
 80118a4:	6839      	ldr	r1, [r7, #0]
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7fe ff7c 	bl	80107a4 <ip4_input>
      break;
 80118ac:	e01d      	b.n	80118ea <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80118b4:	f003 0308 	and.w	r3, r3, #8
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d01e      	beq.n	80118fa <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	895b      	ldrh	r3, [r3, #10]
 80118c0:	461a      	mov	r2, r3
 80118c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	db19      	blt.n	80118fe <ethernet_input+0x116>
 80118ca:	8afb      	ldrh	r3, [r7, #22]
 80118cc:	425b      	negs	r3, r3
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	b21b      	sxth	r3, r3
 80118d2:	4619      	mov	r1, r3
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f7f8 faa5 	bl	8009e24 <pbuf_header>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d10e      	bne.n	80118fe <ethernet_input+0x116>
        etharp_input(p, netif);
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f7fe f94c 	bl	800fb80 <etharp_input>
      break;
 80118e8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80118ea:	2300      	movs	r3, #0
 80118ec:	e00c      	b.n	8011908 <ethernet_input+0x120>
    goto free_and_return;
 80118ee:	bf00      	nop
 80118f0:	e006      	b.n	8011900 <ethernet_input+0x118>
        goto free_and_return;
 80118f2:	bf00      	nop
 80118f4:	e004      	b.n	8011900 <ethernet_input+0x118>
        goto free_and_return;
 80118f6:	bf00      	nop
 80118f8:	e002      	b.n	8011900 <ethernet_input+0x118>
        goto free_and_return;
 80118fa:	bf00      	nop
 80118fc:	e000      	b.n	8011900 <ethernet_input+0x118>
        goto free_and_return;
 80118fe:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7f8 fab3 	bl	8009e6c <pbuf_free>
  return ERR_OK;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3718      	adds	r7, #24
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	08015314 	.word	0x08015314

08011914 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b086      	sub	sp, #24
 8011918:	af00      	add	r7, sp, #0
 801191a:	60f8      	str	r0, [r7, #12]
 801191c:	60b9      	str	r1, [r7, #8]
 801191e:	607a      	str	r2, [r7, #4]
 8011920:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011922:	8c3b      	ldrh	r3, [r7, #32]
 8011924:	4618      	mov	r0, r3
 8011926:	f7f7 f974 	bl	8008c12 <lwip_htons>
 801192a:	4603      	mov	r3, r0
 801192c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801192e:	210e      	movs	r1, #14
 8011930:	68b8      	ldr	r0, [r7, #8]
 8011932:	f7f8 fa77 	bl	8009e24 <pbuf_header>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d125      	bne.n	8011988 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	8afa      	ldrh	r2, [r7, #22]
 8011946:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	2206      	movs	r2, #6
 801194c:	6839      	ldr	r1, [r7, #0]
 801194e:	4618      	mov	r0, r3
 8011950:	f000 f974 	bl	8011c3c <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	3306      	adds	r3, #6
 8011958:	2206      	movs	r2, #6
 801195a:	6879      	ldr	r1, [r7, #4]
 801195c:	4618      	mov	r0, r3
 801195e:	f000 f96d 	bl	8011c3c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011968:	2b06      	cmp	r3, #6
 801196a:	d006      	beq.n	801197a <ethernet_output+0x66>
 801196c:	4b0a      	ldr	r3, [pc, #40]	; (8011998 <ethernet_output+0x84>)
 801196e:	f240 122b 	movw	r2, #299	; 0x12b
 8011972:	490a      	ldr	r1, [pc, #40]	; (801199c <ethernet_output+0x88>)
 8011974:	480a      	ldr	r0, [pc, #40]	; (80119a0 <ethernet_output+0x8c>)
 8011976:	f000 fa37 	bl	8011de8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	699b      	ldr	r3, [r3, #24]
 801197e:	68b9      	ldr	r1, [r7, #8]
 8011980:	68f8      	ldr	r0, [r7, #12]
 8011982:	4798      	blx	r3
 8011984:	4603      	mov	r3, r0
 8011986:	e002      	b.n	801198e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011988:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801198a:	f06f 0301 	mvn.w	r3, #1
}
 801198e:	4618      	mov	r0, r3
 8011990:	3718      	adds	r7, #24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	08015090 	.word	0x08015090
 801199c:	080150c8 	.word	0x080150c8
 80119a0:	080150fc 	.word	0x080150fc

080119a4 <_ZdlPv>:
 80119a4:	f000 b926 	b.w	8011bf4 <free>

080119a8 <_ZdlPvj>:
 80119a8:	f7ff bffc 	b.w	80119a4 <_ZdlPv>

080119ac <_Znwj>:
 80119ac:	2801      	cmp	r0, #1
 80119ae:	bf38      	it	cc
 80119b0:	2001      	movcc	r0, #1
 80119b2:	b510      	push	{r4, lr}
 80119b4:	4604      	mov	r4, r0
 80119b6:	4620      	mov	r0, r4
 80119b8:	f000 f914 	bl	8011be4 <malloc>
 80119bc:	b930      	cbnz	r0, 80119cc <_Znwj+0x20>
 80119be:	f000 f8dd 	bl	8011b7c <_ZSt15get_new_handlerv>
 80119c2:	b908      	cbnz	r0, 80119c8 <_Znwj+0x1c>
 80119c4:	f000 f8e2 	bl	8011b8c <abort>
 80119c8:	4780      	blx	r0
 80119ca:	e7f4      	b.n	80119b6 <_Znwj+0xa>
 80119cc:	bd10      	pop	{r4, pc}

080119ce <__cxa_pure_virtual>:
 80119ce:	b508      	push	{r3, lr}
 80119d0:	f000 f8ce 	bl	8011b70 <_ZSt9terminatev>

080119d4 <_ZNSaIcEC1Ev>:
 80119d4:	4770      	bx	lr

080119d6 <_ZNSaIcED1Ev>:
 80119d6:	4770      	bx	lr

080119d8 <_ZSt17__throw_bad_allocv>:
 80119d8:	b508      	push	{r3, lr}
 80119da:	f000 f8d7 	bl	8011b8c <abort>

080119de <_ZSt19__throw_logic_errorPKc>:
 80119de:	b508      	push	{r3, lr}
 80119e0:	f000 f8d4 	bl	8011b8c <abort>

080119e4 <_ZSt20__throw_length_errorPKc>:
 80119e4:	b508      	push	{r3, lr}
 80119e6:	f000 f8d1 	bl	8011b8c <abort>

080119ea <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80119ea:	b10a      	cbz	r2, 80119f0 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80119ec:	f000 b926 	b.w	8011c3c <memcpy>
 80119f0:	4770      	bx	lr
	...

080119f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80119f4:	b508      	push	{r3, lr}
 80119f6:	680b      	ldr	r3, [r1, #0]
 80119f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119fc:	d302      	bcc.n	8011a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80119fe:	480d      	ldr	r0, [pc, #52]	; (8011a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8011a00:	f7ff fff0 	bl	80119e4 <_ZSt20__throw_length_errorPKc>
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d90b      	bls.n	8011a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8011a08:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8011a0c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8011a10:	d206      	bcs.n	8011a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8011a12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011a16:	bf2a      	itet	cs
 8011a18:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8011a1c:	6008      	strcc	r0, [r1, #0]
 8011a1e:	600b      	strcs	r3, [r1, #0]
 8011a20:	6808      	ldr	r0, [r1, #0]
 8011a22:	3001      	adds	r0, #1
 8011a24:	d501      	bpl.n	8011a2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8011a26:	f7ff ffd7 	bl	80119d8 <_ZSt17__throw_bad_allocv>
 8011a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011a2e:	f7ff bfbd 	b.w	80119ac <_Znwj>
 8011a32:	bf00      	nop
 8011a34:	08015322 	.word	0x08015322

08011a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8011a38:	4603      	mov	r3, r0
 8011a3a:	f853 0b08 	ldr.w	r0, [r3], #8
 8011a3e:	4298      	cmp	r0, r3
 8011a40:	d001      	beq.n	8011a46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8011a42:	f7ff bfaf 	b.w	80119a4 <_ZdlPv>
 8011a46:	4770      	bx	lr

08011a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8011a48:	2a01      	cmp	r2, #1
 8011a4a:	b510      	push	{r4, lr}
 8011a4c:	d102      	bne.n	8011a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8011a4e:	780a      	ldrb	r2, [r1, #0]
 8011a50:	7002      	strb	r2, [r0, #0]
 8011a52:	bd10      	pop	{r4, pc}
 8011a54:	f7ff ffc9 	bl	80119ea <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8011a58:	e7fb      	b.n	8011a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08011a5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8011a5a:	b508      	push	{r3, lr}
 8011a5c:	1a52      	subs	r2, r2, r1
 8011a5e:	f7ff fff3 	bl	8011a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011a62:	bd08      	pop	{r3, pc}

08011a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8011a64:	b508      	push	{r3, lr}
 8011a66:	1a52      	subs	r2, r2, r1
 8011a68:	f7ff ffee 	bl	8011a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011a6c:	bd08      	pop	{r3, pc}

08011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	4604      	mov	r4, r0
 8011a72:	f7ff ffe1 	bl	8011a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011a76:	4620      	mov	r0, r4
 8011a78:	bd10      	pop	{r4, pc}

08011a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8011a7a:	6800      	ldr	r0, [r0, #0]
 8011a7c:	4408      	add	r0, r1
 8011a7e:	4770      	bx	lr

08011a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8011a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a82:	4604      	mov	r4, r0
 8011a84:	4616      	mov	r6, r2
 8011a86:	460d      	mov	r5, r1
 8011a88:	b919      	cbnz	r1, 8011a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8011a8a:	b112      	cbz	r2, 8011a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8011a8c:	480d      	ldr	r0, [pc, #52]	; (8011ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8011a8e:	f7ff ffa6 	bl	80119de <_ZSt19__throw_logic_errorPKc>
 8011a92:	1b73      	subs	r3, r6, r5
 8011a94:	2b0f      	cmp	r3, #15
 8011a96:	9301      	str	r3, [sp, #4]
 8011a98:	d907      	bls.n	8011aaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	a901      	add	r1, sp, #4
 8011aa0:	f7ff ffa8 	bl	80119f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011aa4:	9b01      	ldr	r3, [sp, #4]
 8011aa6:	6020      	str	r0, [r4, #0]
 8011aa8:	60a3      	str	r3, [r4, #8]
 8011aaa:	4632      	mov	r2, r6
 8011aac:	4629      	mov	r1, r5
 8011aae:	6820      	ldr	r0, [r4, #0]
 8011ab0:	f7ff ffd3 	bl	8011a5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8011ab4:	2100      	movs	r1, #0
 8011ab6:	9b01      	ldr	r3, [sp, #4]
 8011ab8:	6822      	ldr	r2, [r4, #0]
 8011aba:	6063      	str	r3, [r4, #4]
 8011abc:	54d1      	strb	r1, [r2, r3]
 8011abe:	b002      	add	sp, #8
 8011ac0:	bd70      	pop	{r4, r5, r6, pc}
 8011ac2:	bf00      	nop
 8011ac4:	0801533a 	.word	0x0801533a

08011ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8011ac8:	b510      	push	{r4, lr}
 8011aca:	4604      	mov	r4, r0
 8011acc:	f100 0208 	add.w	r2, r0, #8
 8011ad0:	6002      	str	r2, [r0, #0]
 8011ad2:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011ad6:	f04f 0300 	mov.w	r3, #0
 8011ada:	440a      	add	r2, r1
 8011adc:	f7ff ffd0 	bl	8011a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	bd10      	pop	{r4, pc}

08011ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8011ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	4616      	mov	r6, r2
 8011aea:	460d      	mov	r5, r1
 8011aec:	b919      	cbnz	r1, 8011af6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011aee:	b112      	cbz	r2, 8011af6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011af0:	480d      	ldr	r0, [pc, #52]	; (8011b28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8011af2:	f7ff ff74 	bl	80119de <_ZSt19__throw_logic_errorPKc>
 8011af6:	1b73      	subs	r3, r6, r5
 8011af8:	2b0f      	cmp	r3, #15
 8011afa:	9301      	str	r3, [sp, #4]
 8011afc:	d907      	bls.n	8011b0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8011afe:	2200      	movs	r2, #0
 8011b00:	4620      	mov	r0, r4
 8011b02:	a901      	add	r1, sp, #4
 8011b04:	f7ff ff76 	bl	80119f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011b08:	9b01      	ldr	r3, [sp, #4]
 8011b0a:	6020      	str	r0, [r4, #0]
 8011b0c:	60a3      	str	r3, [r4, #8]
 8011b0e:	4632      	mov	r2, r6
 8011b10:	4629      	mov	r1, r5
 8011b12:	6820      	ldr	r0, [r4, #0]
 8011b14:	f7ff ffa6 	bl	8011a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8011b18:	2100      	movs	r1, #0
 8011b1a:	9b01      	ldr	r3, [sp, #4]
 8011b1c:	6822      	ldr	r2, [r4, #0]
 8011b1e:	6063      	str	r3, [r4, #4]
 8011b20:	54d1      	strb	r1, [r2, r3]
 8011b22:	b002      	add	sp, #8
 8011b24:	bd70      	pop	{r4, r5, r6, pc}
 8011b26:	bf00      	nop
 8011b28:	0801533a 	.word	0x0801533a

08011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	f100 0308 	add.w	r3, r0, #8
 8011b32:	4604      	mov	r4, r0
 8011b34:	460d      	mov	r5, r1
 8011b36:	6003      	str	r3, [r0, #0]
 8011b38:	b159      	cbz	r1, 8011b52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8011b3a:	4608      	mov	r0, r1
 8011b3c:	f7ee fb42 	bl	80001c4 <strlen>
 8011b40:	182a      	adds	r2, r5, r0
 8011b42:	4620      	mov	r0, r4
 8011b44:	f04f 0300 	mov.w	r3, #0
 8011b48:	4629      	mov	r1, r5
 8011b4a:	f7ff ffcb 	bl	8011ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8011b4e:	4620      	mov	r0, r4
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	f04f 32ff 	mov.w	r2, #4294967295
 8011b56:	e7f4      	b.n	8011b42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08011b58 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011b58:	b508      	push	{r3, lr}
 8011b5a:	4780      	blx	r0
 8011b5c:	f000 f816 	bl	8011b8c <abort>

08011b60 <_ZSt13get_terminatev>:
 8011b60:	4b02      	ldr	r3, [pc, #8]	; (8011b6c <_ZSt13get_terminatev+0xc>)
 8011b62:	6818      	ldr	r0, [r3, #0]
 8011b64:	f3bf 8f5b 	dmb	ish
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	20000018 	.word	0x20000018

08011b70 <_ZSt9terminatev>:
 8011b70:	b508      	push	{r3, lr}
 8011b72:	f7ff fff5 	bl	8011b60 <_ZSt13get_terminatev>
 8011b76:	f7ff ffef 	bl	8011b58 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08011b7c <_ZSt15get_new_handlerv>:
 8011b7c:	4b02      	ldr	r3, [pc, #8]	; (8011b88 <_ZSt15get_new_handlerv+0xc>)
 8011b7e:	6818      	ldr	r0, [r3, #0]
 8011b80:	f3bf 8f5b 	dmb	ish
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop
 8011b88:	20000548 	.word	0x20000548

08011b8c <abort>:
 8011b8c:	2006      	movs	r0, #6
 8011b8e:	b508      	push	{r3, lr}
 8011b90:	f000 f9f0 	bl	8011f74 <raise>
 8011b94:	2001      	movs	r0, #1
 8011b96:	f7f0 ff91 	bl	8002abc <_exit>
	...

08011b9c <__libc_init_array>:
 8011b9c:	b570      	push	{r4, r5, r6, lr}
 8011b9e:	2600      	movs	r6, #0
 8011ba0:	4d0c      	ldr	r5, [pc, #48]	; (8011bd4 <__libc_init_array+0x38>)
 8011ba2:	4c0d      	ldr	r4, [pc, #52]	; (8011bd8 <__libc_init_array+0x3c>)
 8011ba4:	1b64      	subs	r4, r4, r5
 8011ba6:	10a4      	asrs	r4, r4, #2
 8011ba8:	42a6      	cmp	r6, r4
 8011baa:	d109      	bne.n	8011bc0 <__libc_init_array+0x24>
 8011bac:	f001 fa2c 	bl	8013008 <_init>
 8011bb0:	2600      	movs	r6, #0
 8011bb2:	4d0a      	ldr	r5, [pc, #40]	; (8011bdc <__libc_init_array+0x40>)
 8011bb4:	4c0a      	ldr	r4, [pc, #40]	; (8011be0 <__libc_init_array+0x44>)
 8011bb6:	1b64      	subs	r4, r4, r5
 8011bb8:	10a4      	asrs	r4, r4, #2
 8011bba:	42a6      	cmp	r6, r4
 8011bbc:	d105      	bne.n	8011bca <__libc_init_array+0x2e>
 8011bbe:	bd70      	pop	{r4, r5, r6, pc}
 8011bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bc4:	4798      	blx	r3
 8011bc6:	3601      	adds	r6, #1
 8011bc8:	e7ee      	b.n	8011ba8 <__libc_init_array+0xc>
 8011bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bce:	4798      	blx	r3
 8011bd0:	3601      	adds	r6, #1
 8011bd2:	e7f2      	b.n	8011bba <__libc_init_array+0x1e>
 8011bd4:	08015404 	.word	0x08015404
 8011bd8:	08015404 	.word	0x08015404
 8011bdc:	08015404 	.word	0x08015404
 8011be0:	08015408 	.word	0x08015408

08011be4 <malloc>:
 8011be4:	4b02      	ldr	r3, [pc, #8]	; (8011bf0 <malloc+0xc>)
 8011be6:	4601      	mov	r1, r0
 8011be8:	6818      	ldr	r0, [r3, #0]
 8011bea:	f000 b8a3 	b.w	8011d34 <_malloc_r>
 8011bee:	bf00      	nop
 8011bf0:	2000001c 	.word	0x2000001c

08011bf4 <free>:
 8011bf4:	4b02      	ldr	r3, [pc, #8]	; (8011c00 <free+0xc>)
 8011bf6:	4601      	mov	r1, r0
 8011bf8:	6818      	ldr	r0, [r3, #0]
 8011bfa:	f000 b84f 	b.w	8011c9c <_free_r>
 8011bfe:	bf00      	nop
 8011c00:	2000001c 	.word	0x2000001c

08011c04 <memchr>:
 8011c04:	4603      	mov	r3, r0
 8011c06:	b510      	push	{r4, lr}
 8011c08:	b2c9      	uxtb	r1, r1
 8011c0a:	4402      	add	r2, r0
 8011c0c:	4293      	cmp	r3, r2
 8011c0e:	4618      	mov	r0, r3
 8011c10:	d101      	bne.n	8011c16 <memchr+0x12>
 8011c12:	2000      	movs	r0, #0
 8011c14:	e003      	b.n	8011c1e <memchr+0x1a>
 8011c16:	7804      	ldrb	r4, [r0, #0]
 8011c18:	3301      	adds	r3, #1
 8011c1a:	428c      	cmp	r4, r1
 8011c1c:	d1f6      	bne.n	8011c0c <memchr+0x8>
 8011c1e:	bd10      	pop	{r4, pc}

08011c20 <memcmp>:
 8011c20:	b530      	push	{r4, r5, lr}
 8011c22:	2400      	movs	r4, #0
 8011c24:	3901      	subs	r1, #1
 8011c26:	42a2      	cmp	r2, r4
 8011c28:	d101      	bne.n	8011c2e <memcmp+0xe>
 8011c2a:	2000      	movs	r0, #0
 8011c2c:	e005      	b.n	8011c3a <memcmp+0x1a>
 8011c2e:	5d03      	ldrb	r3, [r0, r4]
 8011c30:	3401      	adds	r4, #1
 8011c32:	5d0d      	ldrb	r5, [r1, r4]
 8011c34:	42ab      	cmp	r3, r5
 8011c36:	d0f6      	beq.n	8011c26 <memcmp+0x6>
 8011c38:	1b58      	subs	r0, r3, r5
 8011c3a:	bd30      	pop	{r4, r5, pc}

08011c3c <memcpy>:
 8011c3c:	440a      	add	r2, r1
 8011c3e:	4291      	cmp	r1, r2
 8011c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c44:	d100      	bne.n	8011c48 <memcpy+0xc>
 8011c46:	4770      	bx	lr
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c4e:	4291      	cmp	r1, r2
 8011c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c54:	d1f9      	bne.n	8011c4a <memcpy+0xe>
 8011c56:	bd10      	pop	{r4, pc}

08011c58 <memmove>:
 8011c58:	4288      	cmp	r0, r1
 8011c5a:	b510      	push	{r4, lr}
 8011c5c:	eb01 0402 	add.w	r4, r1, r2
 8011c60:	d902      	bls.n	8011c68 <memmove+0x10>
 8011c62:	4284      	cmp	r4, r0
 8011c64:	4623      	mov	r3, r4
 8011c66:	d807      	bhi.n	8011c78 <memmove+0x20>
 8011c68:	1e43      	subs	r3, r0, #1
 8011c6a:	42a1      	cmp	r1, r4
 8011c6c:	d008      	beq.n	8011c80 <memmove+0x28>
 8011c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c76:	e7f8      	b.n	8011c6a <memmove+0x12>
 8011c78:	4601      	mov	r1, r0
 8011c7a:	4402      	add	r2, r0
 8011c7c:	428a      	cmp	r2, r1
 8011c7e:	d100      	bne.n	8011c82 <memmove+0x2a>
 8011c80:	bd10      	pop	{r4, pc}
 8011c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c8a:	e7f7      	b.n	8011c7c <memmove+0x24>

08011c8c <memset>:
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	4402      	add	r2, r0
 8011c90:	4293      	cmp	r3, r2
 8011c92:	d100      	bne.n	8011c96 <memset+0xa>
 8011c94:	4770      	bx	lr
 8011c96:	f803 1b01 	strb.w	r1, [r3], #1
 8011c9a:	e7f9      	b.n	8011c90 <memset+0x4>

08011c9c <_free_r>:
 8011c9c:	b538      	push	{r3, r4, r5, lr}
 8011c9e:	4605      	mov	r5, r0
 8011ca0:	2900      	cmp	r1, #0
 8011ca2:	d043      	beq.n	8011d2c <_free_r+0x90>
 8011ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ca8:	1f0c      	subs	r4, r1, #4
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	bfb8      	it	lt
 8011cae:	18e4      	addlt	r4, r4, r3
 8011cb0:	f000 fc7a 	bl	80125a8 <__malloc_lock>
 8011cb4:	4a1e      	ldr	r2, [pc, #120]	; (8011d30 <_free_r+0x94>)
 8011cb6:	6813      	ldr	r3, [r2, #0]
 8011cb8:	4610      	mov	r0, r2
 8011cba:	b933      	cbnz	r3, 8011cca <_free_r+0x2e>
 8011cbc:	6063      	str	r3, [r4, #4]
 8011cbe:	6014      	str	r4, [r2, #0]
 8011cc0:	4628      	mov	r0, r5
 8011cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cc6:	f000 bc75 	b.w	80125b4 <__malloc_unlock>
 8011cca:	42a3      	cmp	r3, r4
 8011ccc:	d90a      	bls.n	8011ce4 <_free_r+0x48>
 8011cce:	6821      	ldr	r1, [r4, #0]
 8011cd0:	1862      	adds	r2, r4, r1
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	bf01      	itttt	eq
 8011cd6:	681a      	ldreq	r2, [r3, #0]
 8011cd8:	685b      	ldreq	r3, [r3, #4]
 8011cda:	1852      	addeq	r2, r2, r1
 8011cdc:	6022      	streq	r2, [r4, #0]
 8011cde:	6063      	str	r3, [r4, #4]
 8011ce0:	6004      	str	r4, [r0, #0]
 8011ce2:	e7ed      	b.n	8011cc0 <_free_r+0x24>
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	b10b      	cbz	r3, 8011cee <_free_r+0x52>
 8011cea:	42a3      	cmp	r3, r4
 8011cec:	d9fa      	bls.n	8011ce4 <_free_r+0x48>
 8011cee:	6811      	ldr	r1, [r2, #0]
 8011cf0:	1850      	adds	r0, r2, r1
 8011cf2:	42a0      	cmp	r0, r4
 8011cf4:	d10b      	bne.n	8011d0e <_free_r+0x72>
 8011cf6:	6820      	ldr	r0, [r4, #0]
 8011cf8:	4401      	add	r1, r0
 8011cfa:	1850      	adds	r0, r2, r1
 8011cfc:	4283      	cmp	r3, r0
 8011cfe:	6011      	str	r1, [r2, #0]
 8011d00:	d1de      	bne.n	8011cc0 <_free_r+0x24>
 8011d02:	6818      	ldr	r0, [r3, #0]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	4401      	add	r1, r0
 8011d08:	6011      	str	r1, [r2, #0]
 8011d0a:	6053      	str	r3, [r2, #4]
 8011d0c:	e7d8      	b.n	8011cc0 <_free_r+0x24>
 8011d0e:	d902      	bls.n	8011d16 <_free_r+0x7a>
 8011d10:	230c      	movs	r3, #12
 8011d12:	602b      	str	r3, [r5, #0]
 8011d14:	e7d4      	b.n	8011cc0 <_free_r+0x24>
 8011d16:	6820      	ldr	r0, [r4, #0]
 8011d18:	1821      	adds	r1, r4, r0
 8011d1a:	428b      	cmp	r3, r1
 8011d1c:	bf01      	itttt	eq
 8011d1e:	6819      	ldreq	r1, [r3, #0]
 8011d20:	685b      	ldreq	r3, [r3, #4]
 8011d22:	1809      	addeq	r1, r1, r0
 8011d24:	6021      	streq	r1, [r4, #0]
 8011d26:	6063      	str	r3, [r4, #4]
 8011d28:	6054      	str	r4, [r2, #4]
 8011d2a:	e7c9      	b.n	8011cc0 <_free_r+0x24>
 8011d2c:	bd38      	pop	{r3, r4, r5, pc}
 8011d2e:	bf00      	nop
 8011d30:	2000054c 	.word	0x2000054c

08011d34 <_malloc_r>:
 8011d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d36:	1ccd      	adds	r5, r1, #3
 8011d38:	f025 0503 	bic.w	r5, r5, #3
 8011d3c:	3508      	adds	r5, #8
 8011d3e:	2d0c      	cmp	r5, #12
 8011d40:	bf38      	it	cc
 8011d42:	250c      	movcc	r5, #12
 8011d44:	2d00      	cmp	r5, #0
 8011d46:	4606      	mov	r6, r0
 8011d48:	db01      	blt.n	8011d4e <_malloc_r+0x1a>
 8011d4a:	42a9      	cmp	r1, r5
 8011d4c:	d903      	bls.n	8011d56 <_malloc_r+0x22>
 8011d4e:	230c      	movs	r3, #12
 8011d50:	6033      	str	r3, [r6, #0]
 8011d52:	2000      	movs	r0, #0
 8011d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d56:	f000 fc27 	bl	80125a8 <__malloc_lock>
 8011d5a:	4921      	ldr	r1, [pc, #132]	; (8011de0 <_malloc_r+0xac>)
 8011d5c:	680a      	ldr	r2, [r1, #0]
 8011d5e:	4614      	mov	r4, r2
 8011d60:	b99c      	cbnz	r4, 8011d8a <_malloc_r+0x56>
 8011d62:	4f20      	ldr	r7, [pc, #128]	; (8011de4 <_malloc_r+0xb0>)
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	b923      	cbnz	r3, 8011d72 <_malloc_r+0x3e>
 8011d68:	4621      	mov	r1, r4
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	f000 f8ca 	bl	8011f04 <_sbrk_r>
 8011d70:	6038      	str	r0, [r7, #0]
 8011d72:	4629      	mov	r1, r5
 8011d74:	4630      	mov	r0, r6
 8011d76:	f000 f8c5 	bl	8011f04 <_sbrk_r>
 8011d7a:	1c43      	adds	r3, r0, #1
 8011d7c:	d123      	bne.n	8011dc6 <_malloc_r+0x92>
 8011d7e:	230c      	movs	r3, #12
 8011d80:	4630      	mov	r0, r6
 8011d82:	6033      	str	r3, [r6, #0]
 8011d84:	f000 fc16 	bl	80125b4 <__malloc_unlock>
 8011d88:	e7e3      	b.n	8011d52 <_malloc_r+0x1e>
 8011d8a:	6823      	ldr	r3, [r4, #0]
 8011d8c:	1b5b      	subs	r3, r3, r5
 8011d8e:	d417      	bmi.n	8011dc0 <_malloc_r+0x8c>
 8011d90:	2b0b      	cmp	r3, #11
 8011d92:	d903      	bls.n	8011d9c <_malloc_r+0x68>
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	441c      	add	r4, r3
 8011d98:	6025      	str	r5, [r4, #0]
 8011d9a:	e004      	b.n	8011da6 <_malloc_r+0x72>
 8011d9c:	6863      	ldr	r3, [r4, #4]
 8011d9e:	42a2      	cmp	r2, r4
 8011da0:	bf0c      	ite	eq
 8011da2:	600b      	streq	r3, [r1, #0]
 8011da4:	6053      	strne	r3, [r2, #4]
 8011da6:	4630      	mov	r0, r6
 8011da8:	f000 fc04 	bl	80125b4 <__malloc_unlock>
 8011dac:	f104 000b 	add.w	r0, r4, #11
 8011db0:	1d23      	adds	r3, r4, #4
 8011db2:	f020 0007 	bic.w	r0, r0, #7
 8011db6:	1ac2      	subs	r2, r0, r3
 8011db8:	d0cc      	beq.n	8011d54 <_malloc_r+0x20>
 8011dba:	1a1b      	subs	r3, r3, r0
 8011dbc:	50a3      	str	r3, [r4, r2]
 8011dbe:	e7c9      	b.n	8011d54 <_malloc_r+0x20>
 8011dc0:	4622      	mov	r2, r4
 8011dc2:	6864      	ldr	r4, [r4, #4]
 8011dc4:	e7cc      	b.n	8011d60 <_malloc_r+0x2c>
 8011dc6:	1cc4      	adds	r4, r0, #3
 8011dc8:	f024 0403 	bic.w	r4, r4, #3
 8011dcc:	42a0      	cmp	r0, r4
 8011dce:	d0e3      	beq.n	8011d98 <_malloc_r+0x64>
 8011dd0:	1a21      	subs	r1, r4, r0
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	f000 f896 	bl	8011f04 <_sbrk_r>
 8011dd8:	3001      	adds	r0, #1
 8011dda:	d1dd      	bne.n	8011d98 <_malloc_r+0x64>
 8011ddc:	e7cf      	b.n	8011d7e <_malloc_r+0x4a>
 8011dde:	bf00      	nop
 8011de0:	2000054c 	.word	0x2000054c
 8011de4:	20000550 	.word	0x20000550

08011de8 <iprintf>:
 8011de8:	b40f      	push	{r0, r1, r2, r3}
 8011dea:	4b0a      	ldr	r3, [pc, #40]	; (8011e14 <iprintf+0x2c>)
 8011dec:	b513      	push	{r0, r1, r4, lr}
 8011dee:	681c      	ldr	r4, [r3, #0]
 8011df0:	b124      	cbz	r4, 8011dfc <iprintf+0x14>
 8011df2:	69a3      	ldr	r3, [r4, #24]
 8011df4:	b913      	cbnz	r3, 8011dfc <iprintf+0x14>
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 fad2 	bl	80123a0 <__sinit>
 8011dfc:	ab05      	add	r3, sp, #20
 8011dfe:	4620      	mov	r0, r4
 8011e00:	9a04      	ldr	r2, [sp, #16]
 8011e02:	68a1      	ldr	r1, [r4, #8]
 8011e04:	9301      	str	r3, [sp, #4]
 8011e06:	f000 fd5f 	bl	80128c8 <_vfiprintf_r>
 8011e0a:	b002      	add	sp, #8
 8011e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e10:	b004      	add	sp, #16
 8011e12:	4770      	bx	lr
 8011e14:	2000001c 	.word	0x2000001c

08011e18 <_puts_r>:
 8011e18:	b570      	push	{r4, r5, r6, lr}
 8011e1a:	460e      	mov	r6, r1
 8011e1c:	4605      	mov	r5, r0
 8011e1e:	b118      	cbz	r0, 8011e28 <_puts_r+0x10>
 8011e20:	6983      	ldr	r3, [r0, #24]
 8011e22:	b90b      	cbnz	r3, 8011e28 <_puts_r+0x10>
 8011e24:	f000 fabc 	bl	80123a0 <__sinit>
 8011e28:	69ab      	ldr	r3, [r5, #24]
 8011e2a:	68ac      	ldr	r4, [r5, #8]
 8011e2c:	b913      	cbnz	r3, 8011e34 <_puts_r+0x1c>
 8011e2e:	4628      	mov	r0, r5
 8011e30:	f000 fab6 	bl	80123a0 <__sinit>
 8011e34:	4b2c      	ldr	r3, [pc, #176]	; (8011ee8 <_puts_r+0xd0>)
 8011e36:	429c      	cmp	r4, r3
 8011e38:	d120      	bne.n	8011e7c <_puts_r+0x64>
 8011e3a:	686c      	ldr	r4, [r5, #4]
 8011e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e3e:	07db      	lsls	r3, r3, #31
 8011e40:	d405      	bmi.n	8011e4e <_puts_r+0x36>
 8011e42:	89a3      	ldrh	r3, [r4, #12]
 8011e44:	0598      	lsls	r0, r3, #22
 8011e46:	d402      	bmi.n	8011e4e <_puts_r+0x36>
 8011e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e4a:	f000 fb47 	bl	80124dc <__retarget_lock_acquire_recursive>
 8011e4e:	89a3      	ldrh	r3, [r4, #12]
 8011e50:	0719      	lsls	r1, r3, #28
 8011e52:	d51d      	bpl.n	8011e90 <_puts_r+0x78>
 8011e54:	6923      	ldr	r3, [r4, #16]
 8011e56:	b1db      	cbz	r3, 8011e90 <_puts_r+0x78>
 8011e58:	3e01      	subs	r6, #1
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e60:	3b01      	subs	r3, #1
 8011e62:	60a3      	str	r3, [r4, #8]
 8011e64:	bb39      	cbnz	r1, 8011eb6 <_puts_r+0x9e>
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	da38      	bge.n	8011edc <_puts_r+0xc4>
 8011e6a:	4622      	mov	r2, r4
 8011e6c:	210a      	movs	r1, #10
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f000 f8bc 	bl	8011fec <__swbuf_r>
 8011e74:	3001      	adds	r0, #1
 8011e76:	d011      	beq.n	8011e9c <_puts_r+0x84>
 8011e78:	250a      	movs	r5, #10
 8011e7a:	e011      	b.n	8011ea0 <_puts_r+0x88>
 8011e7c:	4b1b      	ldr	r3, [pc, #108]	; (8011eec <_puts_r+0xd4>)
 8011e7e:	429c      	cmp	r4, r3
 8011e80:	d101      	bne.n	8011e86 <_puts_r+0x6e>
 8011e82:	68ac      	ldr	r4, [r5, #8]
 8011e84:	e7da      	b.n	8011e3c <_puts_r+0x24>
 8011e86:	4b1a      	ldr	r3, [pc, #104]	; (8011ef0 <_puts_r+0xd8>)
 8011e88:	429c      	cmp	r4, r3
 8011e8a:	bf08      	it	eq
 8011e8c:	68ec      	ldreq	r4, [r5, #12]
 8011e8e:	e7d5      	b.n	8011e3c <_puts_r+0x24>
 8011e90:	4621      	mov	r1, r4
 8011e92:	4628      	mov	r0, r5
 8011e94:	f000 f8fc 	bl	8012090 <__swsetup_r>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d0dd      	beq.n	8011e58 <_puts_r+0x40>
 8011e9c:	f04f 35ff 	mov.w	r5, #4294967295
 8011ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ea2:	07da      	lsls	r2, r3, #31
 8011ea4:	d405      	bmi.n	8011eb2 <_puts_r+0x9a>
 8011ea6:	89a3      	ldrh	r3, [r4, #12]
 8011ea8:	059b      	lsls	r3, r3, #22
 8011eaa:	d402      	bmi.n	8011eb2 <_puts_r+0x9a>
 8011eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011eae:	f000 fb16 	bl	80124de <__retarget_lock_release_recursive>
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	bd70      	pop	{r4, r5, r6, pc}
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	da04      	bge.n	8011ec4 <_puts_r+0xac>
 8011eba:	69a2      	ldr	r2, [r4, #24]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	dc06      	bgt.n	8011ece <_puts_r+0xb6>
 8011ec0:	290a      	cmp	r1, #10
 8011ec2:	d004      	beq.n	8011ece <_puts_r+0xb6>
 8011ec4:	6823      	ldr	r3, [r4, #0]
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	6022      	str	r2, [r4, #0]
 8011eca:	7019      	strb	r1, [r3, #0]
 8011ecc:	e7c5      	b.n	8011e5a <_puts_r+0x42>
 8011ece:	4622      	mov	r2, r4
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f000 f88b 	bl	8011fec <__swbuf_r>
 8011ed6:	3001      	adds	r0, #1
 8011ed8:	d1bf      	bne.n	8011e5a <_puts_r+0x42>
 8011eda:	e7df      	b.n	8011e9c <_puts_r+0x84>
 8011edc:	250a      	movs	r5, #10
 8011ede:	6823      	ldr	r3, [r4, #0]
 8011ee0:	1c5a      	adds	r2, r3, #1
 8011ee2:	6022      	str	r2, [r4, #0]
 8011ee4:	701d      	strb	r5, [r3, #0]
 8011ee6:	e7db      	b.n	8011ea0 <_puts_r+0x88>
 8011ee8:	08015388 	.word	0x08015388
 8011eec:	080153a8 	.word	0x080153a8
 8011ef0:	08015368 	.word	0x08015368

08011ef4 <puts>:
 8011ef4:	4b02      	ldr	r3, [pc, #8]	; (8011f00 <puts+0xc>)
 8011ef6:	4601      	mov	r1, r0
 8011ef8:	6818      	ldr	r0, [r3, #0]
 8011efa:	f7ff bf8d 	b.w	8011e18 <_puts_r>
 8011efe:	bf00      	nop
 8011f00:	2000001c 	.word	0x2000001c

08011f04 <_sbrk_r>:
 8011f04:	b538      	push	{r3, r4, r5, lr}
 8011f06:	2300      	movs	r3, #0
 8011f08:	4d05      	ldr	r5, [pc, #20]	; (8011f20 <_sbrk_r+0x1c>)
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	4608      	mov	r0, r1
 8011f0e:	602b      	str	r3, [r5, #0]
 8011f10:	f7f0 fe48 	bl	8002ba4 <_sbrk>
 8011f14:	1c43      	adds	r3, r0, #1
 8011f16:	d102      	bne.n	8011f1e <_sbrk_r+0x1a>
 8011f18:	682b      	ldr	r3, [r5, #0]
 8011f1a:	b103      	cbz	r3, 8011f1e <_sbrk_r+0x1a>
 8011f1c:	6023      	str	r3, [r4, #0]
 8011f1e:	bd38      	pop	{r3, r4, r5, pc}
 8011f20:	20006ba4 	.word	0x20006ba4

08011f24 <_raise_r>:
 8011f24:	291f      	cmp	r1, #31
 8011f26:	b538      	push	{r3, r4, r5, lr}
 8011f28:	4604      	mov	r4, r0
 8011f2a:	460d      	mov	r5, r1
 8011f2c:	d904      	bls.n	8011f38 <_raise_r+0x14>
 8011f2e:	2316      	movs	r3, #22
 8011f30:	6003      	str	r3, [r0, #0]
 8011f32:	f04f 30ff 	mov.w	r0, #4294967295
 8011f36:	bd38      	pop	{r3, r4, r5, pc}
 8011f38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f3a:	b112      	cbz	r2, 8011f42 <_raise_r+0x1e>
 8011f3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f40:	b94b      	cbnz	r3, 8011f56 <_raise_r+0x32>
 8011f42:	4620      	mov	r0, r4
 8011f44:	f000 f830 	bl	8011fa8 <_getpid_r>
 8011f48:	462a      	mov	r2, r5
 8011f4a:	4601      	mov	r1, r0
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f52:	f000 b817 	b.w	8011f84 <_kill_r>
 8011f56:	2b01      	cmp	r3, #1
 8011f58:	d00a      	beq.n	8011f70 <_raise_r+0x4c>
 8011f5a:	1c59      	adds	r1, r3, #1
 8011f5c:	d103      	bne.n	8011f66 <_raise_r+0x42>
 8011f5e:	2316      	movs	r3, #22
 8011f60:	6003      	str	r3, [r0, #0]
 8011f62:	2001      	movs	r0, #1
 8011f64:	e7e7      	b.n	8011f36 <_raise_r+0x12>
 8011f66:	2400      	movs	r4, #0
 8011f68:	4628      	mov	r0, r5
 8011f6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f6e:	4798      	blx	r3
 8011f70:	2000      	movs	r0, #0
 8011f72:	e7e0      	b.n	8011f36 <_raise_r+0x12>

08011f74 <raise>:
 8011f74:	4b02      	ldr	r3, [pc, #8]	; (8011f80 <raise+0xc>)
 8011f76:	4601      	mov	r1, r0
 8011f78:	6818      	ldr	r0, [r3, #0]
 8011f7a:	f7ff bfd3 	b.w	8011f24 <_raise_r>
 8011f7e:	bf00      	nop
 8011f80:	2000001c 	.word	0x2000001c

08011f84 <_kill_r>:
 8011f84:	b538      	push	{r3, r4, r5, lr}
 8011f86:	2300      	movs	r3, #0
 8011f88:	4d06      	ldr	r5, [pc, #24]	; (8011fa4 <_kill_r+0x20>)
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	4608      	mov	r0, r1
 8011f8e:	4611      	mov	r1, r2
 8011f90:	602b      	str	r3, [r5, #0]
 8011f92:	f7f0 fd81 	bl	8002a98 <_kill>
 8011f96:	1c43      	adds	r3, r0, #1
 8011f98:	d102      	bne.n	8011fa0 <_kill_r+0x1c>
 8011f9a:	682b      	ldr	r3, [r5, #0]
 8011f9c:	b103      	cbz	r3, 8011fa0 <_kill_r+0x1c>
 8011f9e:	6023      	str	r3, [r4, #0]
 8011fa0:	bd38      	pop	{r3, r4, r5, pc}
 8011fa2:	bf00      	nop
 8011fa4:	20006ba4 	.word	0x20006ba4

08011fa8 <_getpid_r>:
 8011fa8:	f7f0 bd6f 	b.w	8002a8a <_getpid>

08011fac <siprintf>:
 8011fac:	b40e      	push	{r1, r2, r3}
 8011fae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011fb2:	b500      	push	{lr}
 8011fb4:	b09c      	sub	sp, #112	; 0x70
 8011fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8011fb8:	9002      	str	r0, [sp, #8]
 8011fba:	9006      	str	r0, [sp, #24]
 8011fbc:	9107      	str	r1, [sp, #28]
 8011fbe:	9104      	str	r1, [sp, #16]
 8011fc0:	4808      	ldr	r0, [pc, #32]	; (8011fe4 <siprintf+0x38>)
 8011fc2:	4909      	ldr	r1, [pc, #36]	; (8011fe8 <siprintf+0x3c>)
 8011fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fc8:	9105      	str	r1, [sp, #20]
 8011fca:	6800      	ldr	r0, [r0, #0]
 8011fcc:	a902      	add	r1, sp, #8
 8011fce:	9301      	str	r3, [sp, #4]
 8011fd0:	f000 fb52 	bl	8012678 <_svfiprintf_r>
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	9b02      	ldr	r3, [sp, #8]
 8011fd8:	701a      	strb	r2, [r3, #0]
 8011fda:	b01c      	add	sp, #112	; 0x70
 8011fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fe0:	b003      	add	sp, #12
 8011fe2:	4770      	bx	lr
 8011fe4:	2000001c 	.word	0x2000001c
 8011fe8:	ffff0208 	.word	0xffff0208

08011fec <__swbuf_r>:
 8011fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fee:	460e      	mov	r6, r1
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	4605      	mov	r5, r0
 8011ff4:	b118      	cbz	r0, 8011ffe <__swbuf_r+0x12>
 8011ff6:	6983      	ldr	r3, [r0, #24]
 8011ff8:	b90b      	cbnz	r3, 8011ffe <__swbuf_r+0x12>
 8011ffa:	f000 f9d1 	bl	80123a0 <__sinit>
 8011ffe:	4b21      	ldr	r3, [pc, #132]	; (8012084 <__swbuf_r+0x98>)
 8012000:	429c      	cmp	r4, r3
 8012002:	d12b      	bne.n	801205c <__swbuf_r+0x70>
 8012004:	686c      	ldr	r4, [r5, #4]
 8012006:	69a3      	ldr	r3, [r4, #24]
 8012008:	60a3      	str	r3, [r4, #8]
 801200a:	89a3      	ldrh	r3, [r4, #12]
 801200c:	071a      	lsls	r2, r3, #28
 801200e:	d52f      	bpl.n	8012070 <__swbuf_r+0x84>
 8012010:	6923      	ldr	r3, [r4, #16]
 8012012:	b36b      	cbz	r3, 8012070 <__swbuf_r+0x84>
 8012014:	6923      	ldr	r3, [r4, #16]
 8012016:	6820      	ldr	r0, [r4, #0]
 8012018:	b2f6      	uxtb	r6, r6
 801201a:	1ac0      	subs	r0, r0, r3
 801201c:	6963      	ldr	r3, [r4, #20]
 801201e:	4637      	mov	r7, r6
 8012020:	4283      	cmp	r3, r0
 8012022:	dc04      	bgt.n	801202e <__swbuf_r+0x42>
 8012024:	4621      	mov	r1, r4
 8012026:	4628      	mov	r0, r5
 8012028:	f000 f926 	bl	8012278 <_fflush_r>
 801202c:	bb30      	cbnz	r0, 801207c <__swbuf_r+0x90>
 801202e:	68a3      	ldr	r3, [r4, #8]
 8012030:	3001      	adds	r0, #1
 8012032:	3b01      	subs	r3, #1
 8012034:	60a3      	str	r3, [r4, #8]
 8012036:	6823      	ldr	r3, [r4, #0]
 8012038:	1c5a      	adds	r2, r3, #1
 801203a:	6022      	str	r2, [r4, #0]
 801203c:	701e      	strb	r6, [r3, #0]
 801203e:	6963      	ldr	r3, [r4, #20]
 8012040:	4283      	cmp	r3, r0
 8012042:	d004      	beq.n	801204e <__swbuf_r+0x62>
 8012044:	89a3      	ldrh	r3, [r4, #12]
 8012046:	07db      	lsls	r3, r3, #31
 8012048:	d506      	bpl.n	8012058 <__swbuf_r+0x6c>
 801204a:	2e0a      	cmp	r6, #10
 801204c:	d104      	bne.n	8012058 <__swbuf_r+0x6c>
 801204e:	4621      	mov	r1, r4
 8012050:	4628      	mov	r0, r5
 8012052:	f000 f911 	bl	8012278 <_fflush_r>
 8012056:	b988      	cbnz	r0, 801207c <__swbuf_r+0x90>
 8012058:	4638      	mov	r0, r7
 801205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801205c:	4b0a      	ldr	r3, [pc, #40]	; (8012088 <__swbuf_r+0x9c>)
 801205e:	429c      	cmp	r4, r3
 8012060:	d101      	bne.n	8012066 <__swbuf_r+0x7a>
 8012062:	68ac      	ldr	r4, [r5, #8]
 8012064:	e7cf      	b.n	8012006 <__swbuf_r+0x1a>
 8012066:	4b09      	ldr	r3, [pc, #36]	; (801208c <__swbuf_r+0xa0>)
 8012068:	429c      	cmp	r4, r3
 801206a:	bf08      	it	eq
 801206c:	68ec      	ldreq	r4, [r5, #12]
 801206e:	e7ca      	b.n	8012006 <__swbuf_r+0x1a>
 8012070:	4621      	mov	r1, r4
 8012072:	4628      	mov	r0, r5
 8012074:	f000 f80c 	bl	8012090 <__swsetup_r>
 8012078:	2800      	cmp	r0, #0
 801207a:	d0cb      	beq.n	8012014 <__swbuf_r+0x28>
 801207c:	f04f 37ff 	mov.w	r7, #4294967295
 8012080:	e7ea      	b.n	8012058 <__swbuf_r+0x6c>
 8012082:	bf00      	nop
 8012084:	08015388 	.word	0x08015388
 8012088:	080153a8 	.word	0x080153a8
 801208c:	08015368 	.word	0x08015368

08012090 <__swsetup_r>:
 8012090:	4b32      	ldr	r3, [pc, #200]	; (801215c <__swsetup_r+0xcc>)
 8012092:	b570      	push	{r4, r5, r6, lr}
 8012094:	681d      	ldr	r5, [r3, #0]
 8012096:	4606      	mov	r6, r0
 8012098:	460c      	mov	r4, r1
 801209a:	b125      	cbz	r5, 80120a6 <__swsetup_r+0x16>
 801209c:	69ab      	ldr	r3, [r5, #24]
 801209e:	b913      	cbnz	r3, 80120a6 <__swsetup_r+0x16>
 80120a0:	4628      	mov	r0, r5
 80120a2:	f000 f97d 	bl	80123a0 <__sinit>
 80120a6:	4b2e      	ldr	r3, [pc, #184]	; (8012160 <__swsetup_r+0xd0>)
 80120a8:	429c      	cmp	r4, r3
 80120aa:	d10f      	bne.n	80120cc <__swsetup_r+0x3c>
 80120ac:	686c      	ldr	r4, [r5, #4]
 80120ae:	89a3      	ldrh	r3, [r4, #12]
 80120b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120b4:	0719      	lsls	r1, r3, #28
 80120b6:	d42c      	bmi.n	8012112 <__swsetup_r+0x82>
 80120b8:	06dd      	lsls	r5, r3, #27
 80120ba:	d411      	bmi.n	80120e0 <__swsetup_r+0x50>
 80120bc:	2309      	movs	r3, #9
 80120be:	6033      	str	r3, [r6, #0]
 80120c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80120c4:	f04f 30ff 	mov.w	r0, #4294967295
 80120c8:	81a3      	strh	r3, [r4, #12]
 80120ca:	e03e      	b.n	801214a <__swsetup_r+0xba>
 80120cc:	4b25      	ldr	r3, [pc, #148]	; (8012164 <__swsetup_r+0xd4>)
 80120ce:	429c      	cmp	r4, r3
 80120d0:	d101      	bne.n	80120d6 <__swsetup_r+0x46>
 80120d2:	68ac      	ldr	r4, [r5, #8]
 80120d4:	e7eb      	b.n	80120ae <__swsetup_r+0x1e>
 80120d6:	4b24      	ldr	r3, [pc, #144]	; (8012168 <__swsetup_r+0xd8>)
 80120d8:	429c      	cmp	r4, r3
 80120da:	bf08      	it	eq
 80120dc:	68ec      	ldreq	r4, [r5, #12]
 80120de:	e7e6      	b.n	80120ae <__swsetup_r+0x1e>
 80120e0:	0758      	lsls	r0, r3, #29
 80120e2:	d512      	bpl.n	801210a <__swsetup_r+0x7a>
 80120e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120e6:	b141      	cbz	r1, 80120fa <__swsetup_r+0x6a>
 80120e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120ec:	4299      	cmp	r1, r3
 80120ee:	d002      	beq.n	80120f6 <__swsetup_r+0x66>
 80120f0:	4630      	mov	r0, r6
 80120f2:	f7ff fdd3 	bl	8011c9c <_free_r>
 80120f6:	2300      	movs	r3, #0
 80120f8:	6363      	str	r3, [r4, #52]	; 0x34
 80120fa:	89a3      	ldrh	r3, [r4, #12]
 80120fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012100:	81a3      	strh	r3, [r4, #12]
 8012102:	2300      	movs	r3, #0
 8012104:	6063      	str	r3, [r4, #4]
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	89a3      	ldrh	r3, [r4, #12]
 801210c:	f043 0308 	orr.w	r3, r3, #8
 8012110:	81a3      	strh	r3, [r4, #12]
 8012112:	6923      	ldr	r3, [r4, #16]
 8012114:	b94b      	cbnz	r3, 801212a <__swsetup_r+0x9a>
 8012116:	89a3      	ldrh	r3, [r4, #12]
 8012118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012120:	d003      	beq.n	801212a <__swsetup_r+0x9a>
 8012122:	4621      	mov	r1, r4
 8012124:	4630      	mov	r0, r6
 8012126:	f000 f9ff 	bl	8012528 <__smakebuf_r>
 801212a:	89a0      	ldrh	r0, [r4, #12]
 801212c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012130:	f010 0301 	ands.w	r3, r0, #1
 8012134:	d00a      	beq.n	801214c <__swsetup_r+0xbc>
 8012136:	2300      	movs	r3, #0
 8012138:	60a3      	str	r3, [r4, #8]
 801213a:	6963      	ldr	r3, [r4, #20]
 801213c:	425b      	negs	r3, r3
 801213e:	61a3      	str	r3, [r4, #24]
 8012140:	6923      	ldr	r3, [r4, #16]
 8012142:	b943      	cbnz	r3, 8012156 <__swsetup_r+0xc6>
 8012144:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012148:	d1ba      	bne.n	80120c0 <__swsetup_r+0x30>
 801214a:	bd70      	pop	{r4, r5, r6, pc}
 801214c:	0781      	lsls	r1, r0, #30
 801214e:	bf58      	it	pl
 8012150:	6963      	ldrpl	r3, [r4, #20]
 8012152:	60a3      	str	r3, [r4, #8]
 8012154:	e7f4      	b.n	8012140 <__swsetup_r+0xb0>
 8012156:	2000      	movs	r0, #0
 8012158:	e7f7      	b.n	801214a <__swsetup_r+0xba>
 801215a:	bf00      	nop
 801215c:	2000001c 	.word	0x2000001c
 8012160:	08015388 	.word	0x08015388
 8012164:	080153a8 	.word	0x080153a8
 8012168:	08015368 	.word	0x08015368

0801216c <__sflush_r>:
 801216c:	898a      	ldrh	r2, [r1, #12]
 801216e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012172:	4605      	mov	r5, r0
 8012174:	0710      	lsls	r0, r2, #28
 8012176:	460c      	mov	r4, r1
 8012178:	d458      	bmi.n	801222c <__sflush_r+0xc0>
 801217a:	684b      	ldr	r3, [r1, #4]
 801217c:	2b00      	cmp	r3, #0
 801217e:	dc05      	bgt.n	801218c <__sflush_r+0x20>
 8012180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012182:	2b00      	cmp	r3, #0
 8012184:	dc02      	bgt.n	801218c <__sflush_r+0x20>
 8012186:	2000      	movs	r0, #0
 8012188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801218c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801218e:	2e00      	cmp	r6, #0
 8012190:	d0f9      	beq.n	8012186 <__sflush_r+0x1a>
 8012192:	2300      	movs	r3, #0
 8012194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012198:	682f      	ldr	r7, [r5, #0]
 801219a:	602b      	str	r3, [r5, #0]
 801219c:	d032      	beq.n	8012204 <__sflush_r+0x98>
 801219e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80121a0:	89a3      	ldrh	r3, [r4, #12]
 80121a2:	075a      	lsls	r2, r3, #29
 80121a4:	d505      	bpl.n	80121b2 <__sflush_r+0x46>
 80121a6:	6863      	ldr	r3, [r4, #4]
 80121a8:	1ac0      	subs	r0, r0, r3
 80121aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80121ac:	b10b      	cbz	r3, 80121b2 <__sflush_r+0x46>
 80121ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80121b0:	1ac0      	subs	r0, r0, r3
 80121b2:	2300      	movs	r3, #0
 80121b4:	4602      	mov	r2, r0
 80121b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121b8:	4628      	mov	r0, r5
 80121ba:	6a21      	ldr	r1, [r4, #32]
 80121bc:	47b0      	blx	r6
 80121be:	1c43      	adds	r3, r0, #1
 80121c0:	89a3      	ldrh	r3, [r4, #12]
 80121c2:	d106      	bne.n	80121d2 <__sflush_r+0x66>
 80121c4:	6829      	ldr	r1, [r5, #0]
 80121c6:	291d      	cmp	r1, #29
 80121c8:	d82c      	bhi.n	8012224 <__sflush_r+0xb8>
 80121ca:	4a2a      	ldr	r2, [pc, #168]	; (8012274 <__sflush_r+0x108>)
 80121cc:	40ca      	lsrs	r2, r1
 80121ce:	07d6      	lsls	r6, r2, #31
 80121d0:	d528      	bpl.n	8012224 <__sflush_r+0xb8>
 80121d2:	2200      	movs	r2, #0
 80121d4:	6062      	str	r2, [r4, #4]
 80121d6:	6922      	ldr	r2, [r4, #16]
 80121d8:	04d9      	lsls	r1, r3, #19
 80121da:	6022      	str	r2, [r4, #0]
 80121dc:	d504      	bpl.n	80121e8 <__sflush_r+0x7c>
 80121de:	1c42      	adds	r2, r0, #1
 80121e0:	d101      	bne.n	80121e6 <__sflush_r+0x7a>
 80121e2:	682b      	ldr	r3, [r5, #0]
 80121e4:	b903      	cbnz	r3, 80121e8 <__sflush_r+0x7c>
 80121e6:	6560      	str	r0, [r4, #84]	; 0x54
 80121e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121ea:	602f      	str	r7, [r5, #0]
 80121ec:	2900      	cmp	r1, #0
 80121ee:	d0ca      	beq.n	8012186 <__sflush_r+0x1a>
 80121f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121f4:	4299      	cmp	r1, r3
 80121f6:	d002      	beq.n	80121fe <__sflush_r+0x92>
 80121f8:	4628      	mov	r0, r5
 80121fa:	f7ff fd4f 	bl	8011c9c <_free_r>
 80121fe:	2000      	movs	r0, #0
 8012200:	6360      	str	r0, [r4, #52]	; 0x34
 8012202:	e7c1      	b.n	8012188 <__sflush_r+0x1c>
 8012204:	6a21      	ldr	r1, [r4, #32]
 8012206:	2301      	movs	r3, #1
 8012208:	4628      	mov	r0, r5
 801220a:	47b0      	blx	r6
 801220c:	1c41      	adds	r1, r0, #1
 801220e:	d1c7      	bne.n	80121a0 <__sflush_r+0x34>
 8012210:	682b      	ldr	r3, [r5, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d0c4      	beq.n	80121a0 <__sflush_r+0x34>
 8012216:	2b1d      	cmp	r3, #29
 8012218:	d001      	beq.n	801221e <__sflush_r+0xb2>
 801221a:	2b16      	cmp	r3, #22
 801221c:	d101      	bne.n	8012222 <__sflush_r+0xb6>
 801221e:	602f      	str	r7, [r5, #0]
 8012220:	e7b1      	b.n	8012186 <__sflush_r+0x1a>
 8012222:	89a3      	ldrh	r3, [r4, #12]
 8012224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012228:	81a3      	strh	r3, [r4, #12]
 801222a:	e7ad      	b.n	8012188 <__sflush_r+0x1c>
 801222c:	690f      	ldr	r7, [r1, #16]
 801222e:	2f00      	cmp	r7, #0
 8012230:	d0a9      	beq.n	8012186 <__sflush_r+0x1a>
 8012232:	0793      	lsls	r3, r2, #30
 8012234:	bf18      	it	ne
 8012236:	2300      	movne	r3, #0
 8012238:	680e      	ldr	r6, [r1, #0]
 801223a:	bf08      	it	eq
 801223c:	694b      	ldreq	r3, [r1, #20]
 801223e:	eba6 0807 	sub.w	r8, r6, r7
 8012242:	600f      	str	r7, [r1, #0]
 8012244:	608b      	str	r3, [r1, #8]
 8012246:	f1b8 0f00 	cmp.w	r8, #0
 801224a:	dd9c      	ble.n	8012186 <__sflush_r+0x1a>
 801224c:	4643      	mov	r3, r8
 801224e:	463a      	mov	r2, r7
 8012250:	4628      	mov	r0, r5
 8012252:	6a21      	ldr	r1, [r4, #32]
 8012254:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012256:	47b0      	blx	r6
 8012258:	2800      	cmp	r0, #0
 801225a:	dc06      	bgt.n	801226a <__sflush_r+0xfe>
 801225c:	89a3      	ldrh	r3, [r4, #12]
 801225e:	f04f 30ff 	mov.w	r0, #4294967295
 8012262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012266:	81a3      	strh	r3, [r4, #12]
 8012268:	e78e      	b.n	8012188 <__sflush_r+0x1c>
 801226a:	4407      	add	r7, r0
 801226c:	eba8 0800 	sub.w	r8, r8, r0
 8012270:	e7e9      	b.n	8012246 <__sflush_r+0xda>
 8012272:	bf00      	nop
 8012274:	20400001 	.word	0x20400001

08012278 <_fflush_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	690b      	ldr	r3, [r1, #16]
 801227c:	4605      	mov	r5, r0
 801227e:	460c      	mov	r4, r1
 8012280:	b913      	cbnz	r3, 8012288 <_fflush_r+0x10>
 8012282:	2500      	movs	r5, #0
 8012284:	4628      	mov	r0, r5
 8012286:	bd38      	pop	{r3, r4, r5, pc}
 8012288:	b118      	cbz	r0, 8012292 <_fflush_r+0x1a>
 801228a:	6983      	ldr	r3, [r0, #24]
 801228c:	b90b      	cbnz	r3, 8012292 <_fflush_r+0x1a>
 801228e:	f000 f887 	bl	80123a0 <__sinit>
 8012292:	4b14      	ldr	r3, [pc, #80]	; (80122e4 <_fflush_r+0x6c>)
 8012294:	429c      	cmp	r4, r3
 8012296:	d11b      	bne.n	80122d0 <_fflush_r+0x58>
 8012298:	686c      	ldr	r4, [r5, #4]
 801229a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d0ef      	beq.n	8012282 <_fflush_r+0xa>
 80122a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80122a4:	07d0      	lsls	r0, r2, #31
 80122a6:	d404      	bmi.n	80122b2 <_fflush_r+0x3a>
 80122a8:	0599      	lsls	r1, r3, #22
 80122aa:	d402      	bmi.n	80122b2 <_fflush_r+0x3a>
 80122ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122ae:	f000 f915 	bl	80124dc <__retarget_lock_acquire_recursive>
 80122b2:	4628      	mov	r0, r5
 80122b4:	4621      	mov	r1, r4
 80122b6:	f7ff ff59 	bl	801216c <__sflush_r>
 80122ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122bc:	4605      	mov	r5, r0
 80122be:	07da      	lsls	r2, r3, #31
 80122c0:	d4e0      	bmi.n	8012284 <_fflush_r+0xc>
 80122c2:	89a3      	ldrh	r3, [r4, #12]
 80122c4:	059b      	lsls	r3, r3, #22
 80122c6:	d4dd      	bmi.n	8012284 <_fflush_r+0xc>
 80122c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122ca:	f000 f908 	bl	80124de <__retarget_lock_release_recursive>
 80122ce:	e7d9      	b.n	8012284 <_fflush_r+0xc>
 80122d0:	4b05      	ldr	r3, [pc, #20]	; (80122e8 <_fflush_r+0x70>)
 80122d2:	429c      	cmp	r4, r3
 80122d4:	d101      	bne.n	80122da <_fflush_r+0x62>
 80122d6:	68ac      	ldr	r4, [r5, #8]
 80122d8:	e7df      	b.n	801229a <_fflush_r+0x22>
 80122da:	4b04      	ldr	r3, [pc, #16]	; (80122ec <_fflush_r+0x74>)
 80122dc:	429c      	cmp	r4, r3
 80122de:	bf08      	it	eq
 80122e0:	68ec      	ldreq	r4, [r5, #12]
 80122e2:	e7da      	b.n	801229a <_fflush_r+0x22>
 80122e4:	08015388 	.word	0x08015388
 80122e8:	080153a8 	.word	0x080153a8
 80122ec:	08015368 	.word	0x08015368

080122f0 <std>:
 80122f0:	2300      	movs	r3, #0
 80122f2:	b510      	push	{r4, lr}
 80122f4:	4604      	mov	r4, r0
 80122f6:	e9c0 3300 	strd	r3, r3, [r0]
 80122fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122fe:	6083      	str	r3, [r0, #8]
 8012300:	8181      	strh	r1, [r0, #12]
 8012302:	6643      	str	r3, [r0, #100]	; 0x64
 8012304:	81c2      	strh	r2, [r0, #14]
 8012306:	6183      	str	r3, [r0, #24]
 8012308:	4619      	mov	r1, r3
 801230a:	2208      	movs	r2, #8
 801230c:	305c      	adds	r0, #92	; 0x5c
 801230e:	f7ff fcbd 	bl	8011c8c <memset>
 8012312:	4b05      	ldr	r3, [pc, #20]	; (8012328 <std+0x38>)
 8012314:	6224      	str	r4, [r4, #32]
 8012316:	6263      	str	r3, [r4, #36]	; 0x24
 8012318:	4b04      	ldr	r3, [pc, #16]	; (801232c <std+0x3c>)
 801231a:	62a3      	str	r3, [r4, #40]	; 0x28
 801231c:	4b04      	ldr	r3, [pc, #16]	; (8012330 <std+0x40>)
 801231e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012320:	4b04      	ldr	r3, [pc, #16]	; (8012334 <std+0x44>)
 8012322:	6323      	str	r3, [r4, #48]	; 0x30
 8012324:	bd10      	pop	{r4, pc}
 8012326:	bf00      	nop
 8012328:	08012e55 	.word	0x08012e55
 801232c:	08012e77 	.word	0x08012e77
 8012330:	08012eaf 	.word	0x08012eaf
 8012334:	08012ed3 	.word	0x08012ed3

08012338 <_cleanup_r>:
 8012338:	4901      	ldr	r1, [pc, #4]	; (8012340 <_cleanup_r+0x8>)
 801233a:	f000 b8af 	b.w	801249c <_fwalk_reent>
 801233e:	bf00      	nop
 8012340:	08012279 	.word	0x08012279

08012344 <__sfmoreglue>:
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	2568      	movs	r5, #104	; 0x68
 8012348:	1e4a      	subs	r2, r1, #1
 801234a:	4355      	muls	r5, r2
 801234c:	460e      	mov	r6, r1
 801234e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012352:	f7ff fcef 	bl	8011d34 <_malloc_r>
 8012356:	4604      	mov	r4, r0
 8012358:	b140      	cbz	r0, 801236c <__sfmoreglue+0x28>
 801235a:	2100      	movs	r1, #0
 801235c:	e9c0 1600 	strd	r1, r6, [r0]
 8012360:	300c      	adds	r0, #12
 8012362:	60a0      	str	r0, [r4, #8]
 8012364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012368:	f7ff fc90 	bl	8011c8c <memset>
 801236c:	4620      	mov	r0, r4
 801236e:	bd70      	pop	{r4, r5, r6, pc}

08012370 <__sfp_lock_acquire>:
 8012370:	4801      	ldr	r0, [pc, #4]	; (8012378 <__sfp_lock_acquire+0x8>)
 8012372:	f000 b8b3 	b.w	80124dc <__retarget_lock_acquire_recursive>
 8012376:	bf00      	nop
 8012378:	20006bb0 	.word	0x20006bb0

0801237c <__sfp_lock_release>:
 801237c:	4801      	ldr	r0, [pc, #4]	; (8012384 <__sfp_lock_release+0x8>)
 801237e:	f000 b8ae 	b.w	80124de <__retarget_lock_release_recursive>
 8012382:	bf00      	nop
 8012384:	20006bb0 	.word	0x20006bb0

08012388 <__sinit_lock_acquire>:
 8012388:	4801      	ldr	r0, [pc, #4]	; (8012390 <__sinit_lock_acquire+0x8>)
 801238a:	f000 b8a7 	b.w	80124dc <__retarget_lock_acquire_recursive>
 801238e:	bf00      	nop
 8012390:	20006bab 	.word	0x20006bab

08012394 <__sinit_lock_release>:
 8012394:	4801      	ldr	r0, [pc, #4]	; (801239c <__sinit_lock_release+0x8>)
 8012396:	f000 b8a2 	b.w	80124de <__retarget_lock_release_recursive>
 801239a:	bf00      	nop
 801239c:	20006bab 	.word	0x20006bab

080123a0 <__sinit>:
 80123a0:	b510      	push	{r4, lr}
 80123a2:	4604      	mov	r4, r0
 80123a4:	f7ff fff0 	bl	8012388 <__sinit_lock_acquire>
 80123a8:	69a3      	ldr	r3, [r4, #24]
 80123aa:	b11b      	cbz	r3, 80123b4 <__sinit+0x14>
 80123ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123b0:	f7ff bff0 	b.w	8012394 <__sinit_lock_release>
 80123b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80123b8:	6523      	str	r3, [r4, #80]	; 0x50
 80123ba:	4b13      	ldr	r3, [pc, #76]	; (8012408 <__sinit+0x68>)
 80123bc:	4a13      	ldr	r2, [pc, #76]	; (801240c <__sinit+0x6c>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80123c2:	42a3      	cmp	r3, r4
 80123c4:	bf08      	it	eq
 80123c6:	2301      	moveq	r3, #1
 80123c8:	4620      	mov	r0, r4
 80123ca:	bf08      	it	eq
 80123cc:	61a3      	streq	r3, [r4, #24]
 80123ce:	f000 f81f 	bl	8012410 <__sfp>
 80123d2:	6060      	str	r0, [r4, #4]
 80123d4:	4620      	mov	r0, r4
 80123d6:	f000 f81b 	bl	8012410 <__sfp>
 80123da:	60a0      	str	r0, [r4, #8]
 80123dc:	4620      	mov	r0, r4
 80123de:	f000 f817 	bl	8012410 <__sfp>
 80123e2:	2200      	movs	r2, #0
 80123e4:	2104      	movs	r1, #4
 80123e6:	60e0      	str	r0, [r4, #12]
 80123e8:	6860      	ldr	r0, [r4, #4]
 80123ea:	f7ff ff81 	bl	80122f0 <std>
 80123ee:	2201      	movs	r2, #1
 80123f0:	2109      	movs	r1, #9
 80123f2:	68a0      	ldr	r0, [r4, #8]
 80123f4:	f7ff ff7c 	bl	80122f0 <std>
 80123f8:	2202      	movs	r2, #2
 80123fa:	2112      	movs	r1, #18
 80123fc:	68e0      	ldr	r0, [r4, #12]
 80123fe:	f7ff ff77 	bl	80122f0 <std>
 8012402:	2301      	movs	r3, #1
 8012404:	61a3      	str	r3, [r4, #24]
 8012406:	e7d1      	b.n	80123ac <__sinit+0xc>
 8012408:	08015364 	.word	0x08015364
 801240c:	08012339 	.word	0x08012339

08012410 <__sfp>:
 8012410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012412:	4607      	mov	r7, r0
 8012414:	f7ff ffac 	bl	8012370 <__sfp_lock_acquire>
 8012418:	4b1e      	ldr	r3, [pc, #120]	; (8012494 <__sfp+0x84>)
 801241a:	681e      	ldr	r6, [r3, #0]
 801241c:	69b3      	ldr	r3, [r6, #24]
 801241e:	b913      	cbnz	r3, 8012426 <__sfp+0x16>
 8012420:	4630      	mov	r0, r6
 8012422:	f7ff ffbd 	bl	80123a0 <__sinit>
 8012426:	3648      	adds	r6, #72	; 0x48
 8012428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801242c:	3b01      	subs	r3, #1
 801242e:	d503      	bpl.n	8012438 <__sfp+0x28>
 8012430:	6833      	ldr	r3, [r6, #0]
 8012432:	b30b      	cbz	r3, 8012478 <__sfp+0x68>
 8012434:	6836      	ldr	r6, [r6, #0]
 8012436:	e7f7      	b.n	8012428 <__sfp+0x18>
 8012438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801243c:	b9d5      	cbnz	r5, 8012474 <__sfp+0x64>
 801243e:	4b16      	ldr	r3, [pc, #88]	; (8012498 <__sfp+0x88>)
 8012440:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012444:	60e3      	str	r3, [r4, #12]
 8012446:	6665      	str	r5, [r4, #100]	; 0x64
 8012448:	f000 f847 	bl	80124da <__retarget_lock_init_recursive>
 801244c:	f7ff ff96 	bl	801237c <__sfp_lock_release>
 8012450:	2208      	movs	r2, #8
 8012452:	4629      	mov	r1, r5
 8012454:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012458:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801245c:	6025      	str	r5, [r4, #0]
 801245e:	61a5      	str	r5, [r4, #24]
 8012460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012464:	f7ff fc12 	bl	8011c8c <memset>
 8012468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801246c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012470:	4620      	mov	r0, r4
 8012472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012474:	3468      	adds	r4, #104	; 0x68
 8012476:	e7d9      	b.n	801242c <__sfp+0x1c>
 8012478:	2104      	movs	r1, #4
 801247a:	4638      	mov	r0, r7
 801247c:	f7ff ff62 	bl	8012344 <__sfmoreglue>
 8012480:	4604      	mov	r4, r0
 8012482:	6030      	str	r0, [r6, #0]
 8012484:	2800      	cmp	r0, #0
 8012486:	d1d5      	bne.n	8012434 <__sfp+0x24>
 8012488:	f7ff ff78 	bl	801237c <__sfp_lock_release>
 801248c:	230c      	movs	r3, #12
 801248e:	603b      	str	r3, [r7, #0]
 8012490:	e7ee      	b.n	8012470 <__sfp+0x60>
 8012492:	bf00      	nop
 8012494:	08015364 	.word	0x08015364
 8012498:	ffff0001 	.word	0xffff0001

0801249c <_fwalk_reent>:
 801249c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a0:	4606      	mov	r6, r0
 80124a2:	4688      	mov	r8, r1
 80124a4:	2700      	movs	r7, #0
 80124a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80124aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124ae:	f1b9 0901 	subs.w	r9, r9, #1
 80124b2:	d505      	bpl.n	80124c0 <_fwalk_reent+0x24>
 80124b4:	6824      	ldr	r4, [r4, #0]
 80124b6:	2c00      	cmp	r4, #0
 80124b8:	d1f7      	bne.n	80124aa <_fwalk_reent+0xe>
 80124ba:	4638      	mov	r0, r7
 80124bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124c0:	89ab      	ldrh	r3, [r5, #12]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d907      	bls.n	80124d6 <_fwalk_reent+0x3a>
 80124c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124ca:	3301      	adds	r3, #1
 80124cc:	d003      	beq.n	80124d6 <_fwalk_reent+0x3a>
 80124ce:	4629      	mov	r1, r5
 80124d0:	4630      	mov	r0, r6
 80124d2:	47c0      	blx	r8
 80124d4:	4307      	orrs	r7, r0
 80124d6:	3568      	adds	r5, #104	; 0x68
 80124d8:	e7e9      	b.n	80124ae <_fwalk_reent+0x12>

080124da <__retarget_lock_init_recursive>:
 80124da:	4770      	bx	lr

080124dc <__retarget_lock_acquire_recursive>:
 80124dc:	4770      	bx	lr

080124de <__retarget_lock_release_recursive>:
 80124de:	4770      	bx	lr

080124e0 <__swhatbuf_r>:
 80124e0:	b570      	push	{r4, r5, r6, lr}
 80124e2:	460e      	mov	r6, r1
 80124e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124e8:	4614      	mov	r4, r2
 80124ea:	2900      	cmp	r1, #0
 80124ec:	461d      	mov	r5, r3
 80124ee:	b096      	sub	sp, #88	; 0x58
 80124f0:	da07      	bge.n	8012502 <__swhatbuf_r+0x22>
 80124f2:	2300      	movs	r3, #0
 80124f4:	602b      	str	r3, [r5, #0]
 80124f6:	89b3      	ldrh	r3, [r6, #12]
 80124f8:	061a      	lsls	r2, r3, #24
 80124fa:	d410      	bmi.n	801251e <__swhatbuf_r+0x3e>
 80124fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012500:	e00e      	b.n	8012520 <__swhatbuf_r+0x40>
 8012502:	466a      	mov	r2, sp
 8012504:	f000 fd0c 	bl	8012f20 <_fstat_r>
 8012508:	2800      	cmp	r0, #0
 801250a:	dbf2      	blt.n	80124f2 <__swhatbuf_r+0x12>
 801250c:	9a01      	ldr	r2, [sp, #4]
 801250e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012512:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012516:	425a      	negs	r2, r3
 8012518:	415a      	adcs	r2, r3
 801251a:	602a      	str	r2, [r5, #0]
 801251c:	e7ee      	b.n	80124fc <__swhatbuf_r+0x1c>
 801251e:	2340      	movs	r3, #64	; 0x40
 8012520:	2000      	movs	r0, #0
 8012522:	6023      	str	r3, [r4, #0]
 8012524:	b016      	add	sp, #88	; 0x58
 8012526:	bd70      	pop	{r4, r5, r6, pc}

08012528 <__smakebuf_r>:
 8012528:	898b      	ldrh	r3, [r1, #12]
 801252a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801252c:	079d      	lsls	r5, r3, #30
 801252e:	4606      	mov	r6, r0
 8012530:	460c      	mov	r4, r1
 8012532:	d507      	bpl.n	8012544 <__smakebuf_r+0x1c>
 8012534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012538:	6023      	str	r3, [r4, #0]
 801253a:	6123      	str	r3, [r4, #16]
 801253c:	2301      	movs	r3, #1
 801253e:	6163      	str	r3, [r4, #20]
 8012540:	b002      	add	sp, #8
 8012542:	bd70      	pop	{r4, r5, r6, pc}
 8012544:	466a      	mov	r2, sp
 8012546:	ab01      	add	r3, sp, #4
 8012548:	f7ff ffca 	bl	80124e0 <__swhatbuf_r>
 801254c:	9900      	ldr	r1, [sp, #0]
 801254e:	4605      	mov	r5, r0
 8012550:	4630      	mov	r0, r6
 8012552:	f7ff fbef 	bl	8011d34 <_malloc_r>
 8012556:	b948      	cbnz	r0, 801256c <__smakebuf_r+0x44>
 8012558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801255c:	059a      	lsls	r2, r3, #22
 801255e:	d4ef      	bmi.n	8012540 <__smakebuf_r+0x18>
 8012560:	f023 0303 	bic.w	r3, r3, #3
 8012564:	f043 0302 	orr.w	r3, r3, #2
 8012568:	81a3      	strh	r3, [r4, #12]
 801256a:	e7e3      	b.n	8012534 <__smakebuf_r+0xc>
 801256c:	4b0d      	ldr	r3, [pc, #52]	; (80125a4 <__smakebuf_r+0x7c>)
 801256e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012570:	89a3      	ldrh	r3, [r4, #12]
 8012572:	6020      	str	r0, [r4, #0]
 8012574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012578:	81a3      	strh	r3, [r4, #12]
 801257a:	9b00      	ldr	r3, [sp, #0]
 801257c:	6120      	str	r0, [r4, #16]
 801257e:	6163      	str	r3, [r4, #20]
 8012580:	9b01      	ldr	r3, [sp, #4]
 8012582:	b15b      	cbz	r3, 801259c <__smakebuf_r+0x74>
 8012584:	4630      	mov	r0, r6
 8012586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801258a:	f000 fcdb 	bl	8012f44 <_isatty_r>
 801258e:	b128      	cbz	r0, 801259c <__smakebuf_r+0x74>
 8012590:	89a3      	ldrh	r3, [r4, #12]
 8012592:	f023 0303 	bic.w	r3, r3, #3
 8012596:	f043 0301 	orr.w	r3, r3, #1
 801259a:	81a3      	strh	r3, [r4, #12]
 801259c:	89a0      	ldrh	r0, [r4, #12]
 801259e:	4305      	orrs	r5, r0
 80125a0:	81a5      	strh	r5, [r4, #12]
 80125a2:	e7cd      	b.n	8012540 <__smakebuf_r+0x18>
 80125a4:	08012339 	.word	0x08012339

080125a8 <__malloc_lock>:
 80125a8:	4801      	ldr	r0, [pc, #4]	; (80125b0 <__malloc_lock+0x8>)
 80125aa:	f7ff bf97 	b.w	80124dc <__retarget_lock_acquire_recursive>
 80125ae:	bf00      	nop
 80125b0:	20006bac 	.word	0x20006bac

080125b4 <__malloc_unlock>:
 80125b4:	4801      	ldr	r0, [pc, #4]	; (80125bc <__malloc_unlock+0x8>)
 80125b6:	f7ff bf92 	b.w	80124de <__retarget_lock_release_recursive>
 80125ba:	bf00      	nop
 80125bc:	20006bac 	.word	0x20006bac

080125c0 <__ssputs_r>:
 80125c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c4:	688e      	ldr	r6, [r1, #8]
 80125c6:	4682      	mov	sl, r0
 80125c8:	429e      	cmp	r6, r3
 80125ca:	460c      	mov	r4, r1
 80125cc:	4690      	mov	r8, r2
 80125ce:	461f      	mov	r7, r3
 80125d0:	d838      	bhi.n	8012644 <__ssputs_r+0x84>
 80125d2:	898a      	ldrh	r2, [r1, #12]
 80125d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80125d8:	d032      	beq.n	8012640 <__ssputs_r+0x80>
 80125da:	6825      	ldr	r5, [r4, #0]
 80125dc:	6909      	ldr	r1, [r1, #16]
 80125de:	3301      	adds	r3, #1
 80125e0:	eba5 0901 	sub.w	r9, r5, r1
 80125e4:	6965      	ldr	r5, [r4, #20]
 80125e6:	444b      	add	r3, r9
 80125e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80125ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80125f0:	106d      	asrs	r5, r5, #1
 80125f2:	429d      	cmp	r5, r3
 80125f4:	bf38      	it	cc
 80125f6:	461d      	movcc	r5, r3
 80125f8:	0553      	lsls	r3, r2, #21
 80125fa:	d531      	bpl.n	8012660 <__ssputs_r+0xa0>
 80125fc:	4629      	mov	r1, r5
 80125fe:	f7ff fb99 	bl	8011d34 <_malloc_r>
 8012602:	4606      	mov	r6, r0
 8012604:	b950      	cbnz	r0, 801261c <__ssputs_r+0x5c>
 8012606:	230c      	movs	r3, #12
 8012608:	f04f 30ff 	mov.w	r0, #4294967295
 801260c:	f8ca 3000 	str.w	r3, [sl]
 8012610:	89a3      	ldrh	r3, [r4, #12]
 8012612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012616:	81a3      	strh	r3, [r4, #12]
 8012618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801261c:	464a      	mov	r2, r9
 801261e:	6921      	ldr	r1, [r4, #16]
 8012620:	f7ff fb0c 	bl	8011c3c <memcpy>
 8012624:	89a3      	ldrh	r3, [r4, #12]
 8012626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801262a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801262e:	81a3      	strh	r3, [r4, #12]
 8012630:	6126      	str	r6, [r4, #16]
 8012632:	444e      	add	r6, r9
 8012634:	6026      	str	r6, [r4, #0]
 8012636:	463e      	mov	r6, r7
 8012638:	6165      	str	r5, [r4, #20]
 801263a:	eba5 0509 	sub.w	r5, r5, r9
 801263e:	60a5      	str	r5, [r4, #8]
 8012640:	42be      	cmp	r6, r7
 8012642:	d900      	bls.n	8012646 <__ssputs_r+0x86>
 8012644:	463e      	mov	r6, r7
 8012646:	4632      	mov	r2, r6
 8012648:	4641      	mov	r1, r8
 801264a:	6820      	ldr	r0, [r4, #0]
 801264c:	f7ff fb04 	bl	8011c58 <memmove>
 8012650:	68a3      	ldr	r3, [r4, #8]
 8012652:	6822      	ldr	r2, [r4, #0]
 8012654:	1b9b      	subs	r3, r3, r6
 8012656:	4432      	add	r2, r6
 8012658:	2000      	movs	r0, #0
 801265a:	60a3      	str	r3, [r4, #8]
 801265c:	6022      	str	r2, [r4, #0]
 801265e:	e7db      	b.n	8012618 <__ssputs_r+0x58>
 8012660:	462a      	mov	r2, r5
 8012662:	f000 fc91 	bl	8012f88 <_realloc_r>
 8012666:	4606      	mov	r6, r0
 8012668:	2800      	cmp	r0, #0
 801266a:	d1e1      	bne.n	8012630 <__ssputs_r+0x70>
 801266c:	4650      	mov	r0, sl
 801266e:	6921      	ldr	r1, [r4, #16]
 8012670:	f7ff fb14 	bl	8011c9c <_free_r>
 8012674:	e7c7      	b.n	8012606 <__ssputs_r+0x46>
	...

08012678 <_svfiprintf_r>:
 8012678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801267c:	4698      	mov	r8, r3
 801267e:	898b      	ldrh	r3, [r1, #12]
 8012680:	4607      	mov	r7, r0
 8012682:	061b      	lsls	r3, r3, #24
 8012684:	460d      	mov	r5, r1
 8012686:	4614      	mov	r4, r2
 8012688:	b09d      	sub	sp, #116	; 0x74
 801268a:	d50e      	bpl.n	80126aa <_svfiprintf_r+0x32>
 801268c:	690b      	ldr	r3, [r1, #16]
 801268e:	b963      	cbnz	r3, 80126aa <_svfiprintf_r+0x32>
 8012690:	2140      	movs	r1, #64	; 0x40
 8012692:	f7ff fb4f 	bl	8011d34 <_malloc_r>
 8012696:	6028      	str	r0, [r5, #0]
 8012698:	6128      	str	r0, [r5, #16]
 801269a:	b920      	cbnz	r0, 80126a6 <_svfiprintf_r+0x2e>
 801269c:	230c      	movs	r3, #12
 801269e:	603b      	str	r3, [r7, #0]
 80126a0:	f04f 30ff 	mov.w	r0, #4294967295
 80126a4:	e0d1      	b.n	801284a <_svfiprintf_r+0x1d2>
 80126a6:	2340      	movs	r3, #64	; 0x40
 80126a8:	616b      	str	r3, [r5, #20]
 80126aa:	2300      	movs	r3, #0
 80126ac:	9309      	str	r3, [sp, #36]	; 0x24
 80126ae:	2320      	movs	r3, #32
 80126b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126b4:	2330      	movs	r3, #48	; 0x30
 80126b6:	f04f 0901 	mov.w	r9, #1
 80126ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80126be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012864 <_svfiprintf_r+0x1ec>
 80126c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126c6:	4623      	mov	r3, r4
 80126c8:	469a      	mov	sl, r3
 80126ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ce:	b10a      	cbz	r2, 80126d4 <_svfiprintf_r+0x5c>
 80126d0:	2a25      	cmp	r2, #37	; 0x25
 80126d2:	d1f9      	bne.n	80126c8 <_svfiprintf_r+0x50>
 80126d4:	ebba 0b04 	subs.w	fp, sl, r4
 80126d8:	d00b      	beq.n	80126f2 <_svfiprintf_r+0x7a>
 80126da:	465b      	mov	r3, fp
 80126dc:	4622      	mov	r2, r4
 80126de:	4629      	mov	r1, r5
 80126e0:	4638      	mov	r0, r7
 80126e2:	f7ff ff6d 	bl	80125c0 <__ssputs_r>
 80126e6:	3001      	adds	r0, #1
 80126e8:	f000 80aa 	beq.w	8012840 <_svfiprintf_r+0x1c8>
 80126ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126ee:	445a      	add	r2, fp
 80126f0:	9209      	str	r2, [sp, #36]	; 0x24
 80126f2:	f89a 3000 	ldrb.w	r3, [sl]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f000 80a2 	beq.w	8012840 <_svfiprintf_r+0x1c8>
 80126fc:	2300      	movs	r3, #0
 80126fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012706:	f10a 0a01 	add.w	sl, sl, #1
 801270a:	9304      	str	r3, [sp, #16]
 801270c:	9307      	str	r3, [sp, #28]
 801270e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012712:	931a      	str	r3, [sp, #104]	; 0x68
 8012714:	4654      	mov	r4, sl
 8012716:	2205      	movs	r2, #5
 8012718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801271c:	4851      	ldr	r0, [pc, #324]	; (8012864 <_svfiprintf_r+0x1ec>)
 801271e:	f7ff fa71 	bl	8011c04 <memchr>
 8012722:	9a04      	ldr	r2, [sp, #16]
 8012724:	b9d8      	cbnz	r0, 801275e <_svfiprintf_r+0xe6>
 8012726:	06d0      	lsls	r0, r2, #27
 8012728:	bf44      	itt	mi
 801272a:	2320      	movmi	r3, #32
 801272c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012730:	0711      	lsls	r1, r2, #28
 8012732:	bf44      	itt	mi
 8012734:	232b      	movmi	r3, #43	; 0x2b
 8012736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801273a:	f89a 3000 	ldrb.w	r3, [sl]
 801273e:	2b2a      	cmp	r3, #42	; 0x2a
 8012740:	d015      	beq.n	801276e <_svfiprintf_r+0xf6>
 8012742:	4654      	mov	r4, sl
 8012744:	2000      	movs	r0, #0
 8012746:	f04f 0c0a 	mov.w	ip, #10
 801274a:	9a07      	ldr	r2, [sp, #28]
 801274c:	4621      	mov	r1, r4
 801274e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012752:	3b30      	subs	r3, #48	; 0x30
 8012754:	2b09      	cmp	r3, #9
 8012756:	d94e      	bls.n	80127f6 <_svfiprintf_r+0x17e>
 8012758:	b1b0      	cbz	r0, 8012788 <_svfiprintf_r+0x110>
 801275a:	9207      	str	r2, [sp, #28]
 801275c:	e014      	b.n	8012788 <_svfiprintf_r+0x110>
 801275e:	eba0 0308 	sub.w	r3, r0, r8
 8012762:	fa09 f303 	lsl.w	r3, r9, r3
 8012766:	4313      	orrs	r3, r2
 8012768:	46a2      	mov	sl, r4
 801276a:	9304      	str	r3, [sp, #16]
 801276c:	e7d2      	b.n	8012714 <_svfiprintf_r+0x9c>
 801276e:	9b03      	ldr	r3, [sp, #12]
 8012770:	1d19      	adds	r1, r3, #4
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	9103      	str	r1, [sp, #12]
 8012776:	2b00      	cmp	r3, #0
 8012778:	bfbb      	ittet	lt
 801277a:	425b      	neglt	r3, r3
 801277c:	f042 0202 	orrlt.w	r2, r2, #2
 8012780:	9307      	strge	r3, [sp, #28]
 8012782:	9307      	strlt	r3, [sp, #28]
 8012784:	bfb8      	it	lt
 8012786:	9204      	strlt	r2, [sp, #16]
 8012788:	7823      	ldrb	r3, [r4, #0]
 801278a:	2b2e      	cmp	r3, #46	; 0x2e
 801278c:	d10c      	bne.n	80127a8 <_svfiprintf_r+0x130>
 801278e:	7863      	ldrb	r3, [r4, #1]
 8012790:	2b2a      	cmp	r3, #42	; 0x2a
 8012792:	d135      	bne.n	8012800 <_svfiprintf_r+0x188>
 8012794:	9b03      	ldr	r3, [sp, #12]
 8012796:	3402      	adds	r4, #2
 8012798:	1d1a      	adds	r2, r3, #4
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	9203      	str	r2, [sp, #12]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	bfb8      	it	lt
 80127a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80127a6:	9305      	str	r3, [sp, #20]
 80127a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012874 <_svfiprintf_r+0x1fc>
 80127ac:	2203      	movs	r2, #3
 80127ae:	4650      	mov	r0, sl
 80127b0:	7821      	ldrb	r1, [r4, #0]
 80127b2:	f7ff fa27 	bl	8011c04 <memchr>
 80127b6:	b140      	cbz	r0, 80127ca <_svfiprintf_r+0x152>
 80127b8:	2340      	movs	r3, #64	; 0x40
 80127ba:	eba0 000a 	sub.w	r0, r0, sl
 80127be:	fa03 f000 	lsl.w	r0, r3, r0
 80127c2:	9b04      	ldr	r3, [sp, #16]
 80127c4:	3401      	adds	r4, #1
 80127c6:	4303      	orrs	r3, r0
 80127c8:	9304      	str	r3, [sp, #16]
 80127ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ce:	2206      	movs	r2, #6
 80127d0:	4825      	ldr	r0, [pc, #148]	; (8012868 <_svfiprintf_r+0x1f0>)
 80127d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127d6:	f7ff fa15 	bl	8011c04 <memchr>
 80127da:	2800      	cmp	r0, #0
 80127dc:	d038      	beq.n	8012850 <_svfiprintf_r+0x1d8>
 80127de:	4b23      	ldr	r3, [pc, #140]	; (801286c <_svfiprintf_r+0x1f4>)
 80127e0:	bb1b      	cbnz	r3, 801282a <_svfiprintf_r+0x1b2>
 80127e2:	9b03      	ldr	r3, [sp, #12]
 80127e4:	3307      	adds	r3, #7
 80127e6:	f023 0307 	bic.w	r3, r3, #7
 80127ea:	3308      	adds	r3, #8
 80127ec:	9303      	str	r3, [sp, #12]
 80127ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127f0:	4433      	add	r3, r6
 80127f2:	9309      	str	r3, [sp, #36]	; 0x24
 80127f4:	e767      	b.n	80126c6 <_svfiprintf_r+0x4e>
 80127f6:	460c      	mov	r4, r1
 80127f8:	2001      	movs	r0, #1
 80127fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80127fe:	e7a5      	b.n	801274c <_svfiprintf_r+0xd4>
 8012800:	2300      	movs	r3, #0
 8012802:	f04f 0c0a 	mov.w	ip, #10
 8012806:	4619      	mov	r1, r3
 8012808:	3401      	adds	r4, #1
 801280a:	9305      	str	r3, [sp, #20]
 801280c:	4620      	mov	r0, r4
 801280e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012812:	3a30      	subs	r2, #48	; 0x30
 8012814:	2a09      	cmp	r2, #9
 8012816:	d903      	bls.n	8012820 <_svfiprintf_r+0x1a8>
 8012818:	2b00      	cmp	r3, #0
 801281a:	d0c5      	beq.n	80127a8 <_svfiprintf_r+0x130>
 801281c:	9105      	str	r1, [sp, #20]
 801281e:	e7c3      	b.n	80127a8 <_svfiprintf_r+0x130>
 8012820:	4604      	mov	r4, r0
 8012822:	2301      	movs	r3, #1
 8012824:	fb0c 2101 	mla	r1, ip, r1, r2
 8012828:	e7f0      	b.n	801280c <_svfiprintf_r+0x194>
 801282a:	ab03      	add	r3, sp, #12
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	462a      	mov	r2, r5
 8012830:	4638      	mov	r0, r7
 8012832:	4b0f      	ldr	r3, [pc, #60]	; (8012870 <_svfiprintf_r+0x1f8>)
 8012834:	a904      	add	r1, sp, #16
 8012836:	f3af 8000 	nop.w
 801283a:	1c42      	adds	r2, r0, #1
 801283c:	4606      	mov	r6, r0
 801283e:	d1d6      	bne.n	80127ee <_svfiprintf_r+0x176>
 8012840:	89ab      	ldrh	r3, [r5, #12]
 8012842:	065b      	lsls	r3, r3, #25
 8012844:	f53f af2c 	bmi.w	80126a0 <_svfiprintf_r+0x28>
 8012848:	9809      	ldr	r0, [sp, #36]	; 0x24
 801284a:	b01d      	add	sp, #116	; 0x74
 801284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012850:	ab03      	add	r3, sp, #12
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	462a      	mov	r2, r5
 8012856:	4638      	mov	r0, r7
 8012858:	4b05      	ldr	r3, [pc, #20]	; (8012870 <_svfiprintf_r+0x1f8>)
 801285a:	a904      	add	r1, sp, #16
 801285c:	f000 f9d4 	bl	8012c08 <_printf_i>
 8012860:	e7eb      	b.n	801283a <_svfiprintf_r+0x1c2>
 8012862:	bf00      	nop
 8012864:	080153c8 	.word	0x080153c8
 8012868:	080153d2 	.word	0x080153d2
 801286c:	00000000 	.word	0x00000000
 8012870:	080125c1 	.word	0x080125c1
 8012874:	080153ce 	.word	0x080153ce

08012878 <__sfputc_r>:
 8012878:	6893      	ldr	r3, [r2, #8]
 801287a:	b410      	push	{r4}
 801287c:	3b01      	subs	r3, #1
 801287e:	2b00      	cmp	r3, #0
 8012880:	6093      	str	r3, [r2, #8]
 8012882:	da07      	bge.n	8012894 <__sfputc_r+0x1c>
 8012884:	6994      	ldr	r4, [r2, #24]
 8012886:	42a3      	cmp	r3, r4
 8012888:	db01      	blt.n	801288e <__sfputc_r+0x16>
 801288a:	290a      	cmp	r1, #10
 801288c:	d102      	bne.n	8012894 <__sfputc_r+0x1c>
 801288e:	bc10      	pop	{r4}
 8012890:	f7ff bbac 	b.w	8011fec <__swbuf_r>
 8012894:	6813      	ldr	r3, [r2, #0]
 8012896:	1c58      	adds	r0, r3, #1
 8012898:	6010      	str	r0, [r2, #0]
 801289a:	7019      	strb	r1, [r3, #0]
 801289c:	4608      	mov	r0, r1
 801289e:	bc10      	pop	{r4}
 80128a0:	4770      	bx	lr

080128a2 <__sfputs_r>:
 80128a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128a4:	4606      	mov	r6, r0
 80128a6:	460f      	mov	r7, r1
 80128a8:	4614      	mov	r4, r2
 80128aa:	18d5      	adds	r5, r2, r3
 80128ac:	42ac      	cmp	r4, r5
 80128ae:	d101      	bne.n	80128b4 <__sfputs_r+0x12>
 80128b0:	2000      	movs	r0, #0
 80128b2:	e007      	b.n	80128c4 <__sfputs_r+0x22>
 80128b4:	463a      	mov	r2, r7
 80128b6:	4630      	mov	r0, r6
 80128b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128bc:	f7ff ffdc 	bl	8012878 <__sfputc_r>
 80128c0:	1c43      	adds	r3, r0, #1
 80128c2:	d1f3      	bne.n	80128ac <__sfputs_r+0xa>
 80128c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080128c8 <_vfiprintf_r>:
 80128c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	460d      	mov	r5, r1
 80128ce:	4614      	mov	r4, r2
 80128d0:	4698      	mov	r8, r3
 80128d2:	4606      	mov	r6, r0
 80128d4:	b09d      	sub	sp, #116	; 0x74
 80128d6:	b118      	cbz	r0, 80128e0 <_vfiprintf_r+0x18>
 80128d8:	6983      	ldr	r3, [r0, #24]
 80128da:	b90b      	cbnz	r3, 80128e0 <_vfiprintf_r+0x18>
 80128dc:	f7ff fd60 	bl	80123a0 <__sinit>
 80128e0:	4b89      	ldr	r3, [pc, #548]	; (8012b08 <_vfiprintf_r+0x240>)
 80128e2:	429d      	cmp	r5, r3
 80128e4:	d11b      	bne.n	801291e <_vfiprintf_r+0x56>
 80128e6:	6875      	ldr	r5, [r6, #4]
 80128e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128ea:	07d9      	lsls	r1, r3, #31
 80128ec:	d405      	bmi.n	80128fa <_vfiprintf_r+0x32>
 80128ee:	89ab      	ldrh	r3, [r5, #12]
 80128f0:	059a      	lsls	r2, r3, #22
 80128f2:	d402      	bmi.n	80128fa <_vfiprintf_r+0x32>
 80128f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128f6:	f7ff fdf1 	bl	80124dc <__retarget_lock_acquire_recursive>
 80128fa:	89ab      	ldrh	r3, [r5, #12]
 80128fc:	071b      	lsls	r3, r3, #28
 80128fe:	d501      	bpl.n	8012904 <_vfiprintf_r+0x3c>
 8012900:	692b      	ldr	r3, [r5, #16]
 8012902:	b9eb      	cbnz	r3, 8012940 <_vfiprintf_r+0x78>
 8012904:	4629      	mov	r1, r5
 8012906:	4630      	mov	r0, r6
 8012908:	f7ff fbc2 	bl	8012090 <__swsetup_r>
 801290c:	b1c0      	cbz	r0, 8012940 <_vfiprintf_r+0x78>
 801290e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012910:	07dc      	lsls	r4, r3, #31
 8012912:	d50e      	bpl.n	8012932 <_vfiprintf_r+0x6a>
 8012914:	f04f 30ff 	mov.w	r0, #4294967295
 8012918:	b01d      	add	sp, #116	; 0x74
 801291a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801291e:	4b7b      	ldr	r3, [pc, #492]	; (8012b0c <_vfiprintf_r+0x244>)
 8012920:	429d      	cmp	r5, r3
 8012922:	d101      	bne.n	8012928 <_vfiprintf_r+0x60>
 8012924:	68b5      	ldr	r5, [r6, #8]
 8012926:	e7df      	b.n	80128e8 <_vfiprintf_r+0x20>
 8012928:	4b79      	ldr	r3, [pc, #484]	; (8012b10 <_vfiprintf_r+0x248>)
 801292a:	429d      	cmp	r5, r3
 801292c:	bf08      	it	eq
 801292e:	68f5      	ldreq	r5, [r6, #12]
 8012930:	e7da      	b.n	80128e8 <_vfiprintf_r+0x20>
 8012932:	89ab      	ldrh	r3, [r5, #12]
 8012934:	0598      	lsls	r0, r3, #22
 8012936:	d4ed      	bmi.n	8012914 <_vfiprintf_r+0x4c>
 8012938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801293a:	f7ff fdd0 	bl	80124de <__retarget_lock_release_recursive>
 801293e:	e7e9      	b.n	8012914 <_vfiprintf_r+0x4c>
 8012940:	2300      	movs	r3, #0
 8012942:	9309      	str	r3, [sp, #36]	; 0x24
 8012944:	2320      	movs	r3, #32
 8012946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801294a:	2330      	movs	r3, #48	; 0x30
 801294c:	f04f 0901 	mov.w	r9, #1
 8012950:	f8cd 800c 	str.w	r8, [sp, #12]
 8012954:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012b14 <_vfiprintf_r+0x24c>
 8012958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801295c:	4623      	mov	r3, r4
 801295e:	469a      	mov	sl, r3
 8012960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012964:	b10a      	cbz	r2, 801296a <_vfiprintf_r+0xa2>
 8012966:	2a25      	cmp	r2, #37	; 0x25
 8012968:	d1f9      	bne.n	801295e <_vfiprintf_r+0x96>
 801296a:	ebba 0b04 	subs.w	fp, sl, r4
 801296e:	d00b      	beq.n	8012988 <_vfiprintf_r+0xc0>
 8012970:	465b      	mov	r3, fp
 8012972:	4622      	mov	r2, r4
 8012974:	4629      	mov	r1, r5
 8012976:	4630      	mov	r0, r6
 8012978:	f7ff ff93 	bl	80128a2 <__sfputs_r>
 801297c:	3001      	adds	r0, #1
 801297e:	f000 80aa 	beq.w	8012ad6 <_vfiprintf_r+0x20e>
 8012982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012984:	445a      	add	r2, fp
 8012986:	9209      	str	r2, [sp, #36]	; 0x24
 8012988:	f89a 3000 	ldrb.w	r3, [sl]
 801298c:	2b00      	cmp	r3, #0
 801298e:	f000 80a2 	beq.w	8012ad6 <_vfiprintf_r+0x20e>
 8012992:	2300      	movs	r3, #0
 8012994:	f04f 32ff 	mov.w	r2, #4294967295
 8012998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801299c:	f10a 0a01 	add.w	sl, sl, #1
 80129a0:	9304      	str	r3, [sp, #16]
 80129a2:	9307      	str	r3, [sp, #28]
 80129a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129a8:	931a      	str	r3, [sp, #104]	; 0x68
 80129aa:	4654      	mov	r4, sl
 80129ac:	2205      	movs	r2, #5
 80129ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129b2:	4858      	ldr	r0, [pc, #352]	; (8012b14 <_vfiprintf_r+0x24c>)
 80129b4:	f7ff f926 	bl	8011c04 <memchr>
 80129b8:	9a04      	ldr	r2, [sp, #16]
 80129ba:	b9d8      	cbnz	r0, 80129f4 <_vfiprintf_r+0x12c>
 80129bc:	06d1      	lsls	r1, r2, #27
 80129be:	bf44      	itt	mi
 80129c0:	2320      	movmi	r3, #32
 80129c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129c6:	0713      	lsls	r3, r2, #28
 80129c8:	bf44      	itt	mi
 80129ca:	232b      	movmi	r3, #43	; 0x2b
 80129cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129d0:	f89a 3000 	ldrb.w	r3, [sl]
 80129d4:	2b2a      	cmp	r3, #42	; 0x2a
 80129d6:	d015      	beq.n	8012a04 <_vfiprintf_r+0x13c>
 80129d8:	4654      	mov	r4, sl
 80129da:	2000      	movs	r0, #0
 80129dc:	f04f 0c0a 	mov.w	ip, #10
 80129e0:	9a07      	ldr	r2, [sp, #28]
 80129e2:	4621      	mov	r1, r4
 80129e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129e8:	3b30      	subs	r3, #48	; 0x30
 80129ea:	2b09      	cmp	r3, #9
 80129ec:	d94e      	bls.n	8012a8c <_vfiprintf_r+0x1c4>
 80129ee:	b1b0      	cbz	r0, 8012a1e <_vfiprintf_r+0x156>
 80129f0:	9207      	str	r2, [sp, #28]
 80129f2:	e014      	b.n	8012a1e <_vfiprintf_r+0x156>
 80129f4:	eba0 0308 	sub.w	r3, r0, r8
 80129f8:	fa09 f303 	lsl.w	r3, r9, r3
 80129fc:	4313      	orrs	r3, r2
 80129fe:	46a2      	mov	sl, r4
 8012a00:	9304      	str	r3, [sp, #16]
 8012a02:	e7d2      	b.n	80129aa <_vfiprintf_r+0xe2>
 8012a04:	9b03      	ldr	r3, [sp, #12]
 8012a06:	1d19      	adds	r1, r3, #4
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	9103      	str	r1, [sp, #12]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	bfbb      	ittet	lt
 8012a10:	425b      	neglt	r3, r3
 8012a12:	f042 0202 	orrlt.w	r2, r2, #2
 8012a16:	9307      	strge	r3, [sp, #28]
 8012a18:	9307      	strlt	r3, [sp, #28]
 8012a1a:	bfb8      	it	lt
 8012a1c:	9204      	strlt	r2, [sp, #16]
 8012a1e:	7823      	ldrb	r3, [r4, #0]
 8012a20:	2b2e      	cmp	r3, #46	; 0x2e
 8012a22:	d10c      	bne.n	8012a3e <_vfiprintf_r+0x176>
 8012a24:	7863      	ldrb	r3, [r4, #1]
 8012a26:	2b2a      	cmp	r3, #42	; 0x2a
 8012a28:	d135      	bne.n	8012a96 <_vfiprintf_r+0x1ce>
 8012a2a:	9b03      	ldr	r3, [sp, #12]
 8012a2c:	3402      	adds	r4, #2
 8012a2e:	1d1a      	adds	r2, r3, #4
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	9203      	str	r2, [sp, #12]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	bfb8      	it	lt
 8012a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a3c:	9305      	str	r3, [sp, #20]
 8012a3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012b24 <_vfiprintf_r+0x25c>
 8012a42:	2203      	movs	r2, #3
 8012a44:	4650      	mov	r0, sl
 8012a46:	7821      	ldrb	r1, [r4, #0]
 8012a48:	f7ff f8dc 	bl	8011c04 <memchr>
 8012a4c:	b140      	cbz	r0, 8012a60 <_vfiprintf_r+0x198>
 8012a4e:	2340      	movs	r3, #64	; 0x40
 8012a50:	eba0 000a 	sub.w	r0, r0, sl
 8012a54:	fa03 f000 	lsl.w	r0, r3, r0
 8012a58:	9b04      	ldr	r3, [sp, #16]
 8012a5a:	3401      	adds	r4, #1
 8012a5c:	4303      	orrs	r3, r0
 8012a5e:	9304      	str	r3, [sp, #16]
 8012a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a64:	2206      	movs	r2, #6
 8012a66:	482c      	ldr	r0, [pc, #176]	; (8012b18 <_vfiprintf_r+0x250>)
 8012a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a6c:	f7ff f8ca 	bl	8011c04 <memchr>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d03f      	beq.n	8012af4 <_vfiprintf_r+0x22c>
 8012a74:	4b29      	ldr	r3, [pc, #164]	; (8012b1c <_vfiprintf_r+0x254>)
 8012a76:	bb1b      	cbnz	r3, 8012ac0 <_vfiprintf_r+0x1f8>
 8012a78:	9b03      	ldr	r3, [sp, #12]
 8012a7a:	3307      	adds	r3, #7
 8012a7c:	f023 0307 	bic.w	r3, r3, #7
 8012a80:	3308      	adds	r3, #8
 8012a82:	9303      	str	r3, [sp, #12]
 8012a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a86:	443b      	add	r3, r7
 8012a88:	9309      	str	r3, [sp, #36]	; 0x24
 8012a8a:	e767      	b.n	801295c <_vfiprintf_r+0x94>
 8012a8c:	460c      	mov	r4, r1
 8012a8e:	2001      	movs	r0, #1
 8012a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a94:	e7a5      	b.n	80129e2 <_vfiprintf_r+0x11a>
 8012a96:	2300      	movs	r3, #0
 8012a98:	f04f 0c0a 	mov.w	ip, #10
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	3401      	adds	r4, #1
 8012aa0:	9305      	str	r3, [sp, #20]
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012aa8:	3a30      	subs	r2, #48	; 0x30
 8012aaa:	2a09      	cmp	r2, #9
 8012aac:	d903      	bls.n	8012ab6 <_vfiprintf_r+0x1ee>
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d0c5      	beq.n	8012a3e <_vfiprintf_r+0x176>
 8012ab2:	9105      	str	r1, [sp, #20]
 8012ab4:	e7c3      	b.n	8012a3e <_vfiprintf_r+0x176>
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	2301      	movs	r3, #1
 8012aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8012abe:	e7f0      	b.n	8012aa2 <_vfiprintf_r+0x1da>
 8012ac0:	ab03      	add	r3, sp, #12
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	462a      	mov	r2, r5
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	4b15      	ldr	r3, [pc, #84]	; (8012b20 <_vfiprintf_r+0x258>)
 8012aca:	a904      	add	r1, sp, #16
 8012acc:	f3af 8000 	nop.w
 8012ad0:	4607      	mov	r7, r0
 8012ad2:	1c78      	adds	r0, r7, #1
 8012ad4:	d1d6      	bne.n	8012a84 <_vfiprintf_r+0x1bc>
 8012ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ad8:	07d9      	lsls	r1, r3, #31
 8012ada:	d405      	bmi.n	8012ae8 <_vfiprintf_r+0x220>
 8012adc:	89ab      	ldrh	r3, [r5, #12]
 8012ade:	059a      	lsls	r2, r3, #22
 8012ae0:	d402      	bmi.n	8012ae8 <_vfiprintf_r+0x220>
 8012ae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ae4:	f7ff fcfb 	bl	80124de <__retarget_lock_release_recursive>
 8012ae8:	89ab      	ldrh	r3, [r5, #12]
 8012aea:	065b      	lsls	r3, r3, #25
 8012aec:	f53f af12 	bmi.w	8012914 <_vfiprintf_r+0x4c>
 8012af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012af2:	e711      	b.n	8012918 <_vfiprintf_r+0x50>
 8012af4:	ab03      	add	r3, sp, #12
 8012af6:	9300      	str	r3, [sp, #0]
 8012af8:	462a      	mov	r2, r5
 8012afa:	4630      	mov	r0, r6
 8012afc:	4b08      	ldr	r3, [pc, #32]	; (8012b20 <_vfiprintf_r+0x258>)
 8012afe:	a904      	add	r1, sp, #16
 8012b00:	f000 f882 	bl	8012c08 <_printf_i>
 8012b04:	e7e4      	b.n	8012ad0 <_vfiprintf_r+0x208>
 8012b06:	bf00      	nop
 8012b08:	08015388 	.word	0x08015388
 8012b0c:	080153a8 	.word	0x080153a8
 8012b10:	08015368 	.word	0x08015368
 8012b14:	080153c8 	.word	0x080153c8
 8012b18:	080153d2 	.word	0x080153d2
 8012b1c:	00000000 	.word	0x00000000
 8012b20:	080128a3 	.word	0x080128a3
 8012b24:	080153ce 	.word	0x080153ce

08012b28 <_printf_common>:
 8012b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b2c:	4616      	mov	r6, r2
 8012b2e:	4699      	mov	r9, r3
 8012b30:	688a      	ldr	r2, [r1, #8]
 8012b32:	690b      	ldr	r3, [r1, #16]
 8012b34:	4607      	mov	r7, r0
 8012b36:	4293      	cmp	r3, r2
 8012b38:	bfb8      	it	lt
 8012b3a:	4613      	movlt	r3, r2
 8012b3c:	6033      	str	r3, [r6, #0]
 8012b3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b42:	460c      	mov	r4, r1
 8012b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b48:	b10a      	cbz	r2, 8012b4e <_printf_common+0x26>
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	6033      	str	r3, [r6, #0]
 8012b4e:	6823      	ldr	r3, [r4, #0]
 8012b50:	0699      	lsls	r1, r3, #26
 8012b52:	bf42      	ittt	mi
 8012b54:	6833      	ldrmi	r3, [r6, #0]
 8012b56:	3302      	addmi	r3, #2
 8012b58:	6033      	strmi	r3, [r6, #0]
 8012b5a:	6825      	ldr	r5, [r4, #0]
 8012b5c:	f015 0506 	ands.w	r5, r5, #6
 8012b60:	d106      	bne.n	8012b70 <_printf_common+0x48>
 8012b62:	f104 0a19 	add.w	sl, r4, #25
 8012b66:	68e3      	ldr	r3, [r4, #12]
 8012b68:	6832      	ldr	r2, [r6, #0]
 8012b6a:	1a9b      	subs	r3, r3, r2
 8012b6c:	42ab      	cmp	r3, r5
 8012b6e:	dc28      	bgt.n	8012bc2 <_printf_common+0x9a>
 8012b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012b74:	1e13      	subs	r3, r2, #0
 8012b76:	6822      	ldr	r2, [r4, #0]
 8012b78:	bf18      	it	ne
 8012b7a:	2301      	movne	r3, #1
 8012b7c:	0692      	lsls	r2, r2, #26
 8012b7e:	d42d      	bmi.n	8012bdc <_printf_common+0xb4>
 8012b80:	4649      	mov	r1, r9
 8012b82:	4638      	mov	r0, r7
 8012b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b88:	47c0      	blx	r8
 8012b8a:	3001      	adds	r0, #1
 8012b8c:	d020      	beq.n	8012bd0 <_printf_common+0xa8>
 8012b8e:	6823      	ldr	r3, [r4, #0]
 8012b90:	68e5      	ldr	r5, [r4, #12]
 8012b92:	f003 0306 	and.w	r3, r3, #6
 8012b96:	2b04      	cmp	r3, #4
 8012b98:	bf18      	it	ne
 8012b9a:	2500      	movne	r5, #0
 8012b9c:	6832      	ldr	r2, [r6, #0]
 8012b9e:	f04f 0600 	mov.w	r6, #0
 8012ba2:	68a3      	ldr	r3, [r4, #8]
 8012ba4:	bf08      	it	eq
 8012ba6:	1aad      	subeq	r5, r5, r2
 8012ba8:	6922      	ldr	r2, [r4, #16]
 8012baa:	bf08      	it	eq
 8012bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	bfc4      	itt	gt
 8012bb4:	1a9b      	subgt	r3, r3, r2
 8012bb6:	18ed      	addgt	r5, r5, r3
 8012bb8:	341a      	adds	r4, #26
 8012bba:	42b5      	cmp	r5, r6
 8012bbc:	d11a      	bne.n	8012bf4 <_printf_common+0xcc>
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	e008      	b.n	8012bd4 <_printf_common+0xac>
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	4652      	mov	r2, sl
 8012bc6:	4649      	mov	r1, r9
 8012bc8:	4638      	mov	r0, r7
 8012bca:	47c0      	blx	r8
 8012bcc:	3001      	adds	r0, #1
 8012bce:	d103      	bne.n	8012bd8 <_printf_common+0xb0>
 8012bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd8:	3501      	adds	r5, #1
 8012bda:	e7c4      	b.n	8012b66 <_printf_common+0x3e>
 8012bdc:	2030      	movs	r0, #48	; 0x30
 8012bde:	18e1      	adds	r1, r4, r3
 8012be0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012be4:	1c5a      	adds	r2, r3, #1
 8012be6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012bea:	4422      	add	r2, r4
 8012bec:	3302      	adds	r3, #2
 8012bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012bf2:	e7c5      	b.n	8012b80 <_printf_common+0x58>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	4622      	mov	r2, r4
 8012bf8:	4649      	mov	r1, r9
 8012bfa:	4638      	mov	r0, r7
 8012bfc:	47c0      	blx	r8
 8012bfe:	3001      	adds	r0, #1
 8012c00:	d0e6      	beq.n	8012bd0 <_printf_common+0xa8>
 8012c02:	3601      	adds	r6, #1
 8012c04:	e7d9      	b.n	8012bba <_printf_common+0x92>
	...

08012c08 <_printf_i>:
 8012c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c0c:	460c      	mov	r4, r1
 8012c0e:	7e27      	ldrb	r7, [r4, #24]
 8012c10:	4691      	mov	r9, r2
 8012c12:	2f78      	cmp	r7, #120	; 0x78
 8012c14:	4680      	mov	r8, r0
 8012c16:	469a      	mov	sl, r3
 8012c18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c1e:	d807      	bhi.n	8012c30 <_printf_i+0x28>
 8012c20:	2f62      	cmp	r7, #98	; 0x62
 8012c22:	d80a      	bhi.n	8012c3a <_printf_i+0x32>
 8012c24:	2f00      	cmp	r7, #0
 8012c26:	f000 80d9 	beq.w	8012ddc <_printf_i+0x1d4>
 8012c2a:	2f58      	cmp	r7, #88	; 0x58
 8012c2c:	f000 80a4 	beq.w	8012d78 <_printf_i+0x170>
 8012c30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c38:	e03a      	b.n	8012cb0 <_printf_i+0xa8>
 8012c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c3e:	2b15      	cmp	r3, #21
 8012c40:	d8f6      	bhi.n	8012c30 <_printf_i+0x28>
 8012c42:	a001      	add	r0, pc, #4	; (adr r0, 8012c48 <_printf_i+0x40>)
 8012c44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012c48:	08012ca1 	.word	0x08012ca1
 8012c4c:	08012cb5 	.word	0x08012cb5
 8012c50:	08012c31 	.word	0x08012c31
 8012c54:	08012c31 	.word	0x08012c31
 8012c58:	08012c31 	.word	0x08012c31
 8012c5c:	08012c31 	.word	0x08012c31
 8012c60:	08012cb5 	.word	0x08012cb5
 8012c64:	08012c31 	.word	0x08012c31
 8012c68:	08012c31 	.word	0x08012c31
 8012c6c:	08012c31 	.word	0x08012c31
 8012c70:	08012c31 	.word	0x08012c31
 8012c74:	08012dc3 	.word	0x08012dc3
 8012c78:	08012ce5 	.word	0x08012ce5
 8012c7c:	08012da5 	.word	0x08012da5
 8012c80:	08012c31 	.word	0x08012c31
 8012c84:	08012c31 	.word	0x08012c31
 8012c88:	08012de5 	.word	0x08012de5
 8012c8c:	08012c31 	.word	0x08012c31
 8012c90:	08012ce5 	.word	0x08012ce5
 8012c94:	08012c31 	.word	0x08012c31
 8012c98:	08012c31 	.word	0x08012c31
 8012c9c:	08012dad 	.word	0x08012dad
 8012ca0:	680b      	ldr	r3, [r1, #0]
 8012ca2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012ca6:	1d1a      	adds	r2, r3, #4
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	600a      	str	r2, [r1, #0]
 8012cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	e0a4      	b.n	8012dfe <_printf_i+0x1f6>
 8012cb4:	6825      	ldr	r5, [r4, #0]
 8012cb6:	6808      	ldr	r0, [r1, #0]
 8012cb8:	062e      	lsls	r6, r5, #24
 8012cba:	f100 0304 	add.w	r3, r0, #4
 8012cbe:	d50a      	bpl.n	8012cd6 <_printf_i+0xce>
 8012cc0:	6805      	ldr	r5, [r0, #0]
 8012cc2:	600b      	str	r3, [r1, #0]
 8012cc4:	2d00      	cmp	r5, #0
 8012cc6:	da03      	bge.n	8012cd0 <_printf_i+0xc8>
 8012cc8:	232d      	movs	r3, #45	; 0x2d
 8012cca:	426d      	negs	r5, r5
 8012ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cd0:	230a      	movs	r3, #10
 8012cd2:	485e      	ldr	r0, [pc, #376]	; (8012e4c <_printf_i+0x244>)
 8012cd4:	e019      	b.n	8012d0a <_printf_i+0x102>
 8012cd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012cda:	6805      	ldr	r5, [r0, #0]
 8012cdc:	600b      	str	r3, [r1, #0]
 8012cde:	bf18      	it	ne
 8012ce0:	b22d      	sxthne	r5, r5
 8012ce2:	e7ef      	b.n	8012cc4 <_printf_i+0xbc>
 8012ce4:	680b      	ldr	r3, [r1, #0]
 8012ce6:	6825      	ldr	r5, [r4, #0]
 8012ce8:	1d18      	adds	r0, r3, #4
 8012cea:	6008      	str	r0, [r1, #0]
 8012cec:	0628      	lsls	r0, r5, #24
 8012cee:	d501      	bpl.n	8012cf4 <_printf_i+0xec>
 8012cf0:	681d      	ldr	r5, [r3, #0]
 8012cf2:	e002      	b.n	8012cfa <_printf_i+0xf2>
 8012cf4:	0669      	lsls	r1, r5, #25
 8012cf6:	d5fb      	bpl.n	8012cf0 <_printf_i+0xe8>
 8012cf8:	881d      	ldrh	r5, [r3, #0]
 8012cfa:	2f6f      	cmp	r7, #111	; 0x6f
 8012cfc:	bf0c      	ite	eq
 8012cfe:	2308      	moveq	r3, #8
 8012d00:	230a      	movne	r3, #10
 8012d02:	4852      	ldr	r0, [pc, #328]	; (8012e4c <_printf_i+0x244>)
 8012d04:	2100      	movs	r1, #0
 8012d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d0a:	6866      	ldr	r6, [r4, #4]
 8012d0c:	2e00      	cmp	r6, #0
 8012d0e:	bfa8      	it	ge
 8012d10:	6821      	ldrge	r1, [r4, #0]
 8012d12:	60a6      	str	r6, [r4, #8]
 8012d14:	bfa4      	itt	ge
 8012d16:	f021 0104 	bicge.w	r1, r1, #4
 8012d1a:	6021      	strge	r1, [r4, #0]
 8012d1c:	b90d      	cbnz	r5, 8012d22 <_printf_i+0x11a>
 8012d1e:	2e00      	cmp	r6, #0
 8012d20:	d04d      	beq.n	8012dbe <_printf_i+0x1b6>
 8012d22:	4616      	mov	r6, r2
 8012d24:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d28:	fb03 5711 	mls	r7, r3, r1, r5
 8012d2c:	5dc7      	ldrb	r7, [r0, r7]
 8012d2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d32:	462f      	mov	r7, r5
 8012d34:	42bb      	cmp	r3, r7
 8012d36:	460d      	mov	r5, r1
 8012d38:	d9f4      	bls.n	8012d24 <_printf_i+0x11c>
 8012d3a:	2b08      	cmp	r3, #8
 8012d3c:	d10b      	bne.n	8012d56 <_printf_i+0x14e>
 8012d3e:	6823      	ldr	r3, [r4, #0]
 8012d40:	07df      	lsls	r7, r3, #31
 8012d42:	d508      	bpl.n	8012d56 <_printf_i+0x14e>
 8012d44:	6923      	ldr	r3, [r4, #16]
 8012d46:	6861      	ldr	r1, [r4, #4]
 8012d48:	4299      	cmp	r1, r3
 8012d4a:	bfde      	ittt	le
 8012d4c:	2330      	movle	r3, #48	; 0x30
 8012d4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d56:	1b92      	subs	r2, r2, r6
 8012d58:	6122      	str	r2, [r4, #16]
 8012d5a:	464b      	mov	r3, r9
 8012d5c:	4621      	mov	r1, r4
 8012d5e:	4640      	mov	r0, r8
 8012d60:	f8cd a000 	str.w	sl, [sp]
 8012d64:	aa03      	add	r2, sp, #12
 8012d66:	f7ff fedf 	bl	8012b28 <_printf_common>
 8012d6a:	3001      	adds	r0, #1
 8012d6c:	d14c      	bne.n	8012e08 <_printf_i+0x200>
 8012d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d72:	b004      	add	sp, #16
 8012d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d78:	4834      	ldr	r0, [pc, #208]	; (8012e4c <_printf_i+0x244>)
 8012d7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012d7e:	680e      	ldr	r6, [r1, #0]
 8012d80:	6823      	ldr	r3, [r4, #0]
 8012d82:	f856 5b04 	ldr.w	r5, [r6], #4
 8012d86:	061f      	lsls	r7, r3, #24
 8012d88:	600e      	str	r6, [r1, #0]
 8012d8a:	d514      	bpl.n	8012db6 <_printf_i+0x1ae>
 8012d8c:	07d9      	lsls	r1, r3, #31
 8012d8e:	bf44      	itt	mi
 8012d90:	f043 0320 	orrmi.w	r3, r3, #32
 8012d94:	6023      	strmi	r3, [r4, #0]
 8012d96:	b91d      	cbnz	r5, 8012da0 <_printf_i+0x198>
 8012d98:	6823      	ldr	r3, [r4, #0]
 8012d9a:	f023 0320 	bic.w	r3, r3, #32
 8012d9e:	6023      	str	r3, [r4, #0]
 8012da0:	2310      	movs	r3, #16
 8012da2:	e7af      	b.n	8012d04 <_printf_i+0xfc>
 8012da4:	6823      	ldr	r3, [r4, #0]
 8012da6:	f043 0320 	orr.w	r3, r3, #32
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	2378      	movs	r3, #120	; 0x78
 8012dae:	4828      	ldr	r0, [pc, #160]	; (8012e50 <_printf_i+0x248>)
 8012db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012db4:	e7e3      	b.n	8012d7e <_printf_i+0x176>
 8012db6:	065e      	lsls	r6, r3, #25
 8012db8:	bf48      	it	mi
 8012dba:	b2ad      	uxthmi	r5, r5
 8012dbc:	e7e6      	b.n	8012d8c <_printf_i+0x184>
 8012dbe:	4616      	mov	r6, r2
 8012dc0:	e7bb      	b.n	8012d3a <_printf_i+0x132>
 8012dc2:	680b      	ldr	r3, [r1, #0]
 8012dc4:	6826      	ldr	r6, [r4, #0]
 8012dc6:	1d1d      	adds	r5, r3, #4
 8012dc8:	6960      	ldr	r0, [r4, #20]
 8012dca:	600d      	str	r5, [r1, #0]
 8012dcc:	0635      	lsls	r5, r6, #24
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	d501      	bpl.n	8012dd6 <_printf_i+0x1ce>
 8012dd2:	6018      	str	r0, [r3, #0]
 8012dd4:	e002      	b.n	8012ddc <_printf_i+0x1d4>
 8012dd6:	0671      	lsls	r1, r6, #25
 8012dd8:	d5fb      	bpl.n	8012dd2 <_printf_i+0x1ca>
 8012dda:	8018      	strh	r0, [r3, #0]
 8012ddc:	2300      	movs	r3, #0
 8012dde:	4616      	mov	r6, r2
 8012de0:	6123      	str	r3, [r4, #16]
 8012de2:	e7ba      	b.n	8012d5a <_printf_i+0x152>
 8012de4:	680b      	ldr	r3, [r1, #0]
 8012de6:	1d1a      	adds	r2, r3, #4
 8012de8:	600a      	str	r2, [r1, #0]
 8012dea:	681e      	ldr	r6, [r3, #0]
 8012dec:	2100      	movs	r1, #0
 8012dee:	4630      	mov	r0, r6
 8012df0:	6862      	ldr	r2, [r4, #4]
 8012df2:	f7fe ff07 	bl	8011c04 <memchr>
 8012df6:	b108      	cbz	r0, 8012dfc <_printf_i+0x1f4>
 8012df8:	1b80      	subs	r0, r0, r6
 8012dfa:	6060      	str	r0, [r4, #4]
 8012dfc:	6863      	ldr	r3, [r4, #4]
 8012dfe:	6123      	str	r3, [r4, #16]
 8012e00:	2300      	movs	r3, #0
 8012e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e06:	e7a8      	b.n	8012d5a <_printf_i+0x152>
 8012e08:	4632      	mov	r2, r6
 8012e0a:	4649      	mov	r1, r9
 8012e0c:	4640      	mov	r0, r8
 8012e0e:	6923      	ldr	r3, [r4, #16]
 8012e10:	47d0      	blx	sl
 8012e12:	3001      	adds	r0, #1
 8012e14:	d0ab      	beq.n	8012d6e <_printf_i+0x166>
 8012e16:	6823      	ldr	r3, [r4, #0]
 8012e18:	079b      	lsls	r3, r3, #30
 8012e1a:	d413      	bmi.n	8012e44 <_printf_i+0x23c>
 8012e1c:	68e0      	ldr	r0, [r4, #12]
 8012e1e:	9b03      	ldr	r3, [sp, #12]
 8012e20:	4298      	cmp	r0, r3
 8012e22:	bfb8      	it	lt
 8012e24:	4618      	movlt	r0, r3
 8012e26:	e7a4      	b.n	8012d72 <_printf_i+0x16a>
 8012e28:	2301      	movs	r3, #1
 8012e2a:	4632      	mov	r2, r6
 8012e2c:	4649      	mov	r1, r9
 8012e2e:	4640      	mov	r0, r8
 8012e30:	47d0      	blx	sl
 8012e32:	3001      	adds	r0, #1
 8012e34:	d09b      	beq.n	8012d6e <_printf_i+0x166>
 8012e36:	3501      	adds	r5, #1
 8012e38:	68e3      	ldr	r3, [r4, #12]
 8012e3a:	9903      	ldr	r1, [sp, #12]
 8012e3c:	1a5b      	subs	r3, r3, r1
 8012e3e:	42ab      	cmp	r3, r5
 8012e40:	dcf2      	bgt.n	8012e28 <_printf_i+0x220>
 8012e42:	e7eb      	b.n	8012e1c <_printf_i+0x214>
 8012e44:	2500      	movs	r5, #0
 8012e46:	f104 0619 	add.w	r6, r4, #25
 8012e4a:	e7f5      	b.n	8012e38 <_printf_i+0x230>
 8012e4c:	080153d9 	.word	0x080153d9
 8012e50:	080153ea 	.word	0x080153ea

08012e54 <__sread>:
 8012e54:	b510      	push	{r4, lr}
 8012e56:	460c      	mov	r4, r1
 8012e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e5c:	f000 f8ba 	bl	8012fd4 <_read_r>
 8012e60:	2800      	cmp	r0, #0
 8012e62:	bfab      	itete	ge
 8012e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e66:	89a3      	ldrhlt	r3, [r4, #12]
 8012e68:	181b      	addge	r3, r3, r0
 8012e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e6e:	bfac      	ite	ge
 8012e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e72:	81a3      	strhlt	r3, [r4, #12]
 8012e74:	bd10      	pop	{r4, pc}

08012e76 <__swrite>:
 8012e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7a:	461f      	mov	r7, r3
 8012e7c:	898b      	ldrh	r3, [r1, #12]
 8012e7e:	4605      	mov	r5, r0
 8012e80:	05db      	lsls	r3, r3, #23
 8012e82:	460c      	mov	r4, r1
 8012e84:	4616      	mov	r6, r2
 8012e86:	d505      	bpl.n	8012e94 <__swrite+0x1e>
 8012e88:	2302      	movs	r3, #2
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e90:	f000 f868 	bl	8012f64 <_lseek_r>
 8012e94:	89a3      	ldrh	r3, [r4, #12]
 8012e96:	4632      	mov	r2, r6
 8012e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e9c:	81a3      	strh	r3, [r4, #12]
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	463b      	mov	r3, r7
 8012ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eaa:	f000 b817 	b.w	8012edc <_write_r>

08012eae <__sseek>:
 8012eae:	b510      	push	{r4, lr}
 8012eb0:	460c      	mov	r4, r1
 8012eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb6:	f000 f855 	bl	8012f64 <_lseek_r>
 8012eba:	1c43      	adds	r3, r0, #1
 8012ebc:	89a3      	ldrh	r3, [r4, #12]
 8012ebe:	bf15      	itete	ne
 8012ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012eca:	81a3      	strheq	r3, [r4, #12]
 8012ecc:	bf18      	it	ne
 8012ece:	81a3      	strhne	r3, [r4, #12]
 8012ed0:	bd10      	pop	{r4, pc}

08012ed2 <__sclose>:
 8012ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ed6:	f000 b813 	b.w	8012f00 <_close_r>
	...

08012edc <_write_r>:
 8012edc:	b538      	push	{r3, r4, r5, lr}
 8012ede:	4604      	mov	r4, r0
 8012ee0:	4608      	mov	r0, r1
 8012ee2:	4611      	mov	r1, r2
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	4d05      	ldr	r5, [pc, #20]	; (8012efc <_write_r+0x20>)
 8012ee8:	602a      	str	r2, [r5, #0]
 8012eea:	461a      	mov	r2, r3
 8012eec:	f7ef fe0d 	bl	8002b0a <_write>
 8012ef0:	1c43      	adds	r3, r0, #1
 8012ef2:	d102      	bne.n	8012efa <_write_r+0x1e>
 8012ef4:	682b      	ldr	r3, [r5, #0]
 8012ef6:	b103      	cbz	r3, 8012efa <_write_r+0x1e>
 8012ef8:	6023      	str	r3, [r4, #0]
 8012efa:	bd38      	pop	{r3, r4, r5, pc}
 8012efc:	20006ba4 	.word	0x20006ba4

08012f00 <_close_r>:
 8012f00:	b538      	push	{r3, r4, r5, lr}
 8012f02:	2300      	movs	r3, #0
 8012f04:	4d05      	ldr	r5, [pc, #20]	; (8012f1c <_close_r+0x1c>)
 8012f06:	4604      	mov	r4, r0
 8012f08:	4608      	mov	r0, r1
 8012f0a:	602b      	str	r3, [r5, #0]
 8012f0c:	f7ef fe19 	bl	8002b42 <_close>
 8012f10:	1c43      	adds	r3, r0, #1
 8012f12:	d102      	bne.n	8012f1a <_close_r+0x1a>
 8012f14:	682b      	ldr	r3, [r5, #0]
 8012f16:	b103      	cbz	r3, 8012f1a <_close_r+0x1a>
 8012f18:	6023      	str	r3, [r4, #0]
 8012f1a:	bd38      	pop	{r3, r4, r5, pc}
 8012f1c:	20006ba4 	.word	0x20006ba4

08012f20 <_fstat_r>:
 8012f20:	b538      	push	{r3, r4, r5, lr}
 8012f22:	2300      	movs	r3, #0
 8012f24:	4d06      	ldr	r5, [pc, #24]	; (8012f40 <_fstat_r+0x20>)
 8012f26:	4604      	mov	r4, r0
 8012f28:	4608      	mov	r0, r1
 8012f2a:	4611      	mov	r1, r2
 8012f2c:	602b      	str	r3, [r5, #0]
 8012f2e:	f7ef fe13 	bl	8002b58 <_fstat>
 8012f32:	1c43      	adds	r3, r0, #1
 8012f34:	d102      	bne.n	8012f3c <_fstat_r+0x1c>
 8012f36:	682b      	ldr	r3, [r5, #0]
 8012f38:	b103      	cbz	r3, 8012f3c <_fstat_r+0x1c>
 8012f3a:	6023      	str	r3, [r4, #0]
 8012f3c:	bd38      	pop	{r3, r4, r5, pc}
 8012f3e:	bf00      	nop
 8012f40:	20006ba4 	.word	0x20006ba4

08012f44 <_isatty_r>:
 8012f44:	b538      	push	{r3, r4, r5, lr}
 8012f46:	2300      	movs	r3, #0
 8012f48:	4d05      	ldr	r5, [pc, #20]	; (8012f60 <_isatty_r+0x1c>)
 8012f4a:	4604      	mov	r4, r0
 8012f4c:	4608      	mov	r0, r1
 8012f4e:	602b      	str	r3, [r5, #0]
 8012f50:	f7ef fe11 	bl	8002b76 <_isatty>
 8012f54:	1c43      	adds	r3, r0, #1
 8012f56:	d102      	bne.n	8012f5e <_isatty_r+0x1a>
 8012f58:	682b      	ldr	r3, [r5, #0]
 8012f5a:	b103      	cbz	r3, 8012f5e <_isatty_r+0x1a>
 8012f5c:	6023      	str	r3, [r4, #0]
 8012f5e:	bd38      	pop	{r3, r4, r5, pc}
 8012f60:	20006ba4 	.word	0x20006ba4

08012f64 <_lseek_r>:
 8012f64:	b538      	push	{r3, r4, r5, lr}
 8012f66:	4604      	mov	r4, r0
 8012f68:	4608      	mov	r0, r1
 8012f6a:	4611      	mov	r1, r2
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	4d05      	ldr	r5, [pc, #20]	; (8012f84 <_lseek_r+0x20>)
 8012f70:	602a      	str	r2, [r5, #0]
 8012f72:	461a      	mov	r2, r3
 8012f74:	f7ef fe09 	bl	8002b8a <_lseek>
 8012f78:	1c43      	adds	r3, r0, #1
 8012f7a:	d102      	bne.n	8012f82 <_lseek_r+0x1e>
 8012f7c:	682b      	ldr	r3, [r5, #0]
 8012f7e:	b103      	cbz	r3, 8012f82 <_lseek_r+0x1e>
 8012f80:	6023      	str	r3, [r4, #0]
 8012f82:	bd38      	pop	{r3, r4, r5, pc}
 8012f84:	20006ba4 	.word	0x20006ba4

08012f88 <_realloc_r>:
 8012f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8a:	4607      	mov	r7, r0
 8012f8c:	4614      	mov	r4, r2
 8012f8e:	460e      	mov	r6, r1
 8012f90:	b921      	cbnz	r1, 8012f9c <_realloc_r+0x14>
 8012f92:	4611      	mov	r1, r2
 8012f94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f98:	f7fe becc 	b.w	8011d34 <_malloc_r>
 8012f9c:	b922      	cbnz	r2, 8012fa8 <_realloc_r+0x20>
 8012f9e:	f7fe fe7d 	bl	8011c9c <_free_r>
 8012fa2:	4625      	mov	r5, r4
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fa8:	f000 f826 	bl	8012ff8 <_malloc_usable_size_r>
 8012fac:	42a0      	cmp	r0, r4
 8012fae:	d20f      	bcs.n	8012fd0 <_realloc_r+0x48>
 8012fb0:	4621      	mov	r1, r4
 8012fb2:	4638      	mov	r0, r7
 8012fb4:	f7fe febe 	bl	8011d34 <_malloc_r>
 8012fb8:	4605      	mov	r5, r0
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	d0f2      	beq.n	8012fa4 <_realloc_r+0x1c>
 8012fbe:	4631      	mov	r1, r6
 8012fc0:	4622      	mov	r2, r4
 8012fc2:	f7fe fe3b 	bl	8011c3c <memcpy>
 8012fc6:	4631      	mov	r1, r6
 8012fc8:	4638      	mov	r0, r7
 8012fca:	f7fe fe67 	bl	8011c9c <_free_r>
 8012fce:	e7e9      	b.n	8012fa4 <_realloc_r+0x1c>
 8012fd0:	4635      	mov	r5, r6
 8012fd2:	e7e7      	b.n	8012fa4 <_realloc_r+0x1c>

08012fd4 <_read_r>:
 8012fd4:	b538      	push	{r3, r4, r5, lr}
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	4608      	mov	r0, r1
 8012fda:	4611      	mov	r1, r2
 8012fdc:	2200      	movs	r2, #0
 8012fde:	4d05      	ldr	r5, [pc, #20]	; (8012ff4 <_read_r+0x20>)
 8012fe0:	602a      	str	r2, [r5, #0]
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	f7ef fd74 	bl	8002ad0 <_read>
 8012fe8:	1c43      	adds	r3, r0, #1
 8012fea:	d102      	bne.n	8012ff2 <_read_r+0x1e>
 8012fec:	682b      	ldr	r3, [r5, #0]
 8012fee:	b103      	cbz	r3, 8012ff2 <_read_r+0x1e>
 8012ff0:	6023      	str	r3, [r4, #0]
 8012ff2:	bd38      	pop	{r3, r4, r5, pc}
 8012ff4:	20006ba4 	.word	0x20006ba4

08012ff8 <_malloc_usable_size_r>:
 8012ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ffc:	1f18      	subs	r0, r3, #4
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	bfbc      	itt	lt
 8013002:	580b      	ldrlt	r3, [r1, r0]
 8013004:	18c0      	addlt	r0, r0, r3
 8013006:	4770      	bx	lr

08013008 <_init>:
 8013008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300a:	bf00      	nop
 801300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801300e:	bc08      	pop	{r3}
 8013010:	469e      	mov	lr, r3
 8013012:	4770      	bx	lr

08013014 <_fini>:
 8013014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013016:	bf00      	nop
 8013018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801301a:	bc08      	pop	{r3}
 801301c:	469e      	mov	lr, r3
 801301e:	4770      	bx	lr
