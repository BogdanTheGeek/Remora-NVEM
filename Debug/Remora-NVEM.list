
Remora-NVEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f12c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002268  0800f2b0  0800f2b0  0001f2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011518  08011518  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08011518  08011518  00021518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011520  08011520  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011520  08011520  00021520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011528  08011528  00021528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08011530  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b54  20000080  080115ac  00030080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006bd4  080115ac  00036bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000443eb  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008583  00000000  00000000  00074490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0007ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  0007e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c89  00000000  00000000  0007f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7a5  00000000  00000000  00090341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed021  00000000  00000000  000baae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a7b07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000775c  00000000  00000000  001a7b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000080 	.word	0x20000080
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800f298 	.word	0x0800f298

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000084 	.word	0x20000084
 80001c0:	0800f298 	.word	0x0800f298

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b96e 	b.w	80004b8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 8083 	bne.w	800030c <__udivmoddi4+0x118>
 8000206:	428a      	cmp	r2, r1
 8000208:	4617      	mov	r7, r2
 800020a:	d947      	bls.n	800029c <__udivmoddi4+0xa8>
 800020c:	fab2 f382 	clz	r3, r2
 8000210:	b14b      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000212:	f1c3 0120 	rsb	r1, r3, #32
 8000216:	fa05 fe03 	lsl.w	lr, r5, r3
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	409f      	lsls	r7, r3
 8000220:	ea41 0e0e 	orr.w	lr, r1, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	fbbe fcf8 	udiv	ip, lr, r8
 800022e:	fa1f f987 	uxth.w	r9, r7
 8000232:	fb08 e21c 	mls	r2, r8, ip, lr
 8000236:	fb0c f009 	mul.w	r0, ip, r9
 800023a:	0c21      	lsrs	r1, r4, #16
 800023c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800024a:	f080 8118 	bcs.w	800047e <__udivmoddi4+0x28a>
 800024e:	4290      	cmp	r0, r2
 8000250:	f240 8115 	bls.w	800047e <__udivmoddi4+0x28a>
 8000254:	f1ac 0c02 	sub.w	ip, ip, #2
 8000258:	443a      	add	r2, r7
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000260:	fb08 2210 	mls	r2, r8, r0, r2
 8000264:	fb00 f109 	mul.w	r1, r0, r9
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a1      	cmp	r1, r4
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x92>
 8000272:	193c      	adds	r4, r7, r4
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 8103 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800027c:	42a1      	cmp	r1, r4
 800027e:	f240 8100 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000282:	3802      	subs	r0, #2
 8000284:	443c      	add	r4, r7
 8000286:	1a64      	subs	r4, r4, r1
 8000288:	2100      	movs	r1, #0
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa4>
 8000290:	2200      	movs	r2, #0
 8000292:	40dc      	lsrs	r4, r3
 8000294:	e9c6 4200 	strd	r4, r2, [r6]
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b902      	cbnz	r2, 80002a0 <__udivmoddi4+0xac>
 800029e:	deff      	udf	#255	; 0xff
 80002a0:	fab2 f382 	clz	r3, r2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14f      	bne.n	8000348 <__udivmoddi4+0x154>
 80002a8:	1a8d      	subs	r5, r1, r2
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b0:	fa1f f882 	uxth.w	r8, r2
 80002b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002bc:	fb08 f00c 	mul.w	r0, r8, ip
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0xe6>
 80002ca:	197d      	adds	r5, r7, r5
 80002cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0xe4>
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	f200 80e9 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 80002d8:	4694      	mov	ip, r2
 80002da:	1a2d      	subs	r5, r5, r0
 80002dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	b2a4      	uxth	r4, r4
 80002ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ee:	45a0      	cmp	r8, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x10e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x10c>
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	f200 80d9 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000300:	4610      	mov	r0, r2
 8000302:	eba4 0408 	sub.w	r4, r4, r8
 8000306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030a:	e7c0      	b.n	800028e <__udivmoddi4+0x9a>
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x12e>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80b1 	beq.w	8000478 <__udivmoddi4+0x284>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0x1ce>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0x140>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80b9 	bhi.w	80004a6 <__udivmoddi4+0x2b2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0aa      	beq.n	8000298 <__udivmoddi4+0xa4>
 8000342:	e9c6 4e00 	strd	r4, lr, [r6]
 8000346:	e7a7      	b.n	8000298 <__udivmoddi4+0xa4>
 8000348:	409f      	lsls	r7, r3
 800034a:	f1c3 0220 	rsb	r2, r3, #32
 800034e:	40d1      	lsrs	r1, r2
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	fa24 f202 	lsr.w	r2, r4, r2
 8000364:	409d      	lsls	r5, r3
 8000366:	fb00 fc08 	mul.w	ip, r0, r8
 800036a:	432a      	orrs	r2, r5
 800036c:	0c15      	lsrs	r5, r2, #16
 800036e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000372:	45ac      	cmp	ip, r5
 8000374:	fa04 f403 	lsl.w	r4, r4, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x19a>
 800037a:	197d      	adds	r5, r7, r5
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	f080 808f 	bcs.w	80004a2 <__udivmoddi4+0x2ae>
 8000384:	45ac      	cmp	ip, r5
 8000386:	f240 808c 	bls.w	80004a2 <__udivmoddi4+0x2ae>
 800038a:	3802      	subs	r0, #2
 800038c:	443d      	add	r5, r7
 800038e:	eba5 050c 	sub.w	r5, r5, ip
 8000392:	fbb5 f1fe 	udiv	r1, r5, lr
 8000396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800039a:	fb01 f908 	mul.w	r9, r1, r8
 800039e:	b295      	uxth	r5, r2
 80003a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003a4:	45a9      	cmp	r9, r5
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x1c4>
 80003a8:	197d      	adds	r5, r7, r5
 80003aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ae:	d274      	bcs.n	800049a <__udivmoddi4+0x2a6>
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d972      	bls.n	800049a <__udivmoddi4+0x2a6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	eba5 0509 	sub.w	r5, r5, r9
 80003bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c0:	e778      	b.n	80002b4 <__udivmoddi4+0xc0>
 80003c2:	f1c1 0720 	rsb	r7, r1, #32
 80003c6:	408b      	lsls	r3, r1
 80003c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d0:	fa25 f407 	lsr.w	r4, r5, r7
 80003d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003dc:	fa1f f88c 	uxth.w	r8, ip
 80003e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003e4:	fa20 f307 	lsr.w	r3, r0, r7
 80003e8:	fb09 fa08 	mul.w	sl, r9, r8
 80003ec:	408d      	lsls	r5, r1
 80003ee:	431d      	orrs	r5, r3
 80003f0:	0c2b      	lsrs	r3, r5, #16
 80003f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	fa00 f301 	lsl.w	r3, r0, r1
 8000400:	d909      	bls.n	8000416 <__udivmoddi4+0x222>
 8000402:	eb1c 0404 	adds.w	r4, ip, r4
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295
 800040a:	d248      	bcs.n	800049e <__udivmoddi4+0x2aa>
 800040c:	45a2      	cmp	sl, r4
 800040e:	d946      	bls.n	800049e <__udivmoddi4+0x2aa>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	4464      	add	r4, ip
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	fbb4 f0fe 	udiv	r0, r4, lr
 800041e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000422:	fb00 fa08 	mul.w	sl, r0, r8
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x24e>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d22d      	bcs.n	8000496 <__udivmoddi4+0x2a2>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d92b      	bls.n	8000496 <__udivmoddi4+0x2a2>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	464d      	mov	r5, r9
 8000454:	d319      	bcc.n	800048a <__udivmoddi4+0x296>
 8000456:	d016      	beq.n	8000486 <__udivmoddi4+0x292>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x27e>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb64 0405 	sbc.w	r4, r4, r5
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431f      	orrs	r7, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c6 7400 	strd	r7, r4, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70c      	b.n	8000298 <__udivmoddi4+0xa4>
 800047e:	468c      	mov	ip, r1
 8000480:	e6eb      	b.n	800025a <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6ff      	b.n	8000286 <__udivmoddi4+0x92>
 8000486:	4543      	cmp	r3, r8
 8000488:	d2e6      	bcs.n	8000458 <__udivmoddi4+0x264>
 800048a:	ebb8 0e02 	subs.w	lr, r8, r2
 800048e:	eb69 050c 	sbc.w	r5, r9, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7e0      	b.n	8000458 <__udivmoddi4+0x264>
 8000496:	4628      	mov	r0, r5
 8000498:	e7d3      	b.n	8000442 <__udivmoddi4+0x24e>
 800049a:	4611      	mov	r1, r2
 800049c:	e78c      	b.n	80003b8 <__udivmoddi4+0x1c4>
 800049e:	4681      	mov	r9, r0
 80004a0:	e7b9      	b.n	8000416 <__udivmoddi4+0x222>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e773      	b.n	800038e <__udivmoddi4+0x19a>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e749      	b.n	800033e <__udivmoddi4+0x14a>
 80004aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ae:	443d      	add	r5, r7
 80004b0:	e713      	b.n	80002da <__udivmoddi4+0xe6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	e724      	b.n	8000302 <__udivmoddi4+0x10e>

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <_ZL9GetSectorm>:
/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

static uint32_t GetSector(uint32_t Address)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a44      	ldr	r2, [pc, #272]	; (80005dc <_ZL9GetSectorm+0x120>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d806      	bhi.n	80004de <_ZL9GetSectorm+0x22>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80004d6:	d302      	bcc.n	80004de <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	e077      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a3f      	ldr	r2, [pc, #252]	; (80005e0 <_ZL9GetSectorm+0x124>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d806      	bhi.n	80004f4 <_ZL9GetSectorm+0x38>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a3e      	ldr	r2, [pc, #248]	; (80005e4 <_ZL9GetSectorm+0x128>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d302      	bcc.n	80004f4 <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	e06c      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a3c      	ldr	r2, [pc, #240]	; (80005e8 <_ZL9GetSectorm+0x12c>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d806      	bhi.n	800050a <_ZL9GetSectorm+0x4e>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a3b      	ldr	r2, [pc, #236]	; (80005ec <_ZL9GetSectorm+0x130>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d302      	bcc.n	800050a <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000504:	2302      	movs	r3, #2
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	e061      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a38      	ldr	r2, [pc, #224]	; (80005f0 <_ZL9GetSectorm+0x134>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d206      	bcs.n	8000520 <_ZL9GetSectorm+0x64>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <_ZL9GetSectorm+0x138>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d302      	bcc.n	8000520 <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 800051a:	2303      	movs	r3, #3
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	e056      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a35      	ldr	r2, [pc, #212]	; (80005f8 <_ZL9GetSectorm+0x13c>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d206      	bcs.n	8000536 <_ZL9GetSectorm+0x7a>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a31      	ldr	r2, [pc, #196]	; (80005f0 <_ZL9GetSectorm+0x134>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d902      	bls.n	8000536 <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000530:	2304      	movs	r3, #4
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e04b      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a30      	ldr	r2, [pc, #192]	; (80005fc <_ZL9GetSectorm+0x140>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d206      	bcs.n	800054c <_ZL9GetSectorm+0x90>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a2d      	ldr	r2, [pc, #180]	; (80005f8 <_ZL9GetSectorm+0x13c>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d902      	bls.n	800054c <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000546:	2305      	movs	r3, #5
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e040      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a2c      	ldr	r2, [pc, #176]	; (8000600 <_ZL9GetSectorm+0x144>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d206      	bcs.n	8000562 <_ZL9GetSectorm+0xa6>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a29      	ldr	r2, [pc, #164]	; (80005fc <_ZL9GetSectorm+0x140>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d902      	bls.n	8000562 <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 800055c:	2306      	movs	r3, #6
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	e035      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <_ZL9GetSectorm+0x148>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d206      	bcs.n	8000578 <_ZL9GetSectorm+0xbc>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a24      	ldr	r2, [pc, #144]	; (8000600 <_ZL9GetSectorm+0x144>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d902      	bls.n	8000578 <_ZL9GetSectorm+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8000572:	2307      	movs	r3, #7
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	e02a      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a23      	ldr	r2, [pc, #140]	; (8000608 <_ZL9GetSectorm+0x14c>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d206      	bcs.n	800058e <_ZL9GetSectorm+0xd2>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a20      	ldr	r2, [pc, #128]	; (8000604 <_ZL9GetSectorm+0x148>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d902      	bls.n	800058e <_ZL9GetSectorm+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8000588:	2308      	movs	r3, #8
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e01f      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <_ZL9GetSectorm+0x150>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d206      	bcs.n	80005a4 <_ZL9GetSectorm+0xe8>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <_ZL9GetSectorm+0x14c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d902      	bls.n	80005a4 <_ZL9GetSectorm+0xe8>
  {
    sector = FLASH_SECTOR_9;
 800059e:	2309      	movs	r3, #9
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e014      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <_ZL9GetSectorm+0x154>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d806      	bhi.n	80005ba <_ZL9GetSectorm+0xfe>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <_ZL9GetSectorm+0x150>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d902      	bls.n	80005ba <_ZL9GetSectorm+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80005b4:	230a      	movs	r3, #10
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e009      	b.n	80005ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a15      	ldr	r2, [pc, #84]	; (8000614 <_ZL9GetSectorm+0x158>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d805      	bhi.n	80005ce <_ZL9GetSectorm+0x112>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <_ZL9GetSectorm+0x15c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d901      	bls.n	80005ce <_ZL9GetSectorm+0x112>
  {
    sector = FLASH_SECTOR_11;
 80005ca:	230b      	movs	r3, #11
 80005cc:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	08003ffe 	.word	0x08003ffe
 80005e0:	08007ffe 	.word	0x08007ffe
 80005e4:	08004000 	.word	0x08004000
 80005e8:	0800bffe 	.word	0x0800bffe
 80005ec:	08008000 	.word	0x08008000
 80005f0:	0800ffff 	.word	0x0800ffff
 80005f4:	0800c000 	.word	0x0800c000
 80005f8:	0801ffff 	.word	0x0801ffff
 80005fc:	0803ffff 	.word	0x0803ffff
 8000600:	0805ffff 	.word	0x0805ffff
 8000604:	0807ffff 	.word	0x0807ffff
 8000608:	0809ffff 	.word	0x0809ffff
 800060c:	080bffff 	.word	0x080bffff
 8000610:	080dfffe 	.word	0x080dfffe
 8000614:	080ffffe 	.word	0x080ffffe
 8000618:	080dffff 	.word	0x080dffff

0800061c <_Z13FLASH_If_Initv>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock(); 
 8000620:	f002 ff98 	bl	8003554 <HAL_FLASH_Unlock>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <_Z14FLASH_If_Erasem>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;
 
  FlashAddress = StartSector;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	627b      	str	r3, [r7, #36]	; 0x24

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */ 
 
  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <_Z14FLASH_If_Erasem+0x60>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d81e      	bhi.n	800067a <_Z14FLASH_If_Erasem+0x52>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
    
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Sector = GetSector(FlashAddress);
 8000644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000646:	f7ff ff39 	bl	80004bc <_ZL9GetSectorm>
 800064a:	4603      	mov	r3, r0
 800064c:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000652:	2302      	movs	r3, #2
 8000654:	623b      	str	r3, [r7, #32]
    
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 8000656:	f107 020c 	add.w	r2, r7, #12
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f003 f8c5 	bl	80037f0 <HAL_FLASHEx_Erase>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	bf14      	ite	ne
 800066c:	2301      	movne	r3, #1
 800066e:	2300      	moveq	r3, #0
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <_Z14FLASH_If_Erasem+0x56>
      return (1);
 8000676:	2301      	movs	r3, #1
 8000678:	e002      	b.n	8000680 <_Z14FLASH_If_Erasem+0x58>
  }
  else
  {
    return (1);
 800067a:	2301      	movs	r3, #1
 800067c:	e000      	b.n	8000680 <_Z14FLASH_If_Erasem+0x58>
  }

  return (0);
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	080e0000 	.word	0x080e0000

0800068c <_Z14FLASH_If_WritePVmPmt>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	4613      	mov	r3, r2
 8000698:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d206      	bcs.n	80006b8 <_Z14FLASH_If_WritePVmPmt+0x2c>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a1f      	ldr	r2, [pc, #124]	; (800072c <_Z14FLASH_If_WritePVmPmt+0xa0>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d801      	bhi.n	80006b8 <_Z14FLASH_If_WritePVmPmt+0x2c>
 80006b4:	2301      	movs	r3, #1
 80006b6:	e000      	b.n	80006ba <_Z14FLASH_If_WritePVmPmt+0x2e>
 80006b8:	2300      	movs	r3, #0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d031      	beq.n	8000722 <_Z14FLASH_If_WritePVmPmt+0x96>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress,  *(uint32_t*)(Data+i)) == HAL_OK)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6819      	ldr	r1, [r3, #0]
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	2002      	movs	r0, #2
 80006d4:	f002 feea 	bl	80034ac <HAL_FLASH_Program>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf0c      	ite	eq
 80006de:	2301      	moveq	r3, #1
 80006e0:	2300      	movne	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d016      	beq.n	8000716 <_Z14FLASH_If_WritePVmPmt+0x8a>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	440b      	add	r3, r1
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	bf14      	ite	ne
 80006fc:	2301      	movne	r3, #1
 80006fe:	2300      	moveq	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_Z14FLASH_If_WritePVmPmt+0x7e>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 8000706:	2302      	movs	r3, #2
 8000708:	e00c      	b.n	8000724 <_Z14FLASH_If_WritePVmPmt+0x98>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1d1a      	adds	r2, r3, #4
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e001      	b.n	800071a <_Z14FLASH_If_WritePVmPmt+0x8e>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 8000716:	2301      	movs	r3, #1
 8000718:	e004      	b.n	8000724 <_Z14FLASH_If_WritePVmPmt+0x98>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e7bf      	b.n	80006a2 <_Z14FLASH_If_WritePVmPmt+0x16>
    }
  }

  return (0);
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	080ffffb 	.word	0x080ffffb

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	; (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 800078c:	2303      	movs	r3, #3
 800078e:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3303      	adds	r3, #3
 8000794:	f023 0303 	bic.w	r3, r3, #3
}
 8000798:	4618      	mov	r0, r3
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 80007a2:	b480      	push	{r7}
 80007a4:	b085      	sub	sp, #20
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	e000      	b.n	80007ca <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 80007c8:	2300      	movs	r3, #0
        _end(buf ? buf + capa : 0) {
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	6093      	str	r3, [r2, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	e000      	b.n	80007de <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 80007dc:	2300      	movs	r3, #0
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
    return _begin;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
  }
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 800080c:	2100      	movs	r1, #0
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f804 	bl	800081c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:
 private:
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7a1b      	ldrb	r3, [r3, #8]
 800082c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000830:	b2da      	uxtb	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7a1a      	ldrb	r2, [r3, #8]
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	4313      	orrs	r3, r2
 800083e:	b2da      	uxtb	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	721a      	strb	r2, [r3, #8]
  }
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
    return _pool;
 8000856:	687b      	ldr	r3, [r7, #4]
  }
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8000862:	b084      	sub	sp, #16
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	f107 001c 	add.w	r0, r7, #28
 8000870:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	461c      	mov	r4, r3
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3310      	adds	r3, #16
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ffbc 	bl	8000804 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
    return malloc(n);
 80008a6:	6838      	ldr	r0, [r7, #0]
 80008a8:	f00d fca8 	bl	800e1fc <malloc>
 80008ac:	4603      	mov	r3, r0
  }
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]
    free(p);
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f00d fca3 	bl	800e20c <free>
  }
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <TIM1_UP_TIM10_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void TIM1_UP_TIM10_IRQHandler()
	{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	  if(TIM1->SR & TIM_SR_UIF) // if UIF flag is set
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d007      	beq.n	80008fa <TIM1_UP_TIM10_IRQHandler+0x2a>
	  {
		TIM1->SR &= ~TIM_SR_UIF; // clear UIF flag
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	4a04      	ldr	r2, [pc, #16]	; (8000900 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	6113      	str	r3, [r2, #16]

		Interrupt::TIM1_Wrapper();
 80008f6:	f001 f84f 	bl	8001998 <_ZN9Interrupt12TIM1_WrapperEv>
	  }
	}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40010000 	.word	0x40010000

08000904 <TIM2_IRQHandler>:

	void TIM2_IRQHandler()
	{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8000908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	2b00      	cmp	r3, #0
 8000914:	bf14      	ite	ne
 8000916:	2301      	movne	r3, #1
 8000918:	2300      	moveq	r3, #0
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d009      	beq.n	8000934 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8000920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 8000930:	f001 f840 	bl	80019b4 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <DMA2_Stream2_IRQHandler>:


	void DMA2_Stream2_IRQHandler(void)
	{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
		Interrupt::DMA2_Stream2_Wrapper();
 800093c:	f001 f848 	bl	80019d0 <_ZN9Interrupt20DMA2_Stream2_WrapperEv>
	}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 8000944:	b598      	push	{r3, r4, r7, lr}
 8000946:	af00      	add	r7, sp, #0
    baseThread = new pruThread(TIM1, TIM1_UP_TIM10_IRQn, PRU_BASEFREQ);
 8000948:	2030      	movs	r0, #48	; 0x30
 800094a:	f00d fbe7 	bl	800e11c <_Znwj>
 800094e:	4603      	mov	r3, r0
 8000950:	461c      	mov	r4, r3
 8000952:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000956:	2219      	movs	r2, #25
 8000958:	490f      	ldr	r1, [pc, #60]	; (8000998 <_Z13createThreadsv+0x54>)
 800095a:	4620      	mov	r0, r4
 800095c:	f001 f8aa 	bl	8001ab4 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <_Z13createThreadsv+0x58>)
 8000962:	601c      	str	r4, [r3, #0]
    //NVIC_SetVector(TIM1_UP_TIM10_IRQn, (uint32_t)TIM1_IRQHandler);
    NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2);
 8000964:	2102      	movs	r1, #2
 8000966:	2019      	movs	r0, #25
 8000968:	f7ff fee2 	bl	8000730 <__NVIC_SetPriority>

    servoThread = new pruThread(TIM2, TIM2_IRQn , PRU_SERVOFREQ);
 800096c:	2030      	movs	r0, #48	; 0x30
 800096e:	f00d fbd5 	bl	800e11c <_Znwj>
 8000972:	4603      	mov	r3, r0
 8000974:	461c      	mov	r4, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	221c      	movs	r2, #28
 800097c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000980:	4620      	mov	r0, r4
 8000982:	f001 f897 	bl	8001ab4 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <_Z13createThreadsv+0x5c>)
 8000988:	601c      	str	r4, [r3, #0]
    //NVIC_SetVector(TIM2_IRQn , (uint32_t)TIM2_IRQHandler);
    NVIC_SetPriority(TIM2_IRQn , 3);
 800098a:	2103      	movs	r1, #3
 800098c:	201c      	movs	r0, #28
 800098e:	f7ff fecf 	bl	8000730 <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	bd98      	pop	{r3, r4, r7, pc}
 8000996:	bf00      	nop
 8000998:	40010000 	.word	0x40010000
 800099c:	2000011c 	.word	0x2000011c
 80009a0:	20000118 	.word	0x20000118

080009a4 <__io_putchar>:
/* USER CODE BEGIN 0 */

// re-target printf to UART2 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80009ac:	1d39      	adds	r1, r7, #4
 80009ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b2:	2201      	movs	r2, #1
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <__io_putchar+0x20>)
 80009b6:	f003 fe6e 	bl	8004696 <HAL_UART_Transmit>
	  return ch;
 80009ba:	687b      	ldr	r3, [r7, #4]
	}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000009c 	.word	0x2000009c

080009c8 <_Z9checkJsonv>:
DynamicJsonDocument doc(JSON_BUFF_SIZE);
JsonObject thread;
JsonObject module;

uint8_t checkJson()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
	metadata_t* meta = (metadata_t*)JSON_UPLOAD_ADDRESS;
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <_Z9checkJsonv+0xc0>)
 80009d0:	61bb      	str	r3, [r7, #24]
	uint32_t* json = (uint32_t*)(JSON_UPLOAD_ADDRESS + METADATA_LEN);
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <_Z9checkJsonv+0xc4>)
 80009d4:	617b      	str	r3, [r7, #20]

	// Check length is reasonable
	//printf("Config length = %d\n", meta->length);
	if (meta->length > (USER_FLASH_END_ADDRESS - JSON_UPLOAD_ADDRESS))
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80009de:	d307      	bcc.n	80009f0 <_Z9checkJsonv+0x28>
	{
		newJson = false;
 80009e0:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <_Z9checkJsonv+0xc8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
		printf("JSON Config length incorrect\n");
 80009e6:	482b      	ldr	r0, [pc, #172]	; (8000a94 <_Z9checkJsonv+0xcc>)
 80009e8:	f00d fd76 	bl	800e4d8 <puts>
		return -1;
 80009ec:	23ff      	movs	r3, #255	; 0xff
 80009ee:	e046      	b.n	8000a7e <_Z9checkJsonv+0xb6>
	}

	// Enable & Reset CRC
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <_Z9checkJsonv+0xd0>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <_Z9checkJsonv+0xd0>)
 80009f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
	CRC->CR = 1;
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <_Z9checkJsonv+0xd4>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	609a      	str	r2, [r3, #8]

	// Compute CRC
	// Note: __RBIT funkiness is so that CRC will match standard calculation
	// See http://forum.chibios.org/phpbb/viewtopic.php?f=2&t=1475 for details
	for (uint32_t i = 0; i < meta->length; i++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d210      	bcs.n	8000a32 <_Z9checkJsonv+0x6a>
	  CRC->DR = __RBIT(*(json+i));
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	4413      	add	r3, r2
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <_Z9checkJsonv+0xd4>)
 8000a1c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	fa93 f3a3 	rbit	r3, r3
 8000a24:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; i < meta->length; i++)
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	e7e9      	b.n	8000a06 <_Z9checkJsonv+0x3e>

	crc32 = __RBIT(CRC->DR) ^ 0xFFFFFFFF;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <_Z9checkJsonv+0xd4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	fa93 f3a3 	rbit	r3, r3
 8000a3e:	607b      	str	r3, [r7, #4]
  return result;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <_Z9checkJsonv+0xd8>)
 8000a46:	6013      	str	r3, [r2, #0]

	//printf("crc32 = %x\n", crc32);

	// Disable CRC
	RCC->AHB1ENR &= ~RCC_AHB1ENR_CRCEN;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <_Z9checkJsonv+0xd0>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_Z9checkJsonv+0xd0>)
 8000a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30

	// Check CRC
	if (crc32 != meta->crc32)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_Z9checkJsonv+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d007      	beq.n	8000a70 <_Z9checkJsonv+0xa8>
	{
		newJson = false;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <_Z9checkJsonv+0xc8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
		printf("JSON Config file CRC incorrect\n");
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <_Z9checkJsonv+0xdc>)
 8000a68:	f00d fd36 	bl	800e4d8 <puts>
		return -1;
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	e006      	b.n	8000a7e <_Z9checkJsonv+0xb6>
	}

	// JSON is OK, don't check it again
	newJson = false;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_Z9checkJsonv+0xc8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
	printf("JSON Config file recieved Ok\n");
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <_Z9checkJsonv+0xe0>)
 8000a78:	f00d fd2e 	bl	800e4d8 <puts>
	return 1;
 8000a7c:	2301      	movs	r3, #1
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	080d0000 	.word	0x080d0000
 8000a8c:	080d0200 	.word	0x080d0200
 8000a90:	20000230 	.word	0x20000230
 8000a94:	0800f2b0 	.word	0x0800f2b0
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40023000 	.word	0x40023000
 8000aa0:	20000234 	.word	0x20000234
 8000aa4:	0800f2d0 	.word	0x0800f2d0
 8000aa8:	0800f2f0 	.word	0x0800f2f0

08000aac <_Z8moveJsonv>:


void moveJson()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
	metadata_t* meta = (metadata_t*)JSON_UPLOAD_ADDRESS;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <_Z8moveJsonv+0x6c>)
 8000ab8:	607b      	str	r3, [r7, #4]

	uint16_t jsonLength = meta->length;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	807b      	strh	r3, [r7, #2]

	// erase the old JSON config file
	FLASH_If_Erase(JSON_STORAGE_ADDRESS);
 8000ac0:	4816      	ldr	r0, [pc, #88]	; (8000b1c <_Z8moveJsonv+0x70>)
 8000ac2:	f7ff fdb1 	bl	8000628 <_Z14FLASH_If_Erasem>

	HAL_StatusTypeDef status;

	// store the length of the file in the 0th byte
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, JSON_STORAGE_ADDRESS, jsonLength);
 8000ac6:	887a      	ldrh	r2, [r7, #2]
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	4913      	ldr	r1, [pc, #76]	; (8000b1c <_Z8moveJsonv+0x70>)
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f002 fcec 	bl	80034ac <HAL_FLASH_Program>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < jsonLength; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d215      	bcs.n	8000b10 <_Z8moveJsonv+0x64>
    {
        if (status == HAL_OK)
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10e      	bne.n	8000b08 <_Z8moveJsonv+0x5c>
        {
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (JSON_STORAGE_ADDRESS + 4 + i), *((uint8_t*)(JSON_UPLOAD_ADDRESS + METADATA_LEN + i)));
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <_Z8moveJsonv+0x74>)
 8000aee:	4419      	add	r1, r3
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <_Z8moveJsonv+0x78>)
 8000af4:	4413      	add	r3, r2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	2000      	movs	r0, #0
 8000b00:	f002 fcd4 	bl	80034ac <HAL_FLASH_Program>
 8000b04:	4603      	mov	r3, r0
 8000b06:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < jsonLength; i++)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e7e5      	b.n	8000adc <_Z8moveJsonv+0x30>
        }
    }

}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	080d0000 	.word	0x080d0000
 8000b1c:	080e0000 	.word	0x080e0000
 8000b20:	080e0004 	.word	0x080e0004
 8000b24:	080d0200 	.word	0x080d0200

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f001 fa3b 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f8fd 	bl	8000d30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LWIP_Init();
 8000b36:	f003 ff75 	bl	8004a24 <MX_LWIP_Init>
  MX_USART2_UART_Init();
 8000b3a:	f000 f949 	bl	8000dd0 <_ZL19MX_USART2_UART_Initv>

  /* USER CODE BEGIN 2 */
  enum State currentState;
  enum State prevState;

  currentState = ST_SETUP;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
  prevState = ST_RESET;
 8000b42:	2305      	movs	r3, #5
 8000b44:	71bb      	strb	r3, [r7, #6]

  printf("Remora-NVEM starting\n");
 8000b46:	4867      	ldr	r0, [pc, #412]	; (8000ce4 <main+0x1bc>)
 8000b48:	f00d fcc6 	bl	800e4d8 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(currentState){
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	f200 80ab 	bhi.w	8000caa <main+0x182>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <main+0x34>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000b79 	.word	0x08000b79
 8000b60:	08000b9d 	.word	0x08000b9d
 8000b64:	08000be9 	.word	0x08000be9
 8000b68:	08000c11 	.word	0x08000c11
 8000b6c:	08000c43 	.word	0x08000c43
 8000b70:	08000c5b 	.word	0x08000c5b
 8000b74:	08000c9d 	.word	0x08000c9d
	          case ST_SETUP:
	              // do setup tasks
	              if (currentState != prevState)
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d002      	beq.n	8000b86 <main+0x5e>
	              {
	                  printf("\n## Entering SETUP state\n\n");
 8000b80:	4859      	ldr	r0, [pc, #356]	; (8000ce8 <main+0x1c0>)
 8000b82:	f00d fca9 	bl	800e4d8 <puts>
	              }
	              prevState = currentState;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	71bb      	strb	r3, [r7, #6]

	              createThreads();
 8000b8a:	f7ff fedb 	bl	8000944 <_Z13createThreadsv>
	              //debugThreadHigh();
	              //loadModules();
	              //debugThreadLow();
	              udpServer_init();
 8000b8e:	f000 f953 	bl	8000e38 <_Z14udpServer_initv>
	              IAP_tftpd_init();
 8000b92:	f000 fead 	bl	80018f0 <_Z14IAP_tftpd_initv>

	              currentState = ST_START;
 8000b96:	2301      	movs	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
	              break;
 8000b9a:	e086      	b.n	8000caa <main+0x182>

	          case ST_START:
	              // do start tasks
	              if (currentState != prevState)
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d002      	beq.n	8000baa <main+0x82>
	              {
	                  printf("\n## Entering START state\n");
 8000ba4:	4851      	ldr	r0, [pc, #324]	; (8000cec <main+0x1c4>)
 8000ba6:	f00d fc97 	bl	800e4d8 <puts>
	              }
	              prevState = currentState;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	71bb      	strb	r3, [r7, #6]

	              if (!threadsRunning)
 8000bae:	4b50      	ldr	r3, [pc, #320]	; (8000cf0 <main+0x1c8>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d012      	beq.n	8000be2 <main+0xba>
	              {
	                  // Start the threads
	                  printf("\nStarting the BASE thread\n");
 8000bbc:	484d      	ldr	r0, [pc, #308]	; (8000cf4 <main+0x1cc>)
 8000bbe:	f00d fc8b 	bl	800e4d8 <puts>
	                  baseThread->startThread();
 8000bc2:	4b4d      	ldr	r3, [pc, #308]	; (8000cf8 <main+0x1d0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 ffa2 	bl	8001b10 <_ZN9pruThread11startThreadEv>

	                  printf("\nStarting the SERVO thread\n");
 8000bcc:	484b      	ldr	r0, [pc, #300]	; (8000cfc <main+0x1d4>)
 8000bce:	f00d fc83 	bl	800e4d8 <puts>
	                  servoThread->startThread();
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	; (8000d00 <main+0x1d8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 ff9a 	bl	8001b10 <_ZN9pruThread11startThreadEv>

	                  threadsRunning = true;
 8000bdc:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <main+0x1c8>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
	              }

	              currentState = ST_IDLE;
 8000be2:	2302      	movs	r3, #2
 8000be4:	71fb      	strb	r3, [r7, #7]

	              break;
 8000be6:	e060      	b.n	8000caa <main+0x182>


	          case ST_IDLE:
	              // do something when idle
	              if (currentState != prevState)
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	79bb      	ldrb	r3, [r7, #6]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d002      	beq.n	8000bf6 <main+0xce>
	              {
	                  printf("\n## Entering IDLE state\n");
 8000bf0:	4844      	ldr	r0, [pc, #272]	; (8000d04 <main+0x1dc>)
 8000bf2:	f00d fc71 	bl	800e4d8 <puts>
	              }
	              prevState = currentState;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	71bb      	strb	r3, [r7, #6]

	              //wait for data before changing to running state
	              if (comms->getStatus())
 8000bfa:	4b43      	ldr	r3, [pc, #268]	; (8000d08 <main+0x1e0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 ff02 	bl	8001a08 <_ZN11RemoraComms9getStatusEv>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d04c      	beq.n	8000ca4 <main+0x17c>
	              {
	                  currentState = ST_RUNNING;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	71fb      	strb	r3, [r7, #7]
	              }

	              break;
 8000c0e:	e049      	b.n	8000ca4 <main+0x17c>

	          case ST_RUNNING:
	              // do running tasks
	              if (currentState != prevState)
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d002      	beq.n	8000c1e <main+0xf6>
	              {
	                  printf("\n## Entering RUNNING state\n");
 8000c18:	483c      	ldr	r0, [pc, #240]	; (8000d0c <main+0x1e4>)
 8000c1a:	f00d fc5d 	bl	800e4d8 <puts>
	              }
	              prevState = currentState;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	71bb      	strb	r3, [r7, #6]

	              if (comms->getStatus() == false)
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <main+0x1e0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 feee 	bl	8001a08 <_ZN11RemoraComms9getStatusEv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d035      	beq.n	8000ca8 <main+0x180>
	              {
	            	  currentState = ST_RESET;
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	71fb      	strb	r3, [r7, #7]
	              }

	              break;
 8000c40:	e032      	b.n	8000ca8 <main+0x180>

	          case ST_STOP:
	              // do stop tasks
	              if (currentState != prevState)
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d002      	beq.n	8000c50 <main+0x128>
	              {
	                  printf("\n## Entering STOP state\n");
 8000c4a:	4831      	ldr	r0, [pc, #196]	; (8000d10 <main+0x1e8>)
 8000c4c:	f00d fc44 	bl	800e4d8 <puts>
	              }
	              prevState = currentState;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	71bb      	strb	r3, [r7, #6]


	              currentState = ST_STOP;
 8000c54:	2304      	movs	r3, #4
 8000c56:	71fb      	strb	r3, [r7, #7]
	              break;
 8000c58:	e027      	b.n	8000caa <main+0x182>

	          case ST_RESET:
	              // do reset tasks
	              if (currentState != prevState)
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d002      	beq.n	8000c68 <main+0x140>
	              {
	                  printf("\n## Entering RESET state\n");
 8000c62:	482c      	ldr	r0, [pc, #176]	; (8000d14 <main+0x1ec>)
 8000c64:	f00d fc38 	bl	800e4d8 <puts>
	              }
	              prevState = currentState;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	71bb      	strb	r3, [r7, #6]

	              // set all of the rxData buffer to 0
	              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile
	              printf("   Resetting rxBuffer\n");
 8000c6c:	482a      	ldr	r0, [pc, #168]	; (8000d18 <main+0x1f0>)
 8000c6e:	f00d fc33 	bl	800e4d8 <puts>
	              {
	                  int n = sizeof(rxData.rxBuffer);
 8000c72:	2344      	movs	r3, #68	; 0x44
 8000c74:	603b      	str	r3, [r7, #0]
	                  while(n-- > 0)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	603a      	str	r2, [r7, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bfcc      	ite	gt
 8000c80:	2301      	movgt	r3, #1
 8000c82:	2300      	movle	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d005      	beq.n	8000c96 <main+0x16e>
	                  {
	                      rxData.rxBuffer[n] = 0;
 8000c8a:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <main+0x1f4>)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
	                  while(n-- > 0)
 8000c94:	e7ef      	b.n	8000c76 <main+0x14e>
	                  }
	              }

	              currentState = ST_IDLE;
 8000c96:	2302      	movs	r3, #2
 8000c98:	71fb      	strb	r3, [r7, #7]
	              break;
 8000c9a:	e006      	b.n	8000caa <main+0x182>

	          case ST_WDRESET:
	              // do a watch dog reset
	              printf("\n## Entering WDRESET state\n");
 8000c9c:	4820      	ldr	r0, [pc, #128]	; (8000d20 <main+0x1f8>)
 8000c9e:	f00d fc1b 	bl	800e4d8 <puts>

	              // force a watchdog reset by looping here
	              while(1){}
 8000ca2:	e7fe      	b.n	8000ca2 <main+0x17a>
	              break;
 8000ca4:	bf00      	nop
 8000ca6:	e000      	b.n	8000caa <main+0x182>
	              break;
 8000ca8:	bf00      	nop

	              break;
	  }

	  // do Ethernet tasks
	  ethernetif_input(&gnetif);
 8000caa:	481e      	ldr	r0, [pc, #120]	; (8000d24 <main+0x1fc>)
 8000cac:	f004 fa90 	bl	80051d0 <ethernetif_input>
	  sys_check_timeouts();
 8000cb0:	f00a fbf4 	bl	800b49c <sys_check_timeouts>

	  if (newJson)
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <main+0x200>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f43f af46 	beq.w	8000b4c <main+0x24>
	  {
		  printf("\n\nChecking new configuration file\n");
 8000cc0:	481a      	ldr	r0, [pc, #104]	; (8000d2c <main+0x204>)
 8000cc2:	f00d fc09 	bl	800e4d8 <puts>
		  if (checkJson() > 0)
 8000cc6:	f7ff fe7f 	bl	80009c8 <_Z9checkJsonv>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f43f af38 	beq.w	8000b4c <main+0x24>
		  {
			  moveJson();
 8000cdc:	f7ff fee6 	bl	8000aac <_Z8moveJsonv>
		  }
	  }
  }
 8000ce0:	e734      	b.n	8000b4c <main+0x24>
 8000ce2:	bf00      	nop
 8000ce4:	0800f4c0 	.word	0x0800f4c0
 8000ce8:	0800f4d8 	.word	0x0800f4d8
 8000cec:	0800f4f4 	.word	0x0800f4f4
 8000cf0:	20000114 	.word	0x20000114
 8000cf4:	0800f510 	.word	0x0800f510
 8000cf8:	2000011c 	.word	0x2000011c
 8000cfc:	0800f52c 	.word	0x0800f52c
 8000d00:	20000118 	.word	0x20000118
 8000d04:	0800f548 	.word	0x0800f548
 8000d08:	200001ec 	.word	0x200001ec
 8000d0c:	0800f560 	.word	0x0800f560
 8000d10:	0800f57c 	.word	0x0800f57c
 8000d14:	0800f594 	.word	0x0800f594
 8000d18:	0800f5b0 	.word	0x0800f5b0
 8000d1c:	20000164 	.word	0x20000164
 8000d20:	0800f5c8 	.word	0x0800f5c8
 8000d24:	200000e0 	.word	0x200000e0
 8000d28:	20000230 	.word	0x20000230
 8000d2c:	0800f5e4 	.word	0x0800f5e4

08000d30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b092      	sub	sp, #72	; 0x48
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	2230      	movs	r2, #48	; 0x30
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00d fa96 	bl	800e270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d64:	2319      	movs	r3, #25
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d68:	23f0      	movs	r3, #240	; 0xf0
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d70:	2304      	movs	r3, #4
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 ffff 	bl	8003d7c <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000d8e:	f000 f84d 	bl	8000e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d92:	230f      	movs	r3, #15
 8000d94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d96:	2302      	movs	r3, #2
 8000d98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2103      	movs	r1, #3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 fa34 	bl	800421c <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bf14      	ite	ne
 8000dba:	2301      	movne	r3, #1
 8000dbc:	2300      	moveq	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8000dc4:	f000 f832 	bl	8000e2c <Error_Handler>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3748      	adds	r7, #72	; 0x48
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e06:	4807      	ldr	r0, [pc, #28]	; (8000e24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e08:	f003 fbf8 	bl	80045fc <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000e1c:	f000 f806 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000009c 	.word	0x2000009c
 8000e28:	40004400 	.word	0x40004400

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <_Z14udpServer_initv>:
}
#endif /* USE_FULL_ASSERT */


void udpServer_init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb, *upcb2;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000e3e:	f00a ff17 	bl	800bc70 <udp_new>
 8000e42:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 10, 10, 10, 10);
 8000e44:	f04f 330a 	mov.w	r3, #168430090	; 0xa0a0a0a
 8000e48:	603b      	str	r3, [r7, #0]

   err = udp_bind(upcb, &myIPADDR, 27181);  // 27181 is the server UDP port
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	f646 222d 	movw	r2, #27181	; 0x6a2d
 8000e50:	4619      	mov	r1, r3
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f00a fdec 	bl	800ba30 <udp_bind>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000e5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d105      	bne.n	8000e70 <_Z14udpServer_initv+0x38>
   {
	   udp_recv(upcb, udp_data_callback, NULL);
 8000e64:	2200      	movs	r2, #0
 8000e66:	4912      	ldr	r1, [pc, #72]	; (8000eb0 <_Z14udpServer_initv+0x78>)
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f00a febd 	bl	800bbe8 <udp_recv>
 8000e6e:	e002      	b.n	8000e76 <_Z14udpServer_initv+0x3e>
   }
   else
   {
	   udp_remove(upcb);
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f00a fecb 	bl	800bc0c <udp_remove>
   }


   // Try making a second UDP control block...?

   upcb2 = udp_new();
 8000e76:	f00a fefb 	bl	800bc70 <udp_new>
 8000e7a:	6078      	str	r0, [r7, #4]
   err = udp_bind(upcb2, &myIPADDR, 27182);  // 27182 is the server UDP port for NVMPG
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	f646 222e 	movw	r2, #27182	; 0x6a2e
 8000e82:	4619      	mov	r1, r3
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f00a fdd3 	bl	800ba30 <udp_bind>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	72fb      	strb	r3, [r7, #11]

   if(err == ERR_OK)
 8000e8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d105      	bne.n	8000ea2 <_Z14udpServer_initv+0x6a>
   {
	   udp_recv(upcb2, udp_mpg_callback, NULL);
 8000e96:	2200      	movs	r2, #0
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <_Z14udpServer_initv+0x7c>)
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f00a fea4 	bl	800bbe8 <udp_recv>
   }
   else
   {
	   udp_remove(upcb2);
   }
}
 8000ea0:	e002      	b.n	8000ea8 <_Z14udpServer_initv+0x70>
	   udp_remove(upcb2);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f00a feb2 	bl	800bc0c <udp_remove>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	08000eb9 	.word	0x08000eb9
 8000eb4:	08000fa9 	.word	0x08000fa9

08000eb8 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:

void udp_data_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
	int txlen = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
	struct pbuf *txBuf;

	// copy the UDP payload into the rxData structure
	memcpy(&rxBuffer.rxBuffer, p->payload, p->len);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6859      	ldr	r1, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	895b      	ldrh	r3, [r3, #10]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	482c      	ldr	r0, [pc, #176]	; (8000f88 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 8000ed6:	f00d f9bd 	bl	800e254 <memcpy>

	if (rxBuffer.header == PRU_READ)
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2b      	ldr	r2, [pc, #172]	; (8000f8c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d10a      	bne.n	8000efa <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x42>
	{
		txData.header = PRU_DATA;
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 8000ee6:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xdc>)
 8000ee8:	601a      	str	r2, [r3, #0]
		txlen = BUFFER_SIZE;
 8000eea:	2344      	movs	r3, #68	; 0x44
 8000eec:	61fb      	str	r3, [r7, #28]
		comms->dataReceived();
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fd7c 	bl	80019f0 <_ZN11RemoraComms12dataReceivedEv>
 8000ef8:	e020      	b.n	8000f3c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
	}
	else if (rxBuffer.header == PRU_WRITE)
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d11b      	bne.n	8000f3c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
	{
		txData.header = PRU_ACKNOWLEDGE;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 8000f06:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe8>)
 8000f08:	601a      	str	r2, [r3, #0]
		txlen = sizeof(txData.header);
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	61fb      	str	r3, [r7, #28]
		comms->dataReceived();
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fd6c 	bl	80019f0 <_ZN11RemoraComms12dataReceivedEv>

		// then move the data
		for (int i = 0; i < BUFFER_SIZE; i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2b43      	cmp	r3, #67	; 0x43
 8000f20:	dc0c      	bgt.n	8000f3c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
		{
			rxData.rxBuffer[i] = rxBuffer.rxBuffer[i];
 8000f22:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4413      	add	r3, r2
 8000f28:	7819      	ldrb	r1, [r3, #0]
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xec>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	4413      	add	r3, r2
 8000f30:	460a      	mov	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BUFFER_SIZE; i++)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	3301      	adds	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	e7ef      	b.n	8000f1c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x64>
		}
	}


	// allocate pbuf from RAM
	txBuf = pbuf_alloc(PBUF_TRANSPORT, txlen, PBUF_RAM);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	2000      	movs	r0, #0
 8000f46:	f004 ffd9 	bl	8005efc <pbuf_alloc>
 8000f4a:	6178      	str	r0, [r7, #20]

	// copy the data into the buffer
	pbuf_take(txBuf, (char*)&txData.txBuffer, txlen);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	490f      	ldr	r1, [pc, #60]	; (8000f90 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 8000f54:	6978      	ldr	r0, [r7, #20]
 8000f56:	f005 fdbb 	bl	8006ad0 <pbuf_take>

	// Connect to the remote client
	udp_connect(upcb, addr, port);
 8000f5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	68b8      	ldr	r0, [r7, #8]
 8000f62:	f00a fdd5 	bl	800bb10 <udp_connect>

	// Send a Reply to the Client
	udp_send(upcb, txBuf);
 8000f66:	6979      	ldr	r1, [r7, #20]
 8000f68:	68b8      	ldr	r0, [r7, #8]
 8000f6a:	f00a fc47 	bl	800b7fc <udp_send>

	// free the UDP connection, so we can accept new clients
	udp_disconnect(upcb);
 8000f6e:	68b8      	ldr	r0, [r7, #8]
 8000f70:	f00a fe24 	bl	800bbbc <udp_disconnect>

	// Free the p_tx buffer
	pbuf_free(txBuf);
 8000f74:	6978      	ldr	r0, [r7, #20]
 8000f76:	f005 fb33 	bl	80065e0 <pbuf_free>

	// Free the p buffer
	pbuf_free(p);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f005 fb30 	bl	80065e0 <pbuf_free>
}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000120 	.word	0x20000120
 8000f8c:	72656164 	.word	0x72656164
 8000f90:	200001a8 	.word	0x200001a8
 8000f94:	64617461 	.word	0x64617461
 8000f98:	200001ec 	.word	0x200001ec
 8000f9c:	77726974 	.word	0x77726974
 8000fa0:	61636b6e 	.word	0x61636b6e
 8000fa4:	20000164 	.word	0x20000164

08000fa8 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:


void udp_mpg_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	// copy the UDP payload into the nvmpg structure
	memcpy(&mpgData.payload, p->payload, p->len);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6859      	ldr	r1, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	895b      	ldrh	r3, [r3, #10]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x48>)
 8000fc2:	f00d f947 	bl	800e254 <memcpy>

	// Free the p buffer
	pbuf_free(p);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f005 fb0a 	bl	80065e0 <pbuf_free>

	if (mpgData.header == PRU_NVMPG)
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x48>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x4c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d108      	bne.n	8000fe8 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x40>
	{
		// use a standard module interface to trigger the update of the MPG
		MPG->configure();
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x50>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x50>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3314      	adds	r3, #20
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4798      	blx	r3
	}
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200001f0 	.word	0x200001f0
 8000ff4:	6d706764 	.word	0x6d706764
 8000ff8:	2000022c 	.word	0x2000022c

08000ffc <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  FORCE_INLINE size_t size() const {
    return _data ? _data->size() : 0;
  }

 protected:
  ObjectRefBase(TData* data) : _data(data) {}
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b08b      	sub	sp, #44	; 0x2c
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4621      	mov	r1, r4
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f830 	bl	800108e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f103 0408 	add.w	r4, r3, #8
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	68f9      	ldr	r1, [r7, #12]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f80d 	bl	800105c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104c:	4620      	mov	r0, r4
 800104e:	f7ff fc08 	bl	8000862 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	3724      	adds	r7, #36	; 0x24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}

0800105c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fb8b 	bl	8000784 <_ZN19ArduinoJson6101_11010addPaddingEj>
 800106e:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	6979      	ldr	r1, [r7, #20]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f815 	bl	80010a4 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 800107a:	4603      	mov	r3, r0
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	4619      	mov	r1, r3
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff fb8e 	bl	80007a2 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	7039      	strb	r1, [r7, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fbf2 	bl	800089c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 80010b8:	4603      	mov	r3, r0
  }
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <_Z41__static_initialization_and_destruction_0ii>:
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d11e      	bne.n	8001112 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010da:	4293      	cmp	r3, r2
 80010dc:	d119      	bne.n	8001112 <_Z41__static_initialization_and_destruction_0ii+0x4e>
string strJson;
 80010de:	4816      	ldr	r0, [pc, #88]	; (8001138 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80010e0:	f00d f838 	bl	800e154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80010e4:	4622      	mov	r2, r4
 80010e6:	f242 7110 	movw	r1, #10000	; 0x2710
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80010ec:	f7ff ff94 	bl	8001018 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  typedef ObjectRefBase<CollectionData> base_type;

 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff81 	bl	8000ffc <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff79 	bl	8000ffc <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	bf00      	nop
JsonObject module;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10a      	bne.n	800112e <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111e:	4293      	cmp	r3, r2
 8001120:	d105      	bne.n	800112e <_Z41__static_initialization_and_destruction_0ii+0x6a>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001124:	f000 f810 	bl	8001148 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
string strJson;
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800112a:	f00d f81a 	bl	800e162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	bf00      	nop
 8001138:	20000238 	.word	0x20000238
 800113c:	20000250 	.word	0x20000250
 8001140:	20000278 	.word	0x20000278
 8001144:	20000280 	.word	0x20000280

08001148 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    freePool();
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f805 	bl	8001160 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 8001168:	687c      	ldr	r4, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3308      	adds	r3, #8
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fb6d 	bl	800084e <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fb39 	bl	80007ee <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	4620      	mov	r0, r4
 8001182:	f000 f804 	bl	800118e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}

0800118e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fb8a 	bl	80008b6 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_GLOBAL__sub_I_TIM1_UP_TIM10_IRQHandler>:
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff ff86 	bl	80010c4 <_Z41__static_initialization_and_destruction_0ii>
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_GLOBAL__sub_D_TIM1_UP_TIM10_IRQHandler>:
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
 80011be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff ff7e 	bl	80010c4 <_Z41__static_initialization_and_destruction_0ii>
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_MspInit>:

                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x48>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x48>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x48>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_MspInit+0x48>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_MspInit+0x48>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_MspInit+0x48>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_UART_MspInit+0xe8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12d      	bne.n	8001296 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <HAL_UART_MspInit+0xec>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <HAL_UART_MspInit+0xec>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <HAL_UART_MspInit+0xec>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_UART_MspInit+0xec>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a29      	ldr	r2, [pc, #164]	; (8001304 <HAL_UART_MspInit+0xec>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_UART_MspInit+0xec>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001272:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001284:	2307      	movs	r3, #7
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	481e      	ldr	r0, [pc, #120]	; (8001308 <HAL_UART_MspInit+0xf0>)
 8001290:	f002 fbd6 	bl	8003a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001294:	e030      	b.n	80012f8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <HAL_UART_MspInit+0xf4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d12b      	bne.n	80012f8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_UART_MspInit+0xec>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <HAL_UART_MspInit+0xec>)
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_UART_MspInit+0xec>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_UART_MspInit+0xec>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_UART_MspInit+0xec>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_UART_MspInit+0xec>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e8:	2307      	movs	r3, #7
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <HAL_UART_MspInit+0xf8>)
 80012f4:	f002 fba4 	bl	8003a40 <HAL_GPIO_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40011000 	.word	0x40011000
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40004400 	.word	0x40004400
 8001310:	40020c00 	.word	0x40020c00

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 fe77 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}

08001362 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
	return 1;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <_kill+0x20>)
 800137c:	2216      	movs	r2, #22
 800137e:	601a      	str	r2, [r3, #0]
	return -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20006bc4 	.word	0x20006bc4

08001394 <_exit>:

void _exit (int status)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ffe5 	bl	8001370 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013a6:	e7fe      	b.n	80013a6 <_exit+0x12>

080013a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
	}

return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e009      	b.n	8001408 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fad1 	bl	80009a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf1      	blt.n	80013f4 <_write+0x12>
	}
	return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_close>:

int _close(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001440:	605a      	str	r2, [r3, #4]
	return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <_isatty>:

int _isatty(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return 1;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
	return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d205      	bcs.n	80014b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <_sbrk+0x6c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2001c000 	.word	0x2001c000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	20000288 	.word	0x20000288
 80014e4:	20006bd8 	.word	0x20006bd8
 80014e8:	20006bc4 	.word	0x20006bc4

080014ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <_ZL18IAP_tftp_decode_opPc>:
  * @brief Returns the TFTP opcode
  * @param buf: pointer on the TFTP packet
  * @retval None
  */
static tftp_opcode IAP_tftp_decode_op(char *buf)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3301      	adds	r3, #1
 8001504:	781b      	ldrb	r3, [r3, #0]
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <_ZL22IAP_tftp_extract_blockPc>:
  * @brief  Extracts the block number
  * @param  buf: pointer on the TFTP packet
  * @retval block number
  */
static u16_t IAP_tftp_extract_block(char *buf)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3302      	adds	r3, #2
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f003 ff2f 	bl	8005386 <lwip_htons>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_ZL19IAP_tftp_set_opcodePc11tftp_opcode>:
  * @param  buffer: pointer on the TFTP packet
  * @param  opcode: TFTP opcode
  * @retval None
  */
static void IAP_tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	70fb      	strb	r3, [r7, #3]
  buffer[0] = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <_ZL18IAP_tftp_set_blockPct>:
  * @param packet: pointer on the TFTP packet
  * @param  block: block number
  * @retval None
  */
static void IAP_tftp_set_block(char* packet, u16_t block)
{
 8001556:	b590      	push	{r4, r7, lr}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	807b      	strh	r3, [r7, #2]
  u16_t *p = (u16_t *)packet;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1c9c      	adds	r4, r3, #2
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	4618      	mov	r0, r3
 800156e:	f003 ff0a 	bl	8005386 <lwip_htons>
 8001572:	4603      	mov	r3, r0
 8001574:	8023      	strh	r3, [r4, #0]
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bd90      	pop	{r4, r7, pc}

0800157e <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>:
  * @param to_port: receive port number
  * @param block: block number
  * @retval: err_t: error code
  */
static err_t IAP_tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, int block)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b088      	sub	sp, #32
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	603b      	str	r3, [r7, #0]
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

	memset(packet, 0, TFTP_ACK_PKT_LEN *sizeof(char));
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2204      	movs	r2, #4
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f00c fe6b 	bl	800e270 <memset>

  /* define the first two bytes of the packet */
  IAP_tftp_set_opcode(packet, TFTP_ACK);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	2104      	movs	r1, #4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ffc6 	bl	8001532 <_ZL19IAP_tftp_set_opcodePc11tftp_opcode>
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement".  This saves from having to sEndTransferboth
   * an ACK packet and a DATA packet for RRQs - see RFC1350 for more info.  */
  IAP_tftp_set_block(packet, block);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ffd0 	bl	8001556 <_ZL18IAP_tftp_set_blockPct>

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, TFTP_ACK_PKT_LEN, PBUF_POOL);
 80015b6:	2203      	movs	r2, #3
 80015b8:	2104      	movs	r1, #4
 80015ba:	2000      	movs	r0, #0
 80015bc:	f004 fc9e 	bl	8005efc <pbuf_alloc>
 80015c0:	61f8      	str	r0, [r7, #28]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and EndTransfertransmission */
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii+0x50>
  {
    return ERR_MEM;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	e011      	b.n	80015f2 <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii+0x74>
  }

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, packet, TFTP_ACK_PKT_LEN);
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to, to_port);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	69f9      	ldr	r1, [r7, #28]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f00a f924 	bl	800b82c <udp_sendto>
 80015e4:	4603      	mov	r3, r0
 80015e6:	76fb      	strb	r3, [r7, #27]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 80015e8:	69f8      	ldr	r0, [r7, #28]
 80015ea:	f004 fff9 	bl	80065e0 <pbuf_free>

  return err;
 80015ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:
  * @param ip_addr: pointer on the receive IP_address structure
  * @param port: receive port address
  * @retval None
  */
static void IAP_wrq_recv_callback(void *_args, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8001602:	af00      	add	r7, sp, #0
 8001604:	f107 040c 	add.w	r4, r7, #12
 8001608:	6020      	str	r0, [r4, #0]
 800160a:	f107 0008 	add.w	r0, r7, #8
 800160e:	6001      	str	r1, [r0, #0]
 8001610:	1d39      	adds	r1, r7, #4
 8001612:	600a      	str	r2, [r1, #0]
 8001614:	463a      	mov	r2, r7
 8001616:	6013      	str	r3, [r2, #0]
  tftp_connection_args *args = (tftp_connection_args *)_args;
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  uint32_t data_buffer[128];
  uint16_t count=0;
 8001622:	2300      	movs	r3, #0
 8001624:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

  if (pkt_buf->len != pkt_buf->tot_len)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	895a      	ldrh	r2, [r3, #10]
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	891b      	ldrh	r3, [r3, #8]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 80a9 	bne.w	800178c <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x190>
  {
    return;
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	895b      	ldrh	r3, [r3, #10]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d910      	bls.n	8001666 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6a>
      (IAP_tftp_extract_block((char*)pkt_buf->payload) == (args->block + 1)))
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff60 	bl	8001510 <_ZL22IAP_tftp_extract_blockPc>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001658:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800165c:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 800165e:	429a      	cmp	r2, r3
 8001660:	d101      	bne.n	8001666 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6a>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6c>
 8001666:	2300      	movs	r3, #0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d04b      	beq.n	8001704 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x108>
  {
    /* copy packet payload to data_buffer */
    pbuf_copy_partial(pkt_buf, data_buffer, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN,
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	895b      	ldrh	r3, [r3, #10]
 8001672:	3b04      	subs	r3, #4
 8001674:	b29a      	uxth	r2, r3
 8001676:	f107 0110 	add.w	r1, r7, #16
 800167a:	1d38      	adds	r0, r7, #4
 800167c:	2304      	movs	r3, #4
 800167e:	6800      	ldr	r0, [r0, #0]
 8001680:	f005 f9ac 	bl	80069dc <pbuf_copy_partial>
                      TFTP_DATA_PKT_HDR_LEN);

    total_count += pkt_buf->len - TFTP_DATA_PKT_HDR_LEN;
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	895b      	ldrh	r3, [r3, #10]
 800168a:	461a      	mov	r2, r3
 800168c:	4b42      	ldr	r3, [pc, #264]	; (8001798 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x19c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4413      	add	r3, r2
 8001692:	3b04      	subs	r3, #4
 8001694:	4a40      	ldr	r2, [pc, #256]	; (8001798 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x19c>)
 8001696:	6013      	str	r3, [r2, #0]

    count = (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)/4;
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	895b      	ldrh	r3, [r3, #10]
 800169e:	3b04      	subs	r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da00      	bge.n	80016a6 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xaa>
 80016a4:	3303      	adds	r3, #3
 80016a6:	109b      	asrs	r3, r3, #2
 80016a8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    if (((pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)%4)!=0)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	895b      	ldrh	r3, [r3, #10]
 80016b2:	3b04      	subs	r3, #4
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xca>
    count++;
 80016bc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80016c0:	3301      	adds	r3, #1
 80016c2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

    /* Write received data in Flash */
    FLASH_If_Write(&Flash_Write_Address, data_buffer ,count);
 80016c6:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	4832      	ldr	r0, [pc, #200]	; (800179c <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x1a0>)
 80016d2:	f7fe ffdb 	bl	800068c <_Z14FLASH_If_WritePVmPmt>

    /* update our block number to match the block number just received */
    args->block++;
 80016d6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80016da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80016e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 80016e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80016ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	895b      	ldrh	r3, [r3, #10]
 80016f6:	3b04      	subs	r3, #4
 80016f8:	441a      	add	r2, r3
 80016fa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80016fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001702:	e01c      	b.n	800173e <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x142>

    /* This is a valid pkt but it has no data.  This would occur if the file being
       written is an exact multiple of 512 bytes.  In this case, the args->block
       value must still be updated, but we can skip everything else.    */
  }
  else if (IAP_tftp_extract_block((char*)pkt_buf->payload) == (args->block + 1))
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff00 	bl	8001510 <_ZL22IAP_tftp_extract_blockPc>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001718:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800171c:	3301      	adds	r3, #1
 800171e:	429a      	cmp	r2, r3
 8001720:	bf0c      	ite	eq
 8001722:	2301      	moveq	r3, #1
 8001724:	2300      	movne	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x142>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 800172c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001730:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800173a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Send the appropriate ACK pkt*/
  IAP_tftp_send_ack_packet(upcb, addr, port, args->block);
 800173e:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001742:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800174a:	4639      	mov	r1, r7
 800174c:	f107 0008 	add.w	r0, r7, #8
 8001750:	6809      	ldr	r1, [r1, #0]
 8001752:	6800      	ldr	r0, [r0, #0]
 8001754:	f7ff ff13 	bl	800157e <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the EndTransferof a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	895b      	ldrh	r3, [r3, #10]
 800175e:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001762:	d20e      	bcs.n	8001782 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x186>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	f000 f8a1 	bl	80018b4 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>
    pbuf_free(pkt_buf);
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	f004 ff33 	bl	80065e0 <pbuf_free>
    newJson = true;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x1a4>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e005      	b.n	800178e <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x192>
  }
  else
  {
    pbuf_free(pkt_buf);
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f004 ff2b 	bl	80065e0 <pbuf_free>
    return;
 800178a:	e000      	b.n	800178e <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x192>
    return;
 800178c:	bf00      	nop
  }
}
 800178e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	20000294 	.word	0x20000294
 800179c:	2000028c 	.word	0x2000028c
 80017a0:	20000230 	.word	0x20000230

080017a4 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri>:
  * @param  to: pointer on the receive IP address
  * @param  to_port: receive port number
  * @retval None
  */
static int IAP_tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, int to_port)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  tftp_connection_args *args = NULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  /* This function is called from a callback,
  * therefore interrupts are disabled,
  * therefore we can use regular malloc   */
  args = (tftp_connection_args*)mem_malloc(sizeof *args);
 80017b4:	f44f 700a 	mov.w	r0, #552	; 0x228
 80017b8:	f004 f832 	bl	8005820 <mem_malloc>
 80017bc:	6178      	str	r0, [r7, #20]
  if (!args)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x2c>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 80017c4:	6979      	ldr	r1, [r7, #20]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f874 	bl	80018b4 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>
    return 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e02c      	b.n	800182a <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x86>
  }

  args->op = TFTP_WRQ;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  /* set callback for receives on this UDP PCB (Protocol Control Block) */
  udp_recv(upcb, IAP_wrq_recv_callback, args);
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x90>)
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f00a f9f3 	bl	800bbe8 <udp_recv>

  total_count =0;
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x94>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

  /* init flash */
  FLASH_If_Init();
 8001808:	f7fe ff08 	bl	800061c <_Z13FLASH_If_Initv>

  /* erase user flash area */
  FLASH_If_Erase(JSON_UPLOAD_ADDRESS);
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x98>)
 800180e:	f7fe ff0b 	bl	8000628 <_Z14FLASH_If_Erasem>

  Flash_Write_Address = JSON_UPLOAD_ADDRESS;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x9c>)
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x98>)
 8001816:	601a      	str	r2, [r3, #0]
  /* initiate the write transaction by sending the first ack */
  IAP_tftp_send_ack_packet(upcb, to, to_port, args->block);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff feab 	bl	800157e <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>

  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	080015fd 	.word	0x080015fd
 8001838:	20000294 	.word	0x20000294
 800183c:	080d0000 	.word	0x080d0000
 8001840:	2000028c 	.word	0x2000028c

08001844 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:
  * @param  port: receive port number
  * @retval None
  */
static void IAP_tftp_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
  tftp_opcode op;
  struct udp_pcb *upcb_tftp_data;
  err_t err;

  /* create new UDP PCB structure */
  upcb_tftp_data = udp_new();
 8001852:	f00a fa0d 	bl	800bc70 <udp_new>
 8001856:	6178      	str	r0, [r7, #20]
  if (!upcb_tftp_data)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d022      	beq.n	80018a4 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x60>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
  * 69 which al transactions begin communication on, however, _all_ subsequent
  * transactions for a given "stream" occur on another port  */
  err = udp_bind(upcb_tftp_data, IP_ADDR_ANY, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	4913      	ldr	r1, [pc, #76]	; (80018b0 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6c>)
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f00a f8e4 	bl	800ba30 <udp_bind>
 8001868:	4603      	mov	r3, r0
 800186a:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK)
 800186c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d119      	bne.n	80018a8 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x64>
  {
    /* Unable to bind to port */
    return;
  }

  op = IAP_tftp_decode_op((char*)pkt_buf->payload);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fe3d 	bl	80014f8 <_ZL18IAP_tftp_decode_opPc>
 800187e:	4603      	mov	r3, r0
 8001880:	74bb      	strb	r3, [r7, #18]
  if (op != TFTP_WRQ)
 8001882:	7cbb      	ldrb	r3, [r7, #18]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d003      	beq.n	8001890 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x4c>
  {
    /* remove PCB */
    udp_remove(upcb_tftp_data);
 8001888:	6978      	ldr	r0, [r7, #20]
 800188a:	f00a f9bf 	bl	800bc0c <udp_remove>
 800188e:	e005      	b.n	800189c <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x58>
  }
  else
  {
    /* Start the TFTP write mode*/
    IAP_tftp_process_write(upcb_tftp_data, addr, port);
 8001890:	8c3b      	ldrh	r3, [r7, #32]
 8001892:	461a      	mov	r2, r3
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff84 	bl	80017a4 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri>
  }
  pbuf_free(pkt_buf);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f004 fe9f 	bl	80065e0 <pbuf_free>
 80018a2:	e002      	b.n	80018aa <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x66>
    return;
 80018a4:	bf00      	nop
 80018a6:	e000      	b.n	80018aa <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x66>
    return;
 80018a8:	bf00      	nop
}
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0801146c 	.word	0x0801146c

080018b4 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>:
  * @param  upcb: pointer on udp_pcb structure
  * @param  args: pointer on tftp_connection arguments
  * @retval None
  */
static void IAP_tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  /* Free the tftp_connection_args structure */
  mem_free(args);
 80018be:	6838      	ldr	r0, [r7, #0]
 80018c0:	f003 fe70 	bl	80055a4 <mem_free>

  /* Disconnect the udp_pcb */
  udp_disconnect(upcb);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f00a f979 	bl	800bbbc <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f00a f99e 	bl	800bc0c <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args+0x34>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	4905      	ldr	r1, [pc, #20]	; (80018ec <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args+0x38>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f00a f985 	bl	800bbe8 <udp_recv>

}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000290 	.word	0x20000290
 80018ec:	08001845 	.word	0x08001845

080018f0 <_Z14IAP_tftpd_initv>:
  * @brief  Creates and initializes a UDP PCB for TFTP receive operation
  * @param  None
  * @retval None
  */
void IAP_tftpd_init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69; /* 69 is the port used for TFTP protocol initial transaction */
 80018f6:	2345      	movs	r3, #69	; 0x45
 80018f8:	607b      	str	r3, [r7, #4]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 80018fa:	f00a f9b9 	bl	800bc70 <udp_new>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <_Z14IAP_tftpd_initv+0x50>)
 8001902:	6013      	str	r3, [r2, #0]
  if (!UDPpcb)
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <_Z14IAP_tftpd_initv+0x50>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <_Z14IAP_tftpd_initv+0x48>
    /* Error creating PCB. Out of Memory  */
    return;
  }

  /* Bind this PCB to port 69  */
  err = udp_bind(UDPpcb, IP_ADDR_ANY, port);
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <_Z14IAP_tftpd_initv+0x50>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	b292      	uxth	r2, r2
 8001914:	490b      	ldr	r1, [pc, #44]	; (8001944 <_Z14IAP_tftpd_initv+0x54>)
 8001916:	4618      	mov	r0, r3
 8001918:	f00a f88a 	bl	800ba30 <udp_bind>
 800191c:	4603      	mov	r3, r0
 800191e:	70fb      	strb	r3, [r7, #3]
  if (err == ERR_OK)
 8001920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d108      	bne.n	800193a <_Z14IAP_tftpd_initv+0x4a>
  {
    /* Initialize receive callback function  */
    udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <_Z14IAP_tftpd_initv+0x50>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	4906      	ldr	r1, [pc, #24]	; (8001948 <_Z14IAP_tftpd_initv+0x58>)
 8001930:	4618      	mov	r0, r3
 8001932:	f00a f959 	bl	800bbe8 <udp_recv>
 8001936:	e000      	b.n	800193a <_Z14IAP_tftpd_initv+0x4a>
    return;
 8001938:	bf00      	nop
  }
}
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000290 	.word	0x20000290
 8001944:	0801146c 	.word	0x0801146c
 8001948:	08001845 	.word	0x08001845

0800194c <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <_ZN9InterruptC1Ev+0x1c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	0801138c 	.word	0x0801138c

0800196c <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 800197a:	f00c fd27 	bl	800e3cc <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 800197e:	4905      	ldr	r1, [pc, #20]	; (8001994 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	0800f608 	.word	0x0800f608
 8001994:	20000298 	.word	0x20000298

08001998 <_ZN9Interrupt12TIM1_WrapperEv>:

void Interrupt::TIM1_Wrapper(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM1_UP_TIM10_IRQn]->ISR_Handler();
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <_ZN9Interrupt12TIM1_WrapperEv+0x18>)
 800199e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <_ZN9Interrupt12TIM1_WrapperEv+0x18>)
 80019a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4610      	mov	r0, r2
 80019aa:	4798      	blx	r3
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000298 	.word	0x20000298

080019b4 <_ZN9Interrupt12TIM2_WrapperEv>:

void Interrupt::TIM2_Wrapper(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 80019ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4610      	mov	r0, r2
 80019c6:	4798      	blx	r3
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000298 	.word	0x20000298

080019d0 <_ZN9Interrupt20DMA2_Stream2_WrapperEv>:
{
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
}

void Interrupt::DMA2_Stream2_Wrapper(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA2_Stream2_IRQn]->ISR_Handler();
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <_ZN9Interrupt20DMA2_Stream2_WrapperEv+0x1c>)
 80019d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <_ZN9Interrupt20DMA2_Stream2_WrapperEv+0x1c>)
 80019dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4610      	mov	r0, r2
 80019e6:	4798      	blx	r3
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000298 	.word	0x20000298

080019f0 <_ZN11RemoraComms12dataReceivedEv>:
}



void RemoraComms::dataReceived()
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	this->data= true;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	751a      	strb	r2, [r3, #20]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <_ZN11RemoraComms9getStatusEv>:


bool RemoraComms::getStatus()
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	return this->status;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7d5b      	ldrb	r3, [r3, #21]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <_ZN6Module9runModuleEv>:

Module::~Module(){}


void Module::runModule()
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	++this->counter;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	db08      	blt.n	8001a4e <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3310      	adds	r3, #16
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
		this->counter = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3308      	adds	r3, #8
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	this->updatePost();
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	330c      	adds	r3, #12
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f8bd 	bl	8001c08 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffeb 	bl	8001a7e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	71fb      	strb	r3, [r7, #7]
	timer(timer),
	irq(irq),
	frequency(frequency)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	79fa      	ldrb	r2, [r7, #7]
 8001ace:	721a      	strb	r2, [r3, #8]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3314      	adds	r3, #20
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ffdc 	bl	8001a98 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ffd7 	bl	8001a98 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	332c      	adds	r3, #44	; 0x2c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f89a 	bl	8001c28 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("Creating thread %d\n", this->frequency);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4804      	ldr	r0, [pc, #16]	; (8001b0c <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 8001afc:	f00c fc66 	bl	800e3cc <iprintf>
}
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	0800f63c 	.word	0x0800f63c

08001b10 <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 8001b18:	2014      	movs	r0, #20
 8001b1a:	f00c faff 	bl	800e11c <_Znwj>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461c      	mov	r4, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6859      	ldr	r1, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68d8      	ldr	r0, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4603      	mov	r3, r0
 8001b36:	4620      	mov	r0, r4
 8001b38:	f000 f934 	bl	8001da4 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601c      	str	r4, [r3, #0]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}

08001b48 <_ZN9pruThread3runEv>:
	this->hasThreadPost = true;
}


void pruThread::run(void)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3314      	adds	r3, #20
 8001b54:	687c      	ldr	r4, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f873 	bl	8001c42 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8001b5c:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3314      	adds	r3, #20
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f87a 	bl	8001c62 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	4619      	mov	r1, r3
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f000 f883 	bl	8001c84 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00f      	beq.n	8001ba4 <_ZN9pruThread3runEv+0x5c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	332c      	adds	r3, #44	; 0x2c
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f8a2 	bl	8001cd2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff43 	bl	8001a1e <_ZN6Module9runModuleEv>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	332c      	adds	r3, #44	; 0x2c
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f889 	bl	8001cb4 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 8001ba2:	e7dc      	b.n	8001b5e <_ZN9pruThread3runEv+0x16>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7c1b      	ldrb	r3, [r3, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d029      	beq.n	8001c00 <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3320      	adds	r3, #32
 8001bb0:	687c      	ldr	r4, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f845 	bl	8001c42 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8001bb8:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f84c 	bl	8001c62 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f000 f855 	bl	8001c84 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00f      	beq.n	8001c00 <_ZN9pruThread3runEv+0xb8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	332c      	adds	r3, #44	; 0x2c
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f874 	bl	8001cd2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8001bea:	4603      	mov	r3, r0
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff37 	bl	8001a62 <_ZN6Module13runModulePostEv>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	332c      	adds	r3, #44	; 0x2c
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f85b 	bl	8001cb4 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 8001bfe:	e7dc      	b.n	8001bba <_ZN9pruThread3runEv+0x72>
	}
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f869 	bl	8001ce8 <_ZNSaIP6ModuleEC1Ev>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f871 	bl	8001d00 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:
      typedef typename __traits_type::value_type  	value_type;
      typedef typename __traits_type::difference_type 	difference_type;
      typedef typename __traits_type::reference 	reference;
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f867 	bl	8001d26 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1d1a      	adds	r2, r3, #4
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f856 	bl	8001d26 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f858 	bl	8001d44 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8001c94:	4603      	mov	r3, r0
 8001c96:	681c      	ldr	r4, [r3, #0]
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	f000 f853 	bl	8001d44 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	429c      	cmp	r4, r3
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	1d1a      	adds	r2, r3, #4
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	601a      	str	r2, [r3, #0]
	return *this;
 8001cc6:	687b      	ldr	r3, [r7, #4]
      }
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f831 	bl	8001d58 <_ZN9__gnu_cxx13new_allocatorIP6ModuleEC1Ev>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
	{ }
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <_ZN9__gnu_cxx13new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <__NVIC_EnableIRQ>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4906      	ldr	r1, [pc, #24]	; (8001da0 <__NVIC_EnableIRQ+0x34>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71fb      	strb	r3, [r7, #7]
	timer(timer),
	irq(irq),
	frequency(frequency),
	timerOwnerPtr(ownerPtr)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	721a      	strb	r2, [r3, #8]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8001dcc:	2008      	movs	r0, #8
 8001dce:	f00c f9a5 	bl	800e11c <_Znwj>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461c      	mov	r4, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4620      	mov	r0, r4
 8001de2:	f000 f88d 	bl	8001f00 <_ZN14TimerInterruptC1EiP8pruTimer>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	601c      	str	r4, [r3, #0]

	this->startTimer();
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f812 	bl	8001e14 <_ZN8pruTimer10startTimerEv>
}
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}

08001dfa <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fe9e 	bl	8001b48 <_ZN9pruThread3runEv>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a31      	ldr	r2, [pc, #196]	; (8001ee8 <_ZN8pruTimer10startTimerEv+0xd4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d114      	bne.n	8001e50 <_ZN8pruTimer10startTimerEv+0x3c>
    {
        printf("	power on Timer 1\n\r");
 8001e26:	4831      	ldr	r0, [pc, #196]	; (8001eec <_ZN8pruTimer10startTimerEv+0xd8>)
 8001e28:	f00c fad0 	bl	800e3cc <iprintf>
        __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <_ZN8pruTimer10startTimerEv+0xdc>)
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <_ZN8pruTimer10startTimerEv+0xdc>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <_ZN8pruTimer10startTimerEv+0xdc>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB2CLK;
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <_ZN8pruTimer10startTimerEv+0xe0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e019      	b.n	8001e84 <_ZN8pruTimer10startTimerEv+0x70>
    }
    else if (this->timer == TIM2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d114      	bne.n	8001e84 <_ZN8pruTimer10startTimerEv+0x70>
    {
        printf("	power on Timer 2\n\r");
 8001e5a:	4827      	ldr	r0, [pc, #156]	; (8001ef8 <_ZN8pruTimer10startTimerEv+0xe4>)
 8001e5c:	f00c fab6 	bl	800e3cc <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <_ZN8pruTimer10startTimerEv+0xdc>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <_ZN8pruTimer10startTimerEv+0xdc>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <_ZN8pruTimer10startTimerEv+0xdc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <_ZN8pruTimer10startTimerEv+0xe0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	629a      	str	r2, [r3, #40]	; 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	3a01      	subs	r2, #1
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff4a 	bl	8001d6c <__NVIC_EnableIRQ>

    printf("	timer started\n");
 8001ed8:	4808      	ldr	r0, [pc, #32]	; (8001efc <_ZN8pruTimer10startTimerEv+0xe8>)
 8001eda:	f00c fafd 	bl	800e4d8 <puts>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	0800f66c 	.word	0x0800f66c
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	0800f680 	.word	0x0800f680
 8001efc:	0800f694 	.word	0x0800f694

08001f00 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fd1c 	bl	800194c <_ZN9InterruptC1Ev>
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4619      	mov	r1, r3
 8001f24:	68b8      	ldr	r0, [r7, #8]
 8001f26:	f7ff fd21 	bl	800196c <_ZN9Interrupt8RegisterEiPS_>
}
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	08011398 	.word	0x08011398

08001f38 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff58 	bl	8001dfa <_ZN8pruTimer9timerTickEv>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f5a:	490e      	ldr	r1, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f70:	4c0b      	ldr	r4, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f7e:	f7ff fab5 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f00c f917 	bl	800e1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7fe fdcf 	bl	8000b28 <main>
  bx  lr
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f8c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001f98:	08011530 	.word	0x08011530
  ldr r2, =_sbss
 8001f9c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001fa0:	20006bd4 	.word	0x20006bd4

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_Init+0x40>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_Init+0x40>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_Init+0x40>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 f92b 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	200f      	movs	r0, #15
 8001fd8:	f000 f808 	bl	8001fec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff f8f6 	bl	80011cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f935 	bl	800227a <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f90b 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_InitTick+0x5c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000000 	.word	0x20000000
 8002044:	20000008 	.word	0x20000008
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_IncTick+0x1c>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_IncTick+0x20>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <HAL_IncTick+0x20>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	20000008 	.word	0x20000008
 800206c:	20000554 	.word	0x20000554

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b02      	ldr	r3, [pc, #8]	; (8002080 <HAL_GetTick+0x10>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	20000554 	.word	0x20000554

08002084 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800208c:	f7ff fff0 	bl	8002070 <HAL_GetTick>
 8002090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d005      	beq.n	80020aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_Delay+0x44>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020aa:	bf00      	nop
 80020ac:	f7ff ffe0 	bl	8002070 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d8f7      	bhi.n	80020ac <HAL_Delay+0x28>
  {
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000008 	.word	0x20000008

080020cc <__NVIC_SetPriorityGrouping>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_SetPriority>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff90 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff49 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff5e 	bl	8002114 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff90 	bl	8002184 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5f 	bl	8002130 <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffb0 	bl	80021e8 <SysTick_Config>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80022a4:	4ba3      	ldr	r3, [pc, #652]	; (8002534 <HAL_ETH_Init+0x2a0>)
 80022a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e173      	b.n	80025a2 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f002 fcda 	bl	8004c88 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	4b97      	ldr	r3, [pc, #604]	; (8002538 <HAL_ETH_Init+0x2a4>)
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	4a96      	ldr	r2, [pc, #600]	; (8002538 <HAL_ETH_Init+0x2a4>)
 80022de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e2:	6453      	str	r3, [r2, #68]	; 0x44
 80022e4:	4b94      	ldr	r3, [pc, #592]	; (8002538 <HAL_ETH_Init+0x2a4>)
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022f0:	4b92      	ldr	r3, [pc, #584]	; (800253c <HAL_ETH_Init+0x2a8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a91      	ldr	r2, [pc, #580]	; (800253c <HAL_ETH_Init+0x2a8>)
 80022f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022fa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022fc:	4b8f      	ldr	r3, [pc, #572]	; (800253c <HAL_ETH_Init+0x2a8>)
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	498d      	ldr	r1, [pc, #564]	; (800253c <HAL_ETH_Init+0x2a8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002320:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002322:	f7ff fea5 	bl	8002070 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002328:	e011      	b.n	800234e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800232a:	f7ff fea1 	bl	8002070 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002338:	d909      	bls.n	800234e <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e129      	b.n	80025a2 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e4      	bne.n	800232a <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f023 031c 	bic.w	r3, r3, #28
 800236e:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002370:	f002 f8f6 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8002374:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4a71      	ldr	r2, [pc, #452]	; (8002540 <HAL_ETH_Init+0x2ac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d908      	bls.n	8002390 <HAL_ETH_Init+0xfc>
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4a70      	ldr	r2, [pc, #448]	; (8002544 <HAL_ETH_Init+0x2b0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d804      	bhi.n	8002390 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e01a      	b.n	80023c6 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	4a6c      	ldr	r2, [pc, #432]	; (8002544 <HAL_ETH_Init+0x2b0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d908      	bls.n	80023aa <HAL_ETH_Init+0x116>
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	4a66      	ldr	r2, [pc, #408]	; (8002534 <HAL_ETH_Init+0x2a0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d204      	bcs.n	80023aa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f043 030c 	orr.w	r3, r3, #12
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	e00d      	b.n	80023c6 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4a61      	ldr	r2, [pc, #388]	; (8002534 <HAL_ETH_Init+0x2a0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d303      	bcc.n	80023ba <HAL_ETH_Init+0x126>
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4a64      	ldr	r2, [pc, #400]	; (8002548 <HAL_ETH_Init+0x2b4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d904      	bls.n	80023c4 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	e000      	b.n	80023c6 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80023c4:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80023ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023d2:	2100      	movs	r1, #0
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fb92 	bl	8002afe <HAL_ETH_WritePHYRegister>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80023e4:	6939      	ldr	r1, [r7, #16]
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fd48 	bl	8002e7c <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d4      	b.n	80025a2 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80023f8:	20ff      	movs	r0, #255	; 0xff
 80023fa:	f7ff fe43 	bl	8002084 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80a2 	beq.w	800254c <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002408:	f7ff fe32 	bl	8002070 <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	461a      	mov	r2, r3
 8002414:	2101      	movs	r1, #1
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fb09 	bl	8002a2e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800241c:	f7ff fe28 	bl	8002070 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d90f      	bls.n	800244e <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002432:	6939      	ldr	r1, [r7, #16]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fd21 	bl	8002e7c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0a9      	b.n	80025a2 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0da      	beq.n	800240e <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800245c:	2100      	movs	r1, #0
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fb4d 	bl	8002afe <HAL_ETH_WritePHYRegister>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800246e:	6939      	ldr	r1, [r7, #16]
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fd03 	bl	8002e7c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e08f      	b.n	80025a2 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8002482:	f7ff fdf5 	bl	8002070 <HAL_GetTick>
 8002486:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	461a      	mov	r2, r3
 800248e:	2101      	movs	r1, #1
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 facc 	bl	8002a2e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002496:	f7ff fdeb 	bl	8002070 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d90f      	bls.n	80024c8 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80024ac:	6939      	ldr	r1, [r7, #16]
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fce4 	bl	8002e7c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e06c      	b.n	80025a2 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0da      	beq.n	8002488 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	461a      	mov	r2, r3
 80024d8:	2110      	movs	r1, #16
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 faa7 	bl	8002a2e <HAL_ETH_ReadPHYRegister>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024ea:	6939      	ldr	r1, [r7, #16]
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fcc5 	bl	8002e7c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e051      	b.n	80025a2 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	e002      	b.n	8002518 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e032      	b.n	8002590 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	e02d      	b.n	8002590 <HAL_ETH_Init+0x2fc>
 8002534:	03938700 	.word	0x03938700
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	01312cff 	.word	0x01312cff
 8002544:	02160ebf 	.word	0x02160ebf
 8002548:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800255c:	4313      	orrs	r3, r2
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	2100      	movs	r1, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 faca 	bl	8002afe <HAL_ETH_WritePHYRegister>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002574:	6939      	ldr	r1, [r7, #16]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fc80 	bl	8002e7c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e00c      	b.n	80025a2 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002588:	f640 70ff 	movw	r0, #4095	; 0xfff
 800258c:	f7ff fd7a 	bl	8002084 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002590:	6939      	ldr	r1, [r7, #16]
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fc72 	bl	8002e7c <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop

080025ac <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_ETH_DMATxDescListInit+0x20>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e052      	b.n	8002672 <HAL_ETH_DMATxDescListInit+0xc6>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e030      	b.n	800264a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	4413      	add	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	461a      	mov	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	d208      	bcs.n	800263e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	015b      	lsls	r3, r3, #5
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	4413      	add	r3, r2
 8002636:	461a      	mov	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	e002      	b.n	8002644 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d3ca      	bcc.n	80025e8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265c:	3310      	adds	r3, #16
 800265e:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_ETH_DMARxDescListInit+0x20>
 8002698:	2302      	movs	r3, #2
 800269a:	e056      	b.n	800274a <HAL_ETH_DMARxDescListInit+0xce>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e034      	b.n	8002722 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015b      	lsls	r3, r3, #5
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4413      	add	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80026d0:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	d208      	bcs.n	8002716 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4413      	add	r3, r2
 800270e:	461a      	mov	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	e002      	b.n	800271c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3301      	adds	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d3c6      	bcc.n	80026b8 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002734:	330c      	adds	r3, #12
 8002736:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ETH_TransmitFrame+0x24>
 8002774:	2302      	movs	r3, #2
 8002776:	e0cd      	b.n	8002914 <HAL_ETH_TransmitFrame+0x1c0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0b8      	b.n	8002914 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da09      	bge.n	80027c0 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2212      	movs	r2, #18
 80027b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0a9      	b.n	8002914 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d915      	bls.n	80027f6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	4a54      	ldr	r2, [pc, #336]	; (8002920 <HAL_ETH_TransmitFrame+0x1cc>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0a9b      	lsrs	r3, r3, #10
 80027d4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4b51      	ldr	r3, [pc, #324]	; (8002920 <HAL_ETH_TransmitFrame+0x1cc>)
 80027da:	fba3 1302 	umull	r1, r3, r3, r2
 80027de:	0a9b      	lsrs	r3, r3, #10
 80027e0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e001      	b.n	80027fa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80027f6:	2301      	movs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d11c      	bne.n	800283a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800280e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800281a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800282a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
 8002838:	e04b      	b.n	80028d2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	e044      	b.n	80028ca <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800284e:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002864:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800286e:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3b01      	subs	r3, #1
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	429a      	cmp	r2, r3
 8002878:	d116      	bne.n	80028a8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002888:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	4a25      	ldr	r2, [pc, #148]	; (8002924 <HAL_ETH_TransmitFrame+0x1d0>)
 800288e:	fb02 f203 	mul.w	r2, r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4413      	add	r3, r2
 8002896:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800289a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80028a6:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028b6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	3301      	adds	r3, #1
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d3b6      	bcc.n	8002840 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028da:	3314      	adds	r3, #20
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	3314      	adds	r3, #20
 80028f0:	2204      	movs	r2, #4
 80028f2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fc:	3304      	adds	r3, #4
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	ac02b00b 	.word	0xac02b00b
 8002924:	fffffa0c 	.word	0xfffffa0c

08002928 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_ETH_GetReceivedFrame+0x1a>
 800293e:	2302      	movs	r3, #2
 8002940:	e070      	b.n	8002a24 <HAL_ETH_GetReceivedFrame+0xfc>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db5a      	blt.n	8002a12 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d030      	beq.n	80029cc <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	2b01      	cmp	r3, #1
 800297a:	d103      	bne.n	8002984 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002998:	3b04      	subs	r3, #4
 800299a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	461a      	mov	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e02b      	b.n	8002a24 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d010      	beq.n	80029fc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
 80029fa:	e00a      	b.n	8002a12 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	460b      	mov	r3, r1
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b82      	cmp	r3, #130	; 0x82
 8002a4e:	d101      	bne.n	8002a54 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
 8002a52:	e050      	b.n	8002af6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2282      	movs	r2, #130	; 0x82
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 031c 	and.w	r3, r3, #28
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8a1b      	ldrh	r3, [r3, #16]
 8002a70:	02db      	lsls	r3, r3, #11
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0302 	bic.w	r3, r3, #2
 8002a8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa0:	f7ff fae6 	bl	8002070 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002aa6:	e015      	b.n	8002ad4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002aa8:	f7ff fae2 	bl	8002070 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab6:	d309      	bcc.n	8002acc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e014      	b.n	8002af6 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e4      	bne.n	8002aa8 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	460b      	mov	r3, r1
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b42      	cmp	r3, #66	; 0x42
 8002b1e:	d101      	bne.n	8002b24 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	e04e      	b.n	8002bc2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2242      	movs	r2, #66	; 0x42
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 031c 	and.w	r3, r3, #28
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8a1b      	ldrh	r3, [r3, #16]
 8002b40:	02db      	lsls	r3, r3, #11
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7a:	f7ff fa79 	bl	8002070 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b80:	e015      	b.n	8002bae <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b82:	f7ff fa75 	bl	8002070 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d309      	bcc.n	8002ba6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e00d      	b.n	8002bc2 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e4      	bne.n	8002b82 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_ETH_Start+0x16>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e01f      	b.n	8002c20 <HAL_ETH_Start+0x56>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fb43 	bl	800327c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fb7a 	bl	80032f0 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fc0d 	bl	800341c <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fbae 	bl	8003364 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fbd9 	bl	80033c0 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ETH_Stop+0x16>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e01f      	b.n	8002c7e <HAL_ETH_Stop+0x56>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fb9f 	bl	8003392 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fbca 	bl	80033ee <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fb65 	bl	800332a <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fbdb 	bl	800341c <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fb25 	bl	80032b6 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ETH_ConfigMAC+0x1c>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0e4      	b.n	8002e6e <HAL_ETH_ConfigMAC+0x1e6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80b1 	beq.w	8002e1e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4b6c      	ldr	r3, [pc, #432]	; (8002e78 <HAL_ETH_ConfigMAC+0x1f0>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002cd4:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8002cda:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8002ce0:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8002ce6:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8002cec:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8002cf2:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8002cf8:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8002cfe:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8002d04:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8002d0a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8002d10:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8002d16:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f7ff f9a8 	bl	8002084 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002d44:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002d4a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002d50:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8002d56:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002d5c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002d62:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002d6e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002d70:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f7ff f982 	bl	8002084 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d90:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d9a:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002daa:	4013      	ands	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002db8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002dbe:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002dc4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8002dca:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002dd0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7ff f94b 	bl	8002084 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7ff f938 	bl	8002084 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	61da      	str	r2, [r3, #28]
 8002e1c:	e01e      	b.n	8002e5c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002e2c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e4e:	2001      	movs	r0, #1
 8002e50:	f7ff f918 	bl	8002084 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	ff20810f 	.word	0xff20810f

08002e7c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0b0      	sub	sp, #192	; 0xc0
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e98:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ea0:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec8:	e001      	b.n	8002ece <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002ee8:	2340      	movs	r3, #64	; 0x40
 8002eea:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f54:	4bac      	ldr	r3, [pc, #688]	; (8003208 <ETH_MACDMAConfig+0x38c>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002f60:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8002f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8002f64:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8002f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8002f68:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002f6e:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8002f72:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8002f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8002f76:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8002f7c:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8002f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8002f80:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8002f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8002f84:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8002f86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8002f88:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8002f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8002f8c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8002f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8002f90:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002f92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7ff f867 	bl	8002084 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fbe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002fc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002fc4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002fc8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8002fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002fce:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002fd4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002fda:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002fe0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002fe4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002fec:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002fee:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f7ff f842 	bl	8002084 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003008:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003012:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800301c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003028:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800302c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003030:	4013      	ands	r3, r2
 8003032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8003036:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800303a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800303c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8003040:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003046:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8003048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800304c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800304e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8003052:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8003054:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003058:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800305a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800306c:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003078:	2001      	movs	r0, #1
 800307a:	f7ff f803 	bl	8002084 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003086:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8003088:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 800308c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7fe ffee 	bl	8002084 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030b0:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80030b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ba:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80030c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030c4:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80030d6:	2304      	movs	r3, #4
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80030da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80030e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030f0:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030fa:	2300      	movs	r3, #0
 80030fc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003106:	3318      	adds	r3, #24
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800310e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003112:	4b3e      	ldr	r3, [pc, #248]	; (800320c <ETH_MACDMAConfig+0x390>)
 8003114:	4013      	ands	r3, r2
 8003116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800311a:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800311c:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800311e:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8003120:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8003122:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8003124:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8003126:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8003128:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 800312a:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800312c:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800312e:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8003130:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8003132:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8003136:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 800313a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800313c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800314e:	3318      	adds	r3, #24
 8003150:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003154:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315e:	3318      	adds	r3, #24
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003166:	2001      	movs	r0, #1
 8003168:	f7fe ff8c 	bl	8002084 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003174:	3318      	adds	r3, #24
 8003176:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800317a:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800317c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8003180:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8003184:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003188:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 800318c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 800318e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003190:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8003192:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8003194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8003196:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a4:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031b4:	2001      	movs	r0, #1
 80031b6:	f7fe ff65 	bl	8002084 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031c6:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10f      	bne.n	80031f0 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d8:	331c      	adds	r3, #28
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ec:	331c      	adds	r3, #28
 80031ee:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	461a      	mov	r2, r3
 80031f6:	2100      	movs	r1, #0
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f809 	bl	8003210 <ETH_MACAddressConfig>
}
 80031fe:	bf00      	nop
 8003200:	37c0      	adds	r7, #192	; 0xc0
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	ff20810f 	.word	0xff20810f
 800320c:	f8de3f23 	.word	0xf8de3f23

08003210 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3305      	adds	r3, #5
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	3204      	adds	r2, #4
 8003228:	7812      	ldrb	r2, [r2, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <ETH_MACAddressConfig+0x64>)
 8003232:	4413      	add	r3, r2
 8003234:	461a      	mov	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3303      	adds	r3, #3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	061a      	lsls	r2, r3, #24
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3302      	adds	r3, #2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3301      	adds	r3, #1
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	4313      	orrs	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	7812      	ldrb	r2, [r2, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <ETH_MACAddressConfig+0x68>)
 8003262:	4413      	add	r3, r2
 8003264:	461a      	mov	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6013      	str	r3, [r2, #0]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40028040 	.word	0x40028040
 8003278:	40028044 	.word	0x40028044

0800327c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0208 	orr.w	r2, r2, #8
 8003296:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f000 f8e5 	bl	8003470 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0208 	bic.w	r2, r2, #8
 80032d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80032da:	2001      	movs	r0, #1
 80032dc:	f000 f8c8 	bl	8003470 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	601a      	str	r2, [r3, #0]
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0204 	orr.w	r2, r2, #4
 800330a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003314:	2001      	movs	r0, #1
 8003316:	f000 f8ab 	bl	8003470 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0204 	bic.w	r2, r2, #4
 8003344:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800334e:	2001      	movs	r0, #1
 8003350:	f000 f88e 	bl	8003470 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003374:	3318      	adds	r3, #24
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003384:	3318      	adds	r3, #24
 8003386:	601a      	str	r2, [r3, #0]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a2:	3318      	adds	r3, #24
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b2:	3318      	adds	r3, #24
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d0:	3318      	adds	r3, #24
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0202 	orr.w	r2, r2, #2
 80033dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e0:	3318      	adds	r3, #24
 80033e2:	601a      	str	r2, [r3, #0]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fe:	3318      	adds	r3, #24
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0202 	bic.w	r2, r2, #2
 800340a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340e:	3318      	adds	r3, #24
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003430:	3318      	adds	r3, #24
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800343c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003440:	3318      	adds	r3, #24
 8003442:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344c:	3318      	adds	r3, #24
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 f80c 	bl	8003470 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003462:	3318      	adds	r3, #24
 8003464:	601a      	str	r2, [r3, #0]
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <ETH_Delay+0x34>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <ETH_Delay+0x38>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0a5b      	lsrs	r3, r3, #9
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800348c:	bf00      	nop
  }
  while (Delay --);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1e5a      	subs	r2, r3, #1
 8003492:	60fa      	str	r2, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f9      	bne.n	800348c <ETH_Delay+0x1c>
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20000000 	.word	0x20000000
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <HAL_FLASH_Program+0xa0>)
 80034c0:	7e1b      	ldrb	r3, [r3, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_FLASH_Program+0x1e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e03b      	b.n	8003542 <HAL_FLASH_Program+0x96>
 80034ca:	4b20      	ldr	r3, [pc, #128]	; (800354c <HAL_FLASH_Program+0xa0>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034d4:	f000 f860 	bl	8003598 <FLASH_WaitForLastOperation>
 80034d8:	4603      	mov	r3, r0
 80034da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d12b      	bne.n	800353a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80034e8:	783b      	ldrb	r3, [r7, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	68b8      	ldr	r0, [r7, #8]
 80034ee:	f000 f909 	bl	8003704 <FLASH_Program_Byte>
 80034f2:	e016      	b.n	8003522 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80034fa:	883b      	ldrh	r3, [r7, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	68b8      	ldr	r0, [r7, #8]
 8003500:	f000 f8de 	bl	80036c0 <FLASH_Program_HalfWord>
 8003504:	e00d      	b.n	8003522 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d105      	bne.n	8003518 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	68b8      	ldr	r0, [r7, #8]
 8003512:	f000 f8b3 	bl	800367c <FLASH_Program_Word>
 8003516:	e004      	b.n	8003522 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800351c:	68b8      	ldr	r0, [r7, #8]
 800351e:	f000 f87b 	bl	8003618 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003522:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003526:	f000 f837 	bl	8003598 <FLASH_WaitForLastOperation>
 800352a:	4603      	mov	r3, r0
 800352c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_FLASH_Program+0xa4>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	4a07      	ldr	r2, [pc, #28]	; (8003550 <HAL_FLASH_Program+0xa4>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <HAL_FLASH_Program+0xa0>)
 800353c:	2200      	movs	r2, #0
 800353e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000558 	.word	0x20000558
 8003550:	40023c00 	.word	0x40023c00

08003554 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_FLASH_Unlock+0x38>)
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	da0b      	bge.n	800357e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_FLASH_Unlock+0x38>)
 8003568:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_FLASH_Unlock+0x3c>)
 800356a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800356c:	4b07      	ldr	r3, [pc, #28]	; (800358c <HAL_FLASH_Unlock+0x38>)
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_FLASH_Unlock+0x40>)
 8003570:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_FLASH_Unlock+0x38>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	da01      	bge.n	800357e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800357e:	79fb      	ldrb	r3, [r7, #7]
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40023c00 	.word	0x40023c00
 8003590:	45670123 	.word	0x45670123
 8003594:	cdef89ab 	.word	0xcdef89ab

08003598 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <FLASH_WaitForLastOperation+0x78>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80035aa:	f7fe fd61 	bl	8002070 <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80035b0:	e010      	b.n	80035d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d00c      	beq.n	80035d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <FLASH_WaitForLastOperation+0x38>
 80035c0:	f7fe fd56 	bl	8002070 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d201      	bcs.n	80035d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e019      	b.n	8003608 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <FLASH_WaitForLastOperation+0x7c>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e8      	bne.n	80035b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <FLASH_WaitForLastOperation+0x7c>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <FLASH_WaitForLastOperation+0x7c>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <FLASH_WaitForLastOperation+0x7c>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80035fe:	f000 f8a1 	bl	8003744 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
  
}  
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000558 	.word	0x20000558
 8003614:	40023c00 	.word	0x40023c00

08003618 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003624:	4b14      	ldr	r3, [pc, #80]	; (8003678 <FLASH_Program_DoubleWord+0x60>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <FLASH_Program_DoubleWord+0x60>)
 800362a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <FLASH_Program_DoubleWord+0x60>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	4a10      	ldr	r2, [pc, #64]	; (8003678 <FLASH_Program_DoubleWord+0x60>)
 8003636:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800363a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <FLASH_Program_DoubleWord+0x60>)
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <FLASH_Program_DoubleWord+0x60>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800364e:	f3bf 8f6f 	isb	sy
}
 8003652:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	000a      	movs	r2, r1
 8003662:	2300      	movs	r3, #0
 8003664:	68f9      	ldr	r1, [r7, #12]
 8003666:	3104      	adds	r1, #4
 8003668:	4613      	mov	r3, r2
 800366a:	600b      	str	r3, [r1, #0]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00

0800367c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <FLASH_Program_Word+0x40>)
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <FLASH_Program_Word+0x40>)
 800368c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003690:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <FLASH_Program_Word+0x40>)
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <FLASH_Program_Word+0x40>)
 8003698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <FLASH_Program_Word+0x40>)
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <FLASH_Program_Word+0x40>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023c00 	.word	0x40023c00

080036c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <FLASH_Program_HalfWord+0x40>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <FLASH_Program_HalfWord+0x40>)
 80036d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <FLASH_Program_HalfWord+0x40>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <FLASH_Program_HalfWord+0x40>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <FLASH_Program_HalfWord+0x40>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	4a05      	ldr	r2, [pc, #20]	; (8003700 <FLASH_Program_HalfWord+0x40>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	801a      	strh	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	40023c00 	.word	0x40023c00

08003704 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <FLASH_Program_Byte+0x3c>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <FLASH_Program_Byte+0x3c>)
 8003716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <FLASH_Program_Byte+0x3c>)
 800371e:	4a08      	ldr	r2, [pc, #32]	; (8003740 <FLASH_Program_Byte+0x3c>)
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <FLASH_Program_Byte+0x3c>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4a05      	ldr	r2, [pc, #20]	; (8003740 <FLASH_Program_Byte+0x3c>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	701a      	strb	r2, [r3, #0]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	40023c00 	.word	0x40023c00

08003744 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	4a23      	ldr	r2, [pc, #140]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 800375e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 8003762:	2210      	movs	r2, #16
 8003764:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 800377c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 8003780:	2220      	movs	r2, #32
 8003782:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 800379a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 800379e:	2240      	movs	r2, #64	; 0x40
 80037a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80037ae:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 80037b8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f043 0310 	orr.w	r3, r3, #16
 80037d4:	4a05      	ldr	r2, [pc, #20]	; (80037ec <FLASH_SetErrorCode+0xa8>)
 80037d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <FLASH_SetErrorCode+0xa4>)
 80037da:	2202      	movs	r2, #2
 80037dc:	60da      	str	r2, [r3, #12]
  }
}
 80037de:	bf00      	nop
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	20000558 	.word	0x20000558

080037f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <HAL_FLASHEx_Erase+0xd8>)
 8003804:	7e1b      	ldrb	r3, [r3, #24]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_FLASHEx_Erase+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e058      	b.n	80038c0 <HAL_FLASHEx_Erase+0xd0>
 800380e:	4b2e      	ldr	r3, [pc, #184]	; (80038c8 <HAL_FLASHEx_Erase+0xd8>)
 8003810:	2201      	movs	r2, #1
 8003812:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003814:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003818:	f7ff febe 	bl	8003598 <FLASH_WaitForLastOperation>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d148      	bne.n	80038b8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f04f 32ff 	mov.w	r2, #4294967295
 800382c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d115      	bne.n	8003862 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 f8da 	bl	80039fc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003848:	f24c 3050 	movw	r0, #50000	; 0xc350
 800384c:	f7ff fea4 	bl	8003598 <FLASH_WaitForLastOperation>
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_FLASHEx_Erase+0xdc>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <HAL_FLASHEx_Erase+0xdc>)
 800385a:	f023 0304 	bic.w	r3, r3, #4
 800385e:	6113      	str	r3, [r2, #16]
 8003860:	e028      	b.n	80038b4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	e01c      	b.n	80038a4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	4619      	mov	r1, r3
 8003872:	68b8      	ldr	r0, [r7, #8]
 8003874:	f000 f82c 	bl	80038d0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003878:	f24c 3050 	movw	r0, #50000	; 0xc350
 800387c:	f7ff fe8c 	bl	8003598 <FLASH_WaitForLastOperation>
 8003880:	4603      	mov	r3, r0
 8003882:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_FLASHEx_Erase+0xdc>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	4a10      	ldr	r2, [pc, #64]	; (80038cc <HAL_FLASHEx_Erase+0xdc>)
 800388a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800388e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	601a      	str	r2, [r3, #0]
          break;
 800389c:	e00a      	b.n	80038b4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4413      	add	r3, r2
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d3da      	bcc.n	800386a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80038b4:	f000 f85e 	bl	8003974 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_FLASHEx_Erase+0xd8>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	761a      	strb	r2, [r3, #24]

  return status;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000558 	.word	0x20000558
 80038cc:	40023c00 	.word	0x40023c00

080038d0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e010      	b.n	800390e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d103      	bne.n	80038fa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80038f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e009      	b.n	800390e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d103      	bne.n	8003908 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e002      	b.n	800390e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800390c:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	4a17      	ldr	r2, [pc, #92]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	4914      	ldr	r1, [pc, #80]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	4a11      	ldr	r2, [pc, #68]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 800392c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003930:	6113      	str	r3, [r2, #16]
 8003932:	23f8      	movs	r3, #248	; 0xf8
 8003934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	60fb      	str	r3, [r7, #12]
  return result;
 800393e:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4093      	lsls	r3, r2
 800394c:	f043 0202 	orr.w	r2, r3, #2
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	4906      	ldr	r1, [pc, #24]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	4a04      	ldr	r2, [pc, #16]	; (8003970 <FLASH_Erase_Sector+0xa0>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6113      	str	r3, [r2, #16]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40023c00 	.word	0x40023c00

08003974 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <FLASH_FlushCaches+0x84>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003980:	2b00      	cmp	r3, #0
 8003982:	d017      	beq.n	80039b4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <FLASH_FlushCaches+0x84>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <FLASH_FlushCaches+0x84>)
 800398a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800398e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <FLASH_FlushCaches+0x84>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <FLASH_FlushCaches+0x84>)
 8003996:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <FLASH_FlushCaches+0x84>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039a6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d017      	beq.n	80039f0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a03      	ldr	r2, [pc, #12]	; (80039f8 <FLASH_FlushCaches+0x84>)
 80039ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ee:	6013      	str	r3, [r2, #0]
  }
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	40023c00 	.word	0x40023c00

080039fc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <FLASH_MassErase+0x40>)
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <FLASH_MassErase+0x40>)
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <FLASH_MassErase+0x40>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <FLASH_MassErase+0x40>)
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <FLASH_MassErase+0x40>)
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <FLASH_MassErase+0x40>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6113      	str	r3, [r2, #16]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40023c00 	.word	0x40023c00

08003a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4e:	e16f      	b.n	8003d30 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8161 	beq.w	8003d2a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d005      	beq.n	8003a80 <HAL_GPIO_Init+0x40>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d130      	bne.n	8003ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 0201 	and.w	r2, r3, #1
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d017      	beq.n	8003b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2203      	movs	r2, #3
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d123      	bne.n	8003b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	08da      	lsrs	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3208      	adds	r2, #8
 8003b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	08da      	lsrs	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3208      	adds	r2, #8
 8003b6c:	6939      	ldr	r1, [r7, #16]
 8003b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0203 	and.w	r2, r3, #3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80bb 	beq.w	8003d2a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <HAL_GPIO_Init+0x30c>)
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	4a63      	ldr	r2, [pc, #396]	; (8003d4c <HAL_GPIO_Init+0x30c>)
 8003bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc4:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_GPIO_Init+0x30c>)
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bd0:	4a5f      	ldr	r2, [pc, #380]	; (8003d50 <HAL_GPIO_Init+0x310>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	220f      	movs	r2, #15
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a57      	ldr	r2, [pc, #348]	; (8003d54 <HAL_GPIO_Init+0x314>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d031      	beq.n	8003c60 <HAL_GPIO_Init+0x220>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a56      	ldr	r2, [pc, #344]	; (8003d58 <HAL_GPIO_Init+0x318>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d02b      	beq.n	8003c5c <HAL_GPIO_Init+0x21c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a55      	ldr	r2, [pc, #340]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d025      	beq.n	8003c58 <HAL_GPIO_Init+0x218>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a54      	ldr	r2, [pc, #336]	; (8003d60 <HAL_GPIO_Init+0x320>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d01f      	beq.n	8003c54 <HAL_GPIO_Init+0x214>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a53      	ldr	r2, [pc, #332]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d019      	beq.n	8003c50 <HAL_GPIO_Init+0x210>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a52      	ldr	r2, [pc, #328]	; (8003d68 <HAL_GPIO_Init+0x328>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_GPIO_Init+0x20c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a51      	ldr	r2, [pc, #324]	; (8003d6c <HAL_GPIO_Init+0x32c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00d      	beq.n	8003c48 <HAL_GPIO_Init+0x208>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a50      	ldr	r2, [pc, #320]	; (8003d70 <HAL_GPIO_Init+0x330>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <HAL_GPIO_Init+0x204>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a4f      	ldr	r2, [pc, #316]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <HAL_GPIO_Init+0x200>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	e010      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c40:	2309      	movs	r3, #9
 8003c42:	e00e      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c44:	2307      	movs	r3, #7
 8003c46:	e00c      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c48:	2306      	movs	r3, #6
 8003c4a:	e00a      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c4c:	2305      	movs	r3, #5
 8003c4e:	e008      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c50:	2304      	movs	r3, #4
 8003c52:	e006      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c54:	2303      	movs	r3, #3
 8003c56:	e004      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e002      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_GPIO_Init+0x222>
 8003c60:	2300      	movs	r3, #0
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	f002 0203 	and.w	r2, r2, #3
 8003c68:	0092      	lsls	r2, r2, #2
 8003c6a:	4093      	lsls	r3, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c74:	4936      	ldr	r1, [pc, #216]	; (8003d50 <HAL_GPIO_Init+0x310>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c82:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ca6:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cac:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cd0:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd6:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003cfa:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f47f ae88 	bne.w	8003a50 <HAL_GPIO_Init+0x10>
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40013800 	.word	0x40013800
 8003d54:	40020000 	.word	0x40020000
 8003d58:	40020400 	.word	0x40020400
 8003d5c:	40020800 	.word	0x40020800
 8003d60:	40020c00 	.word	0x40020c00
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40021400 	.word	0x40021400
 8003d6c:	40021800 	.word	0x40021800
 8003d70:	40021c00 	.word	0x40021c00
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e237      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d050      	beq.n	8003e3c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9a:	4ba3      	ldr	r3, [pc, #652]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d00c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4ba0      	ldr	r3, [pc, #640]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d112      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4b9d      	ldr	r3, [pc, #628]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4b99      	ldr	r3, [pc, #612]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d036      	beq.n	8003e3a <HAL_RCC_OscConfig+0xbe>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d132      	bne.n	8003e3a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e212      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	4b93      	ldr	r3, [pc, #588]	; (800402c <HAL_RCC_OscConfig+0x2b0>)
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d013      	beq.n	8003e12 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dea:	f7fe f941 	bl	8002070 <HAL_GetTick>
 8003dee:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df2:	f7fe f93d 	bl	8002070 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b64      	cmp	r3, #100	; 0x64
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1fc      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e04:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x76>
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe f92d 	bl	8002070 <HAL_GetTick>
 8003e16:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e1a:	f7fe f929 	bl	8002070 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b64      	cmp	r3, #100	; 0x64
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e1e8      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2c:	4b7e      	ldr	r3, [pc, #504]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x9e>
 8003e38:	e000      	b.n	8003e3c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d077      	beq.n	8003f38 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e48:	4b77      	ldr	r3, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e54:	4b74      	ldr	r3, [pc, #464]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d126      	bne.n	8003eae <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e60:	4b71      	ldr	r3, [pc, #452]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d120      	bne.n	8003eae <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6c:	4b6e      	ldr	r3, [pc, #440]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_OscConfig+0x108>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e1bc      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b68      	ldr	r3, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	21f8      	movs	r1, #248	; 0xf8
 8003e92:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	69b9      	ldr	r1, [r7, #24]
 8003e96:	fa91 f1a1 	rbit	r1, r1
 8003e9a:	6179      	str	r1, [r7, #20]
  return result;
 8003e9c:	6979      	ldr	r1, [r7, #20]
 8003e9e:	fab1 f181 	clz	r1, r1
 8003ea2:	b2c9      	uxtb	r1, r1
 8003ea4:	408b      	lsls	r3, r1
 8003ea6:	4960      	ldr	r1, [pc, #384]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eac:	e044      	b.n	8003f38 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02a      	beq.n	8003f0c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb6:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <HAL_RCC_OscConfig+0x2b4>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe f8d8 	bl	8002070 <HAL_GetTick>
 8003ec0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7fe f8d4 	bl	8002070 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e193      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed6:	4b54      	ldr	r3, [pc, #336]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee2:	4b51      	ldr	r3, [pc, #324]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	21f8      	movs	r1, #248	; 0xf8
 8003ef0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6939      	ldr	r1, [r7, #16]
 8003ef4:	fa91 f1a1 	rbit	r1, r1
 8003ef8:	60f9      	str	r1, [r7, #12]
  return result;
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	fab1 f181 	clz	r1, r1
 8003f00:	b2c9      	uxtb	r1, r1
 8003f02:	408b      	lsls	r3, r1
 8003f04:	4948      	ldr	r1, [pc, #288]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
 8003f0a:	e015      	b.n	8003f38 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0c:	4b48      	ldr	r3, [pc, #288]	; (8004030 <HAL_RCC_OscConfig+0x2b4>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fe f8ad 	bl	8002070 <HAL_GetTick>
 8003f16:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fe f8a9 	bl	8002070 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e168      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d030      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d016      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4c:	4b39      	ldr	r3, [pc, #228]	; (8004034 <HAL_RCC_OscConfig+0x2b8>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe f88d 	bl	8002070 <HAL_GetTick>
 8003f56:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe f889 	bl	8002070 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e148      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6c:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1de>
 8003f78:	e015      	b.n	8003fa6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7a:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <HAL_RCC_OscConfig+0x2b8>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe f876 	bl	8002070 <HAL_GetTick>
 8003f84:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe f872 	bl	8002070 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e131      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8088 	beq.w	80040c4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d110      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a16      	ldr	r2, [pc, #88]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fe8:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_RCC_OscConfig+0x2bc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a12      	ldr	r2, [pc, #72]	; (8004038 <HAL_RCC_OscConfig+0x2bc>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCC_OscConfig+0x2bc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d123      	bne.n	8004048 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004000:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_RCC_OscConfig+0x2bc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <HAL_RCC_OscConfig+0x2bc>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400c:	f7fe f830 	bl	8002070 <HAL_GetTick>
 8004010:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	e013      	b.n	800403c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fe f82c 	bl	8002070 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d90c      	bls.n	800403c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0eb      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	40023802 	.word	0x40023802
 8004030:	42470000 	.word	0x42470000
 8004034:	42470e80 	.word	0x42470e80
 8004038:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	4b72      	ldr	r3, [pc, #456]	; (8004208 <HAL_RCC_OscConfig+0x48c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0e5      	beq.n	8004014 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	4b6f      	ldr	r3, [pc, #444]	; (800420c <HAL_RCC_OscConfig+0x490>)
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405a:	f7fe f809 	bl	8002070 <HAL_GetTick>
 800405e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fe f805 	bl	8002070 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0c2      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	4b65      	ldr	r3, [pc, #404]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ee      	beq.n	8004062 <HAL_RCC_OscConfig+0x2e6>
 8004084:	e014      	b.n	80040b0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004086:	f7fd fff3 	bl	8002070 <HAL_GetTick>
 800408a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd ffef 	bl	8002070 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0ac      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ee      	bne.n	800408e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d105      	bne.n	80040c4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b8:	4b55      	ldr	r3, [pc, #340]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	4a54      	ldr	r2, [pc, #336]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8097 	beq.w	80041fc <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ce:	4b50      	ldr	r3, [pc, #320]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d061      	beq.n	800419e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d146      	bne.n	8004170 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b4c      	ldr	r3, [pc, #304]	; (8004214 <HAL_RCC_OscConfig+0x498>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fd ffc2 	bl	8002070 <HAL_GetTick>
 80040ec:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd ffbe 	bl	8002070 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e07d      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b43      	ldr	r3, [pc, #268]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410e:	4b40      	ldr	r3, [pc, #256]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	4b41      	ldr	r3, [pc, #260]	; (8004218 <HAL_RCC_OscConfig+0x49c>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	69d1      	ldr	r1, [r2, #28]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6a12      	ldr	r2, [r2, #32]
 800411e:	4311      	orrs	r1, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004124:	0192      	lsls	r2, r2, #6
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800412c:	0612      	lsls	r2, r2, #24
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004134:	0852      	lsrs	r2, r2, #1
 8004136:	3a01      	subs	r2, #1
 8004138:	0412      	lsls	r2, r2, #16
 800413a:	430a      	orrs	r2, r1
 800413c:	4934      	ldr	r1, [pc, #208]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004142:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_RCC_OscConfig+0x498>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fd ff92 	bl	8002070 <HAL_GetTick>
 800414c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004150:	f7fd ff8e 	bl	8002070 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e04d      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x3d4>
 800416e:	e045      	b.n	80041fc <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_OscConfig+0x498>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fd ff7b 	bl	8002070 <HAL_GetTick>
 800417a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417e:	f7fd ff77 	bl	8002070 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b64      	cmp	r3, #100	; 0x64
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e036      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004190:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCC_OscConfig+0x402>
 800419c:	e02e      	b.n	80041fc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e029      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_RCC_OscConfig+0x494>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d11c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d115      	bne.n	80041f8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	099b      	lsrs	r3, r3, #6
 80041d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d10d      	bne.n	80041f8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3728      	adds	r7, #40	; 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40007000 	.word	0x40007000
 800420c:	40023870 	.word	0x40023870
 8004210:	40023800 	.word	0x40023800
 8004214:	42470060 	.word	0x42470060
 8004218:	f0bc8000 	.word	0xf0bc8000

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d2      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004230:	4b6b      	ldr	r3, [pc, #428]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d90c      	bls.n	8004258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b68      	ldr	r3, [pc, #416]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004246:	4b66      	ldr	r3, [pc, #408]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d001      	beq.n	8004258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0be      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004270:	4b5c      	ldr	r3, [pc, #368]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4a5b      	ldr	r2, [pc, #364]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800427a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004288:	4b56      	ldr	r3, [pc, #344]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a55      	ldr	r2, [pc, #340]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800428e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004292:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4950      	ldr	r1, [pc, #320]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d040      	beq.n	8004334 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	4b4a      	ldr	r3, [pc, #296]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d115      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e085      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	4b44      	ldr	r3, [pc, #272]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e079      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e071      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f2:	4b3c      	ldr	r3, [pc, #240]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 0203 	bic.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4939      	ldr	r1, [pc, #228]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004304:	f7fd feb4 	bl	8002070 <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	e00a      	b.n	8004322 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7fd feb0 	bl	8002070 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e059      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 020c 	and.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	429a      	cmp	r2, r3
 8004332:	d1eb      	bne.n	800430c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004334:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d20c      	bcs.n	800435c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e03c      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	491b      	ldr	r1, [pc, #108]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4913      	ldr	r1, [pc, #76]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800439a:	f000 f82b 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 800439e:	4601      	mov	r1, r0
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a8:	22f0      	movs	r2, #240	; 0xf0
 80043aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	fa92 f2a2 	rbit	r2, r2
 80043b2:	60fa      	str	r2, [r7, #12]
  return result;
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	fab2 f282 	clz	r2, r2
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	40d3      	lsrs	r3, r2
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <HAL_RCC_ClockConfig+0x1cc>)
 80043c0:	5cd3      	ldrb	r3, [r2, r3]
 80043c2:	fa21 f303 	lsr.w	r3, r1, r3
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <HAL_RCC_ClockConfig+0x1d0>)
 80043c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1d4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fd fe0c 	bl	8001fec <HAL_InitTick>

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023c00 	.word	0x40023c00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	0801136c 	.word	0x0801136c
 80043ec:	20000000 	.word	0x20000000
 80043f0:	20000004 	.word	0x20000004

080043f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	b5b0      	push	{r4, r5, r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043fa:	2100      	movs	r1, #0
 80043fc:	6079      	str	r1, [r7, #4]
 80043fe:	2100      	movs	r1, #0
 8004400:	60f9      	str	r1, [r7, #12]
 8004402:	2100      	movs	r1, #0
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004406:	2100      	movs	r1, #0
 8004408:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440a:	4952      	ldr	r1, [pc, #328]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 800440c:	6889      	ldr	r1, [r1, #8]
 800440e:	f001 010c 	and.w	r1, r1, #12
 8004412:	2908      	cmp	r1, #8
 8004414:	d00d      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0x3e>
 8004416:	2908      	cmp	r1, #8
 8004418:	f200 8094 	bhi.w	8004544 <HAL_RCC_GetSysClockFreq+0x150>
 800441c:	2900      	cmp	r1, #0
 800441e:	d002      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x32>
 8004420:	2904      	cmp	r1, #4
 8004422:	d003      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x38>
 8004424:	e08e      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004426:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_RCC_GetSysClockFreq+0x164>)
 8004428:	60bb      	str	r3, [r7, #8]
       break;
 800442a:	e08e      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800442c:	4b4b      	ldr	r3, [pc, #300]	; (800455c <HAL_RCC_GetSysClockFreq+0x168>)
 800442e:	60bb      	str	r3, [r7, #8]
      break;
 8004430:	e08b      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004432:	4948      	ldr	r1, [pc, #288]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 8004434:	6849      	ldr	r1, [r1, #4]
 8004436:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800443a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800443c:	4945      	ldr	r1, [pc, #276]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 800443e:	6849      	ldr	r1, [r1, #4]
 8004440:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004444:	2900      	cmp	r1, #0
 8004446:	d024      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004448:	4942      	ldr	r1, [pc, #264]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 800444a:	6849      	ldr	r1, [r1, #4]
 800444c:	0989      	lsrs	r1, r1, #6
 800444e:	4608      	mov	r0, r1
 8004450:	f04f 0100 	mov.w	r1, #0
 8004454:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004458:	f04f 0500 	mov.w	r5, #0
 800445c:	ea00 0204 	and.w	r2, r0, r4
 8004460:	ea01 0305 	and.w	r3, r1, r5
 8004464:	493d      	ldr	r1, [pc, #244]	; (800455c <HAL_RCC_GetSysClockFreq+0x168>)
 8004466:	fb01 f003 	mul.w	r0, r1, r3
 800446a:	2100      	movs	r1, #0
 800446c:	fb01 f102 	mul.w	r1, r1, r2
 8004470:	1844      	adds	r4, r0, r1
 8004472:	493a      	ldr	r1, [pc, #232]	; (800455c <HAL_RCC_GetSysClockFreq+0x168>)
 8004474:	fba2 0101 	umull	r0, r1, r2, r1
 8004478:	1863      	adds	r3, r4, r1
 800447a:	4619      	mov	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	461a      	mov	r2, r3
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	f7fb fe9e 	bl	80001c4 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4613      	mov	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e04a      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004492:	4b30      	ldr	r3, [pc, #192]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	461a      	mov	r2, r3
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	ea02 0400 	and.w	r4, r2, r0
 80044aa:	ea03 0501 	and.w	r5, r3, r1
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	014b      	lsls	r3, r1, #5
 80044bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044c0:	0142      	lsls	r2, r0, #5
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	1b00      	subs	r0, r0, r4
 80044c8:	eb61 0105 	sbc.w	r1, r1, r5
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	018b      	lsls	r3, r1, #6
 80044d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044da:	0182      	lsls	r2, r0, #6
 80044dc:	1a12      	subs	r2, r2, r0
 80044de:	eb63 0301 	sbc.w	r3, r3, r1
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	00d9      	lsls	r1, r3, #3
 80044ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f0:	00d0      	lsls	r0, r2, #3
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	1912      	adds	r2, r2, r4
 80044f8:	eb45 0303 	adc.w	r3, r5, r3
 80044fc:	f04f 0000 	mov.w	r0, #0
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	0299      	lsls	r1, r3, #10
 8004506:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800450a:	0290      	lsls	r0, r2, #10
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	461a      	mov	r2, r3
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	f7fb fe52 	bl	80001c4 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	60bb      	str	r3, [r7, #8]
      break;
 8004542:	e002      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <HAL_RCC_GetSysClockFreq+0x164>)
 8004546:	60bb      	str	r3, [r7, #8]
      break;
 8004548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454a:	68bb      	ldr	r3, [r7, #8]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bdb0      	pop	{r4, r5, r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	00f42400 	.word	0x00f42400
 800455c:	017d7840 	.word	0x017d7840

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b02      	ldr	r3, [pc, #8]	; (8004570 <HAL_RCC_GetHCLKFreq+0x10>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	20000000 	.word	0x20000000

08004574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800457a:	f7ff fff1 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 800457e:	4601      	mov	r1, r0
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004588:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800458c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	fa92 f2a2 	rbit	r2, r2
 8004594:	603a      	str	r2, [r7, #0]
  return result;
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	fab2 f282 	clz	r2, r2
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	40d3      	lsrs	r3, r2
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40023800 	.word	0x40023800
 80045b4:	0801137c 	.word	0x0801137c

080045b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80045be:	f7ff ffcf 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045c2:	4601      	mov	r1, r0
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80045cc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80045d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	fa92 f2a2 	rbit	r2, r2
 80045d8:	603a      	str	r2, [r7, #0]
  return result;
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	fab2 f282 	clz	r2, r2
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	40d3      	lsrs	r3, r2
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045e6:	5cd3      	ldrb	r3, [r2, r3]
 80045e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	0801137c 	.word	0x0801137c

080045fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e03f      	b.n	800468e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc fdf8 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800463e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f905 	bl	8004850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b08a      	sub	sp, #40	; 0x28
 800469a:	af02      	add	r7, sp, #8
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d17c      	bne.n	80047b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_UART_Transmit+0x2c>
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e075      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Transmit+0x3e>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e06e      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2221      	movs	r2, #33	; 0x21
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ea:	f7fd fcc1 	bl	8002070 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d108      	bne.n	8004718 <HAL_UART_Transmit+0x82>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e003      	b.n	8004720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004728:	e02a      	b.n	8004780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2200      	movs	r2, #0
 8004732:	2180      	movs	r1, #128	; 0x80
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f840 	bl	80047ba <UART_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e036      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10b      	bne.n	8004762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3302      	adds	r3, #2
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e007      	b.n	8004772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1cf      	bne.n	800472a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	2140      	movs	r1, #64	; 0x40
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f810 	bl	80047ba <UART_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e006      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ca:	e02c      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d028      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0x30>
 80047da:	f7fd fc49 	bl	8002070 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d21d      	bcs.n	8004826 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e00f      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	429a      	cmp	r2, r3
 8004842:	d0c3      	beq.n	80047cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	4313      	orrs	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004890:	f023 030c 	bic.w	r3, r3, #12
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	430b      	orrs	r3, r1
 800489c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a57      	ldr	r2, [pc, #348]	; (8004a18 <UART_SetConfig+0x1c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <UART_SetConfig+0x78>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a56      	ldr	r2, [pc, #344]	; (8004a1c <UART_SetConfig+0x1cc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d103      	bne.n	80048d0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048c8:	f7ff fe76 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	e002      	b.n	80048d6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7ff fe50 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 80048d4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048de:	d14c      	bne.n	800497a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	4a4a      	ldr	r2, [pc, #296]	; (8004a20 <UART_SetConfig+0x1d0>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	0119      	lsls	r1, r3, #4
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009a      	lsls	r2, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	fbb2 f2f3 	udiv	r2, r2, r3
 8004916:	4b42      	ldr	r3, [pc, #264]	; (8004a20 <UART_SetConfig+0x1d0>)
 8004918:	fba3 0302 	umull	r0, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2064      	movs	r0, #100	; 0x64
 8004920:	fb00 f303 	mul.w	r3, r0, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	3332      	adds	r3, #50	; 0x32
 800492a:	4a3d      	ldr	r2, [pc, #244]	; (8004a20 <UART_SetConfig+0x1d0>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004938:	4419      	add	r1, r3
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009a      	lsls	r2, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004950:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <UART_SetConfig+0x1d0>)
 8004952:	fba3 0302 	umull	r0, r3, r3, r2
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2064      	movs	r0, #100	; 0x64
 800495a:	fb00 f303 	mul.w	r3, r0, r3
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	3332      	adds	r3, #50	; 0x32
 8004964:	4a2e      	ldr	r2, [pc, #184]	; (8004a20 <UART_SetConfig+0x1d0>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	f003 0207 	and.w	r2, r3, #7
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	440a      	add	r2, r1
 8004976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004978:	e04a      	b.n	8004a10 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009a      	lsls	r2, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	4a23      	ldr	r2, [pc, #140]	; (8004a20 <UART_SetConfig+0x1d0>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	0119      	lsls	r1, r3, #4
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009a      	lsls	r2, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <UART_SetConfig+0x1d0>)
 80049b2:	fba3 0302 	umull	r0, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2064      	movs	r0, #100	; 0x64
 80049ba:	fb00 f303 	mul.w	r3, r0, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	3332      	adds	r3, #50	; 0x32
 80049c4:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <UART_SetConfig+0x1d0>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d0:	4419      	add	r1, r3
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009a      	lsls	r2, r3, #2
 80049dc:	441a      	add	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <UART_SetConfig+0x1d0>)
 80049ea:	fba3 0302 	umull	r0, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2064      	movs	r0, #100	; 0x64
 80049f2:	fb00 f303 	mul.w	r3, r0, r3
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	3332      	adds	r3, #50	; 0x32
 80049fc:	4a08      	ldr	r2, [pc, #32]	; (8004a20 <UART_SetConfig+0x1d0>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	40011400 	.word	0x40011400
 8004a20:	51eb851f 	.word	0x51eb851f

08004a24 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004a2a:	4b8d      	ldr	r3, [pc, #564]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a2c:	220a      	movs	r2, #10
 8004a2e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 8004a30:	4b8b      	ldr	r3, [pc, #556]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a32:	220a      	movs	r2, #10
 8004a34:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8004a36:	4b8a      	ldr	r3, [pc, #552]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a38:	220a      	movs	r2, #10
 8004a3a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004a3c:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a3e:	220a      	movs	r2, #10
 8004a40:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004a42:	4b88      	ldr	r3, [pc, #544]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004a44:	22ff      	movs	r2, #255	; 0xff
 8004a46:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004a48:	4b86      	ldr	r3, [pc, #536]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004a4a:	22ff      	movs	r2, #255	; 0xff
 8004a4c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004a4e:	4b85      	ldr	r3, [pc, #532]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004a50:	22ff      	movs	r2, #255	; 0xff
 8004a52:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004a54:	4b83      	ldr	r3, [pc, #524]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8004a5a:	4b83      	ldr	r3, [pc, #524]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004a5c:	220a      	movs	r2, #10
 8004a5e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 8004a60:	4b81      	ldr	r3, [pc, #516]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004a62:	220a      	movs	r2, #10
 8004a64:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004a66:	4b80      	ldr	r3, [pc, #512]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004a6c:	4b7e      	ldr	r3, [pc, #504]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004a72:	f000 fcad 	bl	80053d0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004a76:	4b7a      	ldr	r3, [pc, #488]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	061a      	lsls	r2, r3, #24
 8004a7c:	4b78      	ldr	r3, [pc, #480]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	431a      	orrs	r2, r3
 8004a84:	4b76      	ldr	r3, [pc, #472]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a86:	789b      	ldrb	r3, [r3, #2]
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	4a74      	ldr	r2, [pc, #464]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a8e:	78d2      	ldrb	r2, [r2, #3]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	061a      	lsls	r2, r3, #24
 8004a94:	4b72      	ldr	r3, [pc, #456]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	0619      	lsls	r1, r3, #24
 8004a9a:	4b71      	ldr	r3, [pc, #452]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	4319      	orrs	r1, r3
 8004aa2:	4b6f      	ldr	r3, [pc, #444]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	496d      	ldr	r1, [pc, #436]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004aac:	78c9      	ldrb	r1, [r1, #3]
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	4b69      	ldr	r3, [pc, #420]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	0619      	lsls	r1, r3, #24
 8004abe:	4b68      	ldr	r3, [pc, #416]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	4319      	orrs	r1, r3
 8004ac6:	4b66      	ldr	r3, [pc, #408]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004ac8:	789b      	ldrb	r3, [r3, #2]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	430b      	orrs	r3, r1
 8004ace:	4964      	ldr	r1, [pc, #400]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004ad0:	78c9      	ldrb	r1, [r1, #3]
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ada:	431a      	orrs	r2, r3
 8004adc:	4b60      	ldr	r3, [pc, #384]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	0619      	lsls	r1, r3, #24
 8004ae2:	4b5f      	ldr	r3, [pc, #380]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	4319      	orrs	r1, r3
 8004aea:	4b5d      	ldr	r3, [pc, #372]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004aec:	789b      	ldrb	r3, [r3, #2]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	430b      	orrs	r3, r1
 8004af2:	495b      	ldr	r1, [pc, #364]	; (8004c60 <MX_LWIP_Init+0x23c>)
 8004af4:	78c9      	ldrb	r1, [r1, #3]
 8004af6:	430b      	orrs	r3, r1
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	4313      	orrs	r3, r2
 8004afc:	4a5b      	ldr	r2, [pc, #364]	; (8004c6c <MX_LWIP_Init+0x248>)
 8004afe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004b00:	4b58      	ldr	r3, [pc, #352]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	061a      	lsls	r2, r3, #24
 8004b06:	4b57      	ldr	r3, [pc, #348]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b08:	785b      	ldrb	r3, [r3, #1]
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	4b55      	ldr	r3, [pc, #340]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b10:	789b      	ldrb	r3, [r3, #2]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4313      	orrs	r3, r2
 8004b16:	4a53      	ldr	r2, [pc, #332]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b18:	78d2      	ldrb	r2, [r2, #3]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	061a      	lsls	r2, r3, #24
 8004b1e:	4b51      	ldr	r3, [pc, #324]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	0619      	lsls	r1, r3, #24
 8004b24:	4b4f      	ldr	r3, [pc, #316]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	4319      	orrs	r1, r3
 8004b2c:	4b4d      	ldr	r3, [pc, #308]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b2e:	789b      	ldrb	r3, [r3, #2]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	430b      	orrs	r3, r1
 8004b34:	494b      	ldr	r1, [pc, #300]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b36:	78c9      	ldrb	r1, [r1, #3]
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b40:	431a      	orrs	r2, r3
 8004b42:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	0619      	lsls	r1, r3, #24
 8004b48:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	4319      	orrs	r1, r3
 8004b50:	4b44      	ldr	r3, [pc, #272]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b52:	789b      	ldrb	r3, [r3, #2]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	430b      	orrs	r3, r1
 8004b58:	4942      	ldr	r1, [pc, #264]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b5a:	78c9      	ldrb	r1, [r1, #3]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b64:	431a      	orrs	r2, r3
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	0619      	lsls	r1, r3, #24
 8004b6c:	4b3d      	ldr	r3, [pc, #244]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	4319      	orrs	r1, r3
 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b76:	789b      	ldrb	r3, [r3, #2]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	4939      	ldr	r1, [pc, #228]	; (8004c64 <MX_LWIP_Init+0x240>)
 8004b7e:	78c9      	ldrb	r1, [r1, #3]
 8004b80:	430b      	orrs	r3, r1
 8004b82:	0e1b      	lsrs	r3, r3, #24
 8004b84:	4313      	orrs	r3, r2
 8004b86:	4a3a      	ldr	r2, [pc, #232]	; (8004c70 <MX_LWIP_Init+0x24c>)
 8004b88:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004b8a:	4b37      	ldr	r3, [pc, #220]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	061a      	lsls	r2, r3, #24
 8004b90:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	4b33      	ldr	r3, [pc, #204]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004b9a:	789b      	ldrb	r3, [r3, #2]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a31      	ldr	r2, [pc, #196]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004ba2:	78d2      	ldrb	r2, [r2, #3]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	061a      	lsls	r2, r3, #24
 8004ba8:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	0619      	lsls	r1, r3, #24
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	4319      	orrs	r1, r3
 8004bb6:	4b2c      	ldr	r3, [pc, #176]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004bb8:	789b      	ldrb	r3, [r3, #2]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	492a      	ldr	r1, [pc, #168]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004bc0:	78c9      	ldrb	r1, [r1, #3]
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	0619      	lsls	r1, r3, #24
 8004bd2:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	4319      	orrs	r1, r3
 8004bda:	4b23      	ldr	r3, [pc, #140]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004bdc:	789b      	ldrb	r3, [r3, #2]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	430b      	orrs	r3, r1
 8004be2:	4921      	ldr	r1, [pc, #132]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004be4:	78c9      	ldrb	r1, [r1, #3]
 8004be6:	430b      	orrs	r3, r1
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	0619      	lsls	r1, r3, #24
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	041b      	lsls	r3, r3, #16
 8004bfc:	4319      	orrs	r1, r3
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004c00:	789b      	ldrb	r3, [r3, #2]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	430b      	orrs	r3, r1
 8004c06:	4918      	ldr	r1, [pc, #96]	; (8004c68 <MX_LWIP_Init+0x244>)
 8004c08:	78c9      	ldrb	r1, [r1, #3]
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	0e1b      	lsrs	r3, r3, #24
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <MX_LWIP_Init+0x250>)
 8004c12:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <MX_LWIP_Init+0x254>)
 8004c16:	9302      	str	r3, [sp, #8]
 8004c18:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <MX_LWIP_Init+0x258>)
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <MX_LWIP_Init+0x250>)
 8004c22:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <MX_LWIP_Init+0x24c>)
 8004c24:	4911      	ldr	r1, [pc, #68]	; (8004c6c <MX_LWIP_Init+0x248>)
 8004c26:	4816      	ldr	r0, [pc, #88]	; (8004c80 <MX_LWIP_Init+0x25c>)
 8004c28:	f000 ffd2 	bl	8005bd0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c2c:	4814      	ldr	r0, [pc, #80]	; (8004c80 <MX_LWIP_Init+0x25c>)
 8004c2e:	f001 f8b1 	bl	8005d94 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c32:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <MX_LWIP_Init+0x25c>)
 8004c34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004c44:	480e      	ldr	r0, [pc, #56]	; (8004c80 <MX_LWIP_Init+0x25c>)
 8004c46:	f001 f8b3 	bl	8005db0 <netif_set_up>
 8004c4a:	e002      	b.n	8004c52 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004c4c:	480c      	ldr	r0, [pc, #48]	; (8004c80 <MX_LWIP_Init+0x25c>)
 8004c4e:	f001 f8f3 	bl	8005e38 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004c52:	490c      	ldr	r1, [pc, #48]	; (8004c84 <MX_LWIP_Init+0x260>)
 8004c54:	480a      	ldr	r0, [pc, #40]	; (8004c80 <MX_LWIP_Init+0x25c>)
 8004c56:	f001 f911 	bl	8005e7c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000584 	.word	0x20000584
 8004c64:	20000580 	.word	0x20000580
 8004c68:	20000578 	.word	0x20000578
 8004c6c:	2000057c 	.word	0x2000057c
 8004c70:	20000588 	.word	0x20000588
 8004c74:	2000058c 	.word	0x2000058c
 8004c78:	0800df5d 	.word	0x0800df5d
 8004c7c:	08005211 	.word	0x08005211
 8004c80:	200000e0 	.word	0x200000e0
 8004c84:	0800527d 	.word	0x0800527d

08004c88 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08e      	sub	sp, #56	; 0x38
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a46      	ldr	r2, [pc, #280]	; (8004dc0 <HAL_ETH_MspInit+0x138>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	f040 8085 	bne.w	8004db6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004cac:	2300      	movs	r3, #0
 8004cae:	623b      	str	r3, [r7, #32]
 8004cb0:	4b44      	ldr	r3, [pc, #272]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	4a43      	ldr	r2, [pc, #268]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cba:	6313      	str	r3, [r2, #48]	; 0x30
 8004cbc:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	623b      	str	r3, [r7, #32]
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	4b3d      	ldr	r3, [pc, #244]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	4a3c      	ldr	r2, [pc, #240]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd8:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	4a35      	ldr	r2, [pc, #212]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf4:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	4a2e      	ldr	r2, [pc, #184]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d0a:	f043 0304 	orr.w	r3, r3, #4
 8004d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d10:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	4a20      	ldr	r2, [pc, #128]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d42:	f043 0302 	orr.w	r3, r3, #2
 8004d46:	6313      	str	r3, [r2, #48]	; 0x30
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <HAL_ETH_MspInit+0x13c>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004d54:	2332      	movs	r3, #50	; 0x32
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d60:	2303      	movs	r3, #3
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d64:	230b      	movs	r3, #11
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4816      	ldr	r0, [pc, #88]	; (8004dc8 <HAL_ETH_MspInit+0x140>)
 8004d70:	f7fe fe66 	bl	8003a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004d74:	2386      	movs	r3, #134	; 0x86
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d80:	2303      	movs	r3, #3
 8004d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d84:	230b      	movs	r3, #11
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	480f      	ldr	r0, [pc, #60]	; (8004dcc <HAL_ETH_MspInit+0x144>)
 8004d90:	f7fe fe56 	bl	8003a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004d94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da2:	2303      	movs	r3, #3
 8004da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004da6:	230b      	movs	r3, #11
 8004da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dae:	4619      	mov	r1, r3
 8004db0:	4807      	ldr	r0, [pc, #28]	; (8004dd0 <HAL_ETH_MspInit+0x148>)
 8004db2:	f7fe fe45 	bl	8003a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004db6:	bf00      	nop
 8004db8:	3738      	adds	r7, #56	; 0x38
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40028000 	.word	0x40028000
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40020800 	.word	0x40020800
 8004dcc:	40020000 	.word	0x40020000
 8004dd0:	40020400 	.word	0x40020400

08004dd4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004de0:	4b4d      	ldr	r3, [pc, #308]	; (8004f18 <low_level_init+0x144>)
 8004de2:	4a4e      	ldr	r2, [pc, #312]	; (8004f1c <low_level_init+0x148>)
 8004de4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004de6:	4b4c      	ldr	r3, [pc, #304]	; (8004f18 <low_level_init+0x144>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004dec:	4b4a      	ldr	r3, [pc, #296]	; (8004f18 <low_level_init+0x144>)
 8004dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004df2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004df4:	4b48      	ldr	r3, [pc, #288]	; (8004f18 <low_level_init+0x144>)
 8004df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dfa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004dfc:	4b46      	ldr	r3, [pc, #280]	; (8004f18 <low_level_init+0x144>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004e02:	2300      	movs	r3, #0
 8004e04:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004e06:	2380      	movs	r3, #128	; 0x80
 8004e08:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004e0a:	23e1      	movs	r3, #225	; 0xe1
 8004e0c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004e12:	2300      	movs	r3, #0
 8004e14:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004e16:	2300      	movs	r3, #0
 8004e18:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	; (8004f18 <low_level_init+0x144>)
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004e22:	4b3d      	ldr	r3, [pc, #244]	; (8004f18 <low_level_init+0x144>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004e28:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <low_level_init+0x144>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004e2e:	4b3a      	ldr	r3, [pc, #232]	; (8004f18 <low_level_init+0x144>)
 8004e30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e34:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e36:	4838      	ldr	r0, [pc, #224]	; (8004f18 <low_level_init+0x144>)
 8004e38:	f7fd fa2c 	bl	8002294 <HAL_ETH_Init>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d108      	bne.n	8004e58 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004e4c:	f043 0304 	orr.w	r3, r3, #4
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004e58:	2304      	movs	r3, #4
 8004e5a:	4a31      	ldr	r2, [pc, #196]	; (8004f20 <low_level_init+0x14c>)
 8004e5c:	4931      	ldr	r1, [pc, #196]	; (8004f24 <low_level_init+0x150>)
 8004e5e:	482e      	ldr	r0, [pc, #184]	; (8004f18 <low_level_init+0x144>)
 8004e60:	f7fd fba4 	bl	80025ac <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004e64:	2304      	movs	r3, #4
 8004e66:	4a30      	ldr	r2, [pc, #192]	; (8004f28 <low_level_init+0x154>)
 8004e68:	4930      	ldr	r1, [pc, #192]	; (8004f2c <low_level_init+0x158>)
 8004e6a:	482b      	ldr	r0, [pc, #172]	; (8004f18 <low_level_init+0x144>)
 8004e6c:	f7fd fc06 	bl	800267c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2206      	movs	r2, #6
 8004e74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004e78:	4b27      	ldr	r3, [pc, #156]	; (8004f18 <low_level_init+0x144>)
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004e84:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <low_level_init+0x144>)
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	785a      	ldrb	r2, [r3, #1]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004e90:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <low_level_init+0x144>)
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	789a      	ldrb	r2, [r3, #2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <low_level_init+0x144>)
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	78da      	ldrb	r2, [r3, #3]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <low_level_init+0x144>)
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	791a      	ldrb	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004eb4:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <low_level_init+0x144>)
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	795a      	ldrb	r2, [r3, #5]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ec6:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ece:	f043 030a 	orr.w	r3, r3, #10
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004eda:	480f      	ldr	r0, [pc, #60]	; (8004f18 <low_level_init+0x144>)
 8004edc:	f7fd fe75 	bl	8002bca <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004ee0:	f107 0310 	add.w	r3, r7, #16
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	211d      	movs	r1, #29
 8004ee8:	480b      	ldr	r0, [pc, #44]	; (8004f18 <low_level_init+0x144>)
 8004eea:	f7fd fda0 	bl	8002a2e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f043 030b 	orr.w	r3, r3, #11
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	211d      	movs	r1, #29
 8004efc:	4806      	ldr	r0, [pc, #24]	; (8004f18 <low_level_init+0x144>)
 8004efe:	f7fd fdfe 	bl	8002afe <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004f02:	f107 0310 	add.w	r3, r7, #16
 8004f06:	461a      	mov	r2, r3
 8004f08:	211d      	movs	r1, #29
 8004f0a:	4803      	ldr	r0, [pc, #12]	; (8004f18 <low_level_init+0x144>)
 8004f0c:	f7fd fd8f 	bl	8002a2e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20001e60 	.word	0x20001e60
 8004f1c:	40028000 	.word	0x40028000
 8004f20:	20001ea8 	.word	0x20001ea8
 8004f24:	20000590 	.word	0x20000590
 8004f28:	20000610 	.word	0x20000610
 8004f2c:	20001de0 	.word	0x20001de0

08004f30 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004f3a:	4b4b      	ldr	r3, [pc, #300]	; (8005068 <low_level_output+0x138>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004f52:	4b45      	ldr	r3, [pc, #276]	; (8005068 <low_level_output+0x138>)
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	e05a      	b.n	8005018 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	da03      	bge.n	8004f72 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004f6a:	23f8      	movs	r3, #248	; 0xf8
 8004f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004f70:	e05c      	b.n	800502c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	895b      	ldrh	r3, [r3, #10]
 8004f76:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f7c:	e02f      	b.n	8004fde <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	18d0      	adds	r0, r2, r3
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	18d1      	adds	r1, r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004f92:	3304      	adds	r3, #4
 8004f94:	461a      	mov	r2, r3
 8004f96:	f009 f95d 	bl	800e254 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da03      	bge.n	8004fb0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004fa8:	23f8      	movs	r3, #248	; 0xf8
 8004faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004fae:	e03d      	b.n	800502c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004fc0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004fcc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004fd8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d8c8      	bhi.n	8004f7e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	18d0      	adds	r0, r2, r3
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f009 f929 	bl	800e254 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1a1      	bne.n	8004f62 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800501e:	6979      	ldr	r1, [r7, #20]
 8005020:	4811      	ldr	r0, [pc, #68]	; (8005068 <low_level_output+0x138>)
 8005022:	f7fd fb97 	bl	8002754 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800502c:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <low_level_output+0x138>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005034:	3314      	adds	r3, #20
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <low_level_output+0x138>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005048:	3314      	adds	r3, #20
 800504a:	2220      	movs	r2, #32
 800504c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <low_level_output+0x138>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005056:	3304      	adds	r3, #4
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800505c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005060:	4618      	mov	r0, r3
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20001e60 	.word	0x20001e60

0800506c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	; 0x30
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005090:	484e      	ldr	r0, [pc, #312]	; (80051cc <low_level_input+0x160>)
 8005092:	f7fd fc49 	bl	8002928 <HAL_ETH_GetReceivedFrame>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <low_level_input+0x34>

    return NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	e091      	b.n	80051c4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80050a0:	4b4a      	ldr	r3, [pc, #296]	; (80051cc <low_level_input+0x160>)
 80050a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80050a6:	4b49      	ldr	r3, [pc, #292]	; (80051cc <low_level_input+0x160>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80050ac:	89fb      	ldrh	r3, [r7, #14]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80050b2:	89fb      	ldrh	r3, [r7, #14]
 80050b4:	2203      	movs	r2, #3
 80050b6:	4619      	mov	r1, r3
 80050b8:	2004      	movs	r0, #4
 80050ba:	f000 ff1f 	bl	8005efc <pbuf_alloc>
 80050be:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04b      	beq.n	800515e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80050c6:	4b41      	ldr	r3, [pc, #260]	; (80051cc <low_level_input+0x160>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d4:	e040      	b.n	8005158 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	895b      	ldrh	r3, [r3, #10]
 80050da:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80050e0:	e021      	b.n	8005126 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	18d0      	adds	r0, r2, r3
 80050ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	18d1      	adds	r1, r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80050f6:	3304      	adds	r3, #4
 80050f8:	461a      	mov	r2, r3
 80050fa:	f009 f8ab 	bl	800e254 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005114:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005120:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005130:	4293      	cmp	r3, r2
 8005132:	d8d6      	bhi.n	80050e2 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	18d0      	adds	r0, r2, r3
 800513c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4619      	mov	r1, r3
 8005146:	f009 f885 	bl	800e254 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1bb      	bne.n	80050d6 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800515e:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <low_level_input+0x160>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	e00b      	b.n	8005182 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3301      	adds	r3, #1
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	4b12      	ldr	r3, [pc, #72]	; (80051cc <low_level_input+0x160>)
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d3ee      	bcc.n	800516a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <low_level_input+0x160>)
 800518e:	2200      	movs	r2, #0
 8005190:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <low_level_input+0x160>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519a:	3314      	adds	r3, #20
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <low_level_input+0x160>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ae:	3314      	adds	r3, #20
 80051b0:	2280      	movs	r2, #128	; 0x80
 80051b2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <low_level_input+0x160>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051bc:	3308      	adds	r3, #8
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
  }
  return p;
 80051c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3730      	adds	r7, #48	; 0x30
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20001e60 	.word	0x20001e60

080051d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff ff47 	bl	800506c <low_level_input>
 80051de:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d010      	beq.n	8005208 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	4798      	blx	r3
 80051f0:	4603      	mov	r3, r0
 80051f2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80051f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f001 f9ef 	bl	80065e0 <pbuf_free>
    p = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e000      	b.n	800520a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005208:	bf00      	nop
  }
}
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <ethernetif_init+0x1c>
 800521e:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <ethernetif_init+0x48>)
 8005220:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005224:	490d      	ldr	r1, [pc, #52]	; (800525c <ethernetif_init+0x4c>)
 8005226:	480e      	ldr	r0, [pc, #56]	; (8005260 <ethernetif_init+0x50>)
 8005228:	f009 f8d0 	bl	800e3cc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2273      	movs	r2, #115	; 0x73
 8005230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2274      	movs	r2, #116	; 0x74
 8005238:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <ethernetif_init+0x54>)
 8005240:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a08      	ldr	r2, [pc, #32]	; (8005268 <ethernetif_init+0x58>)
 8005246:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fdc3 	bl	8004dd4 <low_level_init>

  return ERR_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	0800f6b4 	.word	0x0800f6b4
 800525c:	0800f6d0 	.word	0x0800f6d0
 8005260:	0800f6e0 	.word	0x0800f6e0
 8005264:	0800c53d 	.word	0x0800c53d
 8005268:	08004f31 	.word	0x08004f31

0800526c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005270:	f7fc fefe 	bl	8002070 <HAL_GetTick>
 8005274:	4603      	mov	r3, r0
}
 8005276:	4618      	mov	r0, r3
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005292:	089b      	lsrs	r3, r3, #2
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d05d      	beq.n	800535a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800529e:	4b34      	ldr	r3, [pc, #208]	; (8005370 <ethernetif_update_config+0xf4>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d03f      	beq.n	8005326 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80052a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052aa:	2100      	movs	r1, #0
 80052ac:	4830      	ldr	r0, [pc, #192]	; (8005370 <ethernetif_update_config+0xf4>)
 80052ae:	f7fd fc26 	bl	8002afe <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80052b2:	f7fc fedd 	bl	8002070 <HAL_GetTick>
 80052b6:	4603      	mov	r3, r0
 80052b8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80052ba:	f107 0308 	add.w	r3, r7, #8
 80052be:	461a      	mov	r2, r3
 80052c0:	2101      	movs	r1, #1
 80052c2:	482b      	ldr	r0, [pc, #172]	; (8005370 <ethernetif_update_config+0xf4>)
 80052c4:	f7fd fbb3 	bl	8002a2e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80052c8:	f7fc fed2 	bl	8002070 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d6:	d828      	bhi.n	800532a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0eb      	beq.n	80052ba <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	461a      	mov	r2, r3
 80052e8:	2110      	movs	r1, #16
 80052ea:	4821      	ldr	r0, [pc, #132]	; (8005370 <ethernetif_update_config+0xf4>)
 80052ec:	f7fd fb9f 	bl	8002a2e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80052fa:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <ethernetif_update_config+0xf4>)
 80052fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	e002      	b.n	800530a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005304:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <ethernetif_update_config+0xf4>)
 8005306:	2200      	movs	r2, #0
 8005308:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005314:	4b16      	ldr	r3, [pc, #88]	; (8005370 <ethernetif_update_config+0xf4>)
 8005316:	2200      	movs	r2, #0
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	e016      	b.n	800534a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <ethernetif_update_config+0xf4>)
 800531e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	e011      	b.n	800534a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005326:	bf00      	nop
 8005328:	e000      	b.n	800532c <ethernetif_update_config+0xb0>
          goto error;
 800532a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <ethernetif_update_config+0xf4>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	08db      	lsrs	r3, r3, #3
 8005332:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005334:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <ethernetif_update_config+0xf4>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800533c:	4313      	orrs	r3, r2
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	2100      	movs	r1, #0
 8005344:	480a      	ldr	r0, [pc, #40]	; (8005370 <ethernetif_update_config+0xf4>)
 8005346:	f7fd fbda 	bl	8002afe <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800534a:	2100      	movs	r1, #0
 800534c:	4808      	ldr	r0, [pc, #32]	; (8005370 <ethernetif_update_config+0xf4>)
 800534e:	f7fd fc9b 	bl	8002c88 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005352:	4807      	ldr	r0, [pc, #28]	; (8005370 <ethernetif_update_config+0xf4>)
 8005354:	f7fd fc39 	bl	8002bca <HAL_ETH_Start>
 8005358:	e002      	b.n	8005360 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800535a:	4805      	ldr	r0, [pc, #20]	; (8005370 <ethernetif_update_config+0xf4>)
 800535c:	f7fd fc64 	bl	8002c28 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f807 	bl	8005374 <ethernetif_notify_conn_changed>
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20001e60 	.word	0x20001e60

08005374 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	4603      	mov	r3, r0
 800538e:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	ba5b      	rev16	r3, r3
 8005394:	b29b      	uxth	r3, r3
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	061a      	lsls	r2, r3, #24
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	0e1b      	lsrs	r3, r3, #24
 80053c4:	4313      	orrs	r3, r2
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80053da:	f000 f8a7 	bl	800552c <mem_init>
  memp_init();
 80053de:	f000 fb37 	bl	8005a50 <memp_init>
  pbuf_init();
  netif_init();
 80053e2:	f000 fbef 	bl	8005bc4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80053e6:	f006 f8ab 	bl	800b540 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80053ea:	f001 fc03 	bl	8006bf4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80053ee:	f005 ff89 	bl	800b304 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005404:	4b40      	ldr	r3, [pc, #256]	; (8005508 <plug_holes+0x10c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d206      	bcs.n	800541c <plug_holes+0x20>
 800540e:	4b3f      	ldr	r3, [pc, #252]	; (800550c <plug_holes+0x110>)
 8005410:	f240 125d 	movw	r2, #349	; 0x15d
 8005414:	493e      	ldr	r1, [pc, #248]	; (8005510 <plug_holes+0x114>)
 8005416:	483f      	ldr	r0, [pc, #252]	; (8005514 <plug_holes+0x118>)
 8005418:	f008 ffd8 	bl	800e3cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800541c:	4b3e      	ldr	r3, [pc, #248]	; (8005518 <plug_holes+0x11c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	429a      	cmp	r2, r3
 8005424:	d306      	bcc.n	8005434 <plug_holes+0x38>
 8005426:	4b39      	ldr	r3, [pc, #228]	; (800550c <plug_holes+0x110>)
 8005428:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800542c:	493b      	ldr	r1, [pc, #236]	; (800551c <plug_holes+0x120>)
 800542e:	4839      	ldr	r0, [pc, #228]	; (8005514 <plug_holes+0x118>)
 8005430:	f008 ffcc 	bl	800e3cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	791b      	ldrb	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <plug_holes+0x4e>
 800543c:	4b33      	ldr	r3, [pc, #204]	; (800550c <plug_holes+0x110>)
 800543e:	f240 125f 	movw	r2, #351	; 0x15f
 8005442:	4937      	ldr	r1, [pc, #220]	; (8005520 <plug_holes+0x124>)
 8005444:	4833      	ldr	r0, [pc, #204]	; (8005514 <plug_holes+0x118>)
 8005446:	f008 ffc1 	bl	800e3cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005452:	d906      	bls.n	8005462 <plug_holes+0x66>
 8005454:	4b2d      	ldr	r3, [pc, #180]	; (800550c <plug_holes+0x110>)
 8005456:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800545a:	4932      	ldr	r1, [pc, #200]	; (8005524 <plug_holes+0x128>)
 800545c:	482d      	ldr	r0, [pc, #180]	; (8005514 <plug_holes+0x118>)
 800545e:	f008 ffb5 	bl	800e3cc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8005462:	4b29      	ldr	r3, [pc, #164]	; (8005508 <plug_holes+0x10c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	8812      	ldrh	r2, [r2, #0]
 800546a:	4413      	add	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	429a      	cmp	r2, r3
 8005474:	d01f      	beq.n	80054b6 <plug_holes+0xba>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	791b      	ldrb	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d11b      	bne.n	80054b6 <plug_holes+0xba>
 800547e:	4b26      	ldr	r3, [pc, #152]	; (8005518 <plug_holes+0x11c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	429a      	cmp	r2, r3
 8005486:	d016      	beq.n	80054b6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005488:	4b27      	ldr	r3, [pc, #156]	; (8005528 <plug_holes+0x12c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	429a      	cmp	r2, r3
 8005490:	d102      	bne.n	8005498 <plug_holes+0x9c>
      lfree = mem;
 8005492:	4a25      	ldr	r2, [pc, #148]	; (8005528 <plug_holes+0x12c>)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	881a      	ldrh	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <plug_holes+0x10c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	1ad1      	subs	r1, r2, r3
 80054a8:	4b17      	ldr	r3, [pc, #92]	; (8005508 <plug_holes+0x10c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	8812      	ldrh	r2, [r2, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	b28a      	uxth	r2, r1
 80054b4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80054b6:	4b14      	ldr	r3, [pc, #80]	; (8005508 <plug_holes+0x10c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	8852      	ldrh	r2, [r2, #2]
 80054be:	4413      	add	r3, r2
 80054c0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d01a      	beq.n	8005500 <plug_holes+0x104>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	791b      	ldrb	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d116      	bne.n	8005500 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80054d2:	4b15      	ldr	r3, [pc, #84]	; (8005528 <plug_holes+0x12c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d102      	bne.n	80054e2 <plug_holes+0xe6>
      lfree = pmem;
 80054dc:	4a12      	ldr	r2, [pc, #72]	; (8005528 <plug_holes+0x12c>)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	881a      	ldrh	r2, [r3, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <plug_holes+0x10c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	1ad1      	subs	r1, r2, r3
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <plug_holes+0x10c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	8812      	ldrh	r2, [r2, #0]
 80054fa:	4413      	add	r3, r2
 80054fc:	b28a      	uxth	r2, r1
 80054fe:	805a      	strh	r2, [r3, #2]
  }
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200003d8 	.word	0x200003d8
 800550c:	0800f708 	.word	0x0800f708
 8005510:	0800f738 	.word	0x0800f738
 8005514:	0800f750 	.word	0x0800f750
 8005518:	200003dc 	.word	0x200003dc
 800551c:	0800f778 	.word	0x0800f778
 8005520:	0800f794 	.word	0x0800f794
 8005524:	0800f7b0 	.word	0x0800f7b0
 8005528:	200003e0 	.word	0x200003e0

0800552c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <mem_init+0x68>)
 8005534:	3303      	adds	r3, #3
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	461a      	mov	r2, r3
 800553c:	4b16      	ldr	r3, [pc, #88]	; (8005598 <mem_init+0x6c>)
 800553e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005540:	4b15      	ldr	r3, [pc, #84]	; (8005598 <mem_init+0x6c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800554c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <mem_init+0x6c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8005562:	4a0e      	ldr	r2, [pc, #56]	; (800559c <mem_init+0x70>)
 8005564:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <mem_init+0x70>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800556e:	4b0b      	ldr	r3, [pc, #44]	; (800559c <mem_init+0x70>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005576:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005578:	4b08      	ldr	r3, [pc, #32]	; (800559c <mem_init+0x70>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005580:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <mem_init+0x6c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a06      	ldr	r2, [pc, #24]	; (80055a0 <mem_init+0x74>)
 8005588:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	20003690 	.word	0x20003690
 8005598:	200003d8 	.word	0x200003d8
 800559c:	200003dc 	.word	0x200003dc
 80055a0:	200003e0 	.word	0x200003e0

080055a4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d043      	beq.n	800563a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d006      	beq.n	80055ca <mem_free+0x26>
 80055bc:	4b22      	ldr	r3, [pc, #136]	; (8005648 <mem_free+0xa4>)
 80055be:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80055c2:	4922      	ldr	r1, [pc, #136]	; (800564c <mem_free+0xa8>)
 80055c4:	4822      	ldr	r0, [pc, #136]	; (8005650 <mem_free+0xac>)
 80055c6:	f008 ff01 	bl	800e3cc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80055ca:	4b22      	ldr	r3, [pc, #136]	; (8005654 <mem_free+0xb0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d304      	bcc.n	80055de <mem_free+0x3a>
 80055d4:	4b20      	ldr	r3, [pc, #128]	; (8005658 <mem_free+0xb4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d306      	bcc.n	80055ec <mem_free+0x48>
 80055de:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <mem_free+0xa4>)
 80055e0:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80055e4:	491d      	ldr	r1, [pc, #116]	; (800565c <mem_free+0xb8>)
 80055e6:	481a      	ldr	r0, [pc, #104]	; (8005650 <mem_free+0xac>)
 80055e8:	f008 fef0 	bl	800e3cc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80055ec:	4b19      	ldr	r3, [pc, #100]	; (8005654 <mem_free+0xb0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d323      	bcc.n	800563e <mem_free+0x9a>
 80055f6:	4b18      	ldr	r3, [pc, #96]	; (8005658 <mem_free+0xb4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d21e      	bcs.n	800563e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3b08      	subs	r3, #8
 8005604:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	791b      	ldrb	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <mem_free+0x78>
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <mem_free+0xa4>)
 8005610:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005614:	4912      	ldr	r1, [pc, #72]	; (8005660 <mem_free+0xbc>)
 8005616:	480e      	ldr	r0, [pc, #56]	; (8005650 <mem_free+0xac>)
 8005618:	f008 fed8 	bl	800e3cc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <mem_free+0xc0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	429a      	cmp	r2, r3
 800562a:	d202      	bcs.n	8005632 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800562c:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <mem_free+0xc0>)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff fee2 	bl	80053fc <plug_holes>
 8005638:	e002      	b.n	8005640 <mem_free+0x9c>
    return;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <mem_free+0x9c>
    return;
 800563e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	0800f708 	.word	0x0800f708
 800564c:	0800f7dc 	.word	0x0800f7dc
 8005650:	0800f750 	.word	0x0800f750
 8005654:	200003d8 	.word	0x200003d8
 8005658:	200003dc 	.word	0x200003dc
 800565c:	0800f800 	.word	0x0800f800
 8005660:	0800f818 	.word	0x0800f818
 8005664:	200003e0 	.word	0x200003e0

08005668 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005674:	887b      	ldrh	r3, [r7, #2]
 8005676:	3303      	adds	r3, #3
 8005678:	b29b      	uxth	r3, r3
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8005680:	887b      	ldrh	r3, [r7, #2]
 8005682:	2b0b      	cmp	r3, #11
 8005684:	d801      	bhi.n	800568a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005686:	230c      	movs	r3, #12
 8005688:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800568a:	887b      	ldrh	r3, [r7, #2]
 800568c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005690:	d901      	bls.n	8005696 <mem_trim+0x2e>
    return NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	e0b1      	b.n	80057fa <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005696:	4b5b      	ldr	r3, [pc, #364]	; (8005804 <mem_trim+0x19c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d304      	bcc.n	80056aa <mem_trim+0x42>
 80056a0:	4b59      	ldr	r3, [pc, #356]	; (8005808 <mem_trim+0x1a0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d306      	bcc.n	80056b8 <mem_trim+0x50>
 80056aa:	4b58      	ldr	r3, [pc, #352]	; (800580c <mem_trim+0x1a4>)
 80056ac:	f240 12f3 	movw	r2, #499	; 0x1f3
 80056b0:	4957      	ldr	r1, [pc, #348]	; (8005810 <mem_trim+0x1a8>)
 80056b2:	4858      	ldr	r0, [pc, #352]	; (8005814 <mem_trim+0x1ac>)
 80056b4:	f008 fe8a 	bl	800e3cc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80056b8:	4b52      	ldr	r3, [pc, #328]	; (8005804 <mem_trim+0x19c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d304      	bcc.n	80056cc <mem_trim+0x64>
 80056c2:	4b51      	ldr	r3, [pc, #324]	; (8005808 <mem_trim+0x1a0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d301      	bcc.n	80056d0 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	e094      	b.n	80057fa <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3b08      	subs	r3, #8
 80056d4:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80056d6:	4b4b      	ldr	r3, [pc, #300]	; (8005804 <mem_trim+0x19c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	881a      	ldrh	r2, [r3, #0]
 80056e4:	8a7b      	ldrh	r3, [r7, #18]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b08      	subs	r3, #8
 80056ec:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80056ee:	887a      	ldrh	r2, [r7, #2]
 80056f0:	8a3b      	ldrh	r3, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d906      	bls.n	8005704 <mem_trim+0x9c>
 80056f6:	4b45      	ldr	r3, [pc, #276]	; (800580c <mem_trim+0x1a4>)
 80056f8:	f240 2206 	movw	r2, #518	; 0x206
 80056fc:	4946      	ldr	r1, [pc, #280]	; (8005818 <mem_trim+0x1b0>)
 80056fe:	4845      	ldr	r0, [pc, #276]	; (8005814 <mem_trim+0x1ac>)
 8005700:	f008 fe64 	bl	800e3cc <iprintf>
  if (newsize > size) {
 8005704:	887a      	ldrh	r2, [r7, #2]
 8005706:	8a3b      	ldrh	r3, [r7, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	d901      	bls.n	8005710 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	e074      	b.n	80057fa <mem_trim+0x192>
  }
  if (newsize == size) {
 8005710:	887a      	ldrh	r2, [r7, #2]
 8005712:	8a3b      	ldrh	r3, [r7, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	d101      	bne.n	800571c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	e06e      	b.n	80057fa <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800571c:	4b39      	ldr	r3, [pc, #228]	; (8005804 <mem_trim+0x19c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	4413      	add	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d131      	bne.n	8005794 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005736:	8a7a      	ldrh	r2, [r7, #18]
 8005738:	887b      	ldrh	r3, [r7, #2]
 800573a:	4413      	add	r3, r2
 800573c:	b29b      	uxth	r3, r3
 800573e:	3308      	adds	r3, #8
 8005740:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8005742:	4b36      	ldr	r3, [pc, #216]	; (800581c <mem_trim+0x1b4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d105      	bne.n	8005758 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800574c:	4b2d      	ldr	r3, [pc, #180]	; (8005804 <mem_trim+0x19c>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	897b      	ldrh	r3, [r7, #10]
 8005752:	4413      	add	r3, r2
 8005754:	4a31      	ldr	r2, [pc, #196]	; (800581c <mem_trim+0x1b4>)
 8005756:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005758:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <mem_trim+0x19c>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	897b      	ldrh	r3, [r7, #10]
 800575e:	4413      	add	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	893a      	ldrh	r2, [r7, #8]
 800576c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8a7a      	ldrh	r2, [r7, #18]
 8005772:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	897a      	ldrh	r2, [r7, #10]
 8005778:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005782:	d039      	beq.n	80057f8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005784:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <mem_trim+0x19c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	4413      	add	r3, r2
 800578e:	897a      	ldrh	r2, [r7, #10]
 8005790:	805a      	strh	r2, [r3, #2]
 8005792:	e031      	b.n	80057f8 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005794:	887b      	ldrh	r3, [r7, #2]
 8005796:	f103 0214 	add.w	r2, r3, #20
 800579a:	8a3b      	ldrh	r3, [r7, #16]
 800579c:	429a      	cmp	r2, r3
 800579e:	d82b      	bhi.n	80057f8 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80057a0:	8a7a      	ldrh	r2, [r7, #18]
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	4413      	add	r3, r2
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3308      	adds	r3, #8
 80057aa:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80057ac:	4b15      	ldr	r3, [pc, #84]	; (8005804 <mem_trim+0x19c>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	897b      	ldrh	r3, [r7, #10]
 80057b2:	4413      	add	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <mem_trim+0x1b4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d202      	bcs.n	80057c6 <mem_trim+0x15e>
      lfree = mem2;
 80057c0:	4a16      	ldr	r2, [pc, #88]	; (800581c <mem_trim+0x1b4>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	881a      	ldrh	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8a7a      	ldrh	r2, [r7, #18]
 80057d8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	897a      	ldrh	r2, [r7, #10]
 80057de:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057e8:	d006      	beq.n	80057f8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <mem_trim+0x19c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	8812      	ldrh	r2, [r2, #0]
 80057f2:	4413      	add	r3, r2
 80057f4:	897a      	ldrh	r2, [r7, #10]
 80057f6:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80057f8:	687b      	ldr	r3, [r7, #4]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	200003d8 	.word	0x200003d8
 8005808:	200003dc 	.word	0x200003dc
 800580c:	0800f708 	.word	0x0800f708
 8005810:	0800f82c 	.word	0x0800f82c
 8005814:	0800f750 	.word	0x0800f750
 8005818:	0800f844 	.word	0x0800f844
 800581c:	200003e0 	.word	0x200003e0

08005820 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <mem_malloc+0x14>
    return NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	e0c7      	b.n	80059c4 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	3303      	adds	r3, #3
 8005838:	b29b      	uxth	r3, r3
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	2b0b      	cmp	r3, #11
 8005844:	d801      	bhi.n	800584a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005846:	230c      	movs	r3, #12
 8005848:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005850:	d901      	bls.n	8005856 <mem_malloc+0x36>
    return NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	e0b6      	b.n	80059c4 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005856:	4b5d      	ldr	r3, [pc, #372]	; (80059cc <mem_malloc+0x1ac>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b5d      	ldr	r3, [pc, #372]	; (80059d0 <mem_malloc+0x1b0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	83fb      	strh	r3, [r7, #30]
 8005862:	e0a7      	b.n	80059b4 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8005864:	4b5a      	ldr	r3, [pc, #360]	; (80059d0 <mem_malloc+0x1b0>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	8bfb      	ldrh	r3, [r7, #30]
 800586a:	4413      	add	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	791b      	ldrb	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f040 8098 	bne.w	80059a8 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	8bfb      	ldrh	r3, [r7, #30]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f1a3 0208 	sub.w	r2, r3, #8
 8005886:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8005888:	429a      	cmp	r2, r3
 800588a:	f0c0 808d 	bcc.w	80059a8 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	8bfb      	ldrh	r3, [r7, #30]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f1a3 0208 	sub.w	r2, r3, #8
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	3314      	adds	r3, #20
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d327      	bcc.n	80058f4 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80058a4:	8bfa      	ldrh	r2, [r7, #30]
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	4413      	add	r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3308      	adds	r3, #8
 80058ae:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80058b0:	4b47      	ldr	r3, [pc, #284]	; (80059d0 <mem_malloc+0x1b0>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	8a7b      	ldrh	r3, [r7, #18]
 80058b6:	4413      	add	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	881a      	ldrh	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8bfa      	ldrh	r2, [r7, #30]
 80058cc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	8a7a      	ldrh	r2, [r7, #18]
 80058d2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2201      	movs	r2, #1
 80058d8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058e2:	d00a      	beq.n	80058fa <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80058e4:	4b3a      	ldr	r3, [pc, #232]	; (80059d0 <mem_malloc+0x1b0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	8812      	ldrh	r2, [r2, #0]
 80058ec:	4413      	add	r3, r2
 80058ee:	8a7a      	ldrh	r2, [r7, #18]
 80058f0:	805a      	strh	r2, [r3, #2]
 80058f2:	e002      	b.n	80058fa <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2201      	movs	r2, #1
 80058f8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80058fa:	4b34      	ldr	r3, [pc, #208]	; (80059cc <mem_malloc+0x1ac>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	429a      	cmp	r2, r3
 8005902:	d127      	bne.n	8005954 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8005904:	4b31      	ldr	r3, [pc, #196]	; (80059cc <mem_malloc+0x1ac>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800590a:	e005      	b.n	8005918 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800590c:	4b30      	ldr	r3, [pc, #192]	; (80059d0 <mem_malloc+0x1b0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	8812      	ldrh	r2, [r2, #0]
 8005914:	4413      	add	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	791b      	ldrb	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <mem_malloc+0x10a>
 8005920:	4b2c      	ldr	r3, [pc, #176]	; (80059d4 <mem_malloc+0x1b4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d1f0      	bne.n	800590c <mem_malloc+0xec>
          }
          lfree = cur;
 800592a:	4a28      	ldr	r2, [pc, #160]	; (80059cc <mem_malloc+0x1ac>)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005930:	4b26      	ldr	r3, [pc, #152]	; (80059cc <mem_malloc+0x1ac>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <mem_malloc+0x1b4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d00b      	beq.n	8005954 <mem_malloc+0x134>
 800593c:	4b23      	ldr	r3, [pc, #140]	; (80059cc <mem_malloc+0x1ac>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	791b      	ldrb	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d006      	beq.n	8005954 <mem_malloc+0x134>
 8005946:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <mem_malloc+0x1b8>)
 8005948:	f240 22cf 	movw	r2, #719	; 0x2cf
 800594c:	4923      	ldr	r1, [pc, #140]	; (80059dc <mem_malloc+0x1bc>)
 800594e:	4824      	ldr	r0, [pc, #144]	; (80059e0 <mem_malloc+0x1c0>)
 8005950:	f008 fd3c 	bl	800e3cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	3308      	adds	r3, #8
 800595c:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <mem_malloc+0x1b4>)
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	4293      	cmp	r3, r2
 8005962:	d906      	bls.n	8005972 <mem_malloc+0x152>
 8005964:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <mem_malloc+0x1b8>)
 8005966:	f240 22d3 	movw	r2, #723	; 0x2d3
 800596a:	491e      	ldr	r1, [pc, #120]	; (80059e4 <mem_malloc+0x1c4>)
 800596c:	481c      	ldr	r0, [pc, #112]	; (80059e0 <mem_malloc+0x1c0>)
 800596e:	f008 fd2d 	bl	800e3cc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d006      	beq.n	800598a <mem_malloc+0x16a>
 800597c:	4b16      	ldr	r3, [pc, #88]	; (80059d8 <mem_malloc+0x1b8>)
 800597e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8005982:	4919      	ldr	r1, [pc, #100]	; (80059e8 <mem_malloc+0x1c8>)
 8005984:	4816      	ldr	r0, [pc, #88]	; (80059e0 <mem_malloc+0x1c0>)
 8005986:	f008 fd21 	bl	800e3cc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <mem_malloc+0x182>
 8005994:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <mem_malloc+0x1b8>)
 8005996:	f240 22d7 	movw	r2, #727	; 0x2d7
 800599a:	4914      	ldr	r1, [pc, #80]	; (80059ec <mem_malloc+0x1cc>)
 800599c:	4810      	ldr	r0, [pc, #64]	; (80059e0 <mem_malloc+0x1c0>)
 800599e:	f008 fd15 	bl	800e3cc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	3308      	adds	r3, #8
 80059a6:	e00d      	b.n	80059c4 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <mem_malloc+0x1b0>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	8bfb      	ldrh	r3, [r7, #30]
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80059b4:	8bfa      	ldrh	r2, [r7, #30]
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80059bc:	429a      	cmp	r2, r3
 80059be:	f4ff af51 	bcc.w	8005864 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200003e0 	.word	0x200003e0
 80059d0:	200003d8 	.word	0x200003d8
 80059d4:	200003dc 	.word	0x200003dc
 80059d8:	0800f708 	.word	0x0800f708
 80059dc:	0800f864 	.word	0x0800f864
 80059e0:	0800f750 	.word	0x0800f750
 80059e4:	0800f880 	.word	0x0800f880
 80059e8:	0800f8b0 	.word	0x0800f8b0
 80059ec:	0800f8e0 	.word	0x0800f8e0

080059f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	3303      	adds	r3, #3
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e011      	b.n	8005a36 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	885b      	ldrh	r3, [r3, #2]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	dbe7      	blt.n	8005a12 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr
	...

08005a50 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005a56:	2300      	movs	r3, #0
 8005a58:	80fb      	strh	r3, [r7, #6]
 8005a5a:	e009      	b.n	8005a70 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <memp_init+0x30>)
 8005a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff ffc3 	bl	80059f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	80fb      	strh	r3, [r7, #6]
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d9f2      	bls.n	8005a5c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	08011408 	.word	0x08011408

08005a84 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d012      	beq.n	8005ac0 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <do_memp_malloc_pool+0x38>
 8005aae:	4b07      	ldr	r3, [pc, #28]	; (8005acc <do_memp_malloc_pool+0x48>)
 8005ab0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8005ab4:	4906      	ldr	r1, [pc, #24]	; (8005ad0 <do_memp_malloc_pool+0x4c>)
 8005ab6:	4807      	ldr	r0, [pc, #28]	; (8005ad4 <do_memp_malloc_pool+0x50>)
 8005ab8:	f008 fc88 	bl	800e3cc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	e000      	b.n	8005ac2 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	0800f904 	.word	0x0800f904
 8005ad0:	0800f934 	.word	0x0800f934
 8005ad4:	0800f958 	.word	0x0800f958

08005ad8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005ae2:	79fb      	ldrb	r3, [r7, #7]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d908      	bls.n	8005afa <memp_malloc+0x22>
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <memp_malloc+0x3c>)
 8005aea:	f240 1287 	movw	r2, #391	; 0x187
 8005aee:	490a      	ldr	r1, [pc, #40]	; (8005b18 <memp_malloc+0x40>)
 8005af0:	480a      	ldr	r0, [pc, #40]	; (8005b1c <memp_malloc+0x44>)
 8005af2:	f008 fc6b 	bl	800e3cc <iprintf>
 8005af6:	2300      	movs	r3, #0
 8005af8:	e008      	b.n	8005b0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	4a08      	ldr	r2, [pc, #32]	; (8005b20 <memp_malloc+0x48>)
 8005afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff ffbe 	bl	8005a84 <do_memp_malloc_pool>
 8005b08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	0800f904 	.word	0x0800f904
 8005b18:	0800f994 	.word	0x0800f994
 8005b1c:	0800f958 	.word	0x0800f958
 8005b20:	08011408 	.word	0x08011408

08005b24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d006      	beq.n	8005b46 <do_memp_free_pool+0x22>
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <do_memp_free_pool+0x40>)
 8005b3a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005b3e:	490a      	ldr	r1, [pc, #40]	; (8005b68 <do_memp_free_pool+0x44>)
 8005b40:	480a      	ldr	r0, [pc, #40]	; (8005b6c <do_memp_free_pool+0x48>)
 8005b42:	f008 fc43 	bl	800e3cc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	0800f904 	.word	0x0800f904
 8005b68:	0800f9b4 	.word	0x0800f9b4
 8005b6c:	0800f958 	.word	0x0800f958

08005b70 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	6039      	str	r1, [r7, #0]
 8005b7a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d907      	bls.n	8005b92 <memp_free+0x22>
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <memp_free+0x44>)
 8005b84:	f240 12db 	movw	r2, #475	; 0x1db
 8005b88:	490b      	ldr	r1, [pc, #44]	; (8005bb8 <memp_free+0x48>)
 8005b8a:	480c      	ldr	r0, [pc, #48]	; (8005bbc <memp_free+0x4c>)
 8005b8c:	f008 fc1e 	bl	800e3cc <iprintf>
 8005b90:	e00c      	b.n	8005bac <memp_free+0x3c>

  if (mem == NULL) {
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <memp_free+0x50>)
 8005b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff ffbe 	bl	8005b24 <do_memp_free_pool>
 8005ba8:	e000      	b.n	8005bac <memp_free+0x3c>
    return;
 8005baa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	0800f904 	.word	0x0800f904
 8005bb8:	0800f9d4 	.word	0x0800f9d4
 8005bbc:	0800f958 	.word	0x0800f958
 8005bc0:	08011408 	.word	0x08011408

08005bc4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005bc8:	bf00      	nop
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <netif_add+0x20>
 8005be4:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <netif_add+0x9c>)
 8005be6:	22fb      	movs	r2, #251	; 0xfb
 8005be8:	4921      	ldr	r1, [pc, #132]	; (8005c70 <netif_add+0xa0>)
 8005bea:	4822      	ldr	r0, [pc, #136]	; (8005c74 <netif_add+0xa4>)
 8005bec:	f008 fbee 	bl	800e3cc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8005c1e:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <netif_add+0xa8>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	b2d1      	uxtb	r1, r2
 8005c26:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <netif_add+0xa8>)
 8005c28:	7011      	strb	r1, [r2, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a3a      	ldr	r2, [r7, #32]
 8005c34:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f81f 	bl	8005c80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	4798      	blx	r3
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <netif_add+0x82>
    return NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e007      	b.n	8005c62 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005c52:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <netif_add+0xac>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <netif_add+0xac>)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8005c60:	68fb      	ldr	r3, [r7, #12]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	0800f9f0 	.word	0x0800f9f0
 8005c70:	0800fa24 	.word	0x0800fa24
 8005c74:	0800fa3c 	.word	0x0800fa3c
 8005c78:	20000408 	.word	0x20000408
 8005c7c:	20006b98 	.word	0x20006b98

08005c80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <netif_set_addr+0x1c>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10c      	bne.n	8005cb6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f81a 	bl	8005cd8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f861 	bl	8005d6e <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f84a 	bl	8005d48 <netif_set_gw>
 8005cb4:	e00c      	b.n	8005cd0 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f858 	bl	8005d6e <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f841 	bl	8005d48 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f805 	bl	8005cd8 <netif_set_ipaddr>
  }
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <netif_set_ipaddr+0x18>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	e002      	b.n	8005cf6 <netif_set_ipaddr+0x1e>
 8005cf0:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <netif_set_ipaddr+0x6c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d01c      	beq.n	8005d3c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	f107 020c 	add.w	r2, r7, #12
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f002 f905 	bl	8007f1c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3304      	adds	r3, #4
 8005d16:	f107 020c 	add.w	r2, r7, #12
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f005 ffbf 	bl	800bca0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <netif_set_ipaddr+0x56>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	e000      	b.n	8005d30 <netif_set_ipaddr+0x58>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005d34:	2101      	movs	r1, #1
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f85d 	bl	8005df6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	0801146c 	.word	0x0801146c

08005d48 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <netif_set_gw+0x16>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	e000      	b.n	8005d60 <netif_set_gw+0x18>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <netif_set_netmask+0x16>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	e000      	b.n	8005d86 <netif_set_netmask+0x18>
 8005d84:	2300      	movs	r3, #0
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005d9c:	4a03      	ldr	r2, [pc, #12]	; (8005dac <netif_set_default+0x18>)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	20006b9c 	.word	0x20006b9c

08005db0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d113      	bne.n	8005dee <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8005de6:	2103      	movs	r1, #3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f804 	bl	8005df6 <netif_issue_reports>
    }
  }
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d011      	beq.n	8005e30 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00c      	beq.n	8005e30 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f006 fe6a 	bl	800cb04 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d012      	beq.n	8005e74 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f006 fa0e 	bl	800c290 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  if (netif) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	61da      	str	r2, [r3, #28]
  }
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <pbuf_free_ooseq+0x40>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <pbuf_free_ooseq+0x44>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	e00f      	b.n	8005ed0 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 fd6a 	bl	8007996 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8005ec8:	e005      	b.n	8005ed6 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ec      	bne.n	8005eb0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20006ba0 	.word	0x20006ba0
 8005ee0:	20006ba8 	.word	0x20006ba8

08005ee4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005ee8:	4b03      	ldr	r3, [pc, #12]	; (8005ef8 <pbuf_pool_is_empty+0x14>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005eee:	bf00      	nop
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20006ba0 	.word	0x20006ba0

08005efc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	71fb      	strb	r3, [r7, #7]
 8005f06:	460b      	mov	r3, r1
 8005f08:	80bb      	strh	r3, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d81c      	bhi.n	8005f4e <pbuf_alloc+0x52>
 8005f14:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <pbuf_alloc+0x20>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f31 	.word	0x08005f31
 8005f20:	08005f37 	.word	0x08005f37
 8005f24:	08005f3d 	.word	0x08005f3d
 8005f28:	08005f43 	.word	0x08005f43
 8005f2c:	08005f49 	.word	0x08005f49
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005f30:	2336      	movs	r3, #54	; 0x36
 8005f32:	82fb      	strh	r3, [r7, #22]
    break;
 8005f34:	e014      	b.n	8005f60 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005f36:	2322      	movs	r3, #34	; 0x22
 8005f38:	82fb      	strh	r3, [r7, #22]
    break;
 8005f3a:	e011      	b.n	8005f60 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005f3c:	230e      	movs	r3, #14
 8005f3e:	82fb      	strh	r3, [r7, #22]
    break;
 8005f40:	e00e      	b.n	8005f60 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8005f42:	2300      	movs	r3, #0
 8005f44:	82fb      	strh	r3, [r7, #22]
    break;
 8005f46:	e00b      	b.n	8005f60 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	82fb      	strh	r3, [r7, #22]
    break;
 8005f4c:	e008      	b.n	8005f60 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8005f4e:	4ba5      	ldr	r3, [pc, #660]	; (80061e4 <pbuf_alloc+0x2e8>)
 8005f50:	f44f 728b 	mov.w	r2, #278	; 0x116
 8005f54:	49a4      	ldr	r1, [pc, #656]	; (80061e8 <pbuf_alloc+0x2ec>)
 8005f56:	48a5      	ldr	r0, [pc, #660]	; (80061ec <pbuf_alloc+0x2f0>)
 8005f58:	f008 fa38 	bl	800e3cc <iprintf>
    return NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e15d      	b.n	800621c <pbuf_alloc+0x320>
  }

  switch (type) {
 8005f60:	79bb      	ldrb	r3, [r7, #6]
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d00d      	beq.n	8005f82 <pbuf_alloc+0x86>
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	f300 8133 	bgt.w	80061d2 <pbuf_alloc+0x2d6>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80d0 	beq.w	8006112 <pbuf_alloc+0x216>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f2c0 812d 	blt.w	80061d2 <pbuf_alloc+0x2d6>
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	f200 8129 	bhi.w	80061d2 <pbuf_alloc+0x2d6>
 8005f80:	e10d      	b.n	800619e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005f82:	2008      	movs	r0, #8
 8005f84:	f7ff fda8 	bl	8005ad8 <memp_malloc>
 8005f88:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8005f90:	f7ff ffa8 	bl	8005ee4 <pbuf_pool_is_empty>
      return NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e141      	b.n	800621c <pbuf_alloc+0x320>
    }
    p->type = type;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	79ba      	ldrb	r2, [r7, #6]
 8005f9c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005fa4:	8afb      	ldrh	r3, [r7, #22]
 8005fa6:	3310      	adds	r3, #16
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	3303      	adds	r3, #3
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <pbuf_alloc+0xd6>
 8005fc4:	4b87      	ldr	r3, [pc, #540]	; (80061e4 <pbuf_alloc+0x2e8>)
 8005fc6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005fca:	4989      	ldr	r1, [pc, #548]	; (80061f0 <pbuf_alloc+0x2f4>)
 8005fcc:	4887      	ldr	r0, [pc, #540]	; (80061ec <pbuf_alloc+0x2f0>)
 8005fce:	f008 f9fd 	bl	800e3cc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	88ba      	ldrh	r2, [r7, #4]
 8005fd6:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005fd8:	8afb      	ldrh	r3, [r7, #22]
 8005fda:	3303      	adds	r3, #3
 8005fdc:	f023 0303 	bic.w	r3, r3, #3
 8005fe0:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8005fe4:	88bb      	ldrh	r3, [r7, #4]
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	bf28      	it	cs
 8005fea:	4613      	movcs	r3, r2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	8952      	ldrh	r2, [r2, #10]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006002:	429a      	cmp	r2, r3
 8006004:	d906      	bls.n	8006014 <pbuf_alloc+0x118>
 8006006:	4b77      	ldr	r3, [pc, #476]	; (80061e4 <pbuf_alloc+0x2e8>)
 8006008:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800600c:	4979      	ldr	r1, [pc, #484]	; (80061f4 <pbuf_alloc+0x2f8>)
 800600e:	4877      	ldr	r0, [pc, #476]	; (80061ec <pbuf_alloc+0x2f0>)
 8006010:	f008 f9dc 	bl	800e3cc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006014:	8afb      	ldrh	r3, [r7, #22]
 8006016:	3303      	adds	r3, #3
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006020:	d106      	bne.n	8006030 <pbuf_alloc+0x134>
 8006022:	4b70      	ldr	r3, [pc, #448]	; (80061e4 <pbuf_alloc+0x2e8>)
 8006024:	f240 1231 	movw	r2, #305	; 0x131
 8006028:	4973      	ldr	r1, [pc, #460]	; (80061f8 <pbuf_alloc+0x2fc>)
 800602a:	4870      	ldr	r0, [pc, #448]	; (80061ec <pbuf_alloc+0x2f0>)
 800602c:	f008 f9ce 	bl	800e3cc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	2201      	movs	r2, #1
 8006034:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800603a:	88bb      	ldrh	r3, [r7, #4]
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	8952      	ldrh	r2, [r2, #10]
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8006044:	e061      	b.n	800610a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006046:	2008      	movs	r0, #8
 8006048:	f7ff fd46 	bl	8005ad8 <memp_malloc>
 800604c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8006054:	f7ff ff46 	bl	8005ee4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8006058:	69f8      	ldr	r0, [r7, #28]
 800605a:	f000 fac1 	bl	80065e0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	e0dc      	b.n	800621c <pbuf_alloc+0x320>
      }
      q->type = type;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	79ba      	ldrb	r2, [r7, #6]
 8006066:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006080:	4293      	cmp	r3, r2
 8006082:	dd06      	ble.n	8006092 <pbuf_alloc+0x196>
 8006084:	4b57      	ldr	r3, [pc, #348]	; (80061e4 <pbuf_alloc+0x2e8>)
 8006086:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800608a:	495c      	ldr	r1, [pc, #368]	; (80061fc <pbuf_alloc+0x300>)
 800608c:	4857      	ldr	r0, [pc, #348]	; (80061ec <pbuf_alloc+0x2f0>)
 800608e:	f008 f99d 	bl	800e3cc <iprintf>
      q->tot_len = (u16_t)rem_len;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80060a2:	bf28      	it	cs
 80060a4:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f103 0210 	add.w	r2, r3, #16
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d006      	beq.n	80060d2 <pbuf_alloc+0x1d6>
 80060c4:	4b47      	ldr	r3, [pc, #284]	; (80061e4 <pbuf_alloc+0x2e8>)
 80060c6:	f240 1251 	movw	r2, #337	; 0x151
 80060ca:	494d      	ldr	r1, [pc, #308]	; (8006200 <pbuf_alloc+0x304>)
 80060cc:	4847      	ldr	r0, [pc, #284]	; (80061ec <pbuf_alloc+0x2f0>)
 80060ce:	f008 f97d 	bl	800e3cc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	8952      	ldrh	r2, [r2, #10]
 80060da:	441a      	add	r2, r3
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d906      	bls.n	80060f4 <pbuf_alloc+0x1f8>
 80060e6:	4b3f      	ldr	r3, [pc, #252]	; (80061e4 <pbuf_alloc+0x2e8>)
 80060e8:	f240 1253 	movw	r2, #339	; 0x153
 80060ec:	4941      	ldr	r1, [pc, #260]	; (80061f4 <pbuf_alloc+0x2f8>)
 80060ee:	483f      	ldr	r0, [pc, #252]	; (80061ec <pbuf_alloc+0x2f0>)
 80060f0:	f008 f96c 	bl	800e3cc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	895b      	ldrh	r3, [r3, #10]
 80060fe:	461a      	mov	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	dc9a      	bgt.n	8006046 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8006110:	e07d      	b.n	800620e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006112:	8afb      	ldrh	r3, [r7, #22]
 8006114:	3313      	adds	r3, #19
 8006116:	b29b      	uxth	r3, r3
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	b29a      	uxth	r2, r3
 800611e:	88bb      	ldrh	r3, [r7, #4]
 8006120:	3303      	adds	r3, #3
 8006122:	b29b      	uxth	r3, r3
 8006124:	f023 0303 	bic.w	r3, r3, #3
 8006128:	b29b      	uxth	r3, r3
 800612a:	4413      	add	r3, r2
 800612c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800612e:	897a      	ldrh	r2, [r7, #10]
 8006130:	88bb      	ldrh	r3, [r7, #4]
 8006132:	3303      	adds	r3, #3
 8006134:	f023 0303 	bic.w	r3, r3, #3
 8006138:	429a      	cmp	r2, r3
 800613a:	d201      	bcs.n	8006140 <pbuf_alloc+0x244>
        return NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	e06d      	b.n	800621c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006140:	897b      	ldrh	r3, [r7, #10]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fb6c 	bl	8005820 <mem_malloc>
 8006148:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <pbuf_alloc+0x258>
      return NULL;
 8006150:	2300      	movs	r3, #0
 8006152:	e063      	b.n	800621c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006154:	8afb      	ldrh	r3, [r7, #22]
 8006156:	3310      	adds	r3, #16
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	3303      	adds	r3, #3
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	461a      	mov	r2, r3
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	88ba      	ldrh	r2, [r7, #4]
 800616c:	811a      	strh	r2, [r3, #8]
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	891a      	ldrh	r2, [r3, #8]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	79ba      	ldrb	r2, [r7, #6]
 8006180:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d03e      	beq.n	800620c <pbuf_alloc+0x310>
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <pbuf_alloc+0x2e8>)
 8006190:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8006194:	491b      	ldr	r1, [pc, #108]	; (8006204 <pbuf_alloc+0x308>)
 8006196:	4815      	ldr	r0, [pc, #84]	; (80061ec <pbuf_alloc+0x2f0>)
 8006198:	f008 f918 	bl	800e3cc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800619c:	e036      	b.n	800620c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800619e:	2007      	movs	r0, #7
 80061a0:	f7ff fc9a 	bl	8005ad8 <memp_malloc>
 80061a4:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e035      	b.n	800621c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	2200      	movs	r2, #0
 80061b4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	88ba      	ldrh	r2, [r7, #4]
 80061ba:	811a      	strh	r2, [r3, #8]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	891a      	ldrh	r2, [r3, #8]
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
    p->type = type;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	79ba      	ldrb	r2, [r7, #6]
 80061ce:	731a      	strb	r2, [r3, #12]
    break;
 80061d0:	e01d      	b.n	800620e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80061d2:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <pbuf_alloc+0x2e8>)
 80061d4:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80061d8:	490b      	ldr	r1, [pc, #44]	; (8006208 <pbuf_alloc+0x30c>)
 80061da:	4804      	ldr	r0, [pc, #16]	; (80061ec <pbuf_alloc+0x2f0>)
 80061dc:	f008 f8f6 	bl	800e3cc <iprintf>
    return NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e01b      	b.n	800621c <pbuf_alloc+0x320>
 80061e4:	0800fa64 	.word	0x0800fa64
 80061e8:	0800fa94 	.word	0x0800fa94
 80061ec:	0800fab0 	.word	0x0800fab0
 80061f0:	0800fad8 	.word	0x0800fad8
 80061f4:	0800fb08 	.word	0x0800fb08
 80061f8:	0800fb3c 	.word	0x0800fb3c
 80061fc:	0800fb70 	.word	0x0800fb70
 8006200:	0800fb84 	.word	0x0800fb84
 8006204:	0800fbb4 	.word	0x0800fbb4
 8006208:	0800fbe0 	.word	0x0800fbe0
    break;
 800620c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2201      	movs	r2, #1
 8006212:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2200      	movs	r2, #0
 8006218:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800621a:	69fb      	ldr	r3, [r7, #28]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4603      	mov	r3, r0
 800622e:	71fb      	strb	r3, [r7, #7]
 8006230:	460b      	mov	r3, r1
 8006232:	80bb      	strh	r3, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	2b04      	cmp	r3, #4
 800623c:	d81b      	bhi.n	8006276 <pbuf_alloced_custom+0x52>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <pbuf_alloced_custom+0x20>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006259 	.word	0x08006259
 8006248:	0800625f 	.word	0x0800625f
 800624c:	08006265 	.word	0x08006265
 8006250:	0800626b 	.word	0x0800626b
 8006254:	08006271 	.word	0x08006271
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006258:	2336      	movs	r3, #54	; 0x36
 800625a:	81fb      	strh	r3, [r7, #14]
    break;
 800625c:	e014      	b.n	8006288 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800625e:	2322      	movs	r3, #34	; 0x22
 8006260:	81fb      	strh	r3, [r7, #14]
    break;
 8006262:	e011      	b.n	8006288 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006264:	230e      	movs	r3, #14
 8006266:	81fb      	strh	r3, [r7, #14]
    break;
 8006268:	e00e      	b.n	8006288 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800626a:	2300      	movs	r3, #0
 800626c:	81fb      	strh	r3, [r7, #14]
    break;
 800626e:	e00b      	b.n	8006288 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	81fb      	strh	r3, [r7, #14]
    break;
 8006274:	e008      	b.n	8006288 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <pbuf_alloced_custom+0xc8>)
 8006278:	f240 12c5 	movw	r2, #453	; 0x1c5
 800627c:	491c      	ldr	r1, [pc, #112]	; (80062f0 <pbuf_alloced_custom+0xcc>)
 800627e:	481d      	ldr	r0, [pc, #116]	; (80062f4 <pbuf_alloced_custom+0xd0>)
 8006280:	f008 f8a4 	bl	800e3cc <iprintf>
    return NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	e02d      	b.n	80062e4 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	3303      	adds	r3, #3
 800628c:	f023 0203 	bic.w	r2, r3, #3
 8006290:	88bb      	ldrh	r3, [r7, #4]
 8006292:	441a      	add	r2, r3
 8006294:	8bbb      	ldrh	r3, [r7, #28]
 8006296:	429a      	cmp	r2, r3
 8006298:	d901      	bls.n	800629e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	e022      	b.n	80062e4 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80062aa:	89fb      	ldrh	r3, [r7, #14]
 80062ac:	3303      	adds	r3, #3
 80062ae:	f023 0303 	bic.w	r3, r3, #3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	441a      	add	r2, r3
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	e002      	b.n	80062c2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2202      	movs	r2, #2
 80062c6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	88ba      	ldrh	r2, [r7, #4]
 80062cc:	811a      	strh	r2, [r3, #8]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	891a      	ldrh	r2, [r3, #8]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	79ba      	ldrb	r2, [r7, #6]
 80062da:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80062e2:	683b      	ldr	r3, [r7, #0]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	0800fa64 	.word	0x0800fa64
 80062f0:	0800fbfc 	.word	0x0800fbfc
 80062f4:	0800fab0 	.word	0x0800fab0

080062f8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <pbuf_realloc+0x20>
 800630a:	4b4b      	ldr	r3, [pc, #300]	; (8006438 <pbuf_realloc+0x140>)
 800630c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006310:	494a      	ldr	r1, [pc, #296]	; (800643c <pbuf_realloc+0x144>)
 8006312:	484b      	ldr	r0, [pc, #300]	; (8006440 <pbuf_realloc+0x148>)
 8006314:	f008 f85a 	bl	800e3cc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	7b1b      	ldrb	r3, [r3, #12]
 800631c:	2b03      	cmp	r3, #3
 800631e:	d012      	beq.n	8006346 <pbuf_realloc+0x4e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7b1b      	ldrb	r3, [r3, #12]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d00e      	beq.n	8006346 <pbuf_realloc+0x4e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	7b1b      	ldrb	r3, [r3, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <pbuf_realloc+0x4e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	7b1b      	ldrb	r3, [r3, #12]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d006      	beq.n	8006346 <pbuf_realloc+0x4e>
 8006338:	4b3f      	ldr	r3, [pc, #252]	; (8006438 <pbuf_realloc+0x140>)
 800633a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800633e:	4941      	ldr	r1, [pc, #260]	; (8006444 <pbuf_realloc+0x14c>)
 8006340:	483f      	ldr	r0, [pc, #252]	; (8006440 <pbuf_realloc+0x148>)
 8006342:	f008 f843 	bl	800e3cc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	891b      	ldrh	r3, [r3, #8]
 800634a:	887a      	ldrh	r2, [r7, #2]
 800634c:	429a      	cmp	r2, r3
 800634e:	d26e      	bcs.n	800642e <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8006350:	887b      	ldrh	r3, [r7, #2]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	8912      	ldrh	r2, [r2, #8]
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800635a:	887b      	ldrh	r3, [r7, #2]
 800635c:	827b      	strh	r3, [r7, #18]
  q = p;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006362:	e025      	b.n	80063b0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	895b      	ldrh	r3, [r3, #10]
 8006368:	8a7a      	ldrh	r2, [r7, #18]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006374:	4293      	cmp	r3, r2
 8006376:	dd06      	ble.n	8006386 <pbuf_realloc+0x8e>
 8006378:	4b2f      	ldr	r3, [pc, #188]	; (8006438 <pbuf_realloc+0x140>)
 800637a:	f240 220b 	movw	r2, #523	; 0x20b
 800637e:	4932      	ldr	r1, [pc, #200]	; (8006448 <pbuf_realloc+0x150>)
 8006380:	482f      	ldr	r0, [pc, #188]	; (8006440 <pbuf_realloc+0x148>)
 8006382:	f008 f823 	bl	800e3cc <iprintf>
    q->tot_len += (u16_t)grow;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	891a      	ldrh	r2, [r3, #8]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	b29b      	uxth	r3, r3
 800638e:	4413      	add	r3, r2
 8006390:	b29a      	uxth	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <pbuf_realloc+0xb8>
 80063a2:	4b25      	ldr	r3, [pc, #148]	; (8006438 <pbuf_realloc+0x140>)
 80063a4:	f240 220f 	movw	r2, #527	; 0x20f
 80063a8:	4928      	ldr	r1, [pc, #160]	; (800644c <pbuf_realloc+0x154>)
 80063aa:	4825      	ldr	r0, [pc, #148]	; (8006440 <pbuf_realloc+0x148>)
 80063ac:	f008 f80e 	bl	800e3cc <iprintf>
  while (rem_len > q->len) {
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	895b      	ldrh	r3, [r3, #10]
 80063b4:	8a7a      	ldrh	r2, [r7, #18]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d8d4      	bhi.n	8006364 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	7b1b      	ldrb	r3, [r3, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d121      	bne.n	8006406 <pbuf_realloc+0x10e>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	895b      	ldrh	r3, [r3, #10]
 80063c6:	8a7a      	ldrh	r2, [r7, #18]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d01c      	beq.n	8006406 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	7b5b      	ldrb	r3, [r3, #13]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d116      	bne.n	8006406 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	8a7b      	ldrh	r3, [r7, #18]
 80063e4:	4413      	add	r3, r2
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	4619      	mov	r1, r3
 80063ea:	6978      	ldr	r0, [r7, #20]
 80063ec:	f7ff f93c 	bl	8005668 <mem_trim>
 80063f0:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d106      	bne.n	8006406 <pbuf_realloc+0x10e>
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <pbuf_realloc+0x140>)
 80063fa:	f240 221d 	movw	r2, #541	; 0x21d
 80063fe:	4914      	ldr	r1, [pc, #80]	; (8006450 <pbuf_realloc+0x158>)
 8006400:	480f      	ldr	r0, [pc, #60]	; (8006440 <pbuf_realloc+0x148>)
 8006402:	f007 ffe3 	bl	800e3cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	8a7a      	ldrh	r2, [r7, #18]
 800640a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	895a      	ldrh	r2, [r3, #10]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f8dd 	bl	80065e0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	e000      	b.n	8006430 <pbuf_realloc+0x138>
    return;
 800642e:	bf00      	nop

}
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	0800fa64 	.word	0x0800fa64
 800643c:	0800fc20 	.word	0x0800fc20
 8006440:	0800fab0 	.word	0x0800fab0
 8006444:	0800fc38 	.word	0x0800fc38
 8006448:	0800fc54 	.word	0x0800fc54
 800644c:	0800fc68 	.word	0x0800fc68
 8006450:	0800fc80 	.word	0x0800fc80

08006454 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
 8006460:	4613      	mov	r3, r2
 8006462:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <pbuf_header_impl+0x24>
 800646a:	4b46      	ldr	r3, [pc, #280]	; (8006584 <pbuf_header_impl+0x130>)
 800646c:	f240 223f 	movw	r2, #575	; 0x23f
 8006470:	4945      	ldr	r1, [pc, #276]	; (8006588 <pbuf_header_impl+0x134>)
 8006472:	4846      	ldr	r0, [pc, #280]	; (800658c <pbuf_header_impl+0x138>)
 8006474:	f007 ffaa 	bl	800e3cc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006478:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <pbuf_header_impl+0x32>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <pbuf_header_impl+0x36>
    return 0;
 8006486:	2300      	movs	r3, #0
 8006488:	e078      	b.n	800657c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800648a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800648e:	2b00      	cmp	r3, #0
 8006490:	da10      	bge.n	80064b4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8006492:	887b      	ldrh	r3, [r7, #2]
 8006494:	425b      	negs	r3, r3
 8006496:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	895b      	ldrh	r3, [r3, #10]
 800649c:	89fa      	ldrh	r2, [r7, #14]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d90a      	bls.n	80064b8 <pbuf_header_impl+0x64>
 80064a2:	4b38      	ldr	r3, [pc, #224]	; (8006584 <pbuf_header_impl+0x130>)
 80064a4:	f240 2247 	movw	r2, #583	; 0x247
 80064a8:	4939      	ldr	r1, [pc, #228]	; (8006590 <pbuf_header_impl+0x13c>)
 80064aa:	4838      	ldr	r0, [pc, #224]	; (800658c <pbuf_header_impl+0x138>)
 80064ac:	f007 ff8e 	bl	800e3cc <iprintf>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e063      	b.n	800657c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80064b4:	887b      	ldrh	r3, [r7, #2]
 80064b6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	7b1b      	ldrb	r3, [r3, #12]
 80064bc:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80064c4:	89bb      	ldrh	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <pbuf_header_impl+0x7c>
 80064ca:	89bb      	ldrh	r3, [r7, #12]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d112      	bne.n	80064f6 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064d8:	425b      	negs	r3, r3
 80064da:	441a      	add	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3310      	adds	r3, #16
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d238      	bcs.n	800655e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e042      	b.n	800657c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80064f6:	89bb      	ldrh	r3, [r7, #12]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d002      	beq.n	8006502 <pbuf_header_impl+0xae>
 80064fc:	89bb      	ldrh	r3, [r7, #12]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d124      	bne.n	800654c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006502:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006506:	2b00      	cmp	r3, #0
 8006508:	da0d      	bge.n	8006526 <pbuf_header_impl+0xd2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	895b      	ldrh	r3, [r3, #10]
 800650e:	89fa      	ldrh	r2, [r7, #14]
 8006510:	429a      	cmp	r2, r3
 8006512:	d808      	bhi.n	8006526 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800651c:	425b      	negs	r3, r3
 800651e:	441a      	add	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	605a      	str	r2, [r3, #4]
 8006524:	e011      	b.n	800654a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8006526:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dd0b      	ble.n	8006546 <pbuf_header_impl+0xf2>
 800652e:	787b      	ldrb	r3, [r7, #1]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800653c:	425b      	negs	r3, r3
 800653e:	441a      	add	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	605a      	str	r2, [r3, #4]
 8006544:	e001      	b.n	800654a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006546:	2301      	movs	r3, #1
 8006548:	e018      	b.n	800657c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800654a:	e008      	b.n	800655e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800654c:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <pbuf_header_impl+0x130>)
 800654e:	f240 2277 	movw	r2, #631	; 0x277
 8006552:	4910      	ldr	r1, [pc, #64]	; (8006594 <pbuf_header_impl+0x140>)
 8006554:	480d      	ldr	r0, [pc, #52]	; (800658c <pbuf_header_impl+0x138>)
 8006556:	f007 ff39 	bl	800e3cc <iprintf>
    return 1;
 800655a:	2301      	movs	r3, #1
 800655c:	e00e      	b.n	800657c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	895a      	ldrh	r2, [r3, #10]
 8006562:	887b      	ldrh	r3, [r7, #2]
 8006564:	4413      	add	r3, r2
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	891a      	ldrh	r2, [r3, #8]
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	4413      	add	r3, r2
 8006574:	b29a      	uxth	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	0800fa64 	.word	0x0800fa64
 8006588:	0800fc9c 	.word	0x0800fc9c
 800658c:	0800fab0 	.word	0x0800fab0
 8006590:	0800fca8 	.word	0x0800fca8
 8006594:	0800fcc8 	.word	0x0800fcc8

08006598 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80065a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065a8:	2200      	movs	r2, #0
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff ff51 	bl	8006454 <pbuf_header_impl>
 80065b2:	4603      	mov	r3, r0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80065c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065cc:	2201      	movs	r2, #1
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff ff3f 	bl	8006454 <pbuf_header_impl>
 80065d6:	4603      	mov	r3, r0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <pbuf_free+0x22>
 80065f4:	4b3e      	ldr	r3, [pc, #248]	; (80066f0 <pbuf_free+0x110>)
 80065f6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80065fa:	493e      	ldr	r1, [pc, #248]	; (80066f4 <pbuf_free+0x114>)
 80065fc:	483e      	ldr	r0, [pc, #248]	; (80066f8 <pbuf_free+0x118>)
 80065fe:	f007 fee5 	bl	800e3cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006602:	2300      	movs	r3, #0
 8006604:	e070      	b.n	80066e8 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	7b1b      	ldrb	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d012      	beq.n	8006634 <pbuf_free+0x54>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7b1b      	ldrb	r3, [r3, #12]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d00e      	beq.n	8006634 <pbuf_free+0x54>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7b1b      	ldrb	r3, [r3, #12]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d00a      	beq.n	8006634 <pbuf_free+0x54>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	7b1b      	ldrb	r3, [r3, #12]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d006      	beq.n	8006634 <pbuf_free+0x54>
 8006626:	4b32      	ldr	r3, [pc, #200]	; (80066f0 <pbuf_free+0x110>)
 8006628:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800662c:	4933      	ldr	r1, [pc, #204]	; (80066fc <pbuf_free+0x11c>)
 800662e:	4832      	ldr	r0, [pc, #200]	; (80066f8 <pbuf_free+0x118>)
 8006630:	f007 fecc 	bl	800e3cc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006638:	e052      	b.n	80066e0 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	89db      	ldrh	r3, [r3, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <pbuf_free+0x70>
 8006642:	4b2b      	ldr	r3, [pc, #172]	; (80066f0 <pbuf_free+0x110>)
 8006644:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006648:	492d      	ldr	r1, [pc, #180]	; (8006700 <pbuf_free+0x120>)
 800664a:	482b      	ldr	r0, [pc, #172]	; (80066f8 <pbuf_free+0x118>)
 800664c:	f007 febe 	bl	800e3cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	89db      	ldrh	r3, [r3, #14]
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	81da      	strh	r2, [r3, #14]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	89db      	ldrh	r3, [r3, #14]
 8006660:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006662:	8abb      	ldrh	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d139      	bne.n	80066dc <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7b1b      	ldrb	r3, [r3, #12]
 8006672:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7b5b      	ldrb	r3, [r3, #13]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d011      	beq.n	80066a4 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <pbuf_free+0xba>
 800668c:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <pbuf_free+0x110>)
 800668e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006692:	491c      	ldr	r1, [pc, #112]	; (8006704 <pbuf_free+0x124>)
 8006694:	4818      	ldr	r0, [pc, #96]	; (80066f8 <pbuf_free+0x118>)
 8006696:	f007 fe99 	bl	800e3cc <iprintf>
        pc->custom_free_function(p);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
 80066a2:	e015      	b.n	80066d0 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80066a4:	89fb      	ldrh	r3, [r7, #14]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d104      	bne.n	80066b4 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	2008      	movs	r0, #8
 80066ae:	f7ff fa5f 	bl	8005b70 <memp_free>
 80066b2:	e00d      	b.n	80066d0 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80066b4:	89fb      	ldrh	r3, [r7, #14]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d002      	beq.n	80066c0 <pbuf_free+0xe0>
 80066ba:	89fb      	ldrh	r3, [r7, #14]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d104      	bne.n	80066ca <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	2007      	movs	r0, #7
 80066c4:	f7ff fa54 	bl	8005b70 <memp_free>
 80066c8:	e002      	b.n	80066d0 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fe ff6a 	bl	80055a4 <mem_free>
        }
      }
      count++;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	3301      	adds	r3, #1
 80066d4:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	e001      	b.n	80066e0 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1a9      	bne.n	800663a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	0800fa64 	.word	0x0800fa64
 80066f4:	0800fc9c 	.word	0x0800fc9c
 80066f8:	0800fab0 	.word	0x0800fab0
 80066fc:	0800fcd8 	.word	0x0800fcd8
 8006700:	0800fcf0 	.word	0x0800fcf0
 8006704:	0800fd08 	.word	0x0800fd08

08006708 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006714:	e005      	b.n	8006722 <pbuf_clen+0x1a>
    ++len;
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	3301      	adds	r3, #1
 800671a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f6      	bne.n	8006716 <pbuf_clen+0xe>
  }
  return len;
 8006728:	89fb      	ldrh	r3, [r7, #14]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d010      	beq.n	8006764 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	89db      	ldrh	r3, [r3, #14]
 8006746:	3301      	adds	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	89db      	ldrh	r3, [r3, #14]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <pbuf_ref+0x30>
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <pbuf_ref+0x38>)
 8006758:	f240 3239 	movw	r2, #825	; 0x339
 800675c:	4904      	ldr	r1, [pc, #16]	; (8006770 <pbuf_ref+0x3c>)
 800675e:	4805      	ldr	r0, [pc, #20]	; (8006774 <pbuf_ref+0x40>)
 8006760:	f007 fe34 	bl	800e3cc <iprintf>
  }
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	0800fa64 	.word	0x0800fa64
 8006770:	0800fd2c 	.word	0x0800fd2c
 8006774:	0800fab0 	.word	0x0800fab0

08006778 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <pbuf_cat+0x16>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <pbuf_cat+0x26>
 800678e:	4b20      	ldr	r3, [pc, #128]	; (8006810 <pbuf_cat+0x98>)
 8006790:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8006794:	491f      	ldr	r1, [pc, #124]	; (8006814 <pbuf_cat+0x9c>)
 8006796:	4820      	ldr	r0, [pc, #128]	; (8006818 <pbuf_cat+0xa0>)
 8006798:	f007 fe18 	bl	800e3cc <iprintf>
 800679c:	e034      	b.n	8006808 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	e00a      	b.n	80067ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	891a      	ldrh	r2, [r3, #8]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	891b      	ldrh	r3, [r3, #8]
 80067ac:	4413      	add	r3, r2
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	891a      	ldrh	r2, [r3, #8]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	895b      	ldrh	r3, [r3, #10]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d006      	beq.n	80067dc <pbuf_cat+0x64>
 80067ce:	4b10      	ldr	r3, [pc, #64]	; (8006810 <pbuf_cat+0x98>)
 80067d0:	f240 3255 	movw	r2, #853	; 0x355
 80067d4:	4911      	ldr	r1, [pc, #68]	; (800681c <pbuf_cat+0xa4>)
 80067d6:	4810      	ldr	r0, [pc, #64]	; (8006818 <pbuf_cat+0xa0>)
 80067d8:	f007 fdf8 	bl	800e3cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d006      	beq.n	80067f2 <pbuf_cat+0x7a>
 80067e4:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <pbuf_cat+0x98>)
 80067e6:	f240 3256 	movw	r2, #854	; 0x356
 80067ea:	490d      	ldr	r1, [pc, #52]	; (8006820 <pbuf_cat+0xa8>)
 80067ec:	480a      	ldr	r0, [pc, #40]	; (8006818 <pbuf_cat+0xa0>)
 80067ee:	f007 fded 	bl	800e3cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	891a      	ldrh	r2, [r3, #8]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	891b      	ldrh	r3, [r3, #8]
 80067fa:	4413      	add	r3, r2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	0800fa64 	.word	0x0800fa64
 8006814:	0800fd40 	.word	0x0800fd40
 8006818:	0800fab0 	.word	0x0800fab0
 800681c:	0800fd78 	.word	0x0800fd78
 8006820:	0800fda8 	.word	0x0800fda8

08006824 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff ffa1 	bl	8006778 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006836:	6838      	ldr	r0, [r7, #0]
 8006838:	f7ff ff7c 	bl	8006734 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800684e:	2300      	movs	r3, #0
 8006850:	81fb      	strh	r3, [r7, #14]
 8006852:	2300      	movs	r3, #0
 8006854:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <pbuf_copy+0x2a>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <pbuf_copy+0x2a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	891a      	ldrh	r2, [r3, #8]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	891b      	ldrh	r3, [r3, #8]
 800686a:	429a      	cmp	r2, r3
 800686c:	d209      	bcs.n	8006882 <pbuf_copy+0x3e>
 800686e:	4b54      	ldr	r3, [pc, #336]	; (80069c0 <pbuf_copy+0x17c>)
 8006870:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8006874:	4953      	ldr	r1, [pc, #332]	; (80069c4 <pbuf_copy+0x180>)
 8006876:	4854      	ldr	r0, [pc, #336]	; (80069c8 <pbuf_copy+0x184>)
 8006878:	f007 fda8 	bl	800e3cc <iprintf>
 800687c:	f06f 030f 	mvn.w	r3, #15
 8006880:	e099      	b.n	80069b6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	895b      	ldrh	r3, [r3, #10]
 8006886:	461a      	mov	r2, r3
 8006888:	89fb      	ldrh	r3, [r7, #14]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	895b      	ldrh	r3, [r3, #10]
 8006890:	4619      	mov	r1, r3
 8006892:	89bb      	ldrh	r3, [r7, #12]
 8006894:	1acb      	subs	r3, r1, r3
 8006896:	429a      	cmp	r2, r3
 8006898:	db05      	blt.n	80068a6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	895a      	ldrh	r2, [r3, #10]
 800689e:	89bb      	ldrh	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	817b      	strh	r3, [r7, #10]
 80068a4:	e004      	b.n	80068b0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	895a      	ldrh	r2, [r3, #10]
 80068aa:	89fb      	ldrh	r3, [r7, #14]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	18d0      	adds	r0, r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	89bb      	ldrh	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	897a      	ldrh	r2, [r7, #10]
 80068c2:	4619      	mov	r1, r3
 80068c4:	f007 fcc6 	bl	800e254 <memcpy>
    offset_to += len;
 80068c8:	89fa      	ldrh	r2, [r7, #14]
 80068ca:	897b      	ldrh	r3, [r7, #10]
 80068cc:	4413      	add	r3, r2
 80068ce:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80068d0:	89ba      	ldrh	r2, [r7, #12]
 80068d2:	897b      	ldrh	r3, [r7, #10]
 80068d4:	4413      	add	r3, r2
 80068d6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	895b      	ldrh	r3, [r3, #10]
 80068dc:	89fa      	ldrh	r2, [r7, #14]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d906      	bls.n	80068f0 <pbuf_copy+0xac>
 80068e2:	4b37      	ldr	r3, [pc, #220]	; (80069c0 <pbuf_copy+0x17c>)
 80068e4:	f240 32cd 	movw	r2, #973	; 0x3cd
 80068e8:	4938      	ldr	r1, [pc, #224]	; (80069cc <pbuf_copy+0x188>)
 80068ea:	4837      	ldr	r0, [pc, #220]	; (80069c8 <pbuf_copy+0x184>)
 80068ec:	f007 fd6e 	bl	800e3cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	895b      	ldrh	r3, [r3, #10]
 80068f4:	89ba      	ldrh	r2, [r7, #12]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d906      	bls.n	8006908 <pbuf_copy+0xc4>
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <pbuf_copy+0x17c>)
 80068fc:	f240 32ce 	movw	r2, #974	; 0x3ce
 8006900:	4933      	ldr	r1, [pc, #204]	; (80069d0 <pbuf_copy+0x18c>)
 8006902:	4831      	ldr	r0, [pc, #196]	; (80069c8 <pbuf_copy+0x184>)
 8006904:	f007 fd62 	bl	800e3cc <iprintf>
    if (offset_from >= p_from->len) {
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	895b      	ldrh	r3, [r3, #10]
 800690c:	89ba      	ldrh	r2, [r7, #12]
 800690e:	429a      	cmp	r2, r3
 8006910:	d304      	bcc.n	800691c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	895b      	ldrh	r3, [r3, #10]
 8006920:	89fa      	ldrh	r2, [r7, #14]
 8006922:	429a      	cmp	r2, r3
 8006924:	d114      	bne.n	8006950 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10c      	bne.n	8006950 <pbuf_copy+0x10c>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d009      	beq.n	8006950 <pbuf_copy+0x10c>
 800693c:	4b20      	ldr	r3, [pc, #128]	; (80069c0 <pbuf_copy+0x17c>)
 800693e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8006942:	4924      	ldr	r1, [pc, #144]	; (80069d4 <pbuf_copy+0x190>)
 8006944:	4820      	ldr	r0, [pc, #128]	; (80069c8 <pbuf_copy+0x184>)
 8006946:	f007 fd41 	bl	800e3cc <iprintf>
 800694a:	f06f 030f 	mvn.w	r3, #15
 800694e:	e032      	b.n	80069b6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d013      	beq.n	800697e <pbuf_copy+0x13a>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	895a      	ldrh	r2, [r3, #10]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	891b      	ldrh	r3, [r3, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	d10d      	bne.n	800697e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <pbuf_copy+0x13a>
 800696a:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <pbuf_copy+0x17c>)
 800696c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8006970:	4919      	ldr	r1, [pc, #100]	; (80069d8 <pbuf_copy+0x194>)
 8006972:	4815      	ldr	r0, [pc, #84]	; (80069c8 <pbuf_copy+0x184>)
 8006974:	f007 fd2a 	bl	800e3cc <iprintf>
 8006978:	f06f 0305 	mvn.w	r3, #5
 800697c:	e01b      	b.n	80069b6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d013      	beq.n	80069ac <pbuf_copy+0x168>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	895a      	ldrh	r2, [r3, #10]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	891b      	ldrh	r3, [r3, #8]
 800698c:	429a      	cmp	r2, r3
 800698e:	d10d      	bne.n	80069ac <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <pbuf_copy+0x168>
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <pbuf_copy+0x17c>)
 800699a:	f240 32e2 	movw	r2, #994	; 0x3e2
 800699e:	490e      	ldr	r1, [pc, #56]	; (80069d8 <pbuf_copy+0x194>)
 80069a0:	4809      	ldr	r0, [pc, #36]	; (80069c8 <pbuf_copy+0x184>)
 80069a2:	f007 fd13 	bl	800e3cc <iprintf>
 80069a6:	f06f 0305 	mvn.w	r3, #5
 80069aa:	e004      	b.n	80069b6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f47f af67 	bne.w	8006882 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	0800fa64 	.word	0x0800fa64
 80069c4:	0800fdf4 	.word	0x0800fdf4
 80069c8:	0800fab0 	.word	0x0800fab0
 80069cc:	0800fe24 	.word	0x0800fe24
 80069d0:	0800fe3c 	.word	0x0800fe3c
 80069d4:	0800fe58 	.word	0x0800fe58
 80069d8:	0800fe68 	.word	0x0800fe68

080069dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	4611      	mov	r1, r2
 80069e8:	461a      	mov	r2, r3
 80069ea:	460b      	mov	r3, r1
 80069ec:	80fb      	strh	r3, [r7, #6]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d108      	bne.n	8006a0e <pbuf_copy_partial+0x32>
 80069fc:	4b30      	ldr	r3, [pc, #192]	; (8006ac0 <pbuf_copy_partial+0xe4>)
 80069fe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006a02:	4930      	ldr	r1, [pc, #192]	; (8006ac4 <pbuf_copy_partial+0xe8>)
 8006a04:	4830      	ldr	r0, [pc, #192]	; (8006ac8 <pbuf_copy_partial+0xec>)
 8006a06:	f007 fce1 	bl	800e3cc <iprintf>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e054      	b.n	8006ab8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d108      	bne.n	8006a26 <pbuf_copy_partial+0x4a>
 8006a14:	4b2a      	ldr	r3, [pc, #168]	; (8006ac0 <pbuf_copy_partial+0xe4>)
 8006a16:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a1a:	492c      	ldr	r1, [pc, #176]	; (8006acc <pbuf_copy_partial+0xf0>)
 8006a1c:	482a      	ldr	r0, [pc, #168]	; (8006ac8 <pbuf_copy_partial+0xec>)
 8006a1e:	f007 fcd5 	bl	800e3cc <iprintf>
 8006a22:	2300      	movs	r3, #0
 8006a24:	e048      	b.n	8006ab8 <pbuf_copy_partial+0xdc>

  left = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <pbuf_copy_partial+0x5a>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <pbuf_copy_partial+0x5e>
    return 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	e03e      	b.n	8006ab8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	e034      	b.n	8006aaa <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8006a40:	88bb      	ldrh	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <pbuf_copy_partial+0x80>
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	895b      	ldrh	r3, [r3, #10]
 8006a4a:	88ba      	ldrh	r2, [r7, #4]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d305      	bcc.n	8006a5c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	895b      	ldrh	r3, [r3, #10]
 8006a54:	88ba      	ldrh	r2, [r7, #4]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	80bb      	strh	r3, [r7, #4]
 8006a5a:	e023      	b.n	8006aa4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	895a      	ldrh	r2, [r3, #10]
 8006a60:	88bb      	ldrh	r3, [r7, #4]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006a66:	8b3a      	ldrh	r2, [r7, #24]
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d901      	bls.n	8006a72 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006a72:	8b7b      	ldrh	r3, [r7, #26]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	18d0      	adds	r0, r2, r3
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	88bb      	ldrh	r3, [r7, #4]
 8006a7e:	4413      	add	r3, r2
 8006a80:	8b3a      	ldrh	r2, [r7, #24]
 8006a82:	4619      	mov	r1, r3
 8006a84:	f007 fbe6 	bl	800e254 <memcpy>
      copied_total += buf_copy_len;
 8006a88:	8afa      	ldrh	r2, [r7, #22]
 8006a8a:	8b3b      	ldrh	r3, [r7, #24]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8006a90:	8b7a      	ldrh	r2, [r7, #26]
 8006a92:	8b3b      	ldrh	r3, [r7, #24]
 8006a94:	4413      	add	r3, r2
 8006a96:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8006a98:	88fa      	ldrh	r2, [r7, #6]
 8006a9a:	8b3b      	ldrh	r3, [r7, #24]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <pbuf_copy_partial+0xda>
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1c4      	bne.n	8006a40 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8006ab6:	8afb      	ldrh	r3, [r7, #22]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	0800fa64 	.word	0x0800fa64
 8006ac4:	0800fe94 	.word	0x0800fe94
 8006ac8:	0800fab0 	.word	0x0800fab0
 8006acc:	0800feb4 	.word	0x0800feb4

08006ad0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d109      	bne.n	8006b00 <pbuf_take+0x30>
 8006aec:	4b3a      	ldr	r3, [pc, #232]	; (8006bd8 <pbuf_take+0x108>)
 8006aee:	f240 4284 	movw	r2, #1156	; 0x484
 8006af2:	493a      	ldr	r1, [pc, #232]	; (8006bdc <pbuf_take+0x10c>)
 8006af4:	483a      	ldr	r0, [pc, #232]	; (8006be0 <pbuf_take+0x110>)
 8006af6:	f007 fc69 	bl	800e3cc <iprintf>
 8006afa:	f06f 030f 	mvn.w	r3, #15
 8006afe:	e066      	b.n	8006bce <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <pbuf_take+0x4a>
 8006b06:	4b34      	ldr	r3, [pc, #208]	; (8006bd8 <pbuf_take+0x108>)
 8006b08:	f240 4285 	movw	r2, #1157	; 0x485
 8006b0c:	4935      	ldr	r1, [pc, #212]	; (8006be4 <pbuf_take+0x114>)
 8006b0e:	4834      	ldr	r0, [pc, #208]	; (8006be0 <pbuf_take+0x110>)
 8006b10:	f007 fc5c 	bl	800e3cc <iprintf>
 8006b14:	f06f 030f 	mvn.w	r3, #15
 8006b18:	e059      	b.n	8006bce <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	891b      	ldrh	r3, [r3, #8]
 8006b1e:	88fa      	ldrh	r2, [r7, #6]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d909      	bls.n	8006b38 <pbuf_take+0x68>
 8006b24:	4b2c      	ldr	r3, [pc, #176]	; (8006bd8 <pbuf_take+0x108>)
 8006b26:	f240 4286 	movw	r2, #1158	; 0x486
 8006b2a:	492f      	ldr	r1, [pc, #188]	; (8006be8 <pbuf_take+0x118>)
 8006b2c:	482c      	ldr	r0, [pc, #176]	; (8006be0 <pbuf_take+0x110>)
 8006b2e:	f007 fc4d 	bl	800e3cc <iprintf>
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295
 8006b36:	e04a      	b.n	8006bce <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <pbuf_take+0x7e>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <pbuf_take+0x7e>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	891b      	ldrh	r3, [r3, #8]
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d902      	bls.n	8006b54 <pbuf_take+0x84>
    return ERR_ARG;
 8006b4e:	f06f 030f 	mvn.w	r3, #15
 8006b52:	e03c      	b.n	8006bce <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e027      	b.n	8006baa <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <pbuf_take+0x9e>
 8006b60:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <pbuf_take+0x108>)
 8006b62:	f240 428e 	movw	r2, #1166	; 0x48e
 8006b66:	4921      	ldr	r1, [pc, #132]	; (8006bec <pbuf_take+0x11c>)
 8006b68:	481d      	ldr	r0, [pc, #116]	; (8006be0 <pbuf_take+0x110>)
 8006b6a:	f007 fc2f 	bl	800e3cc <iprintf>
    buf_copy_len = total_copy_len;
 8006b6e:	8b3b      	ldrh	r3, [r7, #24]
 8006b70:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	895b      	ldrh	r3, [r3, #10]
 8006b76:	8b7a      	ldrh	r2, [r7, #26]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d902      	bls.n	8006b82 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	895b      	ldrh	r3, [r3, #10]
 8006b80:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	6858      	ldr	r0, [r3, #4]
 8006b86:	8afb      	ldrh	r3, [r7, #22]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	8b7a      	ldrh	r2, [r7, #26]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	f007 fb60 	bl	800e254 <memcpy>
    total_copy_len -= buf_copy_len;
 8006b94:	8b3a      	ldrh	r2, [r7, #24]
 8006b96:	8b7b      	ldrh	r3, [r7, #26]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8006b9c:	8afa      	ldrh	r2, [r7, #22]
 8006b9e:	8b7b      	ldrh	r3, [r7, #26]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	8b3b      	ldrh	r3, [r7, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1d4      	bne.n	8006b5a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006bb0:	8b3b      	ldrh	r3, [r7, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <pbuf_take+0xee>
 8006bb6:	8afa      	ldrh	r2, [r7, #22]
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d006      	beq.n	8006bcc <pbuf_take+0xfc>
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <pbuf_take+0x108>)
 8006bc0:	f240 4299 	movw	r2, #1177	; 0x499
 8006bc4:	490a      	ldr	r1, [pc, #40]	; (8006bf0 <pbuf_take+0x120>)
 8006bc6:	4806      	ldr	r0, [pc, #24]	; (8006be0 <pbuf_take+0x110>)
 8006bc8:	f007 fc00 	bl	800e3cc <iprintf>
  return ERR_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	0800fa64 	.word	0x0800fa64
 8006bdc:	0800fed8 	.word	0x0800fed8
 8006be0:	0800fab0 	.word	0x0800fab0
 8006be4:	0800fef0 	.word	0x0800fef0
 8006be8:	0800ff0c 	.word	0x0800ff0c
 8006bec:	0800ff2c 	.word	0x0800ff2c
 8006bf0:	0800ff44 	.word	0x0800ff44

08006bf4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006c04:	f000 fdfa 	bl	80077fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006c08:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <tcp_tmr+0x28>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <tcp_tmr+0x28>)
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <tcp_tmr+0x28>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006c20:	f000 fb2a 	bl	8007278 <tcp_slowtmr>
  }
}
 8006c24:	bf00      	nop
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20000409 	.word	0x20000409

08006c2c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e00a      	b.n	8006c52 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d102      	bne.n	8006c4c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f1      	bne.n	8006c3c <tcp_remove_listener+0x10>
      }
   }
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr

08006c64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d105      	bne.n	8006c7e <tcp_listen_closed+0x1a>
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <tcp_listen_closed+0x5c>)
 8006c74:	22c0      	movs	r2, #192	; 0xc0
 8006c76:	4913      	ldr	r1, [pc, #76]	; (8006cc4 <tcp_listen_closed+0x60>)
 8006c78:	4813      	ldr	r0, [pc, #76]	; (8006cc8 <tcp_listen_closed+0x64>)
 8006c7a:	f007 fba7 	bl	800e3cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	7d1b      	ldrb	r3, [r3, #20]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d005      	beq.n	8006c92 <tcp_listen_closed+0x2e>
 8006c86:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <tcp_listen_closed+0x5c>)
 8006c88:	22c1      	movs	r2, #193	; 0xc1
 8006c8a:	4910      	ldr	r1, [pc, #64]	; (8006ccc <tcp_listen_closed+0x68>)
 8006c8c:	480e      	ldr	r0, [pc, #56]	; (8006cc8 <tcp_listen_closed+0x64>)
 8006c8e:	f007 fb9d 	bl	800e3cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006c92:	2301      	movs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e00b      	b.n	8006cb0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006c98:	4a0d      	ldr	r2, [pc, #52]	; (8006cd0 <tcp_listen_closed+0x6c>)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff ffc1 	bl	8006c2c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d9f0      	bls.n	8006c98 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006cb6:	bf00      	nop
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	0800ffe8 	.word	0x0800ffe8
 8006cc4:	08010018 	.word	0x08010018
 8006cc8:	08010024 	.word	0x08010024
 8006ccc:	0801004c 	.word	0x0801004c
 8006cd0:	08011444 	.word	0x08011444

08006cd4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006cd4:	b5b0      	push	{r4, r5, r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d075      	beq.n	8006dd2 <tcp_close_shutdown+0xfe>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	7d1b      	ldrb	r3, [r3, #20]
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d003      	beq.n	8006cf6 <tcp_close_shutdown+0x22>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7d1b      	ldrb	r3, [r3, #20]
 8006cf2:	2b07      	cmp	r3, #7
 8006cf4:	d16d      	bne.n	8006dd2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <tcp_close_shutdown+0x34>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006d06:	d064      	beq.n	8006dd2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	7e9b      	ldrb	r3, [r3, #26]
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <tcp_close_shutdown+0x4e>
 8006d14:	4b5b      	ldr	r3, [pc, #364]	; (8006e84 <tcp_close_shutdown+0x1b0>)
 8006d16:	f240 120f 	movw	r2, #271	; 0x10f
 8006d1a:	495b      	ldr	r1, [pc, #364]	; (8006e88 <tcp_close_shutdown+0x1b4>)
 8006d1c:	485b      	ldr	r0, [pc, #364]	; (8006e8c <tcp_close_shutdown+0x1b8>)
 8006d1e:	f007 fb55 	bl	800e3cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d2a:	687c      	ldr	r4, [r7, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1d1d      	adds	r5, r3, #4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8adb      	ldrh	r3, [r3, #22]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	8b12      	ldrh	r2, [r2, #24]
 8006d38:	9201      	str	r2, [sp, #4]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4622      	mov	r2, r4
 8006d40:	f004 f862 	bl	800ae08 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 ffcf 	bl	8007ce8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006d4a:	4b51      	ldr	r3, [pc, #324]	; (8006e90 <tcp_close_shutdown+0x1bc>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d105      	bne.n	8006d60 <tcp_close_shutdown+0x8c>
 8006d54:	4b4e      	ldr	r3, [pc, #312]	; (8006e90 <tcp_close_shutdown+0x1bc>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	4a4d      	ldr	r2, [pc, #308]	; (8006e90 <tcp_close_shutdown+0x1bc>)
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e013      	b.n	8006d88 <tcp_close_shutdown+0xb4>
 8006d60:	4b4b      	ldr	r3, [pc, #300]	; (8006e90 <tcp_close_shutdown+0x1bc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	e00c      	b.n	8006d82 <tcp_close_shutdown+0xae>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d104      	bne.n	8006d7c <tcp_close_shutdown+0xa8>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	60da      	str	r2, [r3, #12]
 8006d7a:	e005      	b.n	8006d88 <tcp_close_shutdown+0xb4>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ef      	bne.n	8006d68 <tcp_close_shutdown+0x94>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	60da      	str	r2, [r3, #12]
 8006d8e:	4b41      	ldr	r3, [pc, #260]	; (8006e94 <tcp_close_shutdown+0x1c0>)
 8006d90:	2201      	movs	r2, #1
 8006d92:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	7d1b      	ldrb	r3, [r3, #20]
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d10c      	bne.n	8006db6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	220a      	movs	r2, #10
 8006da0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006da2:	4b3d      	ldr	r3, [pc, #244]	; (8006e98 <tcp_close_shutdown+0x1c4>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	4a3b      	ldr	r2, [pc, #236]	; (8006e98 <tcp_close_shutdown+0x1c4>)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	f004 fa72 	bl	800b298 <tcp_timer_needed>
 8006db4:	e00b      	b.n	8006dce <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8006db6:	4b39      	ldr	r3, [pc, #228]	; (8006e9c <tcp_close_shutdown+0x1c8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d102      	bne.n	8006dc6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8006dc0:	f003 faf4 	bl	800a3ac <tcp_trigger_input_pcb_close>
 8006dc4:	e003      	b.n	8006dce <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	2001      	movs	r0, #1
 8006dca:	f7fe fed1 	bl	8005b70 <memp_free>
        }
      }
      return ERR_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e053      	b.n	8006e7a <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7d1b      	ldrb	r3, [r3, #20]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d03d      	beq.n	8006e56 <tcp_close_shutdown+0x182>
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	dc47      	bgt.n	8006e6e <tcp_close_shutdown+0x19a>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <tcp_close_shutdown+0x114>
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d02b      	beq.n	8006e3e <tcp_close_shutdown+0x16a>
 8006de6:	e042      	b.n	8006e6e <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8adb      	ldrh	r3, [r3, #22]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d021      	beq.n	8006e34 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006df0:	4b2b      	ldr	r3, [pc, #172]	; (8006ea0 <tcp_close_shutdown+0x1cc>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d105      	bne.n	8006e06 <tcp_close_shutdown+0x132>
 8006dfa:	4b29      	ldr	r3, [pc, #164]	; (8006ea0 <tcp_close_shutdown+0x1cc>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <tcp_close_shutdown+0x1cc>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	e013      	b.n	8006e2e <tcp_close_shutdown+0x15a>
 8006e06:	4b26      	ldr	r3, [pc, #152]	; (8006ea0 <tcp_close_shutdown+0x1cc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60bb      	str	r3, [r7, #8]
 8006e0c:	e00c      	b.n	8006e28 <tcp_close_shutdown+0x154>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d104      	bne.n	8006e22 <tcp_close_shutdown+0x14e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	60da      	str	r2, [r3, #12]
 8006e20:	e005      	b.n	8006e2e <tcp_close_shutdown+0x15a>
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1ef      	bne.n	8006e0e <tcp_close_shutdown+0x13a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	2001      	movs	r0, #1
 8006e38:	f7fe fe9a 	bl	8005b70 <memp_free>
    break;
 8006e3c:	e01c      	b.n	8006e78 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff ff10 	bl	8006c64 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4817      	ldr	r0, [pc, #92]	; (8006ea4 <tcp_close_shutdown+0x1d0>)
 8006e48:	f000 ff90 	bl	8007d6c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	2002      	movs	r0, #2
 8006e50:	f7fe fe8e 	bl	8005b70 <memp_free>
    break;
 8006e54:	e010      	b.n	8006e78 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	480d      	ldr	r0, [pc, #52]	; (8006e90 <tcp_close_shutdown+0x1bc>)
 8006e5a:	f000 ff87 	bl	8007d6c <tcp_pcb_remove>
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <tcp_close_shutdown+0x1c0>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	2001      	movs	r0, #1
 8006e68:	f7fe fe82 	bl	8005b70 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8006e6c:	e004      	b.n	8006e78 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f81a 	bl	8006ea8 <tcp_close_shutdown_fin>
 8006e74:	4603      	mov	r3, r0
 8006e76:	e000      	b.n	8006e7a <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bdb0      	pop	{r4, r5, r7, pc}
 8006e82:	bf00      	nop
 8006e84:	0800ffe8 	.word	0x0800ffe8
 8006e88:	08010064 	.word	0x08010064
 8006e8c:	08010024 	.word	0x08010024
 8006e90:	20006ba8 	.word	0x20006ba8
 8006e94:	20006ba4 	.word	0x20006ba4
 8006e98:	20006bb8 	.word	0x20006bb8
 8006e9c:	20006bbc 	.word	0x20006bbc
 8006ea0:	20006bb4 	.word	0x20006bb4
 8006ea4:	20006bb0 	.word	0x20006bb0

08006ea8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <tcp_close_shutdown_fin+0x1c>
 8006eb6:	4b2e      	ldr	r3, [pc, #184]	; (8006f70 <tcp_close_shutdown_fin+0xc8>)
 8006eb8:	f240 124d 	movw	r2, #333	; 0x14d
 8006ebc:	492d      	ldr	r1, [pc, #180]	; (8006f74 <tcp_close_shutdown_fin+0xcc>)
 8006ebe:	482e      	ldr	r0, [pc, #184]	; (8006f78 <tcp_close_shutdown_fin+0xd0>)
 8006ec0:	f007 fa84 	bl	800e3cc <iprintf>

  switch (pcb->state) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7d1b      	ldrb	r3, [r3, #20]
 8006ec8:	2b07      	cmp	r3, #7
 8006eca:	d020      	beq.n	8006f0e <tcp_close_shutdown_fin+0x66>
 8006ecc:	2b07      	cmp	r3, #7
 8006ece:	dc2b      	bgt.n	8006f28 <tcp_close_shutdown_fin+0x80>
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d002      	beq.n	8006eda <tcp_close_shutdown_fin+0x32>
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d00d      	beq.n	8006ef4 <tcp_close_shutdown_fin+0x4c>
 8006ed8:	e026      	b.n	8006f28 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f003 faf0 	bl	800a4c0 <tcp_send_fin>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d11f      	bne.n	8006f2c <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2205      	movs	r2, #5
 8006ef0:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006ef2:	e01b      	b.n	8006f2c <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f003 fae3 	bl	800a4c0 <tcp_send_fin>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d114      	bne.n	8006f30 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2205      	movs	r2, #5
 8006f0a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006f0c:	e010      	b.n	8006f30 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f003 fad6 	bl	800a4c0 <tcp_send_fin>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2209      	movs	r2, #9
 8006f24:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006f26:	e005      	b.n	8006f34 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e01c      	b.n	8006f66 <tcp_close_shutdown_fin+0xbe>
    break;
 8006f2c:	bf00      	nop
 8006f2e:	e002      	b.n	8006f36 <tcp_close_shutdown_fin+0x8e>
    break;
 8006f30:	bf00      	nop
 8006f32:	e000      	b.n	8006f36 <tcp_close_shutdown_fin+0x8e>
    break;
 8006f34:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f003 fcde 	bl	800a900 <tcp_output>
 8006f44:	e00d      	b.n	8006f62 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4e:	d108      	bne.n	8006f62 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7e9b      	ldrb	r3, [r3, #26]
 8006f54:	f043 0308 	orr.w	r3, r3, #8
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e001      	b.n	8006f66 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	0800ffe8 	.word	0x0800ffe8
 8006f74:	08010018 	.word	0x08010018
 8006f78:	08010024 	.word	0x08010024

08006f7c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7d1b      	ldrb	r3, [r3, #20]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d006      	beq.n	8006f9a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7e9b      	ldrb	r3, [r3, #26]
 8006f90:	f043 0310 	orr.w	r3, r3, #16
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff fe99 	bl	8006cd4 <tcp_close_shutdown>
 8006fa2:	4603      	mov	r3, r0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08c      	sub	sp, #48	; 0x30
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	7d1b      	ldrb	r3, [r3, #20]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d106      	bne.n	8006fcc <tcp_abandon+0x20>
 8006fbe:	4b4d      	ldr	r3, [pc, #308]	; (80070f4 <tcp_abandon+0x148>)
 8006fc0:	f240 12df 	movw	r2, #479	; 0x1df
 8006fc4:	494c      	ldr	r1, [pc, #304]	; (80070f8 <tcp_abandon+0x14c>)
 8006fc6:	484d      	ldr	r0, [pc, #308]	; (80070fc <tcp_abandon+0x150>)
 8006fc8:	f007 fa00 	bl	800e3cc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7d1b      	ldrb	r3, [r3, #20]
 8006fd0:	2b0a      	cmp	r3, #10
 8006fd2:	d108      	bne.n	8006fe6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	484a      	ldr	r0, [pc, #296]	; (8007100 <tcp_abandon+0x154>)
 8006fd8:	f000 fec8 	bl	8007d6c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	2001      	movs	r0, #1
 8006fe0:	f7fe fdc6 	bl	8005b70 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8006fe4:	e081      	b.n	80070ea <tcp_abandon+0x13e>
    int send_rst = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007000:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	7d1b      	ldrb	r3, [r3, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d126      	bne.n	800705e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8adb      	ldrh	r3, [r3, #22]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d02e      	beq.n	8007076 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007018:	4b3a      	ldr	r3, [pc, #232]	; (8007104 <tcp_abandon+0x158>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	429a      	cmp	r2, r3
 8007020:	d105      	bne.n	800702e <tcp_abandon+0x82>
 8007022:	4b38      	ldr	r3, [pc, #224]	; (8007104 <tcp_abandon+0x158>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	4a36      	ldr	r2, [pc, #216]	; (8007104 <tcp_abandon+0x158>)
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e013      	b.n	8007056 <tcp_abandon+0xaa>
 800702e:	4b35      	ldr	r3, [pc, #212]	; (8007104 <tcp_abandon+0x158>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	e00c      	b.n	8007050 <tcp_abandon+0xa4>
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d104      	bne.n	800704a <tcp_abandon+0x9e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	60da      	str	r2, [r3, #12]
 8007048:	e005      	b.n	8007056 <tcp_abandon+0xaa>
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1ef      	bne.n	8007036 <tcp_abandon+0x8a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	60da      	str	r2, [r3, #12]
 800705c:	e00b      	b.n	8007076 <tcp_abandon+0xca>
      send_rst = reset;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	8adb      	ldrh	r3, [r3, #22]
 8007066:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4827      	ldr	r0, [pc, #156]	; (8007108 <tcp_abandon+0x15c>)
 800706c:	f000 fe7e 	bl	8007d6c <tcp_pcb_remove>
 8007070:	4b26      	ldr	r3, [pc, #152]	; (800710c <tcp_abandon+0x160>)
 8007072:	2201      	movs	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fc87 	bl	8007996 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fc7e 	bl	8007996 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d004      	beq.n	80070ac <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fc75 	bl	8007996 <tcp_segs_free>
    if (send_rst) {
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00c      	beq.n	80070cc <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	1d19      	adds	r1, r3, #4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8b1b      	ldrh	r3, [r3, #24]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	460b      	mov	r3, r1
 80070c4:	6979      	ldr	r1, [r7, #20]
 80070c6:	69b8      	ldr	r0, [r7, #24]
 80070c8:	f003 fe9e 	bl	800ae08 <tcp_rst>
    last_state = pcb->state;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7d1b      	ldrb	r3, [r3, #20]
 80070d0:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	2001      	movs	r0, #1
 80070d6:	f7fe fd4b 	bl	8005b70 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <tcp_abandon+0x13e>
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f06f 010c 	mvn.w	r1, #12
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	4798      	blx	r3
}
 80070ea:	bf00      	nop
 80070ec:	3728      	adds	r7, #40	; 0x28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	0800ffe8 	.word	0x0800ffe8
 80070f8:	08010080 	.word	0x08010080
 80070fc:	08010024 	.word	0x08010024
 8007100:	20006bb8 	.word	0x20006bb8
 8007104:	20006bb4 	.word	0x20006bb4
 8007108:	20006ba8 	.word	0x20006ba8
 800710c:	20006ba4 	.word	0x20006ba4

08007110 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007118:	2101      	movs	r1, #1
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff ff46 	bl	8006fac <tcp_abandon>
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007138:	4413      	add	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007144:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007148:	bf28      	it	cs
 800714a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800714e:	b292      	uxth	r2, r2
 8007150:	4413      	add	r3, r2
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	db08      	blt.n	800716c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	e020      	b.n	80071ae <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd03      	ble.n	8007182 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007180:	e014      	b.n	80071ac <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007194:	d306      	bcc.n	80071a4 <tcp_update_rcv_ann_wnd+0x7c>
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <tcp_update_rcv_ann_wnd+0x90>)
 8007198:	f44f 7242 	mov.w	r2, #776	; 0x308
 800719c:	4907      	ldr	r1, [pc, #28]	; (80071bc <tcp_update_rcv_ann_wnd+0x94>)
 800719e:	4808      	ldr	r0, [pc, #32]	; (80071c0 <tcp_update_rcv_ann_wnd+0x98>)
 80071a0:	f007 f914 	bl	800e3cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80071ac:	2300      	movs	r3, #0
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	0800ffe8 	.word	0x0800ffe8
 80071bc:	08010100 	.word	0x08010100
 80071c0:	08010024 	.word	0x08010024

080071c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	7d1b      	ldrb	r3, [r3, #20]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d106      	bne.n	80071e6 <tcp_recved+0x22>
 80071d8:	4b23      	ldr	r3, [pc, #140]	; (8007268 <tcp_recved+0xa4>)
 80071da:	f240 321f 	movw	r2, #799	; 0x31f
 80071de:	4923      	ldr	r1, [pc, #140]	; (800726c <tcp_recved+0xa8>)
 80071e0:	4823      	ldr	r0, [pc, #140]	; (8007270 <tcp_recved+0xac>)
 80071e2:	f007 f8f3 	bl	800e3cc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	4413      	add	r3, r2
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80071fc:	d904      	bls.n	8007208 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007204:	851a      	strh	r2, [r3, #40]	; 0x28
 8007206:	e017      	b.n	8007238 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d113      	bne.n	8007238 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	7d1b      	ldrb	r3, [r3, #20]
 8007214:	2b07      	cmp	r3, #7
 8007216:	d003      	beq.n	8007220 <tcp_recved+0x5c>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7d1b      	ldrb	r3, [r3, #20]
 800721c:	2b09      	cmp	r3, #9
 800721e:	d104      	bne.n	800722a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007226:	851a      	strh	r2, [r3, #40]	; 0x28
 8007228:	e006      	b.n	8007238 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <tcp_recved+0xa4>)
 800722c:	f240 322d 	movw	r2, #813	; 0x32d
 8007230:	4910      	ldr	r1, [pc, #64]	; (8007274 <tcp_recved+0xb0>)
 8007232:	480f      	ldr	r0, [pc, #60]	; (8007270 <tcp_recved+0xac>)
 8007234:	f007 f8ca 	bl	800e3cc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff ff75 	bl	8007128 <tcp_update_rcv_ann_wnd>
 800723e:	4603      	mov	r3, r0
 8007240:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007248:	db09      	blt.n	800725e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	7e9b      	ldrb	r3, [r3, #26]
 800724e:	f043 0302 	orr.w	r3, r3, #2
 8007252:	b2da      	uxtb	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f003 fb51 	bl	800a900 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	0800ffe8 	.word	0x0800ffe8
 800726c:	0801011c 	.word	0x0801011c
 8007270:	08010024 	.word	0x08010024
 8007274:	08010144 	.word	0x08010144

08007278 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007278:	b5b0      	push	{r4, r5, r7, lr}
 800727a:	b08c      	sub	sp, #48	; 0x30
 800727c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8007282:	4b97      	ldr	r3, [pc, #604]	; (80074e0 <tcp_slowtmr+0x268>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3301      	adds	r3, #1
 8007288:	4a95      	ldr	r2, [pc, #596]	; (80074e0 <tcp_slowtmr+0x268>)
 800728a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800728c:	4b95      	ldr	r3, [pc, #596]	; (80074e4 <tcp_slowtmr+0x26c>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	3301      	adds	r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	4b93      	ldr	r3, [pc, #588]	; (80074e4 <tcp_slowtmr+0x26c>)
 8007296:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007298:	2300      	movs	r3, #0
 800729a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800729c:	4b92      	ldr	r3, [pc, #584]	; (80074e8 <tcp_slowtmr+0x270>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80072a2:	e227      	b.n	80076f4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	7d1b      	ldrb	r3, [r3, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d106      	bne.n	80072ba <tcp_slowtmr+0x42>
 80072ac:	4b8f      	ldr	r3, [pc, #572]	; (80074ec <tcp_slowtmr+0x274>)
 80072ae:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80072b2:	498f      	ldr	r1, [pc, #572]	; (80074f0 <tcp_slowtmr+0x278>)
 80072b4:	488f      	ldr	r0, [pc, #572]	; (80074f4 <tcp_slowtmr+0x27c>)
 80072b6:	f007 f889 	bl	800e3cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	7d1b      	ldrb	r3, [r3, #20]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d106      	bne.n	80072d0 <tcp_slowtmr+0x58>
 80072c2:	4b8a      	ldr	r3, [pc, #552]	; (80074ec <tcp_slowtmr+0x274>)
 80072c4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80072c8:	498b      	ldr	r1, [pc, #556]	; (80074f8 <tcp_slowtmr+0x280>)
 80072ca:	488a      	ldr	r0, [pc, #552]	; (80074f4 <tcp_slowtmr+0x27c>)
 80072cc:	f007 f87e 	bl	800e3cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	7d1b      	ldrb	r3, [r3, #20]
 80072d4:	2b0a      	cmp	r3, #10
 80072d6:	d106      	bne.n	80072e6 <tcp_slowtmr+0x6e>
 80072d8:	4b84      	ldr	r3, [pc, #528]	; (80074ec <tcp_slowtmr+0x274>)
 80072da:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80072de:	4987      	ldr	r1, [pc, #540]	; (80074fc <tcp_slowtmr+0x284>)
 80072e0:	4884      	ldr	r0, [pc, #528]	; (80074f4 <tcp_slowtmr+0x27c>)
 80072e2:	f007 f873 	bl	800e3cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	7f5a      	ldrb	r2, [r3, #29]
 80072ea:	4b7e      	ldr	r3, [pc, #504]	; (80074e4 <tcp_slowtmr+0x26c>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d103      	bne.n	80072fa <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80072f8:	e1fc      	b.n	80076f4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80072fa:	4b7a      	ldr	r3, [pc, #488]	; (80074e4 <tcp_slowtmr+0x26c>)
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	7d1b      	ldrb	r3, [r3, #20]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d108      	bne.n	8007324 <tcp_slowtmr+0xac>
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007318:	2b05      	cmp	r3, #5
 800731a:	d903      	bls.n	8007324 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800731c:	7ffb      	ldrb	r3, [r7, #31]
 800731e:	3301      	adds	r3, #1
 8007320:	77fb      	strb	r3, [r7, #31]
 8007322:	e0a2      	b.n	800746a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800732a:	2b0b      	cmp	r3, #11
 800732c:	d903      	bls.n	8007336 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800732e:	7ffb      	ldrb	r3, [r7, #31]
 8007330:	3301      	adds	r3, #1
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e099      	b.n	800746a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800733c:	2b00      	cmp	r3, #0
 800733e:	d032      	beq.n	80073a6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007346:	3b01      	subs	r3, #1
 8007348:	4a6d      	ldr	r2, [pc, #436]	; (8007500 <tcp_slowtmr+0x288>)
 800734a:	5cd3      	ldrb	r3, [r2, r3]
 800734c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007354:	7cfa      	ldrb	r2, [r7, #19]
 8007356:	429a      	cmp	r2, r3
 8007358:	d907      	bls.n	800736a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007360:	3301      	adds	r3, #1
 8007362:	b2da      	uxtb	r2, r3
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007370:	7cfa      	ldrb	r2, [r7, #19]
 8007372:	429a      	cmp	r2, r3
 8007374:	d879      	bhi.n	800746a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8007376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007378:	f003 fecd 	bl	800b116 <tcp_zero_window_probe>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d173      	bne.n	800746a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007390:	2b06      	cmp	r3, #6
 8007392:	d86a      	bhi.n	800746a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800739a:	3301      	adds	r3, #1
 800739c:	b2da      	uxtb	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80073a4:	e061      	b.n	800746a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	db08      	blt.n	80073c2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3301      	adds	r3, #1
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	b21a      	sxth	r2, r3
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d04f      	beq.n	800746a <tcp_slowtmr+0x1f2>
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80073d6:	429a      	cmp	r2, r3
 80073d8:	db47      	blt.n	800746a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	7d1b      	ldrb	r3, [r3, #20]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d018      	beq.n	8007414 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	bf28      	it	cs
 80073ec:	230c      	movcs	r3, #12
 80073ee:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80073f6:	10db      	asrs	r3, r3, #3
 80073f8:	b21b      	sxth	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007402:	4413      	add	r3, r2
 8007404:	7dfa      	ldrb	r2, [r7, #23]
 8007406:	493f      	ldr	r1, [pc, #252]	; (8007504 <tcp_slowtmr+0x28c>)
 8007408:	5c8a      	ldrb	r2, [r1, r2]
 800740a:	4093      	lsls	r3, r2
 800740c:	b21a      	sxth	r2, r3
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	2200      	movs	r2, #0
 8007418:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007426:	4293      	cmp	r3, r2
 8007428:	bf28      	it	cs
 800742a:	4613      	movcs	r3, r2
 800742c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800742e:	8abb      	ldrh	r3, [r7, #20]
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	b29b      	uxth	r3, r3
 8007448:	429a      	cmp	r2, r3
 800744a:	d206      	bcs.n	800745a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8007464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007466:	f003 fd45 	bl	800aef4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	7d1b      	ldrb	r3, [r3, #20]
 800746e:	2b06      	cmp	r3, #6
 8007470:	d10f      	bne.n	8007492 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	7e9b      	ldrb	r3, [r3, #26]
 8007476:	f003 0310 	and.w	r3, r3, #16
 800747a:	2b00      	cmp	r3, #0
 800747c:	d009      	beq.n	8007492 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800747e:	4b18      	ldr	r3, [pc, #96]	; (80074e0 <tcp_slowtmr+0x268>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b28      	cmp	r3, #40	; 0x28
 800748a:	d902      	bls.n	8007492 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800748c:	7ffb      	ldrb	r3, [r7, #31]
 800748e:	3301      	adds	r3, #1
 8007490:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	7a1b      	ldrb	r3, [r3, #8]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d05d      	beq.n	800755a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d003      	beq.n	80074ae <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80074aa:	2b07      	cmp	r3, #7
 80074ac:	d155      	bne.n	800755a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <tcp_slowtmr+0x268>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074be:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80074c2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80074c6:	4910      	ldr	r1, [pc, #64]	; (8007508 <tcp_slowtmr+0x290>)
 80074c8:	fba1 1303 	umull	r1, r3, r1, r3
 80074cc:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d91c      	bls.n	800750c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80074d2:	7ffb      	ldrb	r3, [r7, #31]
 80074d4:	3301      	adds	r3, #1
 80074d6:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80074d8:	7fbb      	ldrb	r3, [r7, #30]
 80074da:	3301      	adds	r3, #1
 80074dc:	77bb      	strb	r3, [r7, #30]
 80074de:	e03c      	b.n	800755a <tcp_slowtmr+0x2e2>
 80074e0:	20006bac 	.word	0x20006bac
 80074e4:	2000040a 	.word	0x2000040a
 80074e8:	20006ba8 	.word	0x20006ba8
 80074ec:	0800ffe8 	.word	0x0800ffe8
 80074f0:	08010198 	.word	0x08010198
 80074f4:	08010024 	.word	0x08010024
 80074f8:	080101c4 	.word	0x080101c4
 80074fc:	080101f0 	.word	0x080101f0
 8007500:	0801143c 	.word	0x0801143c
 8007504:	0801142c 	.word	0x0801142c
 8007508:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800750c:	4b97      	ldr	r3, [pc, #604]	; (800776c <tcp_slowtmr+0x4f4>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007522:	4618      	mov	r0, r3
 8007524:	4b92      	ldr	r3, [pc, #584]	; (8007770 <tcp_slowtmr+0x4f8>)
 8007526:	fb03 f300 	mul.w	r3, r3, r0
 800752a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800752c:	4991      	ldr	r1, [pc, #580]	; (8007774 <tcp_slowtmr+0x4fc>)
 800752e:	fba1 1303 	umull	r1, r3, r1, r3
 8007532:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007534:	429a      	cmp	r2, r3
 8007536:	d910      	bls.n	800755a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8007538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800753a:	f003 fdaf 	bl	800b09c <tcp_keepalive>
 800753e:	4603      	mov	r3, r0
 8007540:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8007542:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d107      	bne.n	800755a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007550:	3301      	adds	r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755e:	2b00      	cmp	r3, #0
 8007560:	d016      	beq.n	8007590 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8007562:	4b82      	ldr	r3, [pc, #520]	; (800776c <tcp_slowtmr+0x4f4>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	1ad2      	subs	r2, r2, r3
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007572:	4619      	mov	r1, r3
 8007574:	460b      	mov	r3, r1
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	440b      	add	r3, r1
 800757a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800757c:	429a      	cmp	r2, r3
 800757e:	d307      	bcc.n	8007590 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fa06 	bl	8007996 <tcp_segs_free>
      pcb->ooseq = NULL;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	2200      	movs	r2, #0
 800758e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	7d1b      	ldrb	r3, [r3, #20]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d109      	bne.n	80075ac <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007598:	4b74      	ldr	r3, [pc, #464]	; (800776c <tcp_slowtmr+0x4f4>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b28      	cmp	r3, #40	; 0x28
 80075a4:	d902      	bls.n	80075ac <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
 80075a8:	3301      	adds	r3, #1
 80075aa:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	7d1b      	ldrb	r3, [r3, #20]
 80075b0:	2b09      	cmp	r3, #9
 80075b2:	d109      	bne.n	80075c8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80075b4:	4b6d      	ldr	r3, [pc, #436]	; (800776c <tcp_slowtmr+0x4f4>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2bf0      	cmp	r3, #240	; 0xf0
 80075c0:	d902      	bls.n	80075c8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 80075c2:	7ffb      	ldrb	r3, [r7, #31]
 80075c4:	3301      	adds	r3, #1
 80075c6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80075c8:	7ffb      	ldrb	r3, [r7, #31]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d05d      	beq.n	800768a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80075d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075d8:	f000 fb86 	bl	8007ce8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d010      	beq.n	8007604 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80075e2:	4b65      	ldr	r3, [pc, #404]	; (8007778 <tcp_slowtmr+0x500>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d106      	bne.n	80075fa <tcp_slowtmr+0x382>
 80075ec:	4b63      	ldr	r3, [pc, #396]	; (800777c <tcp_slowtmr+0x504>)
 80075ee:	f240 4289 	movw	r2, #1161	; 0x489
 80075f2:	4963      	ldr	r1, [pc, #396]	; (8007780 <tcp_slowtmr+0x508>)
 80075f4:	4863      	ldr	r0, [pc, #396]	; (8007784 <tcp_slowtmr+0x50c>)
 80075f6:	f006 fee9 	bl	800e3cc <iprintf>
        prev->next = pcb->next;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	60da      	str	r2, [r3, #12]
 8007602:	e00f      	b.n	8007624 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007604:	4b5c      	ldr	r3, [pc, #368]	; (8007778 <tcp_slowtmr+0x500>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760a:	429a      	cmp	r2, r3
 800760c:	d006      	beq.n	800761c <tcp_slowtmr+0x3a4>
 800760e:	4b5b      	ldr	r3, [pc, #364]	; (800777c <tcp_slowtmr+0x504>)
 8007610:	f240 428d 	movw	r2, #1165	; 0x48d
 8007614:	495c      	ldr	r1, [pc, #368]	; (8007788 <tcp_slowtmr+0x510>)
 8007616:	485b      	ldr	r0, [pc, #364]	; (8007784 <tcp_slowtmr+0x50c>)
 8007618:	f006 fed8 	bl	800e3cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	4a55      	ldr	r2, [pc, #340]	; (8007778 <tcp_slowtmr+0x500>)
 8007622:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007624:	7fbb      	ldrb	r3, [r7, #30]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d010      	beq.n	800764c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007632:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	1d1d      	adds	r5, r3, #4
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	8adb      	ldrh	r3, [r3, #22]
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	8b12      	ldrh	r2, [r2, #24]
 8007640:	9201      	str	r2, [sp, #4]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	462b      	mov	r3, r5
 8007646:	4622      	mov	r2, r4
 8007648:	f003 fbde 	bl	800ae08 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	7d1b      	ldrb	r3, [r3, #20]
 8007656:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	2001      	movs	r0, #1
 8007666:	f7fe fa83 	bl	8005b70 <memp_free>

      tcp_active_pcbs_changed = 0;
 800766a:	4b48      	ldr	r3, [pc, #288]	; (800778c <tcp_slowtmr+0x514>)
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d004      	beq.n	8007680 <tcp_slowtmr+0x408>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f06f 010c 	mvn.w	r1, #12
 800767c:	68b8      	ldr	r0, [r7, #8]
 800767e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007680:	4b42      	ldr	r3, [pc, #264]	; (800778c <tcp_slowtmr+0x514>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d035      	beq.n	80076f4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8007688:	e606      	b.n	8007298 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	7edb      	ldrb	r3, [r3, #27]
 8007698:	3301      	adds	r3, #1
 800769a:	b2da      	uxtb	r2, r3
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	7eda      	ldrb	r2, [r3, #27]
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	7f1b      	ldrb	r3, [r3, #28]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d323      	bcc.n	80076f4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	2200      	movs	r2, #0
 80076b0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80076b2:	4b36      	ldr	r3, [pc, #216]	; (800778c <tcp_slowtmr+0x514>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <tcp_slowtmr+0x460>
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c8:	6a3a      	ldr	r2, [r7, #32]
 80076ca:	6912      	ldr	r2, [r2, #16]
 80076cc:	6a39      	ldr	r1, [r7, #32]
 80076ce:	4610      	mov	r0, r2
 80076d0:	4798      	blx	r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	777b      	strb	r3, [r7, #29]
 80076d6:	e001      	b.n	80076dc <tcp_slowtmr+0x464>
 80076d8:	2300      	movs	r3, #0
 80076da:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 80076dc:	4b2b      	ldr	r3, [pc, #172]	; (800778c <tcp_slowtmr+0x514>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d000      	beq.n	80076e6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 80076e4:	e5d8      	b.n	8007298 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80076e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 80076ee:	6a38      	ldr	r0, [r7, #32]
 80076f0:	f003 f906 	bl	800a900 <tcp_output>
  while (pcb != NULL) {
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f47f add4 	bne.w	80072a4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8007700:	4b23      	ldr	r3, [pc, #140]	; (8007790 <tcp_slowtmr+0x518>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8007706:	e068      	b.n	80077da <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	7d1b      	ldrb	r3, [r3, #20]
 800770c:	2b0a      	cmp	r3, #10
 800770e:	d006      	beq.n	800771e <tcp_slowtmr+0x4a6>
 8007710:	4b1a      	ldr	r3, [pc, #104]	; (800777c <tcp_slowtmr+0x504>)
 8007712:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007716:	491f      	ldr	r1, [pc, #124]	; (8007794 <tcp_slowtmr+0x51c>)
 8007718:	481a      	ldr	r0, [pc, #104]	; (8007784 <tcp_slowtmr+0x50c>)
 800771a:	f006 fe57 	bl	800e3cc <iprintf>
    pcb_remove = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007722:	4b12      	ldr	r3, [pc, #72]	; (800776c <tcp_slowtmr+0x4f4>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2bf0      	cmp	r3, #240	; 0xf0
 800772e:	d902      	bls.n	8007736 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8007730:	7ffb      	ldrb	r3, [r7, #31]
 8007732:	3301      	adds	r3, #1
 8007734:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007736:	7ffb      	ldrb	r3, [r7, #31]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d049      	beq.n	80077d0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800773c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800773e:	f000 fad3 	bl	8007ce8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d029      	beq.n	800779c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007748:	4b11      	ldr	r3, [pc, #68]	; (8007790 <tcp_slowtmr+0x518>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774e:	429a      	cmp	r2, r3
 8007750:	d106      	bne.n	8007760 <tcp_slowtmr+0x4e8>
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <tcp_slowtmr+0x504>)
 8007754:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8007758:	490f      	ldr	r1, [pc, #60]	; (8007798 <tcp_slowtmr+0x520>)
 800775a:	480a      	ldr	r0, [pc, #40]	; (8007784 <tcp_slowtmr+0x50c>)
 800775c:	f006 fe36 	bl	800e3cc <iprintf>
        prev->next = pcb->next;
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e028      	b.n	80077bc <tcp_slowtmr+0x544>
 800776a:	bf00      	nop
 800776c:	20006bac 	.word	0x20006bac
 8007770:	000124f8 	.word	0x000124f8
 8007774:	10624dd3 	.word	0x10624dd3
 8007778:	20006ba8 	.word	0x20006ba8
 800777c:	0800ffe8 	.word	0x0800ffe8
 8007780:	08010220 	.word	0x08010220
 8007784:	08010024 	.word	0x08010024
 8007788:	0801024c 	.word	0x0801024c
 800778c:	20006ba4 	.word	0x20006ba4
 8007790:	20006bb8 	.word	0x20006bb8
 8007794:	08010278 	.word	0x08010278
 8007798:	080102a8 	.word	0x080102a8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <tcp_slowtmr+0x574>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d006      	beq.n	80077b4 <tcp_slowtmr+0x53c>
 80077a6:	4b12      	ldr	r3, [pc, #72]	; (80077f0 <tcp_slowtmr+0x578>)
 80077a8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80077ac:	4911      	ldr	r1, [pc, #68]	; (80077f4 <tcp_slowtmr+0x57c>)
 80077ae:	4812      	ldr	r0, [pc, #72]	; (80077f8 <tcp_slowtmr+0x580>)
 80077b0:	f006 fe0c 	bl	800e3cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <tcp_slowtmr+0x574>)
 80077ba:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80077c6:	69b9      	ldr	r1, [r7, #24]
 80077c8:	2001      	movs	r0, #1
 80077ca:	f7fe f9d1 	bl	8005b70 <memp_free>
 80077ce:	e004      	b.n	80077da <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d193      	bne.n	8007708 <tcp_slowtmr+0x490>
    }
  }
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	3728      	adds	r7, #40	; 0x28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bdb0      	pop	{r4, r5, r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20006bb8 	.word	0x20006bb8
 80077f0:	0800ffe8 	.word	0x0800ffe8
 80077f4:	080102d0 	.word	0x080102d0
 80077f8:	08010024 	.word	0x08010024

080077fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007802:	4b2d      	ldr	r3, [pc, #180]	; (80078b8 <tcp_fasttmr+0xbc>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	b2da      	uxtb	r2, r3
 800780a:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <tcp_fasttmr+0xbc>)
 800780c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800780e:	4b2b      	ldr	r3, [pc, #172]	; (80078bc <tcp_fasttmr+0xc0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007814:	e048      	b.n	80078a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	7f5a      	ldrb	r2, [r3, #29]
 800781a:	4b27      	ldr	r3, [pc, #156]	; (80078b8 <tcp_fasttmr+0xbc>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d03f      	beq.n	80078a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007822:	4b25      	ldr	r3, [pc, #148]	; (80078b8 <tcp_fasttmr+0xbc>)
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7e9b      	ldrb	r3, [r3, #26]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d010      	beq.n	8007858 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	7e9b      	ldrb	r3, [r3, #26]
 800783a:	f043 0302 	orr.w	r3, r3, #2
 800783e:	b2da      	uxtb	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f003 f85b 	bl	800a900 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7e9b      	ldrb	r3, [r3, #26]
 800784e:	f023 0303 	bic.w	r3, r3, #3
 8007852:	b2da      	uxtb	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	7e9b      	ldrb	r3, [r3, #26]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7e9b      	ldrb	r3, [r3, #26]
 8007868:	f023 0308 	bic.w	r3, r3, #8
 800786c:	b2da      	uxtb	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fb18 	bl	8006ea8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <tcp_fasttmr+0xc4>)
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f819 	bl	80078c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <tcp_fasttmr+0xc4>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d000      	beq.n	800789c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800789a:	e7b8      	b.n	800780e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	e002      	b.n	80078a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1b3      	bne.n	8007816 <tcp_fasttmr+0x1a>
    }
  }
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	2000040a 	.word	0x2000040a
 80078bc:	20006ba8 	.word	0x20006ba8
 80078c0:	20006ba4 	.word	0x20006ba4

080078c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80078c4:	b590      	push	{r4, r7, lr}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d0:	7b5b      	ldrb	r3, [r3, #13]
 80078d2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <tcp_process_refused_data+0x3e>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6918      	ldr	r0, [r3, #16]
 80078f4:	2300      	movs	r3, #0
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	47a0      	blx	r4
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]
 8007900:	e007      	b.n	8007912 <tcp_process_refused_data+0x4e>
 8007902:	2300      	movs	r3, #0
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	2000      	movs	r0, #0
 800790a:	f000 f88d 	bl	8007a28 <tcp_recv_null>
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d12a      	bne.n	8007970 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	d033      	beq.n	800798c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007928:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800792c:	d005      	beq.n	800793a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007932:	3301      	adds	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <tcp_process_refused_data+0x98>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6918      	ldr	r0, [r3, #16]
 800794e:	2300      	movs	r3, #0
 8007950:	2200      	movs	r2, #0
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	47a0      	blx	r4
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	e001      	b.n	8007960 <tcp_process_refused_data+0x9c>
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007964:	f113 0f0d 	cmn.w	r3, #13
 8007968:	d110      	bne.n	800798c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800796a:	f06f 030c 	mvn.w	r3, #12
 800796e:	e00e      	b.n	800798e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8007970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007974:	f113 0f0d 	cmn.w	r3, #13
 8007978:	d102      	bne.n	8007980 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800797a:	f06f 030c 	mvn.w	r3, #12
 800797e:	e006      	b.n	800798e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8007986:	f06f 0304 	mvn.w	r3, #4
 800798a:	e000      	b.n	800798e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bd90      	pop	{r4, r7, pc}

08007996 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800799e:	e007      	b.n	80079b0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f80a 	bl	80079c0 <tcp_seg_free>
    seg = next;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f4      	bne.n	80079a0 <tcp_segs_free+0xa>
  }
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00c      	beq.n	80079e8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fe00 	bl	80065e0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	2003      	movs	r0, #3
 80079e4:	f7fe f8c4 	bl	8005b70 <memp_free>
  }
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80079f8:	2003      	movs	r0, #3
 80079fa:	f7fe f86d 	bl	8005ad8 <memp_malloc>
 80079fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <tcp_seg_copy+0x1a>
    return NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e00a      	b.n	8007a20 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f006 fc20 	bl	800e254 <memcpy>
  pbuf_ref(cseg->p);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe fe8b 	bl	8006734 <pbuf_ref>
  return cseg;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	891b      	ldrh	r3, [r3, #8]
 8007a40:	4619      	mov	r1, r3
 8007a42:	68b8      	ldr	r0, [r7, #8]
 8007a44:	f7ff fbbe 	bl	80071c4 <tcp_recved>
    pbuf_free(p);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7fe fdc9 	bl	80065e0 <pbuf_free>
 8007a4e:	e008      	b.n	8007a62 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8007a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8007a58:	68b8      	ldr	r0, [r7, #8]
 8007a5a:	f7ff fa8f 	bl	8006f7c <tcp_close>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	e000      	b.n	8007a64 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	db01      	blt.n	8007a82 <tcp_kill_prio+0x16>
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	e000      	b.n	8007a84 <tcp_kill_prio+0x18>
 8007a82:	237f      	movs	r3, #127	; 0x7f
 8007a84:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a8e:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <tcp_kill_prio+0x7c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e01a      	b.n	8007acc <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	7d5b      	ldrb	r3, [r3, #21]
 8007a9a:	7afa      	ldrb	r2, [r7, #11]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d312      	bcc.n	8007ac6 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007aa0:	4b12      	ldr	r3, [pc, #72]	; (8007aec <tcp_kill_prio+0x80>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d80a      	bhi.n	8007ac6 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <tcp_kill_prio+0x80>)
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	7d5b      	ldrb	r3, [r3, #21]
 8007ac4:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e1      	bne.n	8007a96 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007ad8:	6938      	ldr	r0, [r7, #16]
 8007ada:	f7ff fb19 	bl	8007110 <tcp_abort>
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20006ba8 	.word	0x20006ba8
 8007aec:	20006bac 	.word	0x20006bac

08007af0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d009      	beq.n	8007b14 <tcp_kill_state+0x24>
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	2b09      	cmp	r3, #9
 8007b04:	d006      	beq.n	8007b14 <tcp_kill_state+0x24>
 8007b06:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <tcp_kill_state+0x80>)
 8007b08:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007b0c:	4919      	ldr	r1, [pc, #100]	; (8007b74 <tcp_kill_state+0x84>)
 8007b0e:	481a      	ldr	r0, [pc, #104]	; (8007b78 <tcp_kill_state+0x88>)
 8007b10:	f006 fc5c 	bl	800e3cc <iprintf>

  inactivity = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b1c:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <tcp_kill_state+0x8c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	e017      	b.n	8007b54 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	7d1b      	ldrb	r3, [r3, #20]
 8007b28:	79fa      	ldrb	r2, [r7, #7]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d10f      	bne.n	8007b4e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007b2e:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <tcp_kill_state+0x90>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d807      	bhi.n	8007b4e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007b3e:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <tcp_kill_state+0x90>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e4      	bne.n	8007b24 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007b60:	2100      	movs	r1, #0
 8007b62:	6938      	ldr	r0, [r7, #16]
 8007b64:	f7ff fa22 	bl	8006fac <tcp_abandon>
  }
}
 8007b68:	bf00      	nop
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	0800ffe8 	.word	0x0800ffe8
 8007b74:	080102f8 	.word	0x080102f8
 8007b78:	08010024 	.word	0x08010024
 8007b7c:	20006ba8 	.word	0x20006ba8
 8007b80:	20006bac 	.word	0x20006bac

08007b84 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b92:	4b12      	ldr	r3, [pc, #72]	; (8007bdc <tcp_kill_timewait+0x58>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e012      	b.n	8007bc0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007b9a:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <tcp_kill_timewait+0x5c>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d807      	bhi.n	8007bba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <tcp_kill_timewait+0x5c>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e9      	bne.n	8007b9a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007bcc:	68b8      	ldr	r0, [r7, #8]
 8007bce:	f7ff fa9f 	bl	8007110 <tcp_abort>
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20006bb8 	.word	0x20006bb8
 8007be0:	20006bac 	.word	0x20006bac

08007be4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007bee:	2001      	movs	r0, #1
 8007bf0:	f7fd ff72 	bl	8005ad8 <memp_malloc>
 8007bf4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d124      	bne.n	8007c46 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007bfc:	f7ff ffc2 	bl	8007b84 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c00:	2001      	movs	r0, #1
 8007c02:	f7fd ff69 	bl	8005ad8 <memp_malloc>
 8007c06:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d11b      	bne.n	8007c46 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007c0e:	2009      	movs	r0, #9
 8007c10:	f7ff ff6e 	bl	8007af0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c14:	2001      	movs	r0, #1
 8007c16:	f7fd ff5f 	bl	8005ad8 <memp_malloc>
 8007c1a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d111      	bne.n	8007c46 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007c22:	2008      	movs	r0, #8
 8007c24:	f7ff ff64 	bl	8007af0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c28:	2001      	movs	r0, #1
 8007c2a:	f7fd ff55 	bl	8005ad8 <memp_malloc>
 8007c2e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d107      	bne.n	8007c46 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff ff17 	bl	8007a6c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c3e:	2001      	movs	r0, #1
 8007c40:	f7fd ff4a 	bl	8005ad8 <memp_malloc>
 8007c44:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d03f      	beq.n	8007ccc <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007c4c:	2298      	movs	r2, #152	; 0x98
 8007c4e:	2100      	movs	r1, #0
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f006 fb0d 	bl	800e270 <memset>
    pcb->prio = prio;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	79fa      	ldrb	r2, [r7, #7]
 8007c5a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007c62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	22ff      	movs	r2, #255	; 0xff
 8007c7a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007c82:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2206      	movs	r2, #6
 8007c88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2206      	movs	r2, #6
 8007c90:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c98:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <tcp_alloc+0xf4>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007caa:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <tcp_alloc+0xf8>)
 8007cac:	781a      	ldrb	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007cb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4a08      	ldr	r2, [pc, #32]	; (8007ce0 <tcp_alloc+0xfc>)
 8007cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a07      	ldr	r2, [pc, #28]	; (8007ce4 <tcp_alloc+0x100>)
 8007cc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20006bac 	.word	0x20006bac
 8007cdc:	2000040a 	.word	0x2000040a
 8007ce0:	08007a29 	.word	0x08007a29
 8007ce4:	006ddd00 	.word	0x006ddd00

08007ce8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	7d1b      	ldrb	r3, [r3, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d034      	beq.n	8007d62 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007cfc:	2b0a      	cmp	r3, #10
 8007cfe:	d030      	beq.n	8007d62 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d02c      	beq.n	8007d62 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fc63 	bl	80065e0 <pbuf_free>
      pcb->refused_data = NULL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fe36 	bl	8007996 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d36:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff fe2a 	bl	8007996 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff fe25 	bl	8007996 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	669a      	str	r2, [r3, #104]	; 0x68
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d105      	bne.n	8007d8c <tcp_pcb_remove+0x20>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e013      	b.n	8007db4 <tcp_pcb_remove+0x48>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e00c      	b.n	8007dae <tcp_pcb_remove+0x42>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d104      	bne.n	8007da8 <tcp_pcb_remove+0x3c>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	e005      	b.n	8007db4 <tcp_pcb_remove+0x48>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1ef      	bne.n	8007d94 <tcp_pcb_remove+0x28>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2200      	movs	r2, #0
 8007db8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007dba:	6838      	ldr	r0, [r7, #0]
 8007dbc:	f7ff ff94 	bl	8007ce8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	7d1b      	ldrb	r3, [r3, #20]
 8007dc4:	2b0a      	cmp	r3, #10
 8007dc6:	d013      	beq.n	8007df0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d00f      	beq.n	8007df0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	7e9b      	ldrb	r3, [r3, #26]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d009      	beq.n	8007df0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	7e9b      	ldrb	r3, [r3, #26]
 8007de0:	f043 0302 	orr.w	r3, r3, #2
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007dea:	6838      	ldr	r0, [r7, #0]
 8007dec:	f002 fd88 	bl	800a900 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	7d1b      	ldrb	r3, [r3, #20]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d020      	beq.n	8007e3a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <tcp_pcb_remove+0xa2>
 8007e00:	4b13      	ldr	r3, [pc, #76]	; (8007e50 <tcp_pcb_remove+0xe4>)
 8007e02:	f240 7253 	movw	r2, #1875	; 0x753
 8007e06:	4913      	ldr	r1, [pc, #76]	; (8007e54 <tcp_pcb_remove+0xe8>)
 8007e08:	4813      	ldr	r0, [pc, #76]	; (8007e58 <tcp_pcb_remove+0xec>)
 8007e0a:	f006 fadf 	bl	800e3cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d006      	beq.n	8007e24 <tcp_pcb_remove+0xb8>
 8007e16:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <tcp_pcb_remove+0xe4>)
 8007e18:	f240 7254 	movw	r2, #1876	; 0x754
 8007e1c:	490f      	ldr	r1, [pc, #60]	; (8007e5c <tcp_pcb_remove+0xf0>)
 8007e1e:	480e      	ldr	r0, [pc, #56]	; (8007e58 <tcp_pcb_remove+0xec>)
 8007e20:	f006 fad4 	bl	800e3cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d006      	beq.n	8007e3a <tcp_pcb_remove+0xce>
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <tcp_pcb_remove+0xe4>)
 8007e2e:	f240 7256 	movw	r2, #1878	; 0x756
 8007e32:	490b      	ldr	r1, [pc, #44]	; (8007e60 <tcp_pcb_remove+0xf4>)
 8007e34:	4808      	ldr	r0, [pc, #32]	; (8007e58 <tcp_pcb_remove+0xec>)
 8007e36:	f006 fac9 	bl	800e3cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	0800ffe8 	.word	0x0800ffe8
 8007e54:	080103a0 	.word	0x080103a0
 8007e58:	08010024 	.word	0x08010024
 8007e5c:	080103b8 	.word	0x080103b8
 8007e60:	080103d4 	.word	0x080103d4

08007e64 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <tcp_next_iss+0x24>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <tcp_next_iss+0x28>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4413      	add	r3, r2
 8007e76:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <tcp_next_iss+0x24>)
 8007e78:	6013      	str	r3, [r2, #0]
  return iss;
 8007e7a:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <tcp_next_iss+0x24>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bc80      	pop	{r7}
 8007e86:	4770      	bx	lr
 8007e88:	2000000c 	.word	0x2000000c
 8007e8c:	20006bac 	.word	0x20006bac

08007e90 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	6039      	str	r1, [r7, #0]
 8007e9a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8007e9c:	6838      	ldr	r0, [r7, #0]
 8007e9e:	f004 ffd1 	bl	800ce44 <ip4_route>
 8007ea2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	e010      	b.n	8007ed0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eb2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007eb4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007ebc:	897b      	ldrh	r3, [r7, #10]
 8007ebe:	3b28      	subs	r3, #40	; 0x28
 8007ec0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007ec2:	893a      	ldrh	r2, [r7, #8]
 8007ec4:	88fb      	ldrh	r3, [r7, #6]
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bf28      	it	cs
 8007eca:	4613      	movcs	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8007ece:	88fb      	ldrh	r3, [r7, #6]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007ee6:	e011      	b.n	8007f0c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d108      	bne.n	8007f06 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7ff f908 	bl	8007110 <tcp_abort>
      pcb = next;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e002      	b.n	8007f0c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1ea      	bne.n	8007ee8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d02c      	beq.n	8007f86 <tcp_netif_ip_addr_changed+0x6a>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d028      	beq.n	8007f86 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007f34:	4b16      	ldr	r3, [pc, #88]	; (8007f90 <tcp_netif_ip_addr_changed+0x74>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff ffcc 	bl	8007ed8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007f40:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <tcp_netif_ip_addr_changed+0x78>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff ffc6 	bl	8007ed8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d019      	beq.n	8007f86 <tcp_netif_ip_addr_changed+0x6a>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d015      	beq.n	8007f86 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <tcp_netif_ip_addr_changed+0x7c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e00e      	b.n	8007f80 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d103      	bne.n	8007f7c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1ed      	bne.n	8007f62 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20006ba8 	.word	0x20006ba8
 8007f94:	20006bb4 	.word	0x20006bb4
 8007f98:	20006bb0 	.word	0x20006bb0

08007f9c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b08b      	sub	sp, #44	; 0x2c
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	4a82      	ldr	r2, [pc, #520]	; (80081b4 <tcp_input+0x218>)
 8007fac:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	895b      	ldrh	r3, [r3, #10]
 8007fb2:	2b13      	cmp	r3, #19
 8007fb4:	f240 838a 	bls.w	80086cc <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fb8:	4b7f      	ldr	r3, [pc, #508]	; (80081b8 <tcp_input+0x21c>)
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	4a7e      	ldr	r2, [pc, #504]	; (80081b8 <tcp_input+0x21c>)
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f005 f9ba 	bl	800d33c <ip4_addr_isbroadcast_u32>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f040 8380 	bne.w	80086d0 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007fd0:	4b79      	ldr	r3, [pc, #484]	; (80081b8 <tcp_input+0x21c>)
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fd8:	2be0      	cmp	r3, #224	; 0xe0
 8007fda:	f000 8379 	beq.w	80086d0 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8007fde:	4b75      	ldr	r3, [pc, #468]	; (80081b4 <tcp_input+0x218>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	899b      	ldrh	r3, [r3, #12]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fd f9cd 	bl	8005386 <lwip_htons>
 8007fec:	4603      	mov	r3, r0
 8007fee:	0b1b      	lsrs	r3, r3, #12
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007ff8:	7cbb      	ldrb	r3, [r7, #18]
 8007ffa:	2b13      	cmp	r3, #19
 8007ffc:	f240 836a 	bls.w	80086d4 <tcp_input+0x738>
 8008000:	7cbb      	ldrb	r3, [r7, #18]
 8008002:	b29a      	uxth	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	891b      	ldrh	r3, [r3, #8]
 8008008:	429a      	cmp	r2, r3
 800800a:	f200 8363 	bhi.w	80086d4 <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800800e:	7cbb      	ldrb	r3, [r7, #18]
 8008010:	b29b      	uxth	r3, r3
 8008012:	3b14      	subs	r3, #20
 8008014:	b29a      	uxth	r2, r3
 8008016:	4b69      	ldr	r3, [pc, #420]	; (80081bc <tcp_input+0x220>)
 8008018:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800801a:	4b69      	ldr	r3, [pc, #420]	; (80081c0 <tcp_input+0x224>)
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	895a      	ldrh	r2, [r3, #10]
 8008024:	7cbb      	ldrb	r3, [r7, #18]
 8008026:	b29b      	uxth	r3, r3
 8008028:	429a      	cmp	r2, r3
 800802a:	d30d      	bcc.n	8008048 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800802c:	4b63      	ldr	r3, [pc, #396]	; (80081bc <tcp_input+0x220>)
 800802e:	881a      	ldrh	r2, [r3, #0]
 8008030:	4b64      	ldr	r3, [pc, #400]	; (80081c4 <tcp_input+0x228>)
 8008032:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008034:	7cbb      	ldrb	r3, [r7, #18]
 8008036:	b29b      	uxth	r3, r3
 8008038:	425b      	negs	r3, r3
 800803a:	b29b      	uxth	r3, r3
 800803c:	b21b      	sxth	r3, r3
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7fe faa9 	bl	8006598 <pbuf_header>
 8008046:	e055      	b.n	80080f4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d105      	bne.n	800805c <tcp_input+0xc0>
 8008050:	4b5d      	ldr	r3, [pc, #372]	; (80081c8 <tcp_input+0x22c>)
 8008052:	22b2      	movs	r2, #178	; 0xb2
 8008054:	495d      	ldr	r1, [pc, #372]	; (80081cc <tcp_input+0x230>)
 8008056:	485e      	ldr	r0, [pc, #376]	; (80081d0 <tcp_input+0x234>)
 8008058:	f006 f9b8 	bl	800e3cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800805c:	f06f 0113 	mvn.w	r1, #19
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7fe fa99 	bl	8006598 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	895a      	ldrh	r2, [r3, #10]
 800806a:	4b56      	ldr	r3, [pc, #344]	; (80081c4 <tcp_input+0x228>)
 800806c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800806e:	4b53      	ldr	r3, [pc, #332]	; (80081bc <tcp_input+0x220>)
 8008070:	881a      	ldrh	r2, [r3, #0]
 8008072:	4b54      	ldr	r3, [pc, #336]	; (80081c4 <tcp_input+0x228>)
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800807a:	4b52      	ldr	r3, [pc, #328]	; (80081c4 <tcp_input+0x228>)
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	425b      	negs	r3, r3
 8008080:	b29b      	uxth	r3, r3
 8008082:	b21b      	sxth	r3, r3
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7fe fa86 	bl	8006598 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	895b      	ldrh	r3, [r3, #10]
 8008092:	8a3a      	ldrh	r2, [r7, #16]
 8008094:	429a      	cmp	r2, r3
 8008096:	f200 831f 	bhi.w	80086d8 <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	4a47      	ldr	r2, [pc, #284]	; (80081c0 <tcp_input+0x224>)
 80080a2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	8a3b      	ldrh	r3, [r7, #16]
 80080aa:	425b      	negs	r3, r3
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	b21b      	sxth	r3, r3
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f7fe fa70 	bl	8006598 <pbuf_header>
    p->tot_len -= opt2len;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	891a      	ldrh	r2, [r3, #8]
 80080bc:	8a3b      	ldrh	r3, [r7, #16]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	895b      	ldrh	r3, [r3, #10]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <tcp_input+0x13e>
 80080ce:	4b3e      	ldr	r3, [pc, #248]	; (80081c8 <tcp_input+0x22c>)
 80080d0:	22cf      	movs	r2, #207	; 0xcf
 80080d2:	4940      	ldr	r1, [pc, #256]	; (80081d4 <tcp_input+0x238>)
 80080d4:	483e      	ldr	r0, [pc, #248]	; (80081d0 <tcp_input+0x234>)
 80080d6:	f006 f979 	bl	800e3cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	891a      	ldrh	r2, [r3, #8]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	891b      	ldrh	r3, [r3, #8]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d005      	beq.n	80080f4 <tcp_input+0x158>
 80080e8:	4b37      	ldr	r3, [pc, #220]	; (80081c8 <tcp_input+0x22c>)
 80080ea:	22d0      	movs	r2, #208	; 0xd0
 80080ec:	493a      	ldr	r1, [pc, #232]	; (80081d8 <tcp_input+0x23c>)
 80080ee:	4838      	ldr	r0, [pc, #224]	; (80081d0 <tcp_input+0x234>)
 80080f0:	f006 f96c 	bl	800e3cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80080f4:	4b2f      	ldr	r3, [pc, #188]	; (80081b4 <tcp_input+0x218>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	4a2d      	ldr	r2, [pc, #180]	; (80081b4 <tcp_input+0x218>)
 80080fe:	6814      	ldr	r4, [r2, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f7fd f940 	bl	8005386 <lwip_htons>
 8008106:	4603      	mov	r3, r0
 8008108:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800810a:	4b2a      	ldr	r3, [pc, #168]	; (80081b4 <tcp_input+0x218>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	885b      	ldrh	r3, [r3, #2]
 8008110:	b29b      	uxth	r3, r3
 8008112:	4a28      	ldr	r2, [pc, #160]	; (80081b4 <tcp_input+0x218>)
 8008114:	6814      	ldr	r4, [r2, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f7fd f935 	bl	8005386 <lwip_htons>
 800811c:	4603      	mov	r3, r0
 800811e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008120:	4b24      	ldr	r3, [pc, #144]	; (80081b4 <tcp_input+0x218>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4a23      	ldr	r2, [pc, #140]	; (80081b4 <tcp_input+0x218>)
 8008128:	6814      	ldr	r4, [r2, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f7fd f938 	bl	80053a0 <lwip_htonl>
 8008130:	4603      	mov	r3, r0
 8008132:	6063      	str	r3, [r4, #4]
 8008134:	6863      	ldr	r3, [r4, #4]
 8008136:	4a29      	ldr	r2, [pc, #164]	; (80081dc <tcp_input+0x240>)
 8008138:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800813a:	4b1e      	ldr	r3, [pc, #120]	; (80081b4 <tcp_input+0x218>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	4a1c      	ldr	r2, [pc, #112]	; (80081b4 <tcp_input+0x218>)
 8008142:	6814      	ldr	r4, [r2, #0]
 8008144:	4618      	mov	r0, r3
 8008146:	f7fd f92b 	bl	80053a0 <lwip_htonl>
 800814a:	4603      	mov	r3, r0
 800814c:	60a3      	str	r3, [r4, #8]
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	4a23      	ldr	r2, [pc, #140]	; (80081e0 <tcp_input+0x244>)
 8008152:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008154:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <tcp_input+0x218>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	89db      	ldrh	r3, [r3, #14]
 800815a:	b29b      	uxth	r3, r3
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <tcp_input+0x218>)
 800815e:	6814      	ldr	r4, [r2, #0]
 8008160:	4618      	mov	r0, r3
 8008162:	f7fd f910 	bl	8005386 <lwip_htons>
 8008166:	4603      	mov	r3, r0
 8008168:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <tcp_input+0x218>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	899b      	ldrh	r3, [r3, #12]
 8008170:	b29b      	uxth	r3, r3
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd f907 	bl	8005386 <lwip_htons>
 8008178:	4603      	mov	r3, r0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008180:	b2da      	uxtb	r2, r3
 8008182:	4b18      	ldr	r3, [pc, #96]	; (80081e4 <tcp_input+0x248>)
 8008184:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	891a      	ldrh	r2, [r3, #8]
 800818a:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <tcp_input+0x248>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b00      	cmp	r3, #0
 8008194:	bf14      	ite	ne
 8008196:	2301      	movne	r3, #1
 8008198:	2300      	moveq	r3, #0
 800819a:	b2db      	uxtb	r3, r3
 800819c:	b29b      	uxth	r3, r3
 800819e:	4413      	add	r3, r2
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <tcp_input+0x24c>)
 80081a4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081aa:	4b10      	ldr	r3, [pc, #64]	; (80081ec <tcp_input+0x250>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e082      	b.n	80082b8 <tcp_input+0x31c>
 80081b2:	bf00      	nop
 80081b4:	2000041c 	.word	0x2000041c
 80081b8:	20003678 	.word	0x20003678
 80081bc:	20000420 	.word	0x20000420
 80081c0:	20000424 	.word	0x20000424
 80081c4:	20000422 	.word	0x20000422
 80081c8:	080103ec 	.word	0x080103ec
 80081cc:	08010420 	.word	0x08010420
 80081d0:	08010430 	.word	0x08010430
 80081d4:	08010458 	.word	0x08010458
 80081d8:	08010464 	.word	0x08010464
 80081dc:	2000042c 	.word	0x2000042c
 80081e0:	20000430 	.word	0x20000430
 80081e4:	20000438 	.word	0x20000438
 80081e8:	20000436 	.word	0x20000436
 80081ec:	20006ba8 	.word	0x20006ba8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	7d1b      	ldrb	r3, [r3, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d105      	bne.n	8008204 <tcp_input+0x268>
 80081f8:	4b8f      	ldr	r3, [pc, #572]	; (8008438 <tcp_input+0x49c>)
 80081fa:	22e2      	movs	r2, #226	; 0xe2
 80081fc:	498f      	ldr	r1, [pc, #572]	; (800843c <tcp_input+0x4a0>)
 80081fe:	4890      	ldr	r0, [pc, #576]	; (8008440 <tcp_input+0x4a4>)
 8008200:	f006 f8e4 	bl	800e3cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	7d1b      	ldrb	r3, [r3, #20]
 8008208:	2b0a      	cmp	r3, #10
 800820a:	d105      	bne.n	8008218 <tcp_input+0x27c>
 800820c:	4b8a      	ldr	r3, [pc, #552]	; (8008438 <tcp_input+0x49c>)
 800820e:	22e3      	movs	r2, #227	; 0xe3
 8008210:	498c      	ldr	r1, [pc, #560]	; (8008444 <tcp_input+0x4a8>)
 8008212:	488b      	ldr	r0, [pc, #556]	; (8008440 <tcp_input+0x4a4>)
 8008214:	f006 f8da 	bl	800e3cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	7d1b      	ldrb	r3, [r3, #20]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d105      	bne.n	800822c <tcp_input+0x290>
 8008220:	4b85      	ldr	r3, [pc, #532]	; (8008438 <tcp_input+0x49c>)
 8008222:	22e4      	movs	r2, #228	; 0xe4
 8008224:	4988      	ldr	r1, [pc, #544]	; (8008448 <tcp_input+0x4ac>)
 8008226:	4886      	ldr	r0, [pc, #536]	; (8008440 <tcp_input+0x4a4>)
 8008228:	f006 f8d0 	bl	800e3cc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	8b1a      	ldrh	r2, [r3, #24]
 8008230:	4b86      	ldr	r3, [pc, #536]	; (800844c <tcp_input+0x4b0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	429a      	cmp	r2, r3
 800823a:	d138      	bne.n	80082ae <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	8ada      	ldrh	r2, [r3, #22]
 8008240:	4b82      	ldr	r3, [pc, #520]	; (800844c <tcp_input+0x4b0>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	885b      	ldrh	r3, [r3, #2]
 8008246:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008248:	429a      	cmp	r2, r3
 800824a:	d130      	bne.n	80082ae <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	4b7f      	ldr	r3, [pc, #508]	; (8008450 <tcp_input+0x4b4>)
 8008252:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008254:	429a      	cmp	r2, r3
 8008256:	d12a      	bne.n	80082ae <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	4b7c      	ldr	r3, [pc, #496]	; (8008450 <tcp_input+0x4b4>)
 800825e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008260:	429a      	cmp	r2, r3
 8008262:	d124      	bne.n	80082ae <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	429a      	cmp	r2, r3
 800826c:	d105      	bne.n	800827a <tcp_input+0x2de>
 800826e:	4b72      	ldr	r3, [pc, #456]	; (8008438 <tcp_input+0x49c>)
 8008270:	22ec      	movs	r2, #236	; 0xec
 8008272:	4978      	ldr	r1, [pc, #480]	; (8008454 <tcp_input+0x4b8>)
 8008274:	4872      	ldr	r0, [pc, #456]	; (8008440 <tcp_input+0x4a4>)
 8008276:	f006 f8a9 	bl	800e3cc <iprintf>
      if (prev != NULL) {
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00a      	beq.n	8008296 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008288:	4b73      	ldr	r3, [pc, #460]	; (8008458 <tcp_input+0x4bc>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008290:	4a71      	ldr	r2, [pc, #452]	; (8008458 <tcp_input+0x4bc>)
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	429a      	cmp	r2, r3
 800829e:	d10f      	bne.n	80082c0 <tcp_input+0x324>
 80082a0:	4b65      	ldr	r3, [pc, #404]	; (8008438 <tcp_input+0x49c>)
 80082a2:	22f4      	movs	r2, #244	; 0xf4
 80082a4:	496d      	ldr	r1, [pc, #436]	; (800845c <tcp_input+0x4c0>)
 80082a6:	4866      	ldr	r0, [pc, #408]	; (8008440 <tcp_input+0x4a4>)
 80082a8:	f006 f890 	bl	800e3cc <iprintf>
      break;
 80082ac:	e008      	b.n	80082c0 <tcp_input+0x324>
    }
    prev = pcb;
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	61fb      	str	r3, [r7, #28]
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d198      	bne.n	80081f0 <tcp_input+0x254>
 80082be:	e000      	b.n	80082c2 <tcp_input+0x326>
      break;
 80082c0:	bf00      	nop
  }

  if (pcb == NULL) {
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d173      	bne.n	80083b0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082c8:	4b65      	ldr	r3, [pc, #404]	; (8008460 <tcp_input+0x4c4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	e02f      	b.n	8008330 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	7d1b      	ldrb	r3, [r3, #20]
 80082d4:	2b0a      	cmp	r3, #10
 80082d6:	d005      	beq.n	80082e4 <tcp_input+0x348>
 80082d8:	4b57      	ldr	r3, [pc, #348]	; (8008438 <tcp_input+0x49c>)
 80082da:	22fe      	movs	r2, #254	; 0xfe
 80082dc:	4961      	ldr	r1, [pc, #388]	; (8008464 <tcp_input+0x4c8>)
 80082de:	4858      	ldr	r0, [pc, #352]	; (8008440 <tcp_input+0x4a4>)
 80082e0:	f006 f874 	bl	800e3cc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	8b1a      	ldrh	r2, [r3, #24]
 80082e8:	4b58      	ldr	r3, [pc, #352]	; (800844c <tcp_input+0x4b0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d11a      	bne.n	800832a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	8ada      	ldrh	r2, [r3, #22]
 80082f8:	4b54      	ldr	r3, [pc, #336]	; (800844c <tcp_input+0x4b0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	885b      	ldrh	r3, [r3, #2]
 80082fe:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008300:	429a      	cmp	r2, r3
 8008302:	d112      	bne.n	800832a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	4b51      	ldr	r3, [pc, #324]	; (8008450 <tcp_input+0x4b4>)
 800830a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800830c:	429a      	cmp	r2, r3
 800830e:	d10c      	bne.n	800832a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	4b4e      	ldr	r3, [pc, #312]	; (8008450 <tcp_input+0x4b4>)
 8008316:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008318:	429a      	cmp	r2, r3
 800831a:	d106      	bne.n	800832a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800831c:	69f8      	ldr	r0, [r7, #28]
 800831e:	f000 fb15 	bl	800894c <tcp_timewait_input>
        pbuf_free(p);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7fe f95c 	bl	80065e0 <pbuf_free>
        return;
 8008328:	e1dc      	b.n	80086e4 <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	61fb      	str	r3, [r7, #28]
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1cc      	bne.n	80082d0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800833a:	4b4b      	ldr	r3, [pc, #300]	; (8008468 <tcp_input+0x4cc>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	e019      	b.n	8008376 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	8ada      	ldrh	r2, [r3, #22]
 8008346:	4b41      	ldr	r3, [pc, #260]	; (800844c <tcp_input+0x4b0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	885b      	ldrh	r3, [r3, #2]
 800834c:	b29b      	uxth	r3, r3
 800834e:	429a      	cmp	r2, r3
 8008350:	d10c      	bne.n	800836c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	4b3e      	ldr	r3, [pc, #248]	; (8008450 <tcp_input+0x4b4>)
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	429a      	cmp	r2, r3
 800835c:	d00f      	beq.n	800837e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00d      	beq.n	8008380 <tcp_input+0x3e4>
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d009      	beq.n	8008380 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e2      	bne.n	8008342 <tcp_input+0x3a6>
 800837c:	e000      	b.n	8008380 <tcp_input+0x3e4>
            break;
 800837e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d014      	beq.n	80083b0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	68da      	ldr	r2, [r3, #12]
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008394:	4b34      	ldr	r3, [pc, #208]	; (8008468 <tcp_input+0x4cc>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800839c:	4a32      	ldr	r2, [pc, #200]	; (8008468 <tcp_input+0x4cc>)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80083a2:	6978      	ldr	r0, [r7, #20]
 80083a4:	f000 f9f2 	bl	800878c <tcp_listen_input>
      pbuf_free(p);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fe f919 	bl	80065e0 <pbuf_free>
      return;
 80083ae:	e199      	b.n	80086e4 <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8164 	beq.w	8008680 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80083b8:	4b2c      	ldr	r3, [pc, #176]	; (800846c <tcp_input+0x4d0>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	891a      	ldrh	r2, [r3, #8]
 80083c2:	4b2a      	ldr	r3, [pc, #168]	; (800846c <tcp_input+0x4d0>)
 80083c4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80083c6:	4a29      	ldr	r2, [pc, #164]	; (800846c <tcp_input+0x4d0>)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80083cc:	4b1f      	ldr	r3, [pc, #124]	; (800844c <tcp_input+0x4b0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a26      	ldr	r2, [pc, #152]	; (800846c <tcp_input+0x4d0>)
 80083d2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80083d4:	4b26      	ldr	r3, [pc, #152]	; (8008470 <tcp_input+0x4d4>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80083da:	4b26      	ldr	r3, [pc, #152]	; (8008474 <tcp_input+0x4d8>)
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80083e0:	4b25      	ldr	r3, [pc, #148]	; (8008478 <tcp_input+0x4dc>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80083e6:	4b25      	ldr	r3, [pc, #148]	; (800847c <tcp_input+0x4e0>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d006      	beq.n	8008400 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7b5b      	ldrb	r3, [r3, #13]
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008404:	2b00      	cmp	r3, #0
 8008406:	d03d      	beq.n	8008484 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008408:	69f8      	ldr	r0, [r7, #28]
 800840a:	f7ff fa5b 	bl	80078c4 <tcp_process_refused_data>
 800840e:	4603      	mov	r3, r0
 8008410:	f113 0f0d 	cmn.w	r3, #13
 8008414:	d007      	beq.n	8008426 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800841a:	2b00      	cmp	r3, #0
 800841c:	d032      	beq.n	8008484 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800841e:	4b18      	ldr	r3, [pc, #96]	; (8008480 <tcp_input+0x4e4>)
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d02e      	beq.n	8008484 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842a:	2b00      	cmp	r3, #0
 800842c:	f040 8108 	bne.w	8008640 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008430:	69f8      	ldr	r0, [r7, #28]
 8008432:	f002 fa09 	bl	800a848 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008436:	e103      	b.n	8008640 <tcp_input+0x6a4>
 8008438:	080103ec 	.word	0x080103ec
 800843c:	08010484 	.word	0x08010484
 8008440:	08010430 	.word	0x08010430
 8008444:	080104ac 	.word	0x080104ac
 8008448:	080104d8 	.word	0x080104d8
 800844c:	2000041c 	.word	0x2000041c
 8008450:	20003678 	.word	0x20003678
 8008454:	08010500 	.word	0x08010500
 8008458:	20006ba8 	.word	0x20006ba8
 800845c:	0801052c 	.word	0x0801052c
 8008460:	20006bb8 	.word	0x20006bb8
 8008464:	08010558 	.word	0x08010558
 8008468:	20006bb0 	.word	0x20006bb0
 800846c:	2000040c 	.word	0x2000040c
 8008470:	2000043c 	.word	0x2000043c
 8008474:	20000439 	.word	0x20000439
 8008478:	20000434 	.word	0x20000434
 800847c:	20000438 	.word	0x20000438
 8008480:	20000436 	.word	0x20000436
      }
    }
    tcp_input_pcb = pcb;
 8008484:	4a99      	ldr	r2, [pc, #612]	; (80086ec <tcp_input+0x750>)
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800848a:	69f8      	ldr	r0, [r7, #28]
 800848c:	f000 fac6 	bl	8008a1c <tcp_process>
 8008490:	4603      	mov	r3, r0
 8008492:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008494:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008498:	f113 0f0d 	cmn.w	r3, #13
 800849c:	f000 80d2 	beq.w	8008644 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 80084a0:	4b93      	ldr	r3, [pc, #588]	; (80086f0 <tcp_input+0x754>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d016      	beq.n	80084da <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d008      	beq.n	80084c8 <tcp_input+0x52c>
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	6912      	ldr	r2, [r2, #16]
 80084c0:	f06f 010d 	mvn.w	r1, #13
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80084c8:	69f9      	ldr	r1, [r7, #28]
 80084ca:	488a      	ldr	r0, [pc, #552]	; (80086f4 <tcp_input+0x758>)
 80084cc:	f7ff fc4e 	bl	8007d6c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80084d0:	69f9      	ldr	r1, [r7, #28]
 80084d2:	2001      	movs	r0, #1
 80084d4:	f7fd fb4c 	bl	8005b70 <memp_free>
 80084d8:	e0bf      	b.n	800865a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80084de:	4b86      	ldr	r3, [pc, #536]	; (80086f8 <tcp_input+0x75c>)
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01b      	beq.n	800851e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80084e6:	4b84      	ldr	r3, [pc, #528]	; (80086f8 <tcp_input+0x75c>)
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <tcp_input+0x56c>
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f8:	69fa      	ldr	r2, [r7, #28]
 80084fa:	6910      	ldr	r0, [r2, #16]
 80084fc:	89fa      	ldrh	r2, [r7, #14]
 80084fe:	69f9      	ldr	r1, [r7, #28]
 8008500:	4798      	blx	r3
 8008502:	4603      	mov	r3, r0
 8008504:	74fb      	strb	r3, [r7, #19]
 8008506:	e001      	b.n	800850c <tcp_input+0x570>
 8008508:	2300      	movs	r3, #0
 800850a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800850c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008510:	f113 0f0d 	cmn.w	r3, #13
 8008514:	f000 8098 	beq.w	8008648 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008518:	4b77      	ldr	r3, [pc, #476]	; (80086f8 <tcp_input+0x75c>)
 800851a:	2200      	movs	r2, #0
 800851c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800851e:	69f8      	ldr	r0, [r7, #28]
 8008520:	f000 f902 	bl	8008728 <tcp_input_delayed_close>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	f040 8090 	bne.w	800864c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800852c:	4b73      	ldr	r3, [pc, #460]	; (80086fc <tcp_input+0x760>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d041      	beq.n	80085b8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008538:	2b00      	cmp	r3, #0
 800853a:	d006      	beq.n	800854a <tcp_input+0x5ae>
 800853c:	4b70      	ldr	r3, [pc, #448]	; (8008700 <tcp_input+0x764>)
 800853e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8008542:	4970      	ldr	r1, [pc, #448]	; (8008704 <tcp_input+0x768>)
 8008544:	4870      	ldr	r0, [pc, #448]	; (8008708 <tcp_input+0x76c>)
 8008546:	f005 ff41 	bl	800e3cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	7e9b      	ldrb	r3, [r3, #26]
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b00      	cmp	r3, #0
 8008554:	d008      	beq.n	8008568 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008556:	4b69      	ldr	r3, [pc, #420]	; (80086fc <tcp_input+0x760>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe f840 	bl	80065e0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008560:	69f8      	ldr	r0, [r7, #28]
 8008562:	f7fe fdd5 	bl	8007110 <tcp_abort>
            goto aborted;
 8008566:	e078      	b.n	800865a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00c      	beq.n	800858c <tcp_input+0x5f0>
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	6918      	ldr	r0, [r3, #16]
 800857c:	4b5f      	ldr	r3, [pc, #380]	; (80086fc <tcp_input+0x760>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	2300      	movs	r3, #0
 8008582:	69f9      	ldr	r1, [r7, #28]
 8008584:	47a0      	blx	r4
 8008586:	4603      	mov	r3, r0
 8008588:	74fb      	strb	r3, [r7, #19]
 800858a:	e008      	b.n	800859e <tcp_input+0x602>
 800858c:	4b5b      	ldr	r3, [pc, #364]	; (80086fc <tcp_input+0x760>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	69f9      	ldr	r1, [r7, #28]
 8008594:	2000      	movs	r0, #0
 8008596:	f7ff fa47 	bl	8007a28 <tcp_recv_null>
 800859a:	4603      	mov	r3, r0
 800859c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800859e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085a2:	f113 0f0d 	cmn.w	r3, #13
 80085a6:	d053      	beq.n	8008650 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80085a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80085b0:	4b52      	ldr	r3, [pc, #328]	; (80086fc <tcp_input+0x760>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80085b8:	4b4d      	ldr	r3, [pc, #308]	; (80086f0 <tcp_input+0x754>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d030      	beq.n	8008626 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d0:	7b5a      	ldrb	r2, [r3, #13]
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d6:	f042 0220 	orr.w	r2, r2, #32
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	735a      	strb	r2, [r3, #13]
 80085de:	e022      	b.n	8008626 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80085e8:	d005      	beq.n	80085f6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ee:	3301      	adds	r3, #1
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <tcp_input+0x67c>
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	6918      	ldr	r0, [r3, #16]
 800860a:	2300      	movs	r3, #0
 800860c:	2200      	movs	r2, #0
 800860e:	69f9      	ldr	r1, [r7, #28]
 8008610:	47a0      	blx	r4
 8008612:	4603      	mov	r3, r0
 8008614:	74fb      	strb	r3, [r7, #19]
 8008616:	e001      	b.n	800861c <tcp_input+0x680>
 8008618:	2300      	movs	r3, #0
 800861a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800861c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008620:	f113 0f0d 	cmn.w	r3, #13
 8008624:	d016      	beq.n	8008654 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008626:	4b31      	ldr	r3, [pc, #196]	; (80086ec <tcp_input+0x750>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800862c:	69f8      	ldr	r0, [r7, #28]
 800862e:	f000 f87b 	bl	8008728 <tcp_input_delayed_close>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10f      	bne.n	8008658 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008638:	69f8      	ldr	r0, [r7, #28]
 800863a:	f002 f961 	bl	800a900 <tcp_output>
 800863e:	e00c      	b.n	800865a <tcp_input+0x6be>
        goto aborted;
 8008640:	bf00      	nop
 8008642:	e00a      	b.n	800865a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008644:	bf00      	nop
 8008646:	e008      	b.n	800865a <tcp_input+0x6be>
              goto aborted;
 8008648:	bf00      	nop
 800864a:	e006      	b.n	800865a <tcp_input+0x6be>
          goto aborted;
 800864c:	bf00      	nop
 800864e:	e004      	b.n	800865a <tcp_input+0x6be>
            goto aborted;
 8008650:	bf00      	nop
 8008652:	e002      	b.n	800865a <tcp_input+0x6be>
              goto aborted;
 8008654:	bf00      	nop
 8008656:	e000      	b.n	800865a <tcp_input+0x6be>
          goto aborted;
 8008658:	bf00      	nop
    tcp_input_pcb = NULL;
 800865a:	4b24      	ldr	r3, [pc, #144]	; (80086ec <tcp_input+0x750>)
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008660:	4b26      	ldr	r3, [pc, #152]	; (80086fc <tcp_input+0x760>)
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8008666:	4b29      	ldr	r3, [pc, #164]	; (800870c <tcp_input+0x770>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d039      	beq.n	80086e2 <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 800866e:	4b27      	ldr	r3, [pc, #156]	; (800870c <tcp_input+0x770>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd ffb4 	bl	80065e0 <pbuf_free>
      inseg.p = NULL;
 8008678:	4b24      	ldr	r3, [pc, #144]	; (800870c <tcp_input+0x770>)
 800867a:	2200      	movs	r2, #0
 800867c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800867e:	e030      	b.n	80086e2 <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008680:	4b23      	ldr	r3, [pc, #140]	; (8008710 <tcp_input+0x774>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	899b      	ldrh	r3, [r3, #12]
 8008686:	b29b      	uxth	r3, r3
 8008688:	4618      	mov	r0, r3
 800868a:	f7fc fe7c 	bl	8005386 <lwip_htons>
 800868e:	4603      	mov	r3, r0
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d115      	bne.n	80086c4 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008698:	4b1e      	ldr	r3, [pc, #120]	; (8008714 <tcp_input+0x778>)
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	4b1e      	ldr	r3, [pc, #120]	; (8008718 <tcp_input+0x77c>)
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	4b1e      	ldr	r3, [pc, #120]	; (800871c <tcp_input+0x780>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086a8:	4b19      	ldr	r3, [pc, #100]	; (8008710 <tcp_input+0x774>)
 80086aa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80086ac:	885b      	ldrh	r3, [r3, #2]
 80086ae:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086b0:	4a17      	ldr	r2, [pc, #92]	; (8008710 <tcp_input+0x774>)
 80086b2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80086b4:	8812      	ldrh	r2, [r2, #0]
 80086b6:	b292      	uxth	r2, r2
 80086b8:	9201      	str	r2, [sp, #4]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	4b18      	ldr	r3, [pc, #96]	; (8008720 <tcp_input+0x784>)
 80086be:	4a19      	ldr	r2, [pc, #100]	; (8008724 <tcp_input+0x788>)
 80086c0:	f002 fba2 	bl	800ae08 <tcp_rst>
    pbuf_free(p);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7fd ff8b 	bl	80065e0 <pbuf_free>
  return;
 80086ca:	e00a      	b.n	80086e2 <tcp_input+0x746>
    goto dropped;
 80086cc:	bf00      	nop
 80086ce:	e004      	b.n	80086da <tcp_input+0x73e>
    goto dropped;
 80086d0:	bf00      	nop
 80086d2:	e002      	b.n	80086da <tcp_input+0x73e>
    goto dropped;
 80086d4:	bf00      	nop
 80086d6:	e000      	b.n	80086da <tcp_input+0x73e>
      goto dropped;
 80086d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fd ff80 	bl	80065e0 <pbuf_free>
 80086e0:	e000      	b.n	80086e4 <tcp_input+0x748>
  return;
 80086e2:	bf00      	nop
}
 80086e4:	3724      	adds	r7, #36	; 0x24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd90      	pop	{r4, r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20006bbc 	.word	0x20006bbc
 80086f0:	20000439 	.word	0x20000439
 80086f4:	20006ba8 	.word	0x20006ba8
 80086f8:	20000434 	.word	0x20000434
 80086fc:	2000043c 	.word	0x2000043c
 8008700:	080103ec 	.word	0x080103ec
 8008704:	08010588 	.word	0x08010588
 8008708:	08010430 	.word	0x08010430
 800870c:	2000040c 	.word	0x2000040c
 8008710:	2000041c 	.word	0x2000041c
 8008714:	20000430 	.word	0x20000430
 8008718:	20000436 	.word	0x20000436
 800871c:	2000042c 	.word	0x2000042c
 8008720:	20003688 	.word	0x20003688
 8008724:	2000368c 	.word	0x2000368c

08008728 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8008730:	4b14      	ldr	r3, [pc, #80]	; (8008784 <tcp_input_delayed_close+0x5c>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01d      	beq.n	8008778 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7e9b      	ldrb	r3, [r3, #26]
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10d      	bne.n	8008764 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d008      	beq.n	8008764 <tcp_input_delayed_close+0x3c>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6912      	ldr	r2, [r2, #16]
 800875c:	f06f 010e 	mvn.w	r1, #14
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4808      	ldr	r0, [pc, #32]	; (8008788 <tcp_input_delayed_close+0x60>)
 8008768:	f7ff fb00 	bl	8007d6c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	2001      	movs	r0, #1
 8008770:	f7fd f9fe 	bl	8005b70 <memp_free>
    return 1;
 8008774:	2301      	movs	r3, #1
 8008776:	e000      	b.n	800877a <tcp_input_delayed_close+0x52>
  }
  return 0;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20000439 	.word	0x20000439
 8008788:	20006ba8 	.word	0x20006ba8

0800878c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af02      	add	r7, sp, #8
 8008792:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008794:	4b63      	ldr	r3, [pc, #396]	; (8008924 <tcp_listen_input+0x198>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b00      	cmp	r3, #0
 800879e:	f040 80bb 	bne.w	8008918 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80087a2:	4b60      	ldr	r3, [pc, #384]	; (8008924 <tcp_listen_input+0x198>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	f003 0310 	and.w	r3, r3, #16
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d016      	beq.n	80087dc <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80087ae:	4b5e      	ldr	r3, [pc, #376]	; (8008928 <tcp_listen_input+0x19c>)
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	4b5e      	ldr	r3, [pc, #376]	; (800892c <tcp_listen_input+0x1a0>)
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	4b5d      	ldr	r3, [pc, #372]	; (8008930 <tcp_listen_input+0x1a4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087be:	4b5d      	ldr	r3, [pc, #372]	; (8008934 <tcp_listen_input+0x1a8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80087c2:	885b      	ldrh	r3, [r3, #2]
 80087c4:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087c6:	4a5b      	ldr	r2, [pc, #364]	; (8008934 <tcp_listen_input+0x1a8>)
 80087c8:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80087ca:	8812      	ldrh	r2, [r2, #0]
 80087cc:	b292      	uxth	r2, r2
 80087ce:	9201      	str	r2, [sp, #4]
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	4b59      	ldr	r3, [pc, #356]	; (8008938 <tcp_listen_input+0x1ac>)
 80087d4:	4a59      	ldr	r2, [pc, #356]	; (800893c <tcp_listen_input+0x1b0>)
 80087d6:	f002 fb17 	bl	800ae08 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80087da:	e09f      	b.n	800891c <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 80087dc:	4b51      	ldr	r3, [pc, #324]	; (8008924 <tcp_listen_input+0x198>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8099 	beq.w	800891c <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	7d5b      	ldrb	r3, [r3, #21]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff f9f8 	bl	8007be4 <tcp_alloc>
 80087f4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d111      	bne.n	8008820 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00a      	beq.n	800881a <tcp_listen_input+0x8e>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6910      	ldr	r0, [r2, #16]
 800880c:	f04f 32ff 	mov.w	r2, #4294967295
 8008810:	2100      	movs	r1, #0
 8008812:	4798      	blx	r3
 8008814:	4603      	mov	r3, r0
 8008816:	73bb      	strb	r3, [r7, #14]
      return;
 8008818:	e081      	b.n	800891e <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800881a:	23f0      	movs	r3, #240	; 0xf0
 800881c:	73bb      	strb	r3, [r7, #14]
      return;
 800881e:	e07e      	b.n	800891e <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008820:	4b47      	ldr	r3, [pc, #284]	; (8008940 <tcp_listen_input+0x1b4>)
 8008822:	695a      	ldr	r2, [r3, #20]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008828:	4b45      	ldr	r3, [pc, #276]	; (8008940 <tcp_listen_input+0x1b4>)
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	8ada      	ldrh	r2, [r3, #22]
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008838:	4b3e      	ldr	r3, [pc, #248]	; (8008934 <tcp_listen_input+0x1a8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	b29a      	uxth	r2, r3
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2203      	movs	r2, #3
 8008848:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800884a:	4b39      	ldr	r3, [pc, #228]	; (8008930 <tcp_listen_input+0x1a4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800885c:	6978      	ldr	r0, [r7, #20]
 800885e:	f7ff fb01 	bl	8007e64 <tcp_next_iss>
 8008862:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800887c:	4b2c      	ldr	r3, [pc, #176]	; (8008930 <tcp_listen_input+0x1a4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	1e5a      	subs	r2, r3, #1
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7a1b      	ldrb	r3, [r3, #8]
 8008898:	f003 030c 	and.w	r3, r3, #12
 800889c:	b2da      	uxtb	r2, r3
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80088a2:	4b28      	ldr	r3, [pc, #160]	; (8008944 <tcp_listen_input+0x1b8>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	60da      	str	r2, [r3, #12]
 80088aa:	4a26      	ldr	r2, [pc, #152]	; (8008944 <tcp_listen_input+0x1b8>)
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	f002 fcf2 	bl	800b298 <tcp_timer_needed>
 80088b4:	4b24      	ldr	r3, [pc, #144]	; (8008948 <tcp_listen_input+0x1bc>)
 80088b6:	2201      	movs	r2, #1
 80088b8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80088ba:	6978      	ldr	r0, [r7, #20]
 80088bc:	f001 fd10 	bl	800a2e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80088c0:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <tcp_listen_input+0x1a8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	89db      	ldrh	r3, [r3, #14]
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7ff fad3 	bl	8007e90 <tcp_eff_send_mss_impl>
 80088ea:	4603      	mov	r3, r0
 80088ec:	461a      	mov	r2, r3
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80088f2:	2112      	movs	r1, #18
 80088f4:	6978      	ldr	r0, [r7, #20]
 80088f6:	f001 feab 	bl	800a650 <tcp_enqueue_flags>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80088fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d004      	beq.n	8008910 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8008906:	2100      	movs	r1, #0
 8008908:	6978      	ldr	r0, [r7, #20]
 800890a:	f7fe fb4f 	bl	8006fac <tcp_abandon>
      return;
 800890e:	e006      	b.n	800891e <tcp_listen_input+0x192>
    tcp_output(npcb);
 8008910:	6978      	ldr	r0, [r7, #20]
 8008912:	f001 fff5 	bl	800a900 <tcp_output>
  return;
 8008916:	e001      	b.n	800891c <tcp_listen_input+0x190>
    return;
 8008918:	bf00      	nop
 800891a:	e000      	b.n	800891e <tcp_listen_input+0x192>
  return;
 800891c:	bf00      	nop
}
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20000438 	.word	0x20000438
 8008928:	20000430 	.word	0x20000430
 800892c:	20000436 	.word	0x20000436
 8008930:	2000042c 	.word	0x2000042c
 8008934:	2000041c 	.word	0x2000041c
 8008938:	20003688 	.word	0x20003688
 800893c:	2000368c 	.word	0x2000368c
 8008940:	20003678 	.word	0x20003678
 8008944:	20006ba8 	.word	0x20006ba8
 8008948:	20006ba4 	.word	0x20006ba4

0800894c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008954:	4b29      	ldr	r3, [pc, #164]	; (80089fc <tcp_timewait_input+0xb0>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d146      	bne.n	80089ee <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008960:	4b26      	ldr	r3, [pc, #152]	; (80089fc <tcp_timewait_input+0xb0>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d027      	beq.n	80089bc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800896c:	4b24      	ldr	r3, [pc, #144]	; (8008a00 <tcp_timewait_input+0xb4>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	db2a      	blt.n	80089d0 <tcp_timewait_input+0x84>
 800897a:	4b21      	ldr	r3, [pc, #132]	; (8008a00 <tcp_timewait_input+0xb4>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008986:	440b      	add	r3, r1
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	dc20      	bgt.n	80089d0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <tcp_timewait_input+0xb8>)
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	4b1d      	ldr	r3, [pc, #116]	; (8008a08 <tcp_timewait_input+0xbc>)
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	4b19      	ldr	r3, [pc, #100]	; (8008a00 <tcp_timewait_input+0xb4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800899e:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <tcp_timewait_input+0xc0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80089a2:	885b      	ldrh	r3, [r3, #2]
 80089a4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089a6:	4a19      	ldr	r2, [pc, #100]	; (8008a0c <tcp_timewait_input+0xc0>)
 80089a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80089aa:	8812      	ldrh	r2, [r2, #0]
 80089ac:	b292      	uxth	r2, r2
 80089ae:	9201      	str	r2, [sp, #4]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <tcp_timewait_input+0xc4>)
 80089b4:	4a17      	ldr	r2, [pc, #92]	; (8008a14 <tcp_timewait_input+0xc8>)
 80089b6:	f002 fa27 	bl	800ae08 <tcp_rst>
      return;
 80089ba:	e01b      	b.n	80089f4 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 80089bc:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <tcp_timewait_input+0xb0>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80089c8:	4b13      	ldr	r3, [pc, #76]	; (8008a18 <tcp_timewait_input+0xcc>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80089d0:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <tcp_timewait_input+0xbc>)
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00c      	beq.n	80089f2 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	7e9b      	ldrb	r3, [r3, #26]
 80089dc:	f043 0302 	orr.w	r3, r3, #2
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 ff8a 	bl	800a900 <tcp_output>
  }
  return;
 80089ec:	e001      	b.n	80089f2 <tcp_timewait_input+0xa6>
    return;
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <tcp_timewait_input+0xa8>
  return;
 80089f2:	bf00      	nop
}
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20000438 	.word	0x20000438
 8008a00:	2000042c 	.word	0x2000042c
 8008a04:	20000430 	.word	0x20000430
 8008a08:	20000436 	.word	0x20000436
 8008a0c:	2000041c 	.word	0x2000041c
 8008a10:	20003688 	.word	0x20003688
 8008a14:	2000368c 	.word	0x2000368c
 8008a18:	20006bac 	.word	0x20006bac

08008a1c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008a2c:	4ba4      	ldr	r3, [pc, #656]	; (8008cc0 <tcp_process+0x2a4>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d04e      	beq.n	8008ad6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7d1b      	ldrb	r3, [r3, #20]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d108      	bne.n	8008a52 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a44:	4b9f      	ldr	r3, [pc, #636]	; (8008cc4 <tcp_process+0x2a8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d123      	bne.n	8008a94 <tcp_process+0x78>
        acceptable = 1;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	76fb      	strb	r3, [r7, #27]
 8008a50:	e020      	b.n	8008a94 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a56:	4b9c      	ldr	r3, [pc, #624]	; (8008cc8 <tcp_process+0x2ac>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d102      	bne.n	8008a64 <tcp_process+0x48>
        acceptable = 1;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	76fb      	strb	r3, [r7, #27]
 8008a62:	e017      	b.n	8008a94 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008a64:	4b98      	ldr	r3, [pc, #608]	; (8008cc8 <tcp_process+0x2ac>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	db10      	blt.n	8008a94 <tcp_process+0x78>
 8008a72:	4b95      	ldr	r3, [pc, #596]	; (8008cc8 <tcp_process+0x2ac>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a7e:	440b      	add	r3, r1
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc06      	bgt.n	8008a94 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7e9b      	ldrb	r3, [r3, #26]
 8008a8a:	f043 0302 	orr.w	r3, r3, #2
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008a94:	7efb      	ldrb	r3, [r7, #27]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d01b      	beq.n	8008ad2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7d1b      	ldrb	r3, [r3, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d106      	bne.n	8008ab0 <tcp_process+0x94>
 8008aa2:	4b8a      	ldr	r3, [pc, #552]	; (8008ccc <tcp_process+0x2b0>)
 8008aa4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008aa8:	4989      	ldr	r1, [pc, #548]	; (8008cd0 <tcp_process+0x2b4>)
 8008aaa:	488a      	ldr	r0, [pc, #552]	; (8008cd4 <tcp_process+0x2b8>)
 8008aac:	f005 fc8e 	bl	800e3cc <iprintf>
      recv_flags |= TF_RESET;
 8008ab0:	4b89      	ldr	r3, [pc, #548]	; (8008cd8 <tcp_process+0x2bc>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	f043 0308 	orr.w	r3, r3, #8
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	4b87      	ldr	r3, [pc, #540]	; (8008cd8 <tcp_process+0x2bc>)
 8008abc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7e9b      	ldrb	r3, [r3, #26]
 8008ac2:	f023 0301 	bic.w	r3, r3, #1
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8008acc:	f06f 030d 	mvn.w	r3, #13
 8008ad0:	e34d      	b.n	800916e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e34b      	b.n	800916e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008ad6:	4b7a      	ldr	r3, [pc, #488]	; (8008cc0 <tcp_process+0x2a4>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d010      	beq.n	8008b04 <tcp_process+0xe8>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7d1b      	ldrb	r3, [r3, #20]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d00c      	beq.n	8008b04 <tcp_process+0xe8>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	7d1b      	ldrb	r3, [r3, #20]
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d008      	beq.n	8008b04 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7e9b      	ldrb	r3, [r3, #26]
 8008af6:	f043 0302 	orr.w	r3, r3, #2
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e334      	b.n	800916e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	7e9b      	ldrb	r3, [r3, #26]
 8008b08:	f003 0310 	and.w	r3, r3, #16
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d103      	bne.n	8008b18 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008b10:	4b72      	ldr	r3, [pc, #456]	; (8008cdc <tcp_process+0x2c0>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 fbdd 	bl	800a2e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	7d1b      	ldrb	r3, [r3, #20]
 8008b2a:	3b02      	subs	r3, #2
 8008b2c:	2b07      	cmp	r3, #7
 8008b2e:	f200 830e 	bhi.w	800914e <tcp_process+0x732>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <tcp_process+0x11c>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b59 	.word	0x08008b59
 8008b3c:	08008d51 	.word	0x08008d51
 8008b40:	08008ea9 	.word	0x08008ea9
 8008b44:	08008ed3 	.word	0x08008ed3
 8008b48:	08008ffd 	.word	0x08008ffd
 8008b4c:	08008ea9 	.word	0x08008ea9
 8008b50:	08009089 	.word	0x08009089
 8008b54:	08009119 	.word	0x08009119
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008b58:	4b59      	ldr	r3, [pc, #356]	; (8008cc0 <tcp_process+0x2a4>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80cb 	beq.w	8008cfc <tcp_process+0x2e0>
 8008b66:	4b56      	ldr	r3, [pc, #344]	; (8008cc0 <tcp_process+0x2a4>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 80c4 	beq.w	8008cfc <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	4b52      	ldr	r3, [pc, #328]	; (8008cc4 <tcp_process+0x2a8>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	f040 80bc 	bne.w	8008cfc <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8008b84:	4b50      	ldr	r3, [pc, #320]	; (8008cc8 <tcp_process+0x2ac>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8008b96:	4b4b      	ldr	r3, [pc, #300]	; (8008cc4 <tcp_process+0x2a8>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8008b9e:	4b50      	ldr	r3, [pc, #320]	; (8008ce0 <tcp_process+0x2c4>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	89db      	ldrh	r3, [r3, #14]
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008bb8:	4b43      	ldr	r3, [pc, #268]	; (8008cc8 <tcp_process+0x2ac>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	1e5a      	subs	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f7ff f95c 	bl	8007e90 <tcp_eff_send_mss_impl>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	f241 121c 	movw	r2, #4380	; 0x111c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	bf38      	it	cc
 8008bee:	461a      	movcc	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	bf28      	it	cs
 8008bfa:	4613      	movcs	r3, r2
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d106      	bne.n	8008c1c <tcp_process+0x200>
 8008c0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <tcp_process+0x2b0>)
 8008c10:	f240 321a 	movw	r2, #794	; 0x31a
 8008c14:	4933      	ldr	r1, [pc, #204]	; (8008ce4 <tcp_process+0x2c8>)
 8008c16:	482f      	ldr	r0, [pc, #188]	; (8008cd4 <tcp_process+0x2b8>)
 8008c18:	f005 fbd8 	bl	800e3cc <iprintf>
      --pcb->snd_queuelen;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c30:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d111      	bne.n	8008c5c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c3c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d106      	bne.n	8008c52 <tcp_process+0x236>
 8008c44:	4b21      	ldr	r3, [pc, #132]	; (8008ccc <tcp_process+0x2b0>)
 8008c46:	f240 3222 	movw	r2, #802	; 0x322
 8008c4a:	4927      	ldr	r1, [pc, #156]	; (8008ce8 <tcp_process+0x2cc>)
 8008c4c:	4821      	ldr	r0, [pc, #132]	; (8008cd4 <tcp_process+0x2b8>)
 8008c4e:	f005 fbbd 	bl	800e3cc <iprintf>
        pcb->unsent = rseg->next;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	669a      	str	r2, [r3, #104]	; 0x68
 8008c5a:	e003      	b.n	8008c64 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8008c64:	69f8      	ldr	r0, [r7, #28]
 8008c66:	f7fe feab 	bl	80079c0 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d104      	bne.n	8008c7c <tcp_process+0x260>
        pcb->rtime = -1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c78:	861a      	strh	r2, [r3, #48]	; 0x30
 8008c7a:	e006      	b.n	8008c8a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <tcp_process+0x28e>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6910      	ldr	r0, [r2, #16]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	4798      	blx	r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	76bb      	strb	r3, [r7, #26]
 8008ca8:	e001      	b.n	8008cae <tcp_process+0x292>
 8008caa:	2300      	movs	r3, #0
 8008cac:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8008cae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008cb2:	f113 0f0d 	cmn.w	r3, #13
 8008cb6:	d119      	bne.n	8008cec <tcp_process+0x2d0>
        return ERR_ABRT;
 8008cb8:	f06f 030c 	mvn.w	r3, #12
 8008cbc:	e257      	b.n	800916e <tcp_process+0x752>
 8008cbe:	bf00      	nop
 8008cc0:	20000438 	.word	0x20000438
 8008cc4:	20000430 	.word	0x20000430
 8008cc8:	2000042c 	.word	0x2000042c
 8008ccc:	080103ec 	.word	0x080103ec
 8008cd0:	080105a4 	.word	0x080105a4
 8008cd4:	08010430 	.word	0x08010430
 8008cd8:	20000439 	.word	0x20000439
 8008cdc:	20006bac 	.word	0x20006bac
 8008ce0:	2000041c 	.word	0x2000041c
 8008ce4:	080105c4 	.word	0x080105c4
 8008ce8:	080105dc 	.word	0x080105dc
      }
      tcp_ack_now(pcb);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7e9b      	ldrb	r3, [r3, #26]
 8008cf0:	f043 0302 	orr.w	r3, r3, #2
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8008cfa:	e22a      	b.n	8009152 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8008cfc:	4b9f      	ldr	r3, [pc, #636]	; (8008f7c <tcp_process+0x560>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	f003 0310 	and.w	r3, r3, #16
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8224 	beq.w	8009152 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d0a:	4b9d      	ldr	r3, [pc, #628]	; (8008f80 <tcp_process+0x564>)
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	4b9d      	ldr	r3, [pc, #628]	; (8008f84 <tcp_process+0x568>)
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	4b9c      	ldr	r3, [pc, #624]	; (8008f88 <tcp_process+0x56c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d1a:	4b9c      	ldr	r3, [pc, #624]	; (8008f8c <tcp_process+0x570>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d1e:	885b      	ldrh	r3, [r3, #2]
 8008d20:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d22:	4a9a      	ldr	r2, [pc, #616]	; (8008f8c <tcp_process+0x570>)
 8008d24:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d26:	8812      	ldrh	r2, [r2, #0]
 8008d28:	b292      	uxth	r2, r2
 8008d2a:	9201      	str	r2, [sp, #4]
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	4b98      	ldr	r3, [pc, #608]	; (8008f90 <tcp_process+0x574>)
 8008d30:	4a98      	ldr	r2, [pc, #608]	; (8008f94 <tcp_process+0x578>)
 8008d32:	f002 f869 	bl	800ae08 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d3c:	2b05      	cmp	r3, #5
 8008d3e:	f200 8208 	bhi.w	8009152 <tcp_process+0x736>
        pcb->rtime = 0;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f002 f8d3 	bl	800aef4 <tcp_rexmit_rto>
    break;
 8008d4e:	e200      	b.n	8009152 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8008d50:	4b8a      	ldr	r3, [pc, #552]	; (8008f7c <tcp_process+0x560>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 8091 	beq.w	8008e80 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008d5e:	4b88      	ldr	r3, [pc, #544]	; (8008f80 <tcp_process+0x564>)
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	db71      	blt.n	8008e52 <tcp_process+0x436>
 8008d6e:	4b84      	ldr	r3, [pc, #528]	; (8008f80 <tcp_process+0x564>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dc6a      	bgt.n	8008e52 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2204      	movs	r2, #4
 8008d80:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00b      	beq.n	8008da2 <tcp_process+0x386>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d106      	bne.n	8008da2 <tcp_process+0x386>
 8008d94:	4b80      	ldr	r3, [pc, #512]	; (8008f98 <tcp_process+0x57c>)
 8008d96:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008d9a:	4980      	ldr	r1, [pc, #512]	; (8008f9c <tcp_process+0x580>)
 8008d9c:	4880      	ldr	r0, [pc, #512]	; (8008fa0 <tcp_process+0x584>)
 8008d9e:	f005 fb15 	bl	800e3cc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8008daa:	23fa      	movs	r3, #250	; 0xfa
 8008dac:	76bb      	strb	r3, [r7, #26]
 8008dae:	e011      	b.n	8008dd4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <tcp_process+0x3b4>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6910      	ldr	r0, [r2, #16]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4798      	blx	r3
 8008dca:	4603      	mov	r3, r0
 8008dcc:	76bb      	strb	r3, [r7, #26]
 8008dce:	e001      	b.n	8008dd4 <tcp_process+0x3b8>
 8008dd0:	23f0      	movs	r3, #240	; 0xf0
 8008dd2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8008dd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8008ddc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008de0:	f113 0f0d 	cmn.w	r3, #13
 8008de4:	d002      	beq.n	8008dec <tcp_process+0x3d0>
            tcp_abort(pcb);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fe f992 	bl	8007110 <tcp_abort>
          }
          return ERR_ABRT;
 8008dec:	f06f 030c 	mvn.w	r3, #12
 8008df0:	e1bd      	b.n	800916e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa42 	bl	800927c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8008df8:	4b6a      	ldr	r3, [pc, #424]	; (8008fa4 <tcp_process+0x588>)
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <tcp_process+0x3f0>
          recv_acked--;
 8008e00:	4b68      	ldr	r3, [pc, #416]	; (8008fa4 <tcp_process+0x588>)
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	4b66      	ldr	r3, [pc, #408]	; (8008fa4 <tcp_process+0x588>)
 8008e0a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	f241 121c 	movw	r2, #4380	; 0x111c
 8008e16:	429a      	cmp	r2, r3
 8008e18:	bf38      	it	cc
 8008e1a:	461a      	movcc	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4293      	cmp	r3, r2
 8008e24:	bf28      	it	cs
 8008e26:	4613      	movcs	r3, r2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8008e30:	4b5d      	ldr	r3, [pc, #372]	; (8008fa8 <tcp_process+0x58c>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d034      	beq.n	8008ea6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	7e9b      	ldrb	r3, [r3, #26]
 8008e40:	f043 0302 	orr.w	r3, r3, #2
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2207      	movs	r2, #7
 8008e4e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8008e50:	e029      	b.n	8008ea6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e52:	4b4b      	ldr	r3, [pc, #300]	; (8008f80 <tcp_process+0x564>)
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	4b4b      	ldr	r3, [pc, #300]	; (8008f84 <tcp_process+0x568>)
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	4b4a      	ldr	r3, [pc, #296]	; (8008f88 <tcp_process+0x56c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e62:	4b4a      	ldr	r3, [pc, #296]	; (8008f8c <tcp_process+0x570>)
 8008e64:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e66:	885b      	ldrh	r3, [r3, #2]
 8008e68:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e6a:	4a48      	ldr	r2, [pc, #288]	; (8008f8c <tcp_process+0x570>)
 8008e6c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e6e:	8812      	ldrh	r2, [r2, #0]
 8008e70:	b292      	uxth	r2, r2
 8008e72:	9201      	str	r2, [sp, #4]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	4b46      	ldr	r3, [pc, #280]	; (8008f90 <tcp_process+0x574>)
 8008e78:	4a46      	ldr	r2, [pc, #280]	; (8008f94 <tcp_process+0x578>)
 8008e7a:	f001 ffc5 	bl	800ae08 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8008e7e:	e16a      	b.n	8009156 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008e80:	4b3e      	ldr	r3, [pc, #248]	; (8008f7c <tcp_process+0x560>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 8164 	beq.w	8009156 <tcp_process+0x73a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	1e5a      	subs	r2, r3, #1
 8008e94:	4b3c      	ldr	r3, [pc, #240]	; (8008f88 <tcp_process+0x56c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	f040 815c 	bne.w	8009156 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f002 f85e 	bl	800af60 <tcp_rexmit>
    break;
 8008ea4:	e157      	b.n	8009156 <tcp_process+0x73a>
 8008ea6:	e156      	b.n	8009156 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f9e7 	bl	800927c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008eae:	4b3e      	ldr	r3, [pc, #248]	; (8008fa8 <tcp_process+0x58c>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	f003 0320 	and.w	r3, r3, #32
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 814f 	beq.w	800915a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	7e9b      	ldrb	r3, [r3, #26]
 8008ec0:	f043 0302 	orr.w	r3, r3, #2
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2207      	movs	r2, #7
 8008ece:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008ed0:	e143      	b.n	800915a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f9d2 	bl	800927c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008ed8:	4b33      	ldr	r3, [pc, #204]	; (8008fa8 <tcp_process+0x58c>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d074      	beq.n	8008fce <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ee4:	4b25      	ldr	r3, [pc, #148]	; (8008f7c <tcp_process+0x560>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d063      	beq.n	8008fb8 <tcp_process+0x59c>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ef4:	4b22      	ldr	r3, [pc, #136]	; (8008f80 <tcp_process+0x564>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d15d      	bne.n	8008fb8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d159      	bne.n	8008fb8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	7e9b      	ldrb	r3, [r3, #26]
 8008f08:	f043 0302 	orr.w	r3, r3, #2
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fe fee8 	bl	8007ce8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008f18:	4b24      	ldr	r3, [pc, #144]	; (8008fac <tcp_process+0x590>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d105      	bne.n	8008f2e <tcp_process+0x512>
 8008f22:	4b22      	ldr	r3, [pc, #136]	; (8008fac <tcp_process+0x590>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	4a20      	ldr	r2, [pc, #128]	; (8008fac <tcp_process+0x590>)
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	e013      	b.n	8008f56 <tcp_process+0x53a>
 8008f2e:	4b1f      	ldr	r3, [pc, #124]	; (8008fac <tcp_process+0x590>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e00c      	b.n	8008f50 <tcp_process+0x534>
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d104      	bne.n	8008f4a <tcp_process+0x52e>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	60da      	str	r2, [r3, #12]
 8008f48:	e005      	b.n	8008f56 <tcp_process+0x53a>
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1ef      	bne.n	8008f36 <tcp_process+0x51a>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	60da      	str	r2, [r3, #12]
 8008f5c:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <tcp_process+0x594>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	220a      	movs	r2, #10
 8008f66:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008f68:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <tcp_process+0x598>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
 8008f70:	4a10      	ldr	r2, [pc, #64]	; (8008fb4 <tcp_process+0x598>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	f002 f98f 	bl	800b298 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8008f7a:	e0f0      	b.n	800915e <tcp_process+0x742>
 8008f7c:	20000438 	.word	0x20000438
 8008f80:	20000430 	.word	0x20000430
 8008f84:	20000436 	.word	0x20000436
 8008f88:	2000042c 	.word	0x2000042c
 8008f8c:	2000041c 	.word	0x2000041c
 8008f90:	20003688 	.word	0x20003688
 8008f94:	2000368c 	.word	0x2000368c
 8008f98:	080103ec 	.word	0x080103ec
 8008f9c:	080105f0 	.word	0x080105f0
 8008fa0:	08010430 	.word	0x08010430
 8008fa4:	20000434 	.word	0x20000434
 8008fa8:	20000439 	.word	0x20000439
 8008fac:	20006ba8 	.word	0x20006ba8
 8008fb0:	20006ba4 	.word	0x20006ba4
 8008fb4:	20006bb8 	.word	0x20006bb8
        tcp_ack_now(pcb);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7e9b      	ldrb	r3, [r3, #26]
 8008fbc:	f043 0302 	orr.w	r3, r3, #2
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2208      	movs	r2, #8
 8008fca:	751a      	strb	r2, [r3, #20]
    break;
 8008fcc:	e0c7      	b.n	800915e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008fce:	4b6a      	ldr	r3, [pc, #424]	; (8009178 <tcp_process+0x75c>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	f003 0310 	and.w	r3, r3, #16
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 80c1 	beq.w	800915e <tcp_process+0x742>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fe0:	4b66      	ldr	r3, [pc, #408]	; (800917c <tcp_process+0x760>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	f040 80ba 	bne.w	800915e <tcp_process+0x742>
               pcb->unsent == NULL) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f040 80b5 	bne.w	800915e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2206      	movs	r2, #6
 8008ff8:	751a      	strb	r2, [r3, #20]
    break;
 8008ffa:	e0b0      	b.n	800915e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f93d 	bl	800927c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009002:	4b5f      	ldr	r3, [pc, #380]	; (8009180 <tcp_process+0x764>)
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80a9 	beq.w	8009162 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7e9b      	ldrb	r3, [r3, #26]
 8009014:	f043 0302 	orr.w	r3, r3, #2
 8009018:	b2da      	uxtb	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7fe fe62 	bl	8007ce8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009024:	4b57      	ldr	r3, [pc, #348]	; (8009184 <tcp_process+0x768>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	429a      	cmp	r2, r3
 800902c:	d105      	bne.n	800903a <tcp_process+0x61e>
 800902e:	4b55      	ldr	r3, [pc, #340]	; (8009184 <tcp_process+0x768>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	4a53      	ldr	r2, [pc, #332]	; (8009184 <tcp_process+0x768>)
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	e013      	b.n	8009062 <tcp_process+0x646>
 800903a:	4b52      	ldr	r3, [pc, #328]	; (8009184 <tcp_process+0x768>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	e00c      	b.n	800905c <tcp_process+0x640>
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	429a      	cmp	r2, r3
 800904a:	d104      	bne.n	8009056 <tcp_process+0x63a>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	60da      	str	r2, [r3, #12]
 8009054:	e005      	b.n	8009062 <tcp_process+0x646>
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1ef      	bne.n	8009042 <tcp_process+0x626>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	60da      	str	r2, [r3, #12]
 8009068:	4b47      	ldr	r3, [pc, #284]	; (8009188 <tcp_process+0x76c>)
 800906a:	2201      	movs	r2, #1
 800906c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	220a      	movs	r2, #10
 8009072:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009074:	4b45      	ldr	r3, [pc, #276]	; (800918c <tcp_process+0x770>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60da      	str	r2, [r3, #12]
 800907c:	4a43      	ldr	r2, [pc, #268]	; (800918c <tcp_process+0x770>)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	f002 f909 	bl	800b298 <tcp_timer_needed>
    }
    break;
 8009086:	e06c      	b.n	8009162 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8f7 	bl	800927c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800908e:	4b3a      	ldr	r3, [pc, #232]	; (8009178 <tcp_process+0x75c>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	f003 0310 	and.w	r3, r3, #16
 8009096:	2b00      	cmp	r3, #0
 8009098:	d065      	beq.n	8009166 <tcp_process+0x74a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800909e:	4b37      	ldr	r3, [pc, #220]	; (800917c <tcp_process+0x760>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d15f      	bne.n	8009166 <tcp_process+0x74a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d15b      	bne.n	8009166 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fe fe1a 	bl	8007ce8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80090b4:	4b33      	ldr	r3, [pc, #204]	; (8009184 <tcp_process+0x768>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d105      	bne.n	80090ca <tcp_process+0x6ae>
 80090be:	4b31      	ldr	r3, [pc, #196]	; (8009184 <tcp_process+0x768>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	4a2f      	ldr	r2, [pc, #188]	; (8009184 <tcp_process+0x768>)
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	e013      	b.n	80090f2 <tcp_process+0x6d6>
 80090ca:	4b2e      	ldr	r3, [pc, #184]	; (8009184 <tcp_process+0x768>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e00c      	b.n	80090ec <tcp_process+0x6d0>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d104      	bne.n	80090e6 <tcp_process+0x6ca>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	60da      	str	r2, [r3, #12]
 80090e4:	e005      	b.n	80090f2 <tcp_process+0x6d6>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1ef      	bne.n	80090d2 <tcp_process+0x6b6>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	60da      	str	r2, [r3, #12]
 80090f8:	4b23      	ldr	r3, [pc, #140]	; (8009188 <tcp_process+0x76c>)
 80090fa:	2201      	movs	r2, #1
 80090fc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	220a      	movs	r2, #10
 8009102:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009104:	4b21      	ldr	r3, [pc, #132]	; (800918c <tcp_process+0x770>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60da      	str	r2, [r3, #12]
 800910c:	4a1f      	ldr	r2, [pc, #124]	; (800918c <tcp_process+0x770>)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	f002 f8c1 	bl	800b298 <tcp_timer_needed>
    }
    break;
 8009116:	e026      	b.n	8009166 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f8af 	bl	800927c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800911e:	4b16      	ldr	r3, [pc, #88]	; (8009178 <tcp_process+0x75c>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01f      	beq.n	800916a <tcp_process+0x74e>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800912e:	4b13      	ldr	r3, [pc, #76]	; (800917c <tcp_process+0x760>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d119      	bne.n	800916a <tcp_process+0x74e>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800913a:	2b00      	cmp	r3, #0
 800913c:	d115      	bne.n	800916a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <tcp_process+0x764>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	f043 0310 	orr.w	r3, r3, #16
 8009146:	b2da      	uxtb	r2, r3
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <tcp_process+0x764>)
 800914a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800914c:	e00d      	b.n	800916a <tcp_process+0x74e>
  default:
    break;
 800914e:	bf00      	nop
 8009150:	e00c      	b.n	800916c <tcp_process+0x750>
    break;
 8009152:	bf00      	nop
 8009154:	e00a      	b.n	800916c <tcp_process+0x750>
    break;
 8009156:	bf00      	nop
 8009158:	e008      	b.n	800916c <tcp_process+0x750>
    break;
 800915a:	bf00      	nop
 800915c:	e006      	b.n	800916c <tcp_process+0x750>
    break;
 800915e:	bf00      	nop
 8009160:	e004      	b.n	800916c <tcp_process+0x750>
    break;
 8009162:	bf00      	nop
 8009164:	e002      	b.n	800916c <tcp_process+0x750>
    break;
 8009166:	bf00      	nop
 8009168:	e000      	b.n	800916c <tcp_process+0x750>
    break;
 800916a:	bf00      	nop
  }
  return ERR_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000438 	.word	0x20000438
 800917c:	20000430 	.word	0x20000430
 8009180:	20000439 	.word	0x20000439
 8009184:	20006ba8 	.word	0x20006ba8
 8009188:	20006ba4 	.word	0x20006ba4
 800918c:	20006bb8 	.word	0x20006bb8

08009190 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009190:	b590      	push	{r4, r7, lr}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	899b      	ldrh	r3, [r3, #12]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fc f8ef 	bl	8005386 <lwip_htons>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d027      	beq.n	8009202 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80091b2:	6838      	ldr	r0, [r7, #0]
 80091b4:	f7fe fbef 	bl	8007996 <tcp_segs_free>
    next = NULL;
 80091b8:	2300      	movs	r3, #0
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	e055      	b.n	800926a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	899b      	ldrh	r3, [r3, #12]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fc f8dd 	bl	8005386 <lwip_htons>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00d      	beq.n	80091f2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	899b      	ldrh	r3, [r3, #12]
 80091dc:	b29c      	uxth	r4, r3
 80091de:	2001      	movs	r0, #1
 80091e0:	f7fc f8d1 	bl	8005386 <lwip_htons>
 80091e4:	4603      	mov	r3, r0
 80091e6:	461a      	mov	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	4322      	orrs	r2, r4
 80091ee:	b292      	uxth	r2, r2
 80091f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7fe fbdf 	bl	80079c0 <tcp_seg_free>
    while (next &&
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00e      	beq.n	8009226 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	891b      	ldrh	r3, [r3, #8]
 800920c:	461a      	mov	r2, r3
 800920e:	4b1a      	ldr	r3, [pc, #104]	; (8009278 <tcp_oos_insert_segment+0xe8>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	441a      	add	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	8909      	ldrh	r1, [r1, #8]
 800921e:	440b      	add	r3, r1
 8009220:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009222:	2b00      	cmp	r3, #0
 8009224:	dacb      	bge.n	80091be <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01e      	beq.n	800926a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	891b      	ldrh	r3, [r3, #8]
 8009230:	461a      	mov	r2, r3
 8009232:	4b11      	ldr	r3, [pc, #68]	; (8009278 <tcp_oos_insert_segment+0xe8>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	441a      	add	r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009240:	2b00      	cmp	r3, #0
 8009242:	dd12      	ble.n	800926a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	b29a      	uxth	r2, r3
 800924c:	4b0a      	ldr	r3, [pc, #40]	; (8009278 <tcp_oos_insert_segment+0xe8>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	b29a      	uxth	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	891b      	ldrh	r3, [r3, #8]
 8009262:	4619      	mov	r1, r3
 8009264:	4610      	mov	r0, r2
 8009266:	f7fd f847 	bl	80062f8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	601a      	str	r2, [r3, #0]
}
 8009270:	bf00      	nop
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	bd90      	pop	{r4, r7, pc}
 8009278:	2000042c 	.word	0x2000042c

0800927c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800927c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927e:	b08d      	sub	sp, #52	; 0x34
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	7d1b      	ldrb	r3, [r3, #20]
 800928c:	2b03      	cmp	r3, #3
 800928e:	d806      	bhi.n	800929e <tcp_receive+0x22>
 8009290:	4ba6      	ldr	r3, [pc, #664]	; (800952c <tcp_receive+0x2b0>)
 8009292:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8009296:	49a6      	ldr	r1, [pc, #664]	; (8009530 <tcp_receive+0x2b4>)
 8009298:	48a6      	ldr	r0, [pc, #664]	; (8009534 <tcp_receive+0x2b8>)
 800929a:	f005 f897 	bl	800e3cc <iprintf>

  if (flags & TCP_ACK) {
 800929e:	4ba6      	ldr	r3, [pc, #664]	; (8009538 <tcp_receive+0x2bc>)
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	f003 0310 	and.w	r3, r3, #16
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 82bf 	beq.w	800982a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b8:	4413      	add	r3, r2
 80092ba:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092c0:	4b9e      	ldr	r3, [pc, #632]	; (800953c <tcp_receive+0x2c0>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	db1b      	blt.n	8009302 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092ce:	4b9b      	ldr	r3, [pc, #620]	; (800953c <tcp_receive+0x2c0>)
 80092d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d106      	bne.n	80092e4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092da:	4b99      	ldr	r3, [pc, #612]	; (8009540 <tcp_receive+0x2c4>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	db0e      	blt.n	8009302 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092e8:	4b95      	ldr	r3, [pc, #596]	; (8009540 <tcp_receive+0x2c4>)
 80092ea:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d141      	bne.n	8009374 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80092f0:	4b94      	ldr	r3, [pc, #592]	; (8009544 <tcp_receive+0x2c8>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	89db      	ldrh	r3, [r3, #14]
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092fe:	429a      	cmp	r2, r3
 8009300:	d938      	bls.n	8009374 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009302:	4b90      	ldr	r3, [pc, #576]	; (8009544 <tcp_receive+0x2c8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	89db      	ldrh	r3, [r3, #14]
 8009308:	b29a      	uxth	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800931c:	429a      	cmp	r2, r3
 800931e:	d205      	bcs.n	800932c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800932c:	4b83      	ldr	r3, [pc, #524]	; (800953c <tcp_receive+0x2c0>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8009334:	4b82      	ldr	r3, [pc, #520]	; (8009540 <tcp_receive+0x2c4>)
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10d      	bne.n	8009362 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800934c:	2b00      	cmp	r3, #0
 800934e:	d111      	bne.n	8009374 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009360:	e008      	b.n	8009374 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009374:	4b72      	ldr	r3, [pc, #456]	; (8009540 <tcp_receive+0x2c4>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	dc53      	bgt.n	800942a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8009382:	4b71      	ldr	r3, [pc, #452]	; (8009548 <tcp_receive+0x2cc>)
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d146      	bne.n	8009418 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8009394:	4413      	add	r3, r2
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	429a      	cmp	r2, r3
 800939a:	d13d      	bne.n	8009418 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	db38      	blt.n	8009418 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093aa:	4b65      	ldr	r3, [pc, #404]	; (8009540 <tcp_receive+0x2c4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d132      	bne.n	8009418 <tcp_receive+0x19c>
              found_dupack = 1;
 80093b2:	2301      	movs	r3, #1
 80093b4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093bc:	2bff      	cmp	r3, #255	; 0xff
 80093be:	d007      	beq.n	80093d0 <tcp_receive+0x154>
                ++pcb->dupacks;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093c6:	3301      	adds	r3, #1
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d916      	bls.n	8009408 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093e4:	4413      	add	r3, r2
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d912      	bls.n	8009418 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093fc:	4413      	add	r3, r2
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009406:	e007      	b.n	8009418 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800940e:	2b03      	cmp	r3, #3
 8009410:	d102      	bne.n	8009418 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 fdf4 	bl	800b000 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 8169 	bne.w	80096f2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009428:	e163      	b.n	80096f2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800942a:	4b45      	ldr	r3, [pc, #276]	; (8009540 <tcp_receive+0x2c4>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	3b01      	subs	r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	f2c0 8107 	blt.w	800964a <tcp_receive+0x3ce>
 800943c:	4b40      	ldr	r3, [pc, #256]	; (8009540 <tcp_receive+0x2c4>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	f300 80ff 	bgt.w	800964a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	7e9b      	ldrb	r3, [r3, #26]
 8009450:	f003 0304 	and.w	r3, r3, #4
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00c      	beq.n	8009472 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7e9b      	ldrb	r3, [r3, #26]
 800945c:	f023 0304 	bic.w	r3, r3, #4
 8009460:	b2da      	uxtb	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009480:	10db      	asrs	r3, r3, #3
 8009482:	b21b      	sxth	r3, r3
 8009484:	b29a      	uxth	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800948c:	b29b      	uxth	r3, r3
 800948e:	4413      	add	r3, r2
 8009490:	b29b      	uxth	r3, r3
 8009492:	b21a      	sxth	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80094a2:	4b27      	ldr	r3, [pc, #156]	; (8009540 <tcp_receive+0x2c4>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	7d1b      	ldrb	r3, [r3, #20]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	f240 8094 	bls.w	80095dc <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d216      	bcs.n	80094f2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094ce:	4413      	add	r3, r2
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094d8:	429a      	cmp	r2, r3
 80094da:	d97f      	bls.n	80095dc <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094e6:	4413      	add	r3, r2
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80094f0:	e074      	b.n	80095dc <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094fc:	4619      	mov	r1, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009502:	fb03 f301 	mul.w	r3, r3, r1
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800950c:	fb93 f3f1 	sdiv	r3, r3, r1
 8009510:	b29b      	uxth	r3, r3
 8009512:	4413      	add	r3, r2
 8009514:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800951c:	8a7a      	ldrh	r2, [r7, #18]
 800951e:	429a      	cmp	r2, r3
 8009520:	d95c      	bls.n	80095dc <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	8a7a      	ldrh	r2, [r7, #18]
 8009526:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800952a:	e057      	b.n	80095dc <tcp_receive+0x360>
 800952c:	080103ec 	.word	0x080103ec
 8009530:	08010610 	.word	0x08010610
 8009534:	08010430 	.word	0x08010430
 8009538:	20000438 	.word	0x20000438
 800953c:	2000042c 	.word	0x2000042c
 8009540:	20000430 	.word	0x20000430
 8009544:	2000041c 	.word	0x2000041c
 8009548:	20000436 	.word	0x20000436
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	4618      	mov	r0, r3
 8009568:	f7fd f8ce 	bl	8006708 <pbuf_clen>
 800956c:	4603      	mov	r3, r0
 800956e:	429c      	cmp	r4, r3
 8009570:	d206      	bcs.n	8009580 <tcp_receive+0x304>
 8009572:	4b70      	ldr	r3, [pc, #448]	; (8009734 <tcp_receive+0x4b8>)
 8009574:	f240 429e 	movw	r2, #1182	; 0x49e
 8009578:	496f      	ldr	r1, [pc, #444]	; (8009738 <tcp_receive+0x4bc>)
 800957a:	4870      	ldr	r0, [pc, #448]	; (800973c <tcp_receive+0x4c0>)
 800957c:	f004 ff26 	bl	800e3cc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	4618      	mov	r0, r3
 8009586:	f7fd f8bf 	bl	8006708 <pbuf_clen>
 800958a:	4603      	mov	r3, r0
 800958c:	461a      	mov	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	b29a      	uxth	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	891a      	ldrh	r2, [r3, #8]
 80095a2:	4b67      	ldr	r3, [pc, #412]	; (8009740 <tcp_receive+0x4c4>)
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	4413      	add	r3, r2
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	4b65      	ldr	r3, [pc, #404]	; (8009740 <tcp_receive+0x4c4>)
 80095ac:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80095ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095b0:	f7fe fa06 	bl	80079c0 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00e      	beq.n	80095dc <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <tcp_receive+0x360>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d106      	bne.n	80095dc <tcp_receive+0x360>
 80095ce:	4b59      	ldr	r3, [pc, #356]	; (8009734 <tcp_receive+0x4b8>)
 80095d0:	f240 42a6 	movw	r2, #1190	; 0x4a6
 80095d4:	495b      	ldr	r1, [pc, #364]	; (8009744 <tcp_receive+0x4c8>)
 80095d6:	4859      	ldr	r0, [pc, #356]	; (800973c <tcp_receive+0x4c0>)
 80095d8:	f004 fef8 	bl	800e3cc <iprintf>
      while (pcb->unacked != NULL &&
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d022      	beq.n	800962a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fb fed7 	bl	80053a0 <lwip_htonl>
 80095f2:	4604      	mov	r4, r0
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f8:	891b      	ldrh	r3, [r3, #8]
 80095fa:	461d      	mov	r5, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	899b      	ldrh	r3, [r3, #12]
 8009604:	b29b      	uxth	r3, r3
 8009606:	4618      	mov	r0, r3
 8009608:	f7fb febd 	bl	8005386 <lwip_htons>
 800960c:	4603      	mov	r3, r0
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <tcp_receive+0x39e>
 8009616:	2301      	movs	r3, #1
 8009618:	e000      	b.n	800961c <tcp_receive+0x3a0>
 800961a:	2300      	movs	r3, #0
 800961c:	442b      	add	r3, r5
 800961e:	18e2      	adds	r2, r4, r3
 8009620:	4b49      	ldr	r3, [pc, #292]	; (8009748 <tcp_receive+0x4cc>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8009626:	2b00      	cmp	r3, #0
 8009628:	dd90      	ble.n	800954c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009638:	861a      	strh	r2, [r3, #48]	; 0x30
 800963a:	e002      	b.n	8009642 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	76da      	strb	r2, [r3, #27]
 8009648:	e002      	b.n	8009650 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 f8fc 	bl	800a848 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8009650:	e04f      	b.n	80096f2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009656:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009666:	2b00      	cmp	r3, #0
 8009668:	d103      	bne.n	8009672 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	f7fd f843 	bl	8006708 <pbuf_clen>
 8009682:	4603      	mov	r3, r0
 8009684:	429c      	cmp	r4, r3
 8009686:	d206      	bcs.n	8009696 <tcp_receive+0x41a>
 8009688:	4b2a      	ldr	r3, [pc, #168]	; (8009734 <tcp_receive+0x4b8>)
 800968a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800968e:	492a      	ldr	r1, [pc, #168]	; (8009738 <tcp_receive+0x4bc>)
 8009690:	482a      	ldr	r0, [pc, #168]	; (800973c <tcp_receive+0x4c0>)
 8009692:	f004 fe9b 	bl	800e3cc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	4618      	mov	r0, r3
 800969c:	f7fd f834 	bl	8006708 <pbuf_clen>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	891a      	ldrh	r2, [r3, #8]
 80096b8:	4b21      	ldr	r3, [pc, #132]	; (8009740 <tcp_receive+0x4c4>)
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	4413      	add	r3, r2
 80096be:	b29a      	uxth	r2, r3
 80096c0:	4b1f      	ldr	r3, [pc, #124]	; (8009740 <tcp_receive+0x4c4>)
 80096c2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80096c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096c6:	f7fe f97b 	bl	80079c0 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00e      	beq.n	80096f2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <tcp_receive+0x476>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <tcp_receive+0x476>
 80096e4:	4b13      	ldr	r3, [pc, #76]	; (8009734 <tcp_receive+0x4b8>)
 80096e6:	f240 42dc 	movw	r2, #1244	; 0x4dc
 80096ea:	4916      	ldr	r1, [pc, #88]	; (8009744 <tcp_receive+0x4c8>)
 80096ec:	4813      	ldr	r0, [pc, #76]	; (800973c <tcp_receive+0x4c0>)
 80096ee:	f004 fe6d 	bl	800e3cc <iprintf>
    while (pcb->unsent != NULL &&
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d036      	beq.n	8009768 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80096fa:	4b13      	ldr	r3, [pc, #76]	; (8009748 <tcp_receive+0x4cc>)
 80096fc:	681c      	ldr	r4, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	4618      	mov	r0, r3
 8009708:	f7fb fe4a 	bl	80053a0 <lwip_htonl>
 800970c:	4605      	mov	r5, r0
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009712:	891b      	ldrh	r3, [r3, #8]
 8009714:	461e      	mov	r6, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	899b      	ldrh	r3, [r3, #12]
 800971e:	b29b      	uxth	r3, r3
 8009720:	4618      	mov	r0, r3
 8009722:	f7fb fe30 	bl	8005386 <lwip_htons>
 8009726:	4603      	mov	r3, r0
 8009728:	f003 0303 	and.w	r3, r3, #3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00d      	beq.n	800974c <tcp_receive+0x4d0>
 8009730:	2301      	movs	r3, #1
 8009732:	e00c      	b.n	800974e <tcp_receive+0x4d2>
 8009734:	080103ec 	.word	0x080103ec
 8009738:	0801062c 	.word	0x0801062c
 800973c:	08010430 	.word	0x08010430
 8009740:	20000434 	.word	0x20000434
 8009744:	08010654 	.word	0x08010654
 8009748:	20000430 	.word	0x20000430
 800974c:	2300      	movs	r3, #0
 800974e:	4433      	add	r3, r6
 8009750:	442b      	add	r3, r5
 8009752:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8009754:	2b00      	cmp	r3, #0
 8009756:	db07      	blt.n	8009768 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009758:	4b8d      	ldr	r3, [pc, #564]	; (8009990 <tcp_receive+0x714>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	f77f af75 	ble.w	8009652 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800976e:	4b89      	ldr	r3, [pc, #548]	; (8009994 <tcp_receive+0x718>)
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	4413      	add	r3, r2
 8009774:	b29a      	uxth	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009780:	2b00      	cmp	r3, #0
 8009782:	d052      	beq.n	800982a <tcp_receive+0x5ae>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009788:	4b81      	ldr	r3, [pc, #516]	; (8009990 <tcp_receive+0x714>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	da4b      	bge.n	800982a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009792:	4b81      	ldr	r3, [pc, #516]	; (8009998 <tcp_receive+0x71c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	b29a      	uxth	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979c:	b29b      	uxth	r3, r3
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80097a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80097ac:	10db      	asrs	r3, r3, #3
 80097ae:	b21b      	sxth	r3, r3
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80097be:	b29a      	uxth	r2, r3
 80097c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097c2:	4413      	add	r3, r2
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	b21a      	sxth	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80097cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	da03      	bge.n	80097dc <tcp_receive+0x560>
        m = -m;
 80097d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097d6:	425b      	negs	r3, r3
 80097d8:	b29b      	uxth	r3, r3
 80097da:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80097dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097e4:	109b      	asrs	r3, r3, #2
 80097e6:	b21b      	sxth	r3, r3
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097fa:	4413      	add	r3, r2
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	b21a      	sxth	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800980a:	10db      	asrs	r3, r3, #3
 800980c:	b21b      	sxth	r3, r3
 800980e:	b29a      	uxth	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009816:	b29b      	uxth	r3, r3
 8009818:	4413      	add	r3, r2
 800981a:	b29b      	uxth	r3, r3
 800981c:	b21a      	sxth	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800982a:	4b5c      	ldr	r3, [pc, #368]	; (800999c <tcp_receive+0x720>)
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 84f1 	beq.w	800a216 <tcp_receive+0xf9a>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7d1b      	ldrb	r3, [r3, #20]
 8009838:	2b06      	cmp	r3, #6
 800983a:	f200 84ec 	bhi.w	800a216 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009842:	4b57      	ldr	r3, [pc, #348]	; (80099a0 <tcp_receive+0x724>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	3b01      	subs	r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	f2c0 80b8 	blt.w	80099c0 <tcp_receive+0x744>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009854:	4b51      	ldr	r3, [pc, #324]	; (800999c <tcp_receive+0x720>)
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	4619      	mov	r1, r3
 800985a:	4b51      	ldr	r3, [pc, #324]	; (80099a0 <tcp_receive+0x724>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	440b      	add	r3, r1
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	3301      	adds	r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	f300 80ab 	bgt.w	80099c0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800986a:	4b4e      	ldr	r3, [pc, #312]	; (80099a4 <tcp_receive+0x728>)
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009874:	4b4a      	ldr	r3, [pc, #296]	; (80099a0 <tcp_receive+0x724>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800987c:	4b49      	ldr	r3, [pc, #292]	; (80099a4 <tcp_receive+0x728>)
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <tcp_receive+0x616>
 8009884:	4b48      	ldr	r3, [pc, #288]	; (80099a8 <tcp_receive+0x72c>)
 8009886:	f240 523c 	movw	r2, #1340	; 0x53c
 800988a:	4948      	ldr	r1, [pc, #288]	; (80099ac <tcp_receive+0x730>)
 800988c:	4848      	ldr	r0, [pc, #288]	; (80099b0 <tcp_receive+0x734>)
 800988e:	f004 fd9d 	bl	800e3cc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009898:	4293      	cmp	r3, r2
 800989a:	dd06      	ble.n	80098aa <tcp_receive+0x62e>
 800989c:	4b42      	ldr	r3, [pc, #264]	; (80099a8 <tcp_receive+0x72c>)
 800989e:	f240 523d 	movw	r2, #1341	; 0x53d
 80098a2:	4944      	ldr	r1, [pc, #272]	; (80099b4 <tcp_receive+0x738>)
 80098a4:	4842      	ldr	r0, [pc, #264]	; (80099b0 <tcp_receive+0x734>)
 80098a6:	f004 fd91 	bl	800e3cc <iprintf>
      if (inseg.p->len < off) {
 80098aa:	4b3e      	ldr	r3, [pc, #248]	; (80099a4 <tcp_receive+0x728>)
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	895b      	ldrh	r3, [r3, #10]
 80098b0:	461a      	mov	r2, r3
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	4293      	cmp	r3, r2
 80098b6:	dd3e      	ble.n	8009936 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80098b8:	4b3a      	ldr	r3, [pc, #232]	; (80099a4 <tcp_receive+0x728>)
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	891b      	ldrh	r3, [r3, #8]
 80098be:	461a      	mov	r2, r3
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	4293      	cmp	r3, r2
 80098c4:	dd06      	ble.n	80098d4 <tcp_receive+0x658>
 80098c6:	4b38      	ldr	r3, [pc, #224]	; (80099a8 <tcp_receive+0x72c>)
 80098c8:	f240 523f 	movw	r2, #1343	; 0x53f
 80098cc:	493a      	ldr	r1, [pc, #232]	; (80099b8 <tcp_receive+0x73c>)
 80098ce:	4838      	ldr	r0, [pc, #224]	; (80099b0 <tcp_receive+0x734>)
 80098d0:	f004 fd7c 	bl	800e3cc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80098d4:	4b33      	ldr	r3, [pc, #204]	; (80099a4 <tcp_receive+0x728>)
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	891a      	ldrh	r2, [r3, #8]
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	b29b      	uxth	r3, r3
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80098e2:	e00e      	b.n	8009902 <tcp_receive+0x686>
          off -= p->len;
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	895b      	ldrh	r3, [r3, #10]
 80098e8:	461a      	mov	r2, r3
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	1a9b      	subs	r3, r3, r2
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	8a3a      	ldrh	r2, [r7, #16]
 80098f4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2200      	movs	r2, #0
 80098fa:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	895b      	ldrh	r3, [r3, #10]
 8009906:	461a      	mov	r2, r3
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	4293      	cmp	r3, r2
 800990c:	dcea      	bgt.n	80098e4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	b29b      	uxth	r3, r3
 8009912:	425b      	negs	r3, r3
 8009914:	b29b      	uxth	r3, r3
 8009916:	b21b      	sxth	r3, r3
 8009918:	4619      	mov	r1, r3
 800991a:	69b8      	ldr	r0, [r7, #24]
 800991c:	f7fc fe3c 	bl	8006598 <pbuf_header>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d01c      	beq.n	8009960 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8009926:	4b20      	ldr	r3, [pc, #128]	; (80099a8 <tcp_receive+0x72c>)
 8009928:	f240 524c 	movw	r2, #1356	; 0x54c
 800992c:	4923      	ldr	r1, [pc, #140]	; (80099bc <tcp_receive+0x740>)
 800992e:	4820      	ldr	r0, [pc, #128]	; (80099b0 <tcp_receive+0x734>)
 8009930:	f004 fd4c 	bl	800e3cc <iprintf>
 8009934:	e014      	b.n	8009960 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8009936:	4b1b      	ldr	r3, [pc, #108]	; (80099a4 <tcp_receive+0x728>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993c:	b292      	uxth	r2, r2
 800993e:	4252      	negs	r2, r2
 8009940:	b292      	uxth	r2, r2
 8009942:	b212      	sxth	r2, r2
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7fc fe26 	bl	8006598 <pbuf_header>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <tcp_receive+0x72c>)
 8009954:	f240 5251 	movw	r2, #1361	; 0x551
 8009958:	4918      	ldr	r1, [pc, #96]	; (80099bc <tcp_receive+0x740>)
 800995a:	4815      	ldr	r0, [pc, #84]	; (80099b0 <tcp_receive+0x734>)
 800995c:	f004 fd36 	bl	800e3cc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8009960:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <tcp_receive+0x728>)
 8009962:	891a      	ldrh	r2, [r3, #8]
 8009964:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <tcp_receive+0x724>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	b299      	uxth	r1, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	b29b      	uxth	r3, r3
 8009970:	1acb      	subs	r3, r1, r3
 8009972:	b29b      	uxth	r3, r3
 8009974:	4413      	add	r3, r2
 8009976:	b29a      	uxth	r2, r3
 8009978:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <tcp_receive+0x728>)
 800997a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	4a07      	ldr	r2, [pc, #28]	; (80099a0 <tcp_receive+0x724>)
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <tcp_receive+0x728>)
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	4a05      	ldr	r2, [pc, #20]	; (80099a0 <tcp_receive+0x724>)
 800998a:	6812      	ldr	r2, [r2, #0]
 800998c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800998e:	e025      	b.n	80099dc <tcp_receive+0x760>
 8009990:	20000430 	.word	0x20000430
 8009994:	20000434 	.word	0x20000434
 8009998:	20006bac 	.word	0x20006bac
 800999c:	20000436 	.word	0x20000436
 80099a0:	2000042c 	.word	0x2000042c
 80099a4:	2000040c 	.word	0x2000040c
 80099a8:	080103ec 	.word	0x080103ec
 80099ac:	08010674 	.word	0x08010674
 80099b0:	08010430 	.word	0x08010430
 80099b4:	08010684 	.word	0x08010684
 80099b8:	08010694 	.word	0x08010694
 80099bc:	080106a4 	.word	0x080106a4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80099c0:	4b87      	ldr	r3, [pc, #540]	; (8009be0 <tcp_receive+0x964>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	da06      	bge.n	80099dc <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	7e9b      	ldrb	r3, [r3, #26]
 80099d2:	f043 0302 	orr.w	r3, r3, #2
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80099dc:	4b80      	ldr	r3, [pc, #512]	; (8009be0 <tcp_receive+0x964>)
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f2c0 8410 	blt.w	800a20c <tcp_receive+0xf90>
 80099ec:	4b7c      	ldr	r3, [pc, #496]	; (8009be0 <tcp_receive+0x964>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	6879      	ldr	r1, [r7, #4]
 80099f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80099f8:	440b      	add	r3, r1
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	3301      	adds	r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f300 8404 	bgt.w	800a20c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a08:	4b75      	ldr	r3, [pc, #468]	; (8009be0 <tcp_receive+0x964>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	f040 8287 	bne.w	8009f20 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009a12:	4b74      	ldr	r3, [pc, #464]	; (8009be4 <tcp_receive+0x968>)
 8009a14:	891c      	ldrh	r4, [r3, #8]
 8009a16:	4b73      	ldr	r3, [pc, #460]	; (8009be4 <tcp_receive+0x968>)
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	899b      	ldrh	r3, [r3, #12]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fb fcb1 	bl	8005386 <lwip_htons>
 8009a24:	4603      	mov	r3, r0
 8009a26:	f003 0303 	and.w	r3, r3, #3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <tcp_receive+0x7b6>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e000      	b.n	8009a34 <tcp_receive+0x7b8>
 8009a32:	2300      	movs	r3, #0
 8009a34:	4423      	add	r3, r4
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	4b6b      	ldr	r3, [pc, #428]	; (8009be8 <tcp_receive+0x96c>)
 8009a3a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a40:	4b69      	ldr	r3, [pc, #420]	; (8009be8 <tcp_receive+0x96c>)
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d26e      	bcs.n	8009b26 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009a48:	4b66      	ldr	r3, [pc, #408]	; (8009be4 <tcp_receive+0x968>)
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	899b      	ldrh	r3, [r3, #12]
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fb fc98 	bl	8005386 <lwip_htons>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01b      	beq.n	8009a98 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009a60:	4b60      	ldr	r3, [pc, #384]	; (8009be4 <tcp_receive+0x968>)
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	899b      	ldrh	r3, [r3, #12]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a6c:	b29c      	uxth	r4, r3
 8009a6e:	4b5d      	ldr	r3, [pc, #372]	; (8009be4 <tcp_receive+0x968>)
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	899b      	ldrh	r3, [r3, #12]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fb fc85 	bl	8005386 <lwip_htons>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fb fc7e 	bl	8005386 <lwip_htons>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4b55      	ldr	r3, [pc, #340]	; (8009be4 <tcp_receive+0x968>)
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	4322      	orrs	r2, r4
 8009a94:	b292      	uxth	r2, r2
 8009a96:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a9c:	4b51      	ldr	r3, [pc, #324]	; (8009be4 <tcp_receive+0x968>)
 8009a9e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009aa0:	4b50      	ldr	r3, [pc, #320]	; (8009be4 <tcp_receive+0x968>)
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	899b      	ldrh	r3, [r3, #12]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fb fc6c 	bl	8005386 <lwip_htons>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <tcp_receive+0x848>
            inseg.len -= 1;
 8009ab8:	4b4a      	ldr	r3, [pc, #296]	; (8009be4 <tcp_receive+0x968>)
 8009aba:	891b      	ldrh	r3, [r3, #8]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	4b48      	ldr	r3, [pc, #288]	; (8009be4 <tcp_receive+0x968>)
 8009ac2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009ac4:	4b47      	ldr	r3, [pc, #284]	; (8009be4 <tcp_receive+0x968>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	4a46      	ldr	r2, [pc, #280]	; (8009be4 <tcp_receive+0x968>)
 8009aca:	8912      	ldrh	r2, [r2, #8]
 8009acc:	4611      	mov	r1, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fc fc12 	bl	80062f8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009ad4:	4b43      	ldr	r3, [pc, #268]	; (8009be4 <tcp_receive+0x968>)
 8009ad6:	891c      	ldrh	r4, [r3, #8]
 8009ad8:	4b42      	ldr	r3, [pc, #264]	; (8009be4 <tcp_receive+0x968>)
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	899b      	ldrh	r3, [r3, #12]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fb fc50 	bl	8005386 <lwip_htons>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <tcp_receive+0x878>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e000      	b.n	8009af6 <tcp_receive+0x87a>
 8009af4:	2300      	movs	r3, #0
 8009af6:	4423      	add	r3, r4
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	4b3b      	ldr	r3, [pc, #236]	; (8009be8 <tcp_receive+0x96c>)
 8009afc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009afe:	4b3a      	ldr	r3, [pc, #232]	; (8009be8 <tcp_receive+0x96c>)
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	4b36      	ldr	r3, [pc, #216]	; (8009be0 <tcp_receive+0x964>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	441a      	add	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b12:	440b      	add	r3, r1
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d006      	beq.n	8009b26 <tcp_receive+0x8aa>
 8009b18:	4b34      	ldr	r3, [pc, #208]	; (8009bec <tcp_receive+0x970>)
 8009b1a:	f240 527e 	movw	r2, #1406	; 0x57e
 8009b1e:	4934      	ldr	r1, [pc, #208]	; (8009bf0 <tcp_receive+0x974>)
 8009b20:	4834      	ldr	r0, [pc, #208]	; (8009bf4 <tcp_receive+0x978>)
 8009b22:	f004 fc53 	bl	800e3cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 80e1 	beq.w	8009cf2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b30:	4b2c      	ldr	r3, [pc, #176]	; (8009be4 <tcp_receive+0x968>)
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	899b      	ldrh	r3, [r3, #12]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fb fc24 	bl	8005386 <lwip_htons>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d010      	beq.n	8009b6a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009b48:	e00a      	b.n	8009b60 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8009b5a:	68b8      	ldr	r0, [r7, #8]
 8009b5c:	f7fd ff30 	bl	80079c0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1f0      	bne.n	8009b4a <tcp_receive+0x8ce>
 8009b68:	e0c3      	b.n	8009cf2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009b70:	e04f      	b.n	8009c12 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	899b      	ldrh	r3, [r3, #12]
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fb fc03 	bl	8005386 <lwip_htons>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d03b      	beq.n	8009c02 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009b8a:	4b16      	ldr	r3, [pc, #88]	; (8009be4 <tcp_receive+0x968>)
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	899b      	ldrh	r3, [r3, #12]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fb fbf7 	bl	8005386 <lwip_htons>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d12f      	bne.n	8009c02 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009ba2:	4b10      	ldr	r3, [pc, #64]	; (8009be4 <tcp_receive+0x968>)
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	899b      	ldrh	r3, [r3, #12]
 8009ba8:	b29c      	uxth	r4, r3
 8009baa:	2001      	movs	r0, #1
 8009bac:	f7fb fbeb 	bl	8005386 <lwip_htons>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <tcp_receive+0x968>)
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	4322      	orrs	r2, r4
 8009bba:	b292      	uxth	r2, r2
 8009bbc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009bbe:	4b09      	ldr	r3, [pc, #36]	; (8009be4 <tcp_receive+0x968>)
 8009bc0:	891c      	ldrh	r4, [r3, #8]
 8009bc2:	4b08      	ldr	r3, [pc, #32]	; (8009be4 <tcp_receive+0x968>)
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	899b      	ldrh	r3, [r3, #12]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fb fbdb 	bl	8005386 <lwip_htons>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00e      	beq.n	8009bf8 <tcp_receive+0x97c>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e00d      	b.n	8009bfa <tcp_receive+0x97e>
 8009bde:	bf00      	nop
 8009be0:	2000042c 	.word	0x2000042c
 8009be4:	2000040c 	.word	0x2000040c
 8009be8:	20000436 	.word	0x20000436
 8009bec:	080103ec 	.word	0x080103ec
 8009bf0:	080106b8 	.word	0x080106b8
 8009bf4:	08010430 	.word	0x08010430
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	4423      	add	r3, r4
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	4b95      	ldr	r3, [pc, #596]	; (8009e54 <tcp_receive+0xbd8>)
 8009c00:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8009c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c0e:	f7fd fed7 	bl	80079c0 <tcp_seg_free>
            while (next &&
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00e      	beq.n	8009c36 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009c18:	4b8e      	ldr	r3, [pc, #568]	; (8009e54 <tcp_receive+0xbd8>)
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	4b8e      	ldr	r3, [pc, #568]	; (8009e58 <tcp_receive+0xbdc>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	441a      	add	r2, r3
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c2c:	8909      	ldrh	r1, [r1, #8]
 8009c2e:	440b      	add	r3, r1
 8009c30:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da9d      	bge.n	8009b72 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d057      	beq.n	8009cec <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8009c3c:	4b85      	ldr	r3, [pc, #532]	; (8009e54 <tcp_receive+0xbd8>)
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	4b85      	ldr	r3, [pc, #532]	; (8009e58 <tcp_receive+0xbdc>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	441a      	add	r2, r3
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	dd4b      	ble.n	8009cec <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	4b7e      	ldr	r3, [pc, #504]	; (8009e58 <tcp_receive+0xbdc>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	4b7d      	ldr	r3, [pc, #500]	; (8009e5c <tcp_receive+0xbe0>)
 8009c68:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009c6a:	4b7c      	ldr	r3, [pc, #496]	; (8009e5c <tcp_receive+0xbe0>)
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	899b      	ldrh	r3, [r3, #12]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fb fb87 	bl	8005386 <lwip_htons>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d005      	beq.n	8009c8e <tcp_receive+0xa12>
                inseg.len -= 1;
 8009c82:	4b76      	ldr	r3, [pc, #472]	; (8009e5c <tcp_receive+0xbe0>)
 8009c84:	891b      	ldrh	r3, [r3, #8]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	4b74      	ldr	r3, [pc, #464]	; (8009e5c <tcp_receive+0xbe0>)
 8009c8c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009c8e:	4b73      	ldr	r3, [pc, #460]	; (8009e5c <tcp_receive+0xbe0>)
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	4a72      	ldr	r2, [pc, #456]	; (8009e5c <tcp_receive+0xbe0>)
 8009c94:	8912      	ldrh	r2, [r2, #8]
 8009c96:	4611      	mov	r1, r2
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fc fb2d 	bl	80062f8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009c9e:	4b6f      	ldr	r3, [pc, #444]	; (8009e5c <tcp_receive+0xbe0>)
 8009ca0:	891c      	ldrh	r4, [r3, #8]
 8009ca2:	4b6e      	ldr	r3, [pc, #440]	; (8009e5c <tcp_receive+0xbe0>)
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	899b      	ldrh	r3, [r3, #12]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fb fb6b 	bl	8005386 <lwip_htons>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <tcp_receive+0xa42>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e000      	b.n	8009cc0 <tcp_receive+0xa44>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4423      	add	r3, r4
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	4b63      	ldr	r3, [pc, #396]	; (8009e54 <tcp_receive+0xbd8>)
 8009cc6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009cc8:	4b62      	ldr	r3, [pc, #392]	; (8009e54 <tcp_receive+0xbd8>)
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b62      	ldr	r3, [pc, #392]	; (8009e58 <tcp_receive+0xbdc>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	441a      	add	r2, r3
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d006      	beq.n	8009cec <tcp_receive+0xa70>
 8009cde:	4b60      	ldr	r3, [pc, #384]	; (8009e60 <tcp_receive+0xbe4>)
 8009ce0:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8009ce4:	495f      	ldr	r1, [pc, #380]	; (8009e64 <tcp_receive+0xbe8>)
 8009ce6:	4860      	ldr	r0, [pc, #384]	; (8009e68 <tcp_receive+0xbec>)
 8009ce8:	f004 fb70 	bl	800e3cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cf0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009cf2:	4b58      	ldr	r3, [pc, #352]	; (8009e54 <tcp_receive+0xbd8>)
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4b57      	ldr	r3, [pc, #348]	; (8009e58 <tcp_receive+0xbdc>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	441a      	add	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d06:	4b53      	ldr	r3, [pc, #332]	; (8009e54 <tcp_receive+0xbd8>)
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d206      	bcs.n	8009d1c <tcp_receive+0xaa0>
 8009d0e:	4b54      	ldr	r3, [pc, #336]	; (8009e60 <tcp_receive+0xbe4>)
 8009d10:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009d14:	4955      	ldr	r1, [pc, #340]	; (8009e6c <tcp_receive+0xbf0>)
 8009d16:	4854      	ldr	r0, [pc, #336]	; (8009e68 <tcp_receive+0xbec>)
 8009d18:	f004 fb58 	bl	800e3cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d20:	4b4c      	ldr	r3, [pc, #304]	; (8009e54 <tcp_receive+0xbd8>)
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7fd f9fb 	bl	8007128 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009d32:	4b4a      	ldr	r3, [pc, #296]	; (8009e5c <tcp_receive+0xbe0>)
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	891b      	ldrh	r3, [r3, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d006      	beq.n	8009d4a <tcp_receive+0xace>
          recv_data = inseg.p;
 8009d3c:	4b47      	ldr	r3, [pc, #284]	; (8009e5c <tcp_receive+0xbe0>)
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	4a4b      	ldr	r2, [pc, #300]	; (8009e70 <tcp_receive+0xbf4>)
 8009d42:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009d44:	4b45      	ldr	r3, [pc, #276]	; (8009e5c <tcp_receive+0xbe0>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009d4a:	4b44      	ldr	r3, [pc, #272]	; (8009e5c <tcp_receive+0xbe0>)
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	899b      	ldrh	r3, [r3, #12]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fb fb17 	bl	8005386 <lwip_htons>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 80b4 	beq.w	8009ecc <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009d64:	4b43      	ldr	r3, [pc, #268]	; (8009e74 <tcp_receive+0xbf8>)
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	f043 0320 	orr.w	r3, r3, #32
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	4b41      	ldr	r3, [pc, #260]	; (8009e74 <tcp_receive+0xbf8>)
 8009d70:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009d72:	e0ab      	b.n	8009ecc <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d78:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	4a35      	ldr	r2, [pc, #212]	; (8009e58 <tcp_receive+0xbdc>)
 8009d84:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	891b      	ldrh	r3, [r3, #8]
 8009d8a:	461c      	mov	r4, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	899b      	ldrh	r3, [r3, #12]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fb faf6 	bl	8005386 <lwip_htons>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f003 0303 	and.w	r3, r3, #3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <tcp_receive+0xb2c>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <tcp_receive+0xb2e>
 8009da8:	2300      	movs	r3, #0
 8009daa:	191a      	adds	r2, r3, r4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	441a      	add	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dba:	461c      	mov	r4, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	891b      	ldrh	r3, [r3, #8]
 8009dc0:	461d      	mov	r5, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	899b      	ldrh	r3, [r3, #12]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fb fadb 	bl	8005386 <lwip_htons>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <tcp_receive+0xb62>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <tcp_receive+0xb64>
 8009dde:	2300      	movs	r3, #0
 8009de0:	442b      	add	r3, r5
 8009de2:	429c      	cmp	r4, r3
 8009de4:	d206      	bcs.n	8009df4 <tcp_receive+0xb78>
 8009de6:	4b1e      	ldr	r3, [pc, #120]	; (8009e60 <tcp_receive+0xbe4>)
 8009de8:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8009dec:	4922      	ldr	r1, [pc, #136]	; (8009e78 <tcp_receive+0xbfc>)
 8009dee:	481e      	ldr	r0, [pc, #120]	; (8009e68 <tcp_receive+0xbec>)
 8009df0:	f004 faec 	bl	800e3cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	891b      	ldrh	r3, [r3, #8]
 8009df8:	461c      	mov	r4, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	899b      	ldrh	r3, [r3, #12]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fb fabf 	bl	8005386 <lwip_htons>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f003 0303 	and.w	r3, r3, #3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <tcp_receive+0xb9a>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e000      	b.n	8009e18 <tcp_receive+0xb9c>
 8009e16:	2300      	movs	r3, #0
 8009e18:	1919      	adds	r1, r3, r4
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e1e:	b28b      	uxth	r3, r1
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7fd f97d 	bl	8007128 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	891b      	ldrh	r3, [r3, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d028      	beq.n	8009e8a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009e38:	4b0d      	ldr	r3, [pc, #52]	; (8009e70 <tcp_receive+0xbf4>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01d      	beq.n	8009e7c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <tcp_receive+0xbf4>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f7fc fc94 	bl	8006778 <pbuf_cat>
 8009e50:	e018      	b.n	8009e84 <tcp_receive+0xc08>
 8009e52:	bf00      	nop
 8009e54:	20000436 	.word	0x20000436
 8009e58:	2000042c 	.word	0x2000042c
 8009e5c:	2000040c 	.word	0x2000040c
 8009e60:	080103ec 	.word	0x080103ec
 8009e64:	080106f0 	.word	0x080106f0
 8009e68:	08010430 	.word	0x08010430
 8009e6c:	0801072c 	.word	0x0801072c
 8009e70:	2000043c 	.word	0x2000043c
 8009e74:	20000439 	.word	0x20000439
 8009e78:	0801074c 	.word	0x0801074c
            } else {
              recv_data = cseg->p;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	4a71      	ldr	r2, [pc, #452]	; (800a048 <tcp_receive+0xdcc>)
 8009e82:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	899b      	ldrh	r3, [r3, #12]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fb fa77 	bl	8005386 <lwip_htons>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00d      	beq.n	8009ebe <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009ea2:	4b6a      	ldr	r3, [pc, #424]	; (800a04c <tcp_receive+0xdd0>)
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	f043 0320 	orr.w	r3, r3, #32
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	4b67      	ldr	r3, [pc, #412]	; (800a04c <tcp_receive+0xdd0>)
 8009eae:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7d1b      	ldrb	r3, [r3, #20]
 8009eb4:	2b04      	cmp	r3, #4
 8009eb6:	d102      	bne.n	8009ebe <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2207      	movs	r2, #7
 8009ebc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7fd fd7a 	bl	80079c0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d008      	beq.n	8009ee6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	f43f af47 	beq.w	8009d74 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	7e9b      	ldrb	r3, [r3, #26]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00e      	beq.n	8009f10 <tcp_receive+0xc94>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7e9b      	ldrb	r3, [r3, #26]
 8009ef6:	f023 0301 	bic.w	r3, r3, #1
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	769a      	strb	r2, [r3, #26]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	7e9b      	ldrb	r3, [r3, #26]
 8009f04:	f043 0302 	orr.w	r3, r3, #2
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009f0e:	e181      	b.n	800a214 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	7e9b      	ldrb	r3, [r3, #26]
 8009f14:	f043 0301 	orr.w	r3, r3, #1
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009f1e:	e179      	b.n	800a214 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fc91 	bl	800a848 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d106      	bne.n	8009f3c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009f2e:	4848      	ldr	r0, [pc, #288]	; (800a050 <tcp_receive+0xdd4>)
 8009f30:	f7fd fd5e 	bl	80079f0 <tcp_seg_copy>
 8009f34:	4602      	mov	r2, r0
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8009f3a:	e16b      	b.n	800a214 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f46:	e150      	b.n	800a1ea <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8009f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	4b41      	ldr	r3, [pc, #260]	; (800a054 <tcp_receive+0xdd8>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d11d      	bne.n	8009f92 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009f56:	4b3e      	ldr	r3, [pc, #248]	; (800a050 <tcp_receive+0xdd4>)
 8009f58:	891a      	ldrh	r2, [r3, #8]
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	891b      	ldrh	r3, [r3, #8]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	f240 8148 	bls.w	800a1f4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8009f64:	483a      	ldr	r0, [pc, #232]	; (800a050 <tcp_receive+0xdd4>)
 8009f66:	f7fd fd43 	bl	80079f0 <tcp_seg_copy>
 8009f6a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 8142 	beq.w	800a1f8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <tcp_receive+0xd06>
                    prev->next = cseg;
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	e002      	b.n	8009f88 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009f88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff f900 	bl	8009190 <tcp_oos_insert_segment>
                }
                break;
 8009f90:	e132      	b.n	800a1f8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d117      	bne.n	8009fc8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009f98:	4b2e      	ldr	r3, [pc, #184]	; (800a054 <tcp_receive+0xdd8>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	da57      	bge.n	800a058 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8009fa8:	4829      	ldr	r0, [pc, #164]	; (800a050 <tcp_receive+0xdd4>)
 8009faa:	f7fd fd21 	bl	80079f0 <tcp_seg_copy>
 8009fae:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 8122 	beq.w	800a1fc <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8009fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7ff f8e5 	bl	8009190 <tcp_oos_insert_segment>
                  }
                  break;
 8009fc6:	e119      	b.n	800a1fc <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8009fc8:	4b22      	ldr	r3, [pc, #136]	; (800a054 <tcp_receive+0xdd8>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	db3e      	blt.n	800a058 <tcp_receive+0xddc>
 8009fda:	4b1e      	ldr	r3, [pc, #120]	; (800a054 <tcp_receive+0xdd8>)
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dc35      	bgt.n	800a058 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8009fec:	4818      	ldr	r0, [pc, #96]	; (800a050 <tcp_receive+0xdd4>)
 8009fee:	f7fd fcff 	bl	80079f0 <tcp_seg_copy>
 8009ff2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 8102 	beq.w	800a200 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a004:	8912      	ldrh	r2, [r2, #8]
 800a006:	441a      	add	r2, r3
 800a008:	4b12      	ldr	r3, [pc, #72]	; (800a054 <tcp_receive+0xdd8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	dd12      	ble.n	800a038 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a012:	4b10      	ldr	r3, [pc, #64]	; (800a054 <tcp_receive+0xdd8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	b29a      	uxth	r2, r3
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	b29a      	uxth	r2, r3
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	891b      	ldrh	r3, [r3, #8]
 800a030:	4619      	mov	r1, r3
 800a032:	4610      	mov	r0, r2
 800a034:	f7fc f960 	bl	80062f8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a03e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff f8a5 	bl	8009190 <tcp_oos_insert_segment>
                  }
                  break;
 800a046:	e0db      	b.n	800a200 <tcp_receive+0xf84>
 800a048:	2000043c 	.word	0x2000043c
 800a04c:	20000439 	.word	0x20000439
 800a050:	2000040c 	.word	0x2000040c
 800a054:	2000042c 	.word	0x2000042c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f040 80bf 	bne.w	800a1e0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a062:	4b7c      	ldr	r3, [pc, #496]	; (800a254 <tcp_receive+0xfd8>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f340 80b6 	ble.w	800a1e0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	899b      	ldrh	r3, [r3, #12]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fb f982 	bl	8005386 <lwip_htons>
 800a082:	4603      	mov	r3, r0
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f040 80bb 	bne.w	800a204 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a08e:	4872      	ldr	r0, [pc, #456]	; (800a258 <tcp_receive+0xfdc>)
 800a090:	f7fd fcae 	bl	80079f0 <tcp_seg_copy>
 800a094:	4602      	mov	r2, r0
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80b2 	beq.w	800a208 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ac:	8912      	ldrh	r2, [r2, #8]
 800a0ae:	441a      	add	r2, r3
 800a0b0:	4b68      	ldr	r3, [pc, #416]	; (800a254 <tcp_receive+0xfd8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dd12      	ble.n	800a0e0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a0ba:	4b66      	ldr	r3, [pc, #408]	; (800a254 <tcp_receive+0xfd8>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d2:	685a      	ldr	r2, [r3, #4]
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	891b      	ldrh	r3, [r3, #8]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f7fc f90c 	bl	80062f8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a0e0:	4b5e      	ldr	r3, [pc, #376]	; (800a25c <tcp_receive+0xfe0>)
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4b5b      	ldr	r3, [pc, #364]	; (800a254 <tcp_receive+0xfd8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	441a      	add	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a0f4:	440b      	add	r3, r1
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f340 8085 	ble.w	800a208 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	899b      	ldrh	r3, [r3, #12]
 800a106:	b29b      	uxth	r3, r3
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fb f93c 	bl	8005386 <lwip_htons>
 800a10e:	4603      	mov	r3, r0
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01e      	beq.n	800a156 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	899b      	ldrh	r3, [r3, #12]
 800a120:	b29b      	uxth	r3, r3
 800a122:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a126:	b29c      	uxth	r4, r3
 800a128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	899b      	ldrh	r3, [r3, #12]
 800a130:	b29b      	uxth	r3, r3
 800a132:	4618      	mov	r0, r3
 800a134:	f7fb f927 	bl	8005386 <lwip_htons>
 800a138:	4603      	mov	r3, r0
 800a13a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a13e:	b29b      	uxth	r3, r3
 800a140:	4618      	mov	r0, r3
 800a142:	f7fb f920 	bl	8005386 <lwip_htons>
 800a146:	4603      	mov	r3, r0
 800a148:	461a      	mov	r2, r3
 800a14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	4322      	orrs	r2, r4
 800a152:	b292      	uxth	r2, r2
 800a154:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a160:	4413      	add	r3, r2
 800a162:	b299      	uxth	r1, r3
 800a164:	4b3b      	ldr	r3, [pc, #236]	; (800a254 <tcp_receive+0xfd8>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	b29a      	uxth	r2, r3
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	1a8a      	subs	r2, r1, r2
 800a170:	b292      	uxth	r2, r2
 800a172:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	891b      	ldrh	r3, [r3, #8]
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fc f8b8 	bl	80062f8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	891c      	ldrh	r4, [r3, #8]
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	899b      	ldrh	r3, [r3, #12]
 800a196:	b29b      	uxth	r3, r3
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fb f8f4 	bl	8005386 <lwip_htons>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f003 0303 	and.w	r3, r3, #3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <tcp_receive+0xf30>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e000      	b.n	800a1ae <tcp_receive+0xf32>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4423      	add	r3, r4
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	4b2a      	ldr	r3, [pc, #168]	; (800a25c <tcp_receive+0xfe0>)
 800a1b4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a1b6:	4b29      	ldr	r3, [pc, #164]	; (800a25c <tcp_receive+0xfe0>)
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	4b25      	ldr	r3, [pc, #148]	; (800a254 <tcp_receive+0xfd8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	441a      	add	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1ca:	440b      	add	r3, r1
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d01b      	beq.n	800a208 <tcp_receive+0xf8c>
 800a1d0:	4b23      	ldr	r3, [pc, #140]	; (800a260 <tcp_receive+0xfe4>)
 800a1d2:	f240 627a 	movw	r2, #1658	; 0x67a
 800a1d6:	4923      	ldr	r1, [pc, #140]	; (800a264 <tcp_receive+0xfe8>)
 800a1d8:	4823      	ldr	r0, [pc, #140]	; (800a268 <tcp_receive+0xfec>)
 800a1da:	f004 f8f7 	bl	800e3cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a1de:	e013      	b.n	800a208 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f47f aeab 	bne.w	8009f48 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800a1f2:	e00f      	b.n	800a214 <tcp_receive+0xf98>
                break;
 800a1f4:	bf00      	nop
 800a1f6:	e00d      	b.n	800a214 <tcp_receive+0xf98>
                break;
 800a1f8:	bf00      	nop
 800a1fa:	e00b      	b.n	800a214 <tcp_receive+0xf98>
                  break;
 800a1fc:	bf00      	nop
 800a1fe:	e009      	b.n	800a214 <tcp_receive+0xf98>
                  break;
 800a200:	bf00      	nop
 800a202:	e007      	b.n	800a214 <tcp_receive+0xf98>
                  break;
 800a204:	bf00      	nop
 800a206:	e005      	b.n	800a214 <tcp_receive+0xf98>
                break;
 800a208:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800a20a:	e003      	b.n	800a214 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fb1b 	bl	800a848 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a212:	e01a      	b.n	800a24a <tcp_receive+0xfce>
 800a214:	e019      	b.n	800a24a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a216:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <tcp_receive+0xfd8>)
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	db0a      	blt.n	800a23a <tcp_receive+0xfbe>
 800a224:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <tcp_receive+0xfd8>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a230:	440b      	add	r3, r1
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	3301      	adds	r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	dd07      	ble.n	800a24a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	7e9b      	ldrb	r3, [r3, #26]
 800a23e:	f043 0302 	orr.w	r3, r3, #2
 800a242:	b2da      	uxtb	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800a248:	e7ff      	b.n	800a24a <tcp_receive+0xfce>
 800a24a:	bf00      	nop
 800a24c:	3734      	adds	r7, #52	; 0x34
 800a24e:	46bd      	mov	sp, r7
 800a250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a252:	bf00      	nop
 800a254:	2000042c 	.word	0x2000042c
 800a258:	2000040c 	.word	0x2000040c
 800a25c:	20000436 	.word	0x20000436
 800a260:	080103ec 	.word	0x080103ec
 800a264:	080106b8 	.word	0x080106b8
 800a268:	08010430 	.word	0x08010430

0800a26c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800a272:	4b17      	ldr	r3, [pc, #92]	; (800a2d0 <tcp_getoptbyte+0x64>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d005      	beq.n	800a286 <tcp_getoptbyte+0x1a>
 800a27a:	4b16      	ldr	r3, [pc, #88]	; (800a2d4 <tcp_getoptbyte+0x68>)
 800a27c:	881a      	ldrh	r2, [r3, #0]
 800a27e:	4b16      	ldr	r3, [pc, #88]	; (800a2d8 <tcp_getoptbyte+0x6c>)
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d20e      	bcs.n	800a2a4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800a286:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <tcp_getoptbyte+0x70>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3314      	adds	r3, #20
 800a28c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800a28e:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <tcp_getoptbyte+0x68>)
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	b291      	uxth	r1, r2
 800a296:	4a0f      	ldr	r2, [pc, #60]	; (800a2d4 <tcp_getoptbyte+0x68>)
 800a298:	8011      	strh	r1, [r2, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	4413      	add	r3, r2
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	e010      	b.n	800a2c6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800a2a4:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <tcp_getoptbyte+0x68>)
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	b291      	uxth	r1, r2
 800a2ac:	4a09      	ldr	r2, [pc, #36]	; (800a2d4 <tcp_getoptbyte+0x68>)
 800a2ae:	8011      	strh	r1, [r2, #0]
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <tcp_getoptbyte+0x6c>)
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800a2bc:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <tcp_getoptbyte+0x64>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr
 800a2d0:	20000424 	.word	0x20000424
 800a2d4:	20000428 	.word	0x20000428
 800a2d8:	20000422 	.word	0x20000422
 800a2dc:	2000041c 	.word	0x2000041c

0800a2e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a2e8:	4b2e      	ldr	r3, [pc, #184]	; (800a3a4 <tcp_parseopt+0xc4>)
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d055      	beq.n	800a39c <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a2f0:	4b2d      	ldr	r3, [pc, #180]	; (800a3a8 <tcp_parseopt+0xc8>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	801a      	strh	r2, [r3, #0]
 800a2f6:	e045      	b.n	800a384 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800a2f8:	f7ff ffb8 	bl	800a26c <tcp_getoptbyte>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d006      	beq.n	800a314 <tcp_parseopt+0x34>
 800a306:	2b02      	cmp	r3, #2
 800a308:	dc2b      	bgt.n	800a362 <tcp_parseopt+0x82>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d041      	beq.n	800a392 <tcp_parseopt+0xb2>
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d127      	bne.n	800a362 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800a312:	e037      	b.n	800a384 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a314:	f7ff ffaa 	bl	800a26c <tcp_getoptbyte>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d13b      	bne.n	800a396 <tcp_parseopt+0xb6>
 800a31e:	4b22      	ldr	r3, [pc, #136]	; (800a3a8 <tcp_parseopt+0xc8>)
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	3301      	adds	r3, #1
 800a324:	4a1f      	ldr	r2, [pc, #124]	; (800a3a4 <tcp_parseopt+0xc4>)
 800a326:	8812      	ldrh	r2, [r2, #0]
 800a328:	4293      	cmp	r3, r2
 800a32a:	da34      	bge.n	800a396 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800a32c:	f7ff ff9e 	bl	800a26c <tcp_getoptbyte>
 800a330:	4603      	mov	r3, r0
 800a332:	b29b      	uxth	r3, r3
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800a338:	f7ff ff98 	bl	800a26c <tcp_getoptbyte>
 800a33c:	4603      	mov	r3, r0
 800a33e:	b29a      	uxth	r2, r3
 800a340:	89bb      	ldrh	r3, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a346:	89bb      	ldrh	r3, [r7, #12]
 800a348:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a34c:	d804      	bhi.n	800a358 <tcp_parseopt+0x78>
 800a34e:	89bb      	ldrh	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <tcp_parseopt+0x78>
 800a354:	89ba      	ldrh	r2, [r7, #12]
 800a356:	e001      	b.n	800a35c <tcp_parseopt+0x7c>
 800a358:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800a360:	e010      	b.n	800a384 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800a362:	f7ff ff83 	bl	800a26c <tcp_getoptbyte>
 800a366:	4603      	mov	r3, r0
 800a368:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800a36a:	7afb      	ldrb	r3, [r7, #11]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d914      	bls.n	800a39a <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800a370:	7afb      	ldrb	r3, [r7, #11]
 800a372:	b29a      	uxth	r2, r3
 800a374:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <tcp_parseopt+0xc8>)
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	4413      	add	r3, r2
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3b02      	subs	r3, #2
 800a37e:	b29a      	uxth	r2, r3
 800a380:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <tcp_parseopt+0xc8>)
 800a382:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a384:	4b08      	ldr	r3, [pc, #32]	; (800a3a8 <tcp_parseopt+0xc8>)
 800a386:	881a      	ldrh	r2, [r3, #0]
 800a388:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <tcp_parseopt+0xc4>)
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d3b3      	bcc.n	800a2f8 <tcp_parseopt+0x18>
 800a390:	e004      	b.n	800a39c <tcp_parseopt+0xbc>
        return;
 800a392:	bf00      	nop
 800a394:	e002      	b.n	800a39c <tcp_parseopt+0xbc>
          return;
 800a396:	bf00      	nop
 800a398:	e000      	b.n	800a39c <tcp_parseopt+0xbc>
          return;
 800a39a:	bf00      	nop
      }
    }
  }
}
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000420 	.word	0x20000420
 800a3a8:	20000428 	.word	0x20000428

0800a3ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a3b0:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <tcp_trigger_input_pcb_close+0x1c>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	f043 0310 	orr.w	r3, r3, #16
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	4b03      	ldr	r3, [pc, #12]	; (800a3c8 <tcp_trigger_input_pcb_close+0x1c>)
 800a3bc:	701a      	strb	r2, [r3, #0]
}
 800a3be:	bf00      	nop
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bc80      	pop	{r7}
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	20000439 	.word	0x20000439

0800a3cc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	607b      	str	r3, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	817b      	strh	r3, [r7, #10]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a3de:	897a      	ldrh	r2, [r7, #10]
 800a3e0:	893b      	ldrh	r3, [r7, #8]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3314      	adds	r3, #20
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	f7fb fd84 	bl	8005efc <pbuf_alloc>
 800a3f4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d056      	beq.n	800a4aa <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a3fc:	897b      	ldrh	r3, [r7, #10]
 800a3fe:	3313      	adds	r3, #19
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	8952      	ldrh	r2, [r2, #10]
 800a404:	4293      	cmp	r3, r2
 800a406:	db05      	blt.n	800a414 <tcp_output_alloc_header+0x48>
 800a408:	4b2a      	ldr	r3, [pc, #168]	; (800a4b4 <tcp_output_alloc_header+0xe8>)
 800a40a:	2272      	movs	r2, #114	; 0x72
 800a40c:	492a      	ldr	r1, [pc, #168]	; (800a4b8 <tcp_output_alloc_header+0xec>)
 800a40e:	482b      	ldr	r0, [pc, #172]	; (800a4bc <tcp_output_alloc_header+0xf0>)
 800a410:	f003 ffdc 	bl	800e3cc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8adb      	ldrh	r3, [r3, #22]
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fa ffb1 	bl	8005386 <lwip_htons>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8b1b      	ldrh	r3, [r3, #24]
 800a430:	4618      	mov	r0, r3
 800a432:	f7fa ffa8 	bl	8005386 <lwip_htons>
 800a436:	4603      	mov	r3, r0
 800a438:	461a      	mov	r2, r3
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fa ffa9 	bl	80053a0 <lwip_htonl>
 800a44e:	4602      	mov	r2, r0
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800a454:	897b      	ldrh	r3, [r7, #10]
 800a456:	089b      	lsrs	r3, r3, #2
 800a458:	b29b      	uxth	r3, r3
 800a45a:	3305      	adds	r3, #5
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	031b      	lsls	r3, r3, #12
 800a460:	b29b      	uxth	r3, r3
 800a462:	f043 0310 	orr.w	r3, r3, #16
 800a466:	b29b      	uxth	r3, r3
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fa ff8c 	bl	8005386 <lwip_htons>
 800a46e:	4603      	mov	r3, r0
 800a470:	461a      	mov	r2, r3
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fa ff83 	bl	8005386 <lwip_htons>
 800a480:	4603      	mov	r3, r0
 800a482:	461a      	mov	r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2200      	movs	r2, #0
 800a48c:	741a      	strb	r2, [r3, #16]
 800a48e:	2200      	movs	r2, #0
 800a490:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2200      	movs	r2, #0
 800a496:	749a      	strb	r2, [r3, #18]
 800a498:	2200      	movs	r2, #0
 800a49a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a4a4:	441a      	add	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a4aa:	697b      	ldr	r3, [r7, #20]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	08010774 	.word	0x08010774
 800a4b8:	080107a8 	.word	0x080107a8
 800a4bc:	080107d8 	.word	0x080107d8

0800a4c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a4c0:	b590      	push	{r4, r7, lr}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d02d      	beq.n	800a52c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4d4:	60fb      	str	r3, [r7, #12]
 800a4d6:	e002      	b.n	800a4de <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1f8      	bne.n	800a4d8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	899b      	ldrh	r3, [r3, #12]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fa ff49 	bl	8005386 <lwip_htons>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d116      	bne.n	800a52c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	899b      	ldrh	r3, [r3, #12]
 800a504:	b29c      	uxth	r4, r3
 800a506:	2001      	movs	r0, #1
 800a508:	f7fa ff3d 	bl	8005386 <lwip_htons>
 800a50c:	4603      	mov	r3, r0
 800a50e:	461a      	mov	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	4322      	orrs	r2, r4
 800a516:	b292      	uxth	r2, r2
 800a518:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	7e9b      	ldrb	r3, [r3, #26]
 800a51e:	f043 0320 	orr.w	r3, r3, #32
 800a522:	b2da      	uxtb	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	e004      	b.n	800a536 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a52c:	2101      	movs	r1, #1
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f88e 	bl	800a650 <tcp_enqueue_flags>
 800a534:	4603      	mov	r3, r0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd90      	pop	{r4, r7, pc}
	...

0800a540 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800a540:	b590      	push	{r4, r7, lr}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	4613      	mov	r3, r2
 800a54e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a550:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	b2db      	uxtb	r3, r3
 800a558:	f003 0304 	and.w	r3, r3, #4
 800a55c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a55e:	2003      	movs	r0, #3
 800a560:	f7fb faba 	bl	8005ad8 <memp_malloc>
 800a564:	6138      	str	r0, [r7, #16]
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d104      	bne.n	800a576 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a56c:	68b8      	ldr	r0, [r7, #8]
 800a56e:	f7fc f837 	bl	80065e0 <pbuf_free>
    return NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	e061      	b.n	800a63a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a57c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	891a      	ldrh	r2, [r3, #8]
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	b29b      	uxth	r3, r3
 800a592:	429a      	cmp	r2, r3
 800a594:	d205      	bcs.n	800a5a2 <tcp_create_segment+0x62>
 800a596:	4b2b      	ldr	r3, [pc, #172]	; (800a644 <tcp_create_segment+0x104>)
 800a598:	22ba      	movs	r2, #186	; 0xba
 800a59a:	492b      	ldr	r1, [pc, #172]	; (800a648 <tcp_create_segment+0x108>)
 800a59c:	482b      	ldr	r0, [pc, #172]	; (800a64c <tcp_create_segment+0x10c>)
 800a59e:	f003 ff15 	bl	800e3cc <iprintf>
  seg->len = p->tot_len - optlen;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	891a      	ldrh	r2, [r3, #8]
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800a5b2:	2114      	movs	r1, #20
 800a5b4:	68b8      	ldr	r0, [r7, #8]
 800a5b6:	f7fb ffef 	bl	8006598 <pbuf_header>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a5c0:	6938      	ldr	r0, [r7, #16]
 800a5c2:	f7fd f9fd 	bl	80079c0 <tcp_seg_free>
    return NULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e037      	b.n	800a63a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8ada      	ldrh	r2, [r3, #22]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	68dc      	ldr	r4, [r3, #12]
 800a5dc:	4610      	mov	r0, r2
 800a5de:	f7fa fed2 	bl	8005386 <lwip_htons>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	8b1a      	ldrh	r2, [r3, #24]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	68dc      	ldr	r4, [r3, #12]
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f7fa fec9 	bl	8005386 <lwip_htons>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	68dc      	ldr	r4, [r3, #12]
 800a5fc:	6838      	ldr	r0, [r7, #0]
 800a5fe:	f7fa fecf 	bl	80053a0 <lwip_htonl>
 800a602:	4603      	mov	r3, r0
 800a604:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	089b      	lsrs	r3, r3, #2
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	3305      	adds	r3, #5
 800a610:	b29b      	uxth	r3, r3
 800a612:	031b      	lsls	r3, r3, #12
 800a614:	b29a      	uxth	r2, r3
 800a616:	79fb      	ldrb	r3, [r7, #7]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	4313      	orrs	r3, r2
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	68dc      	ldr	r4, [r3, #12]
 800a622:	4610      	mov	r0, r2
 800a624:	f7fa feaf 	bl	8005386 <lwip_htons>
 800a628:	4603      	mov	r3, r0
 800a62a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	749a      	strb	r2, [r3, #18]
 800a634:	2200      	movs	r2, #0
 800a636:	74da      	strb	r2, [r3, #19]
  return seg;
 800a638:	693b      	ldr	r3, [r7, #16]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd90      	pop	{r4, r7, pc}
 800a642:	bf00      	nop
 800a644:	08010774 	.word	0x08010774
 800a648:	08010800 	.word	0x08010800
 800a64c:	080107d8 	.word	0x080107d8

0800a650 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08a      	sub	sp, #40	; 0x28
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	f003 0303 	and.w	r3, r3, #3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <tcp_enqueue_flags+0x2c>
 800a66e:	4b6f      	ldr	r3, [pc, #444]	; (800a82c <tcp_enqueue_flags+0x1dc>)
 800a670:	f240 321a 	movw	r2, #794	; 0x31a
 800a674:	496e      	ldr	r1, [pc, #440]	; (800a830 <tcp_enqueue_flags+0x1e0>)
 800a676:	486f      	ldr	r0, [pc, #444]	; (800a834 <tcp_enqueue_flags+0x1e4>)
 800a678:	f003 fea8 	bl	800e3cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a682:	2b08      	cmp	r3, #8
 800a684:	d806      	bhi.n	800a694 <tcp_enqueue_flags+0x44>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a68c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a690:	4293      	cmp	r3, r2
 800a692:	d90e      	bls.n	800a6b2 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800a694:	78fb      	ldrb	r3, [r7, #3]
 800a696:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d109      	bne.n	800a6b2 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	7e9b      	ldrb	r3, [r3, #26]
 800a6a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b0:	e0b7      	b.n	800a822 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800a6b2:	78fb      	ldrb	r3, [r7, #3]
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a6c0:	7ffb      	ldrb	r3, [r7, #31]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	f7fb fc11 	bl	8005efc <pbuf_alloc>
 800a6da:	6138      	str	r0, [r7, #16]
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d109      	bne.n	800a6f6 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	7e9b      	ldrb	r3, [r3, #26]
 800a6e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f4:	e095      	b.n	800a822 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	895a      	ldrh	r2, [r3, #10]
 800a6fa:	7dfb      	ldrb	r3, [r7, #23]
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d206      	bcs.n	800a710 <tcp_enqueue_flags+0xc0>
 800a702:	4b4a      	ldr	r3, [pc, #296]	; (800a82c <tcp_enqueue_flags+0x1dc>)
 800a704:	f44f 7250 	mov.w	r2, #832	; 0x340
 800a708:	494b      	ldr	r1, [pc, #300]	; (800a838 <tcp_enqueue_flags+0x1e8>)
 800a70a:	484a      	ldr	r0, [pc, #296]	; (800a834 <tcp_enqueue_flags+0x1e4>)
 800a70c:	f003 fe5e 	bl	800e3cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a714:	78fa      	ldrb	r2, [r7, #3]
 800a716:	7ffb      	ldrb	r3, [r7, #31]
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	460b      	mov	r3, r1
 800a71c:	6939      	ldr	r1, [r7, #16]
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff ff0e 	bl	800a540 <tcp_create_segment>
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d109      	bne.n	800a740 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7e9b      	ldrb	r3, [r3, #26]
 800a730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a734:	b2da      	uxtb	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a73a:	f04f 33ff 	mov.w	r3, #4294967295
 800a73e:	e070      	b.n	800a822 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d006      	beq.n	800a75a <tcp_enqueue_flags+0x10a>
 800a74c:	4b37      	ldr	r3, [pc, #220]	; (800a82c <tcp_enqueue_flags+0x1dc>)
 800a74e:	f240 3249 	movw	r2, #841	; 0x349
 800a752:	493a      	ldr	r1, [pc, #232]	; (800a83c <tcp_enqueue_flags+0x1ec>)
 800a754:	4837      	ldr	r0, [pc, #220]	; (800a834 <tcp_enqueue_flags+0x1e4>)
 800a756:	f003 fe39 	bl	800e3cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	891b      	ldrh	r3, [r3, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d006      	beq.n	800a770 <tcp_enqueue_flags+0x120>
 800a762:	4b32      	ldr	r3, [pc, #200]	; (800a82c <tcp_enqueue_flags+0x1dc>)
 800a764:	f240 324a 	movw	r2, #842	; 0x34a
 800a768:	4935      	ldr	r1, [pc, #212]	; (800a840 <tcp_enqueue_flags+0x1f0>)
 800a76a:	4832      	ldr	r0, [pc, #200]	; (800a834 <tcp_enqueue_flags+0x1e4>)
 800a76c:	f003 fe2e 	bl	800e3cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a774:	2b00      	cmp	r3, #0
 800a776:	d103      	bne.n	800a780 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	669a      	str	r2, [r3, #104]	; 0x68
 800a77e:	e00d      	b.n	800a79c <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a784:	61bb      	str	r3, [r7, #24]
 800a786:	e002      	b.n	800a78e <tcp_enqueue_flags+0x13e>
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	61bb      	str	r3, [r7, #24]
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1f8      	bne.n	800a788 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d104      	bne.n	800a7b8 <tcp_enqueue_flags+0x168>
 800a7ae:	78fb      	ldrb	r3, [r7, #3]
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d004      	beq.n	800a7c2 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7bc:	1c5a      	adds	r2, r3, #1
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a7c2:	78fb      	ldrb	r3, [r7, #3]
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d006      	beq.n	800a7da <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	7e9b      	ldrb	r3, [r3, #26]
 800a7d0:	f043 0320 	orr.w	r3, r3, #32
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fb ff92 	bl	8006708 <pbuf_clen>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7ee:	4413      	add	r3, r2
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00e      	beq.n	800a820 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <tcp_enqueue_flags+0x1d0>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d106      	bne.n	800a820 <tcp_enqueue_flags+0x1d0>
 800a812:	4b06      	ldr	r3, [pc, #24]	; (800a82c <tcp_enqueue_flags+0x1dc>)
 800a814:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a818:	490a      	ldr	r1, [pc, #40]	; (800a844 <tcp_enqueue_flags+0x1f4>)
 800a81a:	4806      	ldr	r0, [pc, #24]	; (800a834 <tcp_enqueue_flags+0x1e4>)
 800a81c:	f003 fdd6 	bl	800e3cc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3720      	adds	r7, #32
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	08010774 	.word	0x08010774
 800a830:	08010a78 	.word	0x08010a78
 800a834:	080107d8 	.word	0x080107d8
 800a838:	08010ad0 	.word	0x08010ad0
 800a83c:	08010b0c 	.word	0x08010b0c
 800a840:	08010b24 	.word	0x08010b24
 800a844:	08010b50 	.word	0x08010b50

0800a848 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a848:	b590      	push	{r4, r7, lr}
 800a84a:	b08b      	sub	sp, #44	; 0x2c
 800a84c:	af04      	add	r7, sp, #16
 800a84e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a854:	7dbb      	ldrb	r3, [r7, #22]
 800a856:	b29c      	uxth	r4, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fa fd9f 	bl	80053a0 <lwip_htonl>
 800a862:	4603      	mov	r3, r0
 800a864:	2200      	movs	r2, #0
 800a866:	4621      	mov	r1, r4
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7ff fdaf 	bl	800a3cc <tcp_output_alloc_header>
 800a86e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d109      	bne.n	800a88a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	7e9b      	ldrb	r3, [r3, #26]
 800a87a:	f043 0303 	orr.w	r3, r3, #3
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a884:	f06f 0301 	mvn.w	r3, #1
 800a888:	e036      	b.n	800a8f8 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3304      	adds	r3, #4
 800a88e:	4618      	mov	r0, r3
 800a890:	f002 fad8 	bl	800ce44 <ip4_route>
 800a894:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d102      	bne.n	800a8a2 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800a89c:	23fc      	movs	r3, #252	; 0xfc
 800a89e:	75fb      	strb	r3, [r7, #23]
 800a8a0:	e012      	b.n	800a8c8 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	1d18      	adds	r0, r3, #4
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	7a9c      	ldrb	r4, [r3, #10]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	7a5b      	ldrb	r3, [r3, #9]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	9202      	str	r2, [sp, #8]
 800a8b4:	2206      	movs	r2, #6
 800a8b6:	9201      	str	r2, [sp, #4]
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	4623      	mov	r3, r4
 800a8bc:	4602      	mov	r2, r0
 800a8be:	6938      	ldr	r0, [r7, #16]
 800a8c0:	f002 fc6a 	bl	800d198 <ip4_output_if>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a8c8:	6938      	ldr	r0, [r7, #16]
 800a8ca:	f7fb fe89 	bl	80065e0 <pbuf_free>

  if (err != ERR_OK) {
 800a8ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d007      	beq.n	800a8e6 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	7e9b      	ldrb	r3, [r3, #26]
 800a8da:	f043 0303 	orr.w	r3, r3, #3
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	769a      	strb	r2, [r3, #26]
 800a8e4:	e006      	b.n	800a8f4 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	7e9b      	ldrb	r3, [r3, #26]
 800a8ea:	f023 0303 	bic.w	r3, r3, #3
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800a8f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	371c      	adds	r7, #28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd90      	pop	{r4, r7, pc}

0800a900 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a900:	b5b0      	push	{r4, r5, r7, lr}
 800a902:	b08a      	sub	sp, #40	; 0x28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	7d1b      	ldrb	r3, [r3, #20]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d106      	bne.n	800a91e <tcp_output+0x1e>
 800a910:	4ba8      	ldr	r3, [pc, #672]	; (800abb4 <tcp_output+0x2b4>)
 800a912:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a916:	49a8      	ldr	r1, [pc, #672]	; (800abb8 <tcp_output+0x2b8>)
 800a918:	48a8      	ldr	r0, [pc, #672]	; (800abbc <tcp_output+0x2bc>)
 800a91a:	f003 fd57 	bl	800e3cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a91e:	4ba8      	ldr	r3, [pc, #672]	; (800abc0 <tcp_output+0x2c0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d101      	bne.n	800a92c <tcp_output+0x2c>
    return ERR_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	e1cb      	b.n	800acc4 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a938:	4293      	cmp	r3, r2
 800a93a:	bf28      	it	cs
 800a93c:	4613      	movcs	r3, r2
 800a93e:	b29b      	uxth	r3, r3
 800a940:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	7e9b      	ldrb	r3, [r3, #26]
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d017      	beq.n	800a984 <tcp_output+0x84>
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00f      	beq.n	800a97a <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	4618      	mov	r0, r3
 800a962:	f7fa fd1d 	bl	80053a0 <lwip_htonl>
 800a966:	4602      	mov	r2, r0
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a970:	8912      	ldrh	r2, [r2, #8]
 800a972:	4413      	add	r3, r2
     (seg == NULL ||
 800a974:	69ba      	ldr	r2, [r7, #24]
 800a976:	429a      	cmp	r2, r3
 800a978:	d204      	bcs.n	800a984 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7ff ff64 	bl	800a848 <tcp_send_empty_ack>
 800a980:	4603      	mov	r3, r0
 800a982:	e19f      	b.n	800acc4 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a988:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d007      	beq.n	800a9a0 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800a990:	e002      	b.n	800a998 <tcp_output+0x98>
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	623b      	str	r3, [r7, #32]
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1f8      	bne.n	800a992 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f002 fa4d 	bl	800ce44 <ip4_route>
 800a9aa:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d102      	bne.n	800a9b8 <tcp_output+0xb8>
    return ERR_RTE;
 800a9b2:	f06f 0303 	mvn.w	r3, #3
 800a9b6:	e185      	b.n	800acc4 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <tcp_output+0xc6>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d111      	bne.n	800a9ea <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <tcp_output+0xd2>
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	e000      	b.n	800a9d4 <tcp_output+0xd4>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d102      	bne.n	800a9e2 <tcp_output+0xe2>
      return ERR_RTE;
 800a9dc:	f06f 0303 	mvn.w	r3, #3
 800a9e0:	e170      	b.n	800acc4 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 813f 	beq.w	800ac70 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fa fcd1 	bl	80053a0 <lwip_htonl>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa08:	8912      	ldrh	r2, [r2, #8]
 800aa0a:	4413      	add	r3, r2
  if (seg != NULL &&
 800aa0c:	69ba      	ldr	r2, [r7, #24]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	f080 812e 	bcs.w	800ac70 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 812a 	beq.w	800ac70 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa22:	461a      	mov	r2, r3
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	4293      	cmp	r3, r2
 800aa28:	f040 8122 	bne.w	800ac70 <tcp_output+0x370>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f040 811d 	bne.w	800ac70 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 812c 	bne.w	800ac9a <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800aa52:	e122      	b.n	800ac9a <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	899b      	ldrh	r3, [r3, #12]
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fa fc92 	bl	8005386 <lwip_htons>
 800aa62:	4603      	mov	r3, r0
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d006      	beq.n	800aa7a <tcp_output+0x17a>
 800aa6c:	4b51      	ldr	r3, [pc, #324]	; (800abb4 <tcp_output+0x2b4>)
 800aa6e:	f240 4245 	movw	r2, #1093	; 0x445
 800aa72:	4954      	ldr	r1, [pc, #336]	; (800abc4 <tcp_output+0x2c4>)
 800aa74:	4851      	ldr	r0, [pc, #324]	; (800abbc <tcp_output+0x2bc>)
 800aa76:	f003 fca9 	bl	800e3cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d01f      	beq.n	800aac2 <tcp_output+0x1c2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	7e9b      	ldrb	r3, [r3, #26]
 800aa86:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d119      	bne.n	800aac2 <tcp_output+0x1c2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <tcp_output+0x1ae>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d110      	bne.n	800aac2 <tcp_output+0x1c2>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaa4:	891a      	ldrh	r2, [r3, #8]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d209      	bcs.n	800aac2 <tcp_output+0x1c2>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d004      	beq.n	800aac2 <tcp_output+0x1c2>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aabe:	2b08      	cmp	r3, #8
 800aac0:	d901      	bls.n	800aac6 <tcp_output+0x1c6>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e000      	b.n	800aac8 <tcp_output+0x1c8>
 800aac6:	2300      	movs	r3, #0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d106      	bne.n	800aada <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	7e9b      	ldrb	r3, [r3, #26]
 800aad0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 80e2 	beq.w	800ac9e <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	7d1b      	ldrb	r3, [r3, #20]
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d00d      	beq.n	800aafe <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	899b      	ldrh	r3, [r3, #12]
 800aae8:	b29c      	uxth	r4, r3
 800aaea:	2010      	movs	r0, #16
 800aaec:	f7fa fc4b 	bl	8005386 <lwip_htons>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	4322      	orrs	r2, r4
 800aafa:	b292      	uxth	r2, r2
 800aafc:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab04:	f000 f8e2 	bl	800accc <tcp_output_segment>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ab0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d009      	beq.n	800ab28 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	7e9b      	ldrb	r3, [r3, #26]
 800ab18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	769a      	strb	r2, [r3, #26]
      return err;
 800ab22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab26:	e0cd      	b.n	800acc4 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	7d1b      	ldrb	r3, [r3, #20]
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d006      	beq.n	800ab46 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7e9b      	ldrb	r3, [r3, #26]
 800ab3c:	f023 0303 	bic.w	r3, r3, #3
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fa fc27 	bl	80053a0 <lwip_htonl>
 800ab52:	4604      	mov	r4, r0
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	891b      	ldrh	r3, [r3, #8]
 800ab58:	461d      	mov	r5, r3
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	899b      	ldrh	r3, [r3, #12]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fa fc0f 	bl	8005386 <lwip_htons>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <tcp_output+0x276>
 800ab72:	2301      	movs	r3, #1
 800ab74:	e000      	b.n	800ab78 <tcp_output+0x278>
 800ab76:	2300      	movs	r3, #0
 800ab78:	442b      	add	r3, r5
 800ab7a:	4423      	add	r3, r4
 800ab7c:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	da02      	bge.n	800ab90 <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	891b      	ldrh	r3, [r3, #8]
 800ab94:	461c      	mov	r4, r3
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	899b      	ldrh	r3, [r3, #12]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fa fbf1 	bl	8005386 <lwip_htons>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00c      	beq.n	800abc8 <tcp_output+0x2c8>
 800abae:	2301      	movs	r3, #1
 800abb0:	e00b      	b.n	800abca <tcp_output+0x2ca>
 800abb2:	bf00      	nop
 800abb4:	08010774 	.word	0x08010774
 800abb8:	08010b78 	.word	0x08010b78
 800abbc:	080107d8 	.word	0x080107d8
 800abc0:	20006bbc 	.word	0x20006bbc
 800abc4:	08010ba0 	.word	0x08010ba0
 800abc8:	2300      	movs	r3, #0
 800abca:	4423      	add	r3, r4
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d049      	beq.n	800ac64 <tcp_output+0x364>
      seg->next = NULL;
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d105      	bne.n	800abea <tcp_output+0x2ea>
        pcb->unacked = seg;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	623b      	str	r3, [r7, #32]
 800abe8:	e03f      	b.n	800ac6a <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fa fbd5 	bl	80053a0 <lwip_htonl>
 800abf6:	4604      	mov	r4, r0
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fa fbce 	bl	80053a0 <lwip_htonl>
 800ac04:	4603      	mov	r3, r0
 800ac06:	1ae3      	subs	r3, r4, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da24      	bge.n	800ac56 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	336c      	adds	r3, #108	; 0x6c
 800ac10:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac12:	e002      	b.n	800ac1a <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d011      	beq.n	800ac46 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fa fbb8 	bl	80053a0 <lwip_htonl>
 800ac30:	4604      	mov	r4, r0
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fa fbb1 	bl	80053a0 <lwip_htonl>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	dbe6      	blt.n	800ac14 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	e009      	b.n	800ac6a <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac5a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	623b      	str	r3, [r7, #32]
 800ac62:	e002      	b.n	800ac6a <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ac64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac66:	f7fc feab 	bl	80079c0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d015      	beq.n	800aca2 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fa fb8f 	bl	80053a0 <lwip_htonl>
 800ac82:	4602      	mov	r2, r0
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8c:	8912      	ldrh	r2, [r2, #8]
 800ac8e:	4413      	add	r3, r2
  while (seg != NULL &&
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	f4bf aede 	bcs.w	800aa54 <tcp_output+0x154>
  }
output_done:
 800ac98:	e003      	b.n	800aca2 <tcp_output+0x3a2>
    goto output_done;
 800ac9a:	bf00      	nop
 800ac9c:	e002      	b.n	800aca4 <tcp_output+0x3a4>
      break;
 800ac9e:	bf00      	nop
 800aca0:	e000      	b.n	800aca4 <tcp_output+0x3a4>
output_done:
 800aca2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d103      	bne.n	800acb4 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	7e9b      	ldrb	r3, [r3, #26]
 800acb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3728      	adds	r7, #40	; 0x28
 800acc8:	46bd      	mov	sp, r7
 800acca:	bdb0      	pop	{r4, r5, r7, pc}

0800accc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800accc:	b5b0      	push	{r4, r5, r7, lr}
 800acce:	b08c      	sub	sp, #48	; 0x30
 800acd0:	af04      	add	r7, sp, #16
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	89db      	ldrh	r3, [r3, #14]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d001      	beq.n	800ace6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	e08a      	b.n	800adfc <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	68dc      	ldr	r4, [r3, #12]
 800acee:	4610      	mov	r0, r2
 800acf0:	f7fa fb56 	bl	80053a0 <lwip_htonl>
 800acf4:	4603      	mov	r3, r0
 800acf6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	68dc      	ldr	r4, [r3, #12]
 800ad00:	4610      	mov	r0, r2
 800ad02:	f7fa fb40 	bl	8005386 <lwip_htons>
 800ad06:	4603      	mov	r3, r0
 800ad08:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ad12:	441a      	add	r2, r3
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	3314      	adds	r3, #20
 800ad1e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	7a9b      	ldrb	r3, [r3, #10]
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d014      	beq.n	800ad56 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	4619      	mov	r1, r3
 800ad32:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ad36:	f7fd f8ab 	bl	8007e90 <tcp_eff_send_mss_impl>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ad3e:	8b7b      	ldrh	r3, [r7, #26]
 800ad40:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fa fb2b 	bl	80053a0 <lwip_htonl>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	3304      	adds	r3, #4
 800ad54:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	da02      	bge.n	800ad66 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2200      	movs	r2, #0
 800ad64:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10c      	bne.n	800ad88 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800ad6e:	4b25      	ldr	r3, [pc, #148]	; (800ae04 <tcp_output_segment+0x138>)
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fa fb0f 	bl	80053a0 <lwip_htonl>
 800ad82:	4602      	mov	r2, r0
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68da      	ldr	r2, [r3, #12]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	8959      	ldrh	r1, [r3, #10]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	8b3a      	ldrh	r2, [r7, #24]
 800ada2:	1a8a      	subs	r2, r1, r2
 800ada4:	b292      	uxth	r2, r2
 800ada6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	8919      	ldrh	r1, [r3, #8]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	8b3a      	ldrh	r2, [r7, #24]
 800adb4:	1a8a      	subs	r2, r1, r2
 800adb6:	b292      	uxth	r2, r2
 800adb8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	68d2      	ldr	r2, [r2, #12]
 800adc2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	741a      	strb	r2, [r3, #16]
 800adcc:	2200      	movs	r2, #0
 800adce:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6858      	ldr	r0, [r3, #4]
 800add4:	68b9      	ldr	r1, [r7, #8]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	1d1c      	adds	r4, r3, #4
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	7a9d      	ldrb	r5, [r3, #10]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	7a5b      	ldrb	r3, [r3, #9]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	9202      	str	r2, [sp, #8]
 800ade6:	2206      	movs	r2, #6
 800ade8:	9201      	str	r2, [sp, #4]
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	462b      	mov	r3, r5
 800adee:	4622      	mov	r2, r4
 800adf0:	f002 f9d2 	bl	800d198 <ip4_output_if>
 800adf4:	4603      	mov	r3, r0
 800adf6:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800adf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3720      	adds	r7, #32
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bdb0      	pop	{r4, r5, r7, pc}
 800ae04:	20006bac 	.word	0x20006bac

0800ae08 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08c      	sub	sp, #48	; 0x30
 800ae0c:	af04      	add	r7, sp, #16
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800ae16:	2200      	movs	r2, #0
 800ae18:	2114      	movs	r1, #20
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	f7fb f86e 	bl	8005efc <pbuf_alloc>
 800ae20:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d05b      	beq.n	800aee0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	895b      	ldrh	r3, [r3, #10]
 800ae2c:	2b13      	cmp	r3, #19
 800ae2e:	d806      	bhi.n	800ae3e <tcp_rst+0x36>
 800ae30:	4b2d      	ldr	r3, [pc, #180]	; (800aee8 <tcp_rst+0xe0>)
 800ae32:	f240 524c 	movw	r2, #1356	; 0x54c
 800ae36:	492d      	ldr	r1, [pc, #180]	; (800aeec <tcp_rst+0xe4>)
 800ae38:	482d      	ldr	r0, [pc, #180]	; (800aef0 <tcp_rst+0xe8>)
 800ae3a:	f003 fac7 	bl	800e3cc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800ae44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fa fa9d 	bl	8005386 <lwip_htons>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	461a      	mov	r2, r3
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800ae54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fa fa95 	bl	8005386 <lwip_htons>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	461a      	mov	r2, r3
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7fa fa9b 	bl	80053a0 <lwip_htonl>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800ae70:	68b8      	ldr	r0, [r7, #8]
 800ae72:	f7fa fa95 	bl	80053a0 <lwip_htonl>
 800ae76:	4602      	mov	r2, r0
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800ae7c:	f245 0014 	movw	r0, #20500	; 0x5014
 800ae80:	f7fa fa81 	bl	8005386 <lwip_htons>
 800ae84:	4603      	mov	r3, r0
 800ae86:	461a      	mov	r2, r3
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f042 0208 	orr.w	r2, r2, #8
 800ae94:	739a      	strb	r2, [r3, #14]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ae9c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2200      	movs	r2, #0
 800aea2:	741a      	strb	r2, [r3, #16]
 800aea4:	2200      	movs	r2, #0
 800aea6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	749a      	strb	r2, [r3, #18]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800aeb2:	6838      	ldr	r0, [r7, #0]
 800aeb4:	f001 ffc6 	bl	800ce44 <ip4_route>
 800aeb8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00b      	beq.n	800aed8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	9302      	str	r3, [sp, #8]
 800aec4:	2306      	movs	r3, #6
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	2300      	movs	r3, #0
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	23ff      	movs	r3, #255	; 0xff
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	69f8      	ldr	r0, [r7, #28]
 800aed4:	f002 f960 	bl	800d198 <ip4_output_if>
  }
  pbuf_free(p);
 800aed8:	69f8      	ldr	r0, [r7, #28]
 800aeda:	f7fb fb81 	bl	80065e0 <pbuf_free>
 800aede:	e000      	b.n	800aee2 <tcp_rst+0xda>
    return;
 800aee0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	08010774 	.word	0x08010774
 800aeec:	080107a8 	.word	0x080107a8
 800aef0:	080107d8 	.word	0x080107d8

0800aef4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d029      	beq.n	800af58 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	e002      	b.n	800af12 <tcp_rexmit_rto+0x1e>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	60fb      	str	r3, [r7, #12]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1f8      	bne.n	800af0c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af36:	2bff      	cmp	r3, #255	; 0xff
 800af38:	d007      	beq.n	800af4a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af40:	3301      	adds	r3, #1
 800af42:	b2da      	uxtb	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff fcd5 	bl	800a900 <tcp_output>
 800af56:	e000      	b.n	800af5a <tcp_rexmit_rto+0x66>
    return;
 800af58:	bf00      	nop
}
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800af60:	b590      	push	{r4, r7, lr}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d043      	beq.n	800aff8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af74:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3368      	adds	r3, #104	; 0x68
 800af82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800af84:	e002      	b.n	800af8c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d011      	beq.n	800afb8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fa f9ff 	bl	80053a0 <lwip_htonl>
 800afa2:	4604      	mov	r4, r0
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fa f9f8 	bl	80053a0 <lwip_htonl>
 800afb0:	4603      	mov	r3, r0
 800afb2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dbe6      	blt.n	800af86 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d103      	bne.n	800afd6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afdc:	2bff      	cmp	r3, #255	; 0xff
 800afde:	d007      	beq.n	800aff0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afe6:	3301      	adds	r3, #1
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	635a      	str	r2, [r3, #52]	; 0x34
 800aff6:	e000      	b.n	800affa <tcp_rexmit+0x9a>
    return;
 800aff8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	bd90      	pop	{r4, r7, pc}

0800b000 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d041      	beq.n	800b094 <tcp_rexmit_fast+0x94>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	7e9b      	ldrb	r3, [r3, #26]
 800b014:	f003 0304 	and.w	r3, r3, #4
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d13b      	bne.n	800b094 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff ff9f 	bl	800af60 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b02e:	4293      	cmp	r3, r2
 800b030:	bf28      	it	cs
 800b032:	4613      	movcs	r3, r2
 800b034:	b29b      	uxth	r3, r3
 800b036:	0fda      	lsrs	r2, r3, #31
 800b038:	4413      	add	r3, r2
 800b03a:	105b      	asrs	r3, r3, #1
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b04a:	461a      	mov	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b050:	005b      	lsls	r3, r3, #1
 800b052:	429a      	cmp	r2, r3
 800b054:	d206      	bcs.n	800b064 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b06e:	4619      	mov	r1, r3
 800b070:	0049      	lsls	r1, r1, #1
 800b072:	440b      	add	r3, r1
 800b074:	b29b      	uxth	r3, r3
 800b076:	4413      	add	r3, r2
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	7e9b      	ldrb	r3, [r3, #26]
 800b084:	f043 0304 	orr.w	r3, r3, #4
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800b094:	bf00      	nop
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08a      	sub	sp, #40	; 0x28
 800b0a0:	af04      	add	r7, sp, #16
 800b0a2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fa f978 	bl	80053a0 <lwip_htonl>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff f988 	bl	800a3cc <tcp_output_alloc_header>
 800b0bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c8:	e021      	b.n	800b10e <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f001 feb8 	bl	800ce44 <ip4_route>
 800b0d4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d102      	bne.n	800b0e2 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800b0dc:	23fc      	movs	r3, #252	; 0xfc
 800b0de:	75fb      	strb	r3, [r7, #23]
 800b0e0:	e010      	b.n	800b104 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800b0e2:	6879      	ldr	r1, [r7, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	1d1a      	adds	r2, r3, #4
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	7a98      	ldrb	r0, [r3, #10]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	2306      	movs	r3, #6
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	6938      	ldr	r0, [r7, #16]
 800b0fc:	f002 f84c 	bl	800d198 <ip4_output_if>
 800b100:	4603      	mov	r3, r0
 800b102:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800b104:	6938      	ldr	r0, [r7, #16]
 800b106:	f7fb fa6b 	bl	80065e0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b10a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b116:	b590      	push	{r4, r7, lr}
 800b118:	b08f      	sub	sp, #60	; 0x3c
 800b11a:	af04      	add	r7, sp, #16
 800b11c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b122:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b12e:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	e085      	b.n	800b246 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b13a:	6a3b      	ldr	r3, [r7, #32]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	899b      	ldrh	r3, [r3, #12]
 800b140:	b29b      	uxth	r3, r3
 800b142:	4618      	mov	r0, r3
 800b144:	f7fa f91f 	bl	8005386 <lwip_htons>
 800b148:	4603      	mov	r3, r0
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d005      	beq.n	800b15e <tcp_zero_window_probe+0x48>
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	891b      	ldrh	r3, [r3, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <tcp_zero_window_probe+0x48>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e000      	b.n	800b160 <tcp_zero_window_probe+0x4a>
 800b15e:	2300      	movs	r3, #0
 800b160:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b162:	7ffb      	ldrb	r3, [r7, #31]
 800b164:	2b00      	cmp	r3, #0
 800b166:	bf0c      	ite	eq
 800b168:	2301      	moveq	r3, #1
 800b16a:	2300      	movne	r3, #0
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	8bba      	ldrh	r2, [r7, #28]
 800b178:	2100      	movs	r1, #0
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7ff f926 	bl	800a3cc <tcp_output_alloc_header>
 800b180:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b188:	f04f 33ff 	mov.w	r3, #4294967295
 800b18c:	e05b      	b.n	800b246 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b194:	7ffb      	ldrb	r3, [r7, #31]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00e      	beq.n	800b1b8 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	899b      	ldrh	r3, [r3, #12]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b1a4:	b29c      	uxth	r4, r3
 800b1a6:	2011      	movs	r0, #17
 800b1a8:	f7fa f8ed 	bl	8005386 <lwip_htons>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	4323      	orrs	r3, r4
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	819a      	strh	r2, [r3, #12]
 800b1b6:	e010      	b.n	800b1da <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	3314      	adds	r3, #20
 800b1be:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	6858      	ldr	r0, [r3, #4]
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	891a      	ldrh	r2, [r3, #8]
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	891b      	ldrh	r3, [r3, #8]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	6939      	ldr	r1, [r7, #16]
 800b1d6:	f7fb fc01 	bl	80069dc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fa f8dd 	bl	80053a0 <lwip_htonl>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	da02      	bge.n	800b1fe <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3304      	adds	r3, #4
 800b202:	4618      	mov	r0, r3
 800b204:	f001 fe1e 	bl	800ce44 <ip4_route>
 800b208:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d103      	bne.n	800b218 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800b210:	23fc      	movs	r3, #252	; 0xfc
 800b212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b216:	e011      	b.n	800b23c <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b218:	6879      	ldr	r1, [r7, #4]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	1d1a      	adds	r2, r3, #4
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	7a98      	ldrb	r0, [r3, #10]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	9302      	str	r3, [sp, #8]
 800b226:	2306      	movs	r3, #6
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	2300      	movs	r3, #0
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	4603      	mov	r3, r0
 800b230:	69b8      	ldr	r0, [r7, #24]
 800b232:	f001 ffb1 	bl	800d198 <ip4_output_if>
 800b236:	4603      	mov	r3, r0
 800b238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b23c:	69b8      	ldr	r0, [r7, #24]
 800b23e:	f7fb f9cf 	bl	80065e0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b246:	4618      	mov	r0, r3
 800b248:	372c      	adds	r7, #44	; 0x2c
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd90      	pop	{r4, r7, pc}
	...

0800b250 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b258:	f7fb fcd2 	bl	8006c00 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b25c:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <tcpip_tcp_timer+0x38>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d103      	bne.n	800b26c <tcpip_tcp_timer+0x1c>
 800b264:	4b09      	ldr	r3, [pc, #36]	; (800b28c <tcpip_tcp_timer+0x3c>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d005      	beq.n	800b278 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b26c:	2200      	movs	r2, #0
 800b26e:	4908      	ldr	r1, [pc, #32]	; (800b290 <tcpip_tcp_timer+0x40>)
 800b270:	20fa      	movs	r0, #250	; 0xfa
 800b272:	f000 f86f 	bl	800b354 <sys_timeout>
 800b276:	e003      	b.n	800b280 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b278:	4b06      	ldr	r3, [pc, #24]	; (800b294 <tcpip_tcp_timer+0x44>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
  }
}
 800b27e:	bf00      	nop
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	20006ba8 	.word	0x20006ba8
 800b28c:	20006bb8 	.word	0x20006bb8
 800b290:	0800b251 	.word	0x0800b251
 800b294:	20000448 	.word	0x20000448

0800b298 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <tcp_timer_needed+0x30>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10f      	bne.n	800b2c4 <tcp_timer_needed+0x2c>
 800b2a4:	4b09      	ldr	r3, [pc, #36]	; (800b2cc <tcp_timer_needed+0x34>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d103      	bne.n	800b2b4 <tcp_timer_needed+0x1c>
 800b2ac:	4b08      	ldr	r3, [pc, #32]	; (800b2d0 <tcp_timer_needed+0x38>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d007      	beq.n	800b2c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b2b4:	4b04      	ldr	r3, [pc, #16]	; (800b2c8 <tcp_timer_needed+0x30>)
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4905      	ldr	r1, [pc, #20]	; (800b2d4 <tcp_timer_needed+0x3c>)
 800b2be:	20fa      	movs	r0, #250	; 0xfa
 800b2c0:	f000 f848 	bl	800b354 <sys_timeout>
  }
}
 800b2c4:	bf00      	nop
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	20000448 	.word	0x20000448
 800b2cc:	20006ba8 	.word	0x20006ba8
 800b2d0:	20006bb8 	.word	0x20006bb8
 800b2d4:	0800b251 	.word	0x0800b251

0800b2d8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	4903      	ldr	r1, [pc, #12]	; (800b300 <cyclic_timer+0x28>)
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 f82e 	bl	800b354 <sys_timeout>
}
 800b2f8:	bf00      	nop
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	0800b2d9 	.word	0x0800b2d9

0800b304 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b30a:	2301      	movs	r3, #1
 800b30c:	607b      	str	r3, [r7, #4]
 800b30e:	e00e      	b.n	800b32e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b310:	4a0d      	ldr	r2, [pc, #52]	; (800b348 <sys_timeouts_init+0x44>)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	4a0a      	ldr	r2, [pc, #40]	; (800b348 <sys_timeouts_init+0x44>)
 800b31e:	4413      	add	r3, r2
 800b320:	461a      	mov	r2, r3
 800b322:	490a      	ldr	r1, [pc, #40]	; (800b34c <sys_timeouts_init+0x48>)
 800b324:	f000 f816 	bl	800b354 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3301      	adds	r3, #1
 800b32c:	607b      	str	r3, [r7, #4]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b02      	cmp	r3, #2
 800b332:	d9ed      	bls.n	800b310 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800b334:	f7f9 ff9a 	bl	800526c <sys_now>
 800b338:	4603      	mov	r3, r0
 800b33a:	4a05      	ldr	r2, [pc, #20]	; (800b350 <sys_timeouts_init+0x4c>)
 800b33c:	6013      	str	r3, [r2, #0]
}
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	08011454 	.word	0x08011454
 800b34c:	0800b2d9 	.word	0x0800b2d9
 800b350:	20000444 	.word	0x20000444

0800b354 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b360:	2006      	movs	r0, #6
 800b362:	f7fa fbb9 	bl	8005ad8 <memp_malloc>
 800b366:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10a      	bne.n	800b384 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	f040 8084 	bne.w	800b47e <sys_timeout+0x12a>
 800b376:	4b44      	ldr	r3, [pc, #272]	; (800b488 <sys_timeout+0x134>)
 800b378:	22d4      	movs	r2, #212	; 0xd4
 800b37a:	4944      	ldr	r1, [pc, #272]	; (800b48c <sys_timeout+0x138>)
 800b37c:	4844      	ldr	r0, [pc, #272]	; (800b490 <sys_timeout+0x13c>)
 800b37e:	f003 f825 	bl	800e3cc <iprintf>
    return;
 800b382:	e07c      	b.n	800b47e <sys_timeout+0x12a>
  }

  now = sys_now();
 800b384:	f7f9 ff72 	bl	800526c <sys_now>
 800b388:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800b38a:	4b42      	ldr	r3, [pc, #264]	; (800b494 <sys_timeout+0x140>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d105      	bne.n	800b39e <sys_timeout+0x4a>
    diff = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800b396:	4a40      	ldr	r2, [pc, #256]	; (800b498 <sys_timeout+0x144>)
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	e004      	b.n	800b3a8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800b39e:	4b3e      	ldr	r3, [pc, #248]	; (800b498 <sys_timeout+0x144>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	441a      	add	r2, r3
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b3c4:	4b33      	ldr	r3, [pc, #204]	; (800b494 <sys_timeout+0x140>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d103      	bne.n	800b3d4 <sys_timeout+0x80>
    next_timeout = timeout;
 800b3cc:	4a31      	ldr	r2, [pc, #196]	; (800b494 <sys_timeout+0x140>)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	6013      	str	r3, [r2, #0]
    return;
 800b3d2:	e055      	b.n	800b480 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800b3d4:	4b2f      	ldr	r3, [pc, #188]	; (800b494 <sys_timeout+0x140>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d20f      	bcs.n	800b400 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800b3e0:	4b2c      	ldr	r3, [pc, #176]	; (800b494 <sys_timeout+0x140>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6859      	ldr	r1, [r3, #4]
 800b3e6:	4b2b      	ldr	r3, [pc, #172]	; (800b494 <sys_timeout+0x140>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	1a8a      	subs	r2, r1, r2
 800b3ee:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800b3f0:	4b28      	ldr	r3, [pc, #160]	; (800b494 <sys_timeout+0x140>)
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b3f8:	4a26      	ldr	r2, [pc, #152]	; (800b494 <sys_timeout+0x140>)
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	e03f      	b.n	800b480 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b400:	4b24      	ldr	r3, [pc, #144]	; (800b494 <sys_timeout+0x140>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	61fb      	str	r3, [r7, #28]
 800b406:	e036      	b.n	800b476 <sys_timeout+0x122>
      timeout->time -= t->time;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	1ad2      	subs	r2, r2, r3
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d006      	beq.n	800b42c <sys_timeout+0xd8>
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d921      	bls.n	800b470 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d009      	beq.n	800b448 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6859      	ldr	r1, [r3, #4]
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	1a8a      	subs	r2, r1, r2
 800b444:	605a      	str	r2, [r3, #4]
 800b446:	e00b      	b.n	800b460 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d206      	bcs.n	800b460 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800b452:	4b10      	ldr	r3, [pc, #64]	; (800b494 <sys_timeout+0x140>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	441a      	add	r2, r3
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	601a      	str	r2, [r3, #0]
        break;
 800b46e:	e007      	b.n	800b480 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	61fb      	str	r3, [r7, #28]
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1c5      	bne.n	800b408 <sys_timeout+0xb4>
 800b47c:	e000      	b.n	800b480 <sys_timeout+0x12c>
    return;
 800b47e:	bf00      	nop
      }
    }
  }
}
 800b480:	3720      	adds	r7, #32
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	08010bb8 	.word	0x08010bb8
 800b48c:	08010bec 	.word	0x08010bec
 800b490:	08010c2c 	.word	0x08010c2c
 800b494:	20000440 	.word	0x20000440
 800b498:	20000444 	.word	0x20000444

0800b49c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b4a2:	4b24      	ldr	r3, [pc, #144]	; (800b534 <sys_check_timeouts+0x98>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d040      	beq.n	800b52c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b4aa:	f7f9 fedf 	bl	800526c <sys_now>
 800b4ae:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b4b0:	4b21      	ldr	r3, [pc, #132]	; (800b538 <sys_check_timeouts+0x9c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800b4ba:	4b20      	ldr	r3, [pc, #128]	; (800b53c <sys_check_timeouts+0xa0>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <sys_check_timeouts+0x2c>
 800b4c4:	f7fa fcea 	bl	8005e9c <pbuf_free_ooseq>
      had_one = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b4cc:	4b19      	ldr	r3, [pc, #100]	; (800b534 <sys_check_timeouts+0x98>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d026      	beq.n	800b526 <sys_check_timeouts+0x8a>
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	697a      	ldr	r2, [r7, #20]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d321      	bcc.n	800b526 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	4b13      	ldr	r3, [pc, #76]	; (800b538 <sys_check_timeouts+0x9c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4a11      	ldr	r2, [pc, #68]	; (800b538 <sys_check_timeouts+0x9c>)
 800b4f2:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a0c      	ldr	r2, [pc, #48]	; (800b534 <sys_check_timeouts+0x98>)
 800b504:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b512:	68b9      	ldr	r1, [r7, #8]
 800b514:	2006      	movs	r0, #6
 800b516:	f7fa fb2b 	bl	8005b70 <memp_free>
        if (handler != NULL) {
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6838      	ldr	r0, [r7, #0]
 800b524:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b526:	7cfb      	ldrb	r3, [r7, #19]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1c6      	bne.n	800b4ba <sys_check_timeouts+0x1e>
  }
}
 800b52c:	bf00      	nop
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20000440 	.word	0x20000440
 800b538:	20000444 	.word	0x20000444
 800b53c:	20006ba0 	.word	0x20006ba0

0800b540 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b540:	b480      	push	{r7}
 800b542:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b544:	bf00      	nop
 800b546:	46bd      	mov	sp, r7
 800b548:	bc80      	pop	{r7}
 800b54a:	4770      	bx	lr

0800b54c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b556:	4b17      	ldr	r3, [pc, #92]	; (800b5b4 <udp_new_port+0x68>)
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	b291      	uxth	r1, r2
 800b55e:	4a15      	ldr	r2, [pc, #84]	; (800b5b4 <udp_new_port+0x68>)
 800b560:	8011      	strh	r1, [r2, #0]
 800b562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b566:	4293      	cmp	r3, r2
 800b568:	d103      	bne.n	800b572 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b56a:	4b12      	ldr	r3, [pc, #72]	; (800b5b4 <udp_new_port+0x68>)
 800b56c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b570:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b572:	4b11      	ldr	r3, [pc, #68]	; (800b5b8 <udp_new_port+0x6c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	e011      	b.n	800b59e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	8a5a      	ldrh	r2, [r3, #18]
 800b57e:	4b0d      	ldr	r3, [pc, #52]	; (800b5b4 <udp_new_port+0x68>)
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	429a      	cmp	r2, r3
 800b584:	d108      	bne.n	800b598 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	3301      	adds	r3, #1
 800b58a:	80fb      	strh	r3, [r7, #6]
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b592:	d3e0      	bcc.n	800b556 <udp_new_port+0xa>
        return 0;
 800b594:	2300      	movs	r3, #0
 800b596:	e007      	b.n	800b5a8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	603b      	str	r3, [r7, #0]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1ea      	bne.n	800b57a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b5a4:	4b03      	ldr	r3, [pc, #12]	; (800b5b4 <udp_new_port+0x68>)
 800b5a6:	881b      	ldrh	r3, [r3, #0]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bc80      	pop	{r7}
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20000010 	.word	0x20000010
 800b5b8:	20006bc0 	.word	0x20006bc0

0800b5bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b5ca:	79fb      	ldrb	r3, [r7, #7]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d018      	beq.n	800b602 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d013      	beq.n	800b5fe <udp_input_local_match+0x42>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00f      	beq.n	800b5fe <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b5de:	4b13      	ldr	r3, [pc, #76]	; (800b62c <udp_input_local_match+0x70>)
 800b5e0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e6:	d00a      	beq.n	800b5fe <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <udp_input_local_match+0x70>)
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	405a      	eors	r2, r3
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	3308      	adds	r3, #8
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d110      	bne.n	800b620 <udp_input_local_match+0x64>
          return 1;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e00f      	b.n	800b622 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d009      	beq.n	800b61c <udp_input_local_match+0x60>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <udp_input_local_match+0x60>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	4b05      	ldr	r3, [pc, #20]	; (800b62c <udp_input_local_match+0x70>)
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d101      	bne.n	800b620 <udp_input_local_match+0x64>
      return 1;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e000      	b.n	800b622 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	bc80      	pop	{r7}
 800b62a:	4770      	bx	lr
 800b62c:	20003678 	.word	0x20003678

0800b630 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b08d      	sub	sp, #52	; 0x34
 800b634:	af02      	add	r7, sp, #8
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	895b      	ldrh	r3, [r3, #10]
 800b642:	2b07      	cmp	r3, #7
 800b644:	d803      	bhi.n	800b64e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7fa ffca 	bl	80065e0 <pbuf_free>
    goto end;
 800b64c:	e0c6      	b.n	800b7dc <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b654:	4b63      	ldr	r3, [pc, #396]	; (800b7e4 <udp_input+0x1b4>)
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	4a62      	ldr	r2, [pc, #392]	; (800b7e4 <udp_input+0x1b4>)
 800b65a:	6812      	ldr	r2, [r2, #0]
 800b65c:	4611      	mov	r1, r2
 800b65e:	4618      	mov	r0, r3
 800b660:	f001 fe6c 	bl	800d33c <ip4_addr_isbroadcast_u32>
 800b664:	4603      	mov	r3, r0
 800b666:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f9 fe89 	bl	8005386 <lwip_htons>
 800b674:	4603      	mov	r3, r0
 800b676:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	885b      	ldrh	r3, [r3, #2]
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	4618      	mov	r0, r3
 800b680:	f7f9 fe81 	bl	8005386 <lwip_htons>
 800b684:	4603      	mov	r3, r0
 800b686:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b688:	2300      	movs	r3, #0
 800b68a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b68c:	2300      	movs	r3, #0
 800b68e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b694:	4b54      	ldr	r3, [pc, #336]	; (800b7e8 <udp_input+0x1b8>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	627b      	str	r3, [r7, #36]	; 0x24
 800b69a:	e03b      	b.n	800b714 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	8a5b      	ldrh	r3, [r3, #18]
 800b6a0:	89fa      	ldrh	r2, [r7, #14]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d131      	bne.n	800b70a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b6a6:	7cfb      	ldrb	r3, [r7, #19]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6ae:	f7ff ff85 	bl	800b5bc <udp_input_local_match>
 800b6b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d028      	beq.n	800b70a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	7c1b      	ldrb	r3, [r3, #16]
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <udp_input+0x9e>
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	8a9b      	ldrh	r3, [r3, #20]
 800b6d2:	8a3a      	ldrh	r2, [r7, #16]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d118      	bne.n	800b70a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d005      	beq.n	800b6ec <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	685a      	ldr	r2, [r3, #4]
 800b6e4:	4b3f      	ldr	r3, [pc, #252]	; (800b7e4 <udp_input+0x1b4>)
 800b6e6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d10e      	bne.n	800b70a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b6ec:	6a3b      	ldr	r3, [r7, #32]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d014      	beq.n	800b71c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f4:	68da      	ldr	r2, [r3, #12]
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b6fa:	4b3b      	ldr	r3, [pc, #236]	; (800b7e8 <udp_input+0x1b8>)
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b700:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b702:	4a39      	ldr	r2, [pc, #228]	; (800b7e8 <udp_input+0x1b8>)
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b708:	e008      	b.n	800b71c <udp_input+0xec>
      }
    }

    prev = pcb;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	627b      	str	r3, [r7, #36]	; 0x24
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1c0      	bne.n	800b69c <udp_input+0x6c>
 800b71a:	e000      	b.n	800b71e <udp_input+0xee>
        break;
 800b71c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <udp_input+0xf8>
    pcb = uncon_pcb;
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <udp_input+0x104>
    for_us = 1;
 800b72e:	2301      	movs	r3, #1
 800b730:	76fb      	strb	r3, [r7, #27]
 800b732:	e00a      	b.n	800b74a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	3304      	adds	r3, #4
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b2a      	ldr	r3, [pc, #168]	; (800b7e4 <udp_input+0x1b4>)
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	429a      	cmp	r2, r3
 800b740:	bf0c      	ite	eq
 800b742:	2301      	moveq	r3, #1
 800b744:	2300      	movne	r3, #0
 800b746:	b2db      	uxtb	r3, r3
 800b748:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b74a:	7efb      	ldrb	r3, [r7, #27]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d042      	beq.n	800b7d6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b750:	f06f 0107 	mvn.w	r1, #7
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7fa ff1f 	bl	8006598 <pbuf_header>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00a      	beq.n	800b776 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b760:	4b22      	ldr	r3, [pc, #136]	; (800b7ec <udp_input+0x1bc>)
 800b762:	f240 1255 	movw	r2, #341	; 0x155
 800b766:	4922      	ldr	r1, [pc, #136]	; (800b7f0 <udp_input+0x1c0>)
 800b768:	4822      	ldr	r0, [pc, #136]	; (800b7f4 <udp_input+0x1c4>)
 800b76a:	f002 fe2f 	bl	800e3cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7fa ff36 	bl	80065e0 <pbuf_free>
      goto end;
 800b774:	e032      	b.n	800b7dc <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d012      	beq.n	800b7a2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00a      	beq.n	800b79a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	699c      	ldr	r4, [r3, #24]
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	69d8      	ldr	r0, [r3, #28]
 800b78c:	8a3b      	ldrh	r3, [r7, #16]
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	4b19      	ldr	r3, [pc, #100]	; (800b7f8 <udp_input+0x1c8>)
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b796:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b798:	e021      	b.n	800b7de <udp_input+0x1ae>
        pbuf_free(p);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7fa ff20 	bl	80065e0 <pbuf_free>
        goto end;
 800b7a0:	e01c      	b.n	800b7dc <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b7a2:	7cfb      	ldrb	r3, [r7, #19]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d112      	bne.n	800b7ce <udp_input+0x19e>
 800b7a8:	4b0e      	ldr	r3, [pc, #56]	; (800b7e4 <udp_input+0x1b4>)
 800b7aa:	695b      	ldr	r3, [r3, #20]
 800b7ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7b0:	2be0      	cmp	r3, #224	; 0xe0
 800b7b2:	d00c      	beq.n	800b7ce <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b7b4:	4b0b      	ldr	r3, [pc, #44]	; (800b7e4 <udp_input+0x1b4>)
 800b7b6:	899b      	ldrh	r3, [r3, #12]
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	b21b      	sxth	r3, r3
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7fa fefb 	bl	80065bc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b7c6:	2103      	movs	r1, #3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 fab3 	bl	800cd34 <icmp_dest_unreach>
      pbuf_free(p);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7fa ff06 	bl	80065e0 <pbuf_free>
  return;
 800b7d4:	e003      	b.n	800b7de <udp_input+0x1ae>
    pbuf_free(p);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7fa ff02 	bl	80065e0 <pbuf_free>
  return;
 800b7dc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b7de:	372c      	adds	r7, #44	; 0x2c
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd90      	pop	{r4, r7, pc}
 800b7e4:	20003678 	.word	0x20003678
 800b7e8:	20006bc0 	.word	0x20006bc0
 800b7ec:	08010c54 	.word	0x08010c54
 800b7f0:	08010c84 	.word	0x08010c84
 800b7f4:	08010c98 	.word	0x08010c98
 800b7f8:	20003688 	.word	0x20003688

0800b7fc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d102      	bne.n	800b812 <udp_send+0x16>
    return ERR_VAL;
 800b80c:	f06f 0305 	mvn.w	r3, #5
 800b810:	e008      	b.n	800b824 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	1d1a      	adds	r2, r3, #4
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	8a9b      	ldrh	r3, [r3, #20]
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f805 	bl	800b82c <udp_sendto>
 800b822:	4603      	mov	r3, r0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af02      	add	r7, sp, #8
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <udp_sendto+0x1e>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <udp_sendto+0x24>
    return ERR_VAL;
 800b84a:	f06f 0305 	mvn.w	r3, #5
 800b84e:	e013      	b.n	800b878 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800b850:	6978      	ldr	r0, [r7, #20]
 800b852:	f001 faf7 	bl	800ce44 <ip4_route>
 800b856:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b85e:	f06f 0303 	mvn.w	r3, #3
 800b862:	e009      	b.n	800b878 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b864:	887a      	ldrh	r2, [r7, #2]
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	4613      	mov	r3, r2
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 f805 	bl	800b880 <udp_sendto_if>
 800b876:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af02      	add	r7, sp, #8
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <udp_sendto_if+0x1a>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <udp_sendto_if+0x20>
    return ERR_VAL;
 800b89a:	f06f 0305 	mvn.w	r3, #5
 800b89e:	e028      	b.n	800b8f2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d009      	beq.n	800b8ba <udp_sendto_if+0x3a>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d005      	beq.n	800b8ba <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b8b6:	2be0      	cmp	r3, #224	; 0xe0
 800b8b8:	d103      	bne.n	800b8c2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	617b      	str	r3, [r7, #20]
 800b8c0:	e00b      	b.n	800b8da <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d002      	beq.n	800b8d6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800b8d0:	f06f 0303 	mvn.w	r3, #3
 800b8d4:	e00d      	b.n	800b8f2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b8da:	887a      	ldrh	r2, [r7, #2]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	68b9      	ldr	r1, [r7, #8]
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f000 f806 	bl	800b8fc <udp_sendto_if_src>
 800b8f0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08c      	sub	sp, #48	; 0x30
 800b900:	af04      	add	r7, sp, #16
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <udp_sendto_if_src+0x1a>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d102      	bne.n	800b91c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800b916:	f06f 0305 	mvn.w	r3, #5
 800b91a:	e07e      	b.n	800ba1a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8a5b      	ldrh	r3, [r3, #18]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10f      	bne.n	800b944 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b924:	68f9      	ldr	r1, [r7, #12]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	8a5b      	ldrh	r3, [r3, #18]
 800b92a:	461a      	mov	r2, r3
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f000 f87f 	bl	800ba30 <udp_bind>
 800b932:	4603      	mov	r3, r0
 800b934:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b936:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b93e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b942:	e06a      	b.n	800ba1a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800b944:	2108      	movs	r1, #8
 800b946:	68b8      	ldr	r0, [r7, #8]
 800b948:	f7fa fe26 	bl	8006598 <pbuf_header>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d014      	beq.n	800b97c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b952:	2200      	movs	r2, #0
 800b954:	2108      	movs	r1, #8
 800b956:	2001      	movs	r0, #1
 800b958:	f7fa fad0 	bl	8005efc <pbuf_alloc>
 800b95c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b964:	f04f 33ff 	mov.w	r3, #4294967295
 800b968:	e057      	b.n	800ba1a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	891b      	ldrh	r3, [r3, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d006      	beq.n	800b980 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	69f8      	ldr	r0, [r7, #28]
 800b976:	f7fa ff55 	bl	8006824 <pbuf_chain>
 800b97a:	e001      	b.n	800b980 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	895b      	ldrh	r3, [r3, #10]
 800b984:	2b07      	cmp	r3, #7
 800b986:	d806      	bhi.n	800b996 <udp_sendto_if_src+0x9a>
 800b988:	4b26      	ldr	r3, [pc, #152]	; (800ba24 <udp_sendto_if_src+0x128>)
 800b98a:	f240 22db 	movw	r2, #731	; 0x2db
 800b98e:	4926      	ldr	r1, [pc, #152]	; (800ba28 <udp_sendto_if_src+0x12c>)
 800b990:	4826      	ldr	r0, [pc, #152]	; (800ba2c <udp_sendto_if_src+0x130>)
 800b992:	f002 fd1b 	bl	800e3cc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	8a5b      	ldrh	r3, [r3, #18]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f9 fcf0 	bl	8005386 <lwip_htons>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b9ae:	887b      	ldrh	r3, [r7, #2]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7f9 fce8 	bl	8005386 <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	719a      	strb	r2, [r3, #6]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	891b      	ldrh	r3, [r3, #8]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f9 fcda 	bl	8005386 <lwip_htons>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b9da:	2311      	movs	r3, #17
 800b9dc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	7a9b      	ldrb	r3, [r3, #10]
 800b9e2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	7a5b      	ldrb	r3, [r3, #9]
 800b9e8:	7cb9      	ldrb	r1, [r7, #18]
 800b9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9ec:	9202      	str	r2, [sp, #8]
 800b9ee:	7cfa      	ldrb	r2, [r7, #19]
 800b9f0:	9201      	str	r2, [sp, #4]
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9fa:	69f8      	ldr	r0, [r7, #28]
 800b9fc:	f001 fbf6 	bl	800d1ec <ip4_output_if_src>
 800ba00:	4603      	mov	r3, r0
 800ba02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ba04:	69fa      	ldr	r2, [r7, #28]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d004      	beq.n	800ba16 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800ba0c:	69f8      	ldr	r0, [r7, #28]
 800ba0e:	f7fa fde7 	bl	80065e0 <pbuf_free>
    q = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ba16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3720      	adds	r7, #32
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	08010c54 	.word	0x08010c54
 800ba28:	08010cc0 	.word	0x08010cc0
 800ba2c:	08010c98 	.word	0x08010c98

0800ba30 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ba44:	4b30      	ldr	r3, [pc, #192]	; (800bb08 <udp_bind+0xd8>)
 800ba46:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <udp_bind+0x24>
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d102      	bne.n	800ba5a <udp_bind+0x2a>
    return ERR_VAL;
 800ba54:	f06f 0305 	mvn.w	r3, #5
 800ba58:	e052      	b.n	800bb00 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba5e:	4b2b      	ldr	r3, [pc, #172]	; (800bb0c <udp_bind+0xdc>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	617b      	str	r3, [r7, #20]
 800ba64:	e009      	b.n	800ba7a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d102      	bne.n	800ba74 <udp_bind+0x44>
      rebind = 1;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	74fb      	strb	r3, [r7, #19]
      break;
 800ba72:	e005      	b.n	800ba80 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1f2      	bne.n	800ba66 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800ba80:	88fb      	ldrh	r3, [r7, #6]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d109      	bne.n	800ba9a <udp_bind+0x6a>
    port = udp_new_port();
 800ba86:	f7ff fd61 	bl	800b54c <udp_new_port>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ba8e:	88fb      	ldrh	r3, [r7, #6]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d11e      	bne.n	800bad2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ba94:	f06f 0307 	mvn.w	r3, #7
 800ba98:	e032      	b.n	800bb00 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba9a:	4b1c      	ldr	r3, [pc, #112]	; (800bb0c <udp_bind+0xdc>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	e014      	b.n	800bacc <udp_bind+0x9c>
      if (pcb != ipcb) {
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d00d      	beq.n	800bac6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	8a5b      	ldrh	r3, [r3, #18]
 800baae:	88fa      	ldrh	r2, [r7, #6]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d108      	bne.n	800bac6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800babc:	429a      	cmp	r2, r3
 800babe:	d102      	bne.n	800bac6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800bac0:	f06f 0307 	mvn.w	r3, #7
 800bac4:	e01c      	b.n	800bb00 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	617b      	str	r3, [r7, #20]
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e7      	bne.n	800baa2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <udp_bind+0xae>
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	e000      	b.n	800bae0 <udp_bind+0xb0>
 800bade:	2300      	movs	r3, #0
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	88fa      	ldrh	r2, [r7, #6]
 800bae8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800baea:	7cfb      	ldrb	r3, [r7, #19]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d106      	bne.n	800bafe <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800baf0:	4b06      	ldr	r3, [pc, #24]	; (800bb0c <udp_bind+0xdc>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800baf8:	4a04      	ldr	r2, [pc, #16]	; (800bb0c <udp_bind+0xdc>)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	0801146c 	.word	0x0801146c
 800bb0c:	20006bc0 	.word	0x20006bc0

0800bb10 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <udp_connect+0x1a>
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <udp_connect+0x20>
    return ERR_VAL;
 800bb2a:	f06f 0305 	mvn.w	r3, #5
 800bb2e:	e03e      	b.n	800bbae <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	8a5b      	ldrh	r3, [r3, #18]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10f      	bne.n	800bb58 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bb38:	68f9      	ldr	r1, [r7, #12]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	8a5b      	ldrh	r3, [r3, #18]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff ff75 	bl	800ba30 <udp_bind>
 800bb46:	4603      	mov	r3, r0
 800bb48:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bb4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d002      	beq.n	800bb58 <udp_connect+0x48>
      return err;
 800bb52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb56:	e02a      	b.n	800bbae <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <udp_connect+0x54>
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	e000      	b.n	800bb66 <udp_connect+0x56>
 800bb64:	2300      	movs	r3, #0
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	88fa      	ldrh	r2, [r7, #6]
 800bb6e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	7c1b      	ldrb	r3, [r3, #16]
 800bb74:	f043 0304 	orr.w	r3, r3, #4
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb7e:	4b0e      	ldr	r3, [pc, #56]	; (800bbb8 <udp_connect+0xa8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	e008      	b.n	800bb98 <udp_connect+0x88>
    if (pcb == ipcb) {
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d101      	bne.n	800bb92 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e00d      	b.n	800bbae <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	617b      	str	r3, [r7, #20]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1f3      	bne.n	800bb86 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bb9e:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <udp_connect+0xa8>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bba6:	4a04      	ldr	r2, [pc, #16]	; (800bbb8 <udp_connect+0xa8>)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20006bc0 	.word	0x20006bc0

0800bbbc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7c1b      	ldrb	r3, [r3, #16]
 800bbd4:	f023 0304 	bic.w	r3, r3, #4
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	741a      	strb	r2, [r3, #16]
}
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bc80      	pop	{r7}
 800bbe6:	4770      	bx	lr

0800bbe8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	61da      	str	r2, [r3, #28]
}
 800bc00:	bf00      	nop
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bc80      	pop	{r7}
 800bc08:	4770      	bx	lr
	...

0800bc0c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800bc14:	4b15      	ldr	r3, [pc, #84]	; (800bc6c <udp_remove+0x60>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d105      	bne.n	800bc2a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800bc1e:	4b13      	ldr	r3, [pc, #76]	; (800bc6c <udp_remove+0x60>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	4a11      	ldr	r2, [pc, #68]	; (800bc6c <udp_remove+0x60>)
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	e017      	b.n	800bc5a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bc2a:	4b10      	ldr	r3, [pc, #64]	; (800bc6c <udp_remove+0x60>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]
 800bc30:	e010      	b.n	800bc54 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d009      	beq.n	800bc4e <udp_remove+0x42>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d104      	bne.n	800bc4e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68da      	ldr	r2, [r3, #12]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	60da      	str	r2, [r3, #12]
        break;
 800bc4c:	e005      	b.n	800bc5a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1eb      	bne.n	800bc32 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800bc5a:	6879      	ldr	r1, [r7, #4]
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f7f9 ff87 	bl	8005b70 <memp_free>
}
 800bc62:	bf00      	nop
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20006bc0 	.word	0x20006bc0

0800bc70 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bc76:	2000      	movs	r0, #0
 800bc78:	f7f9 ff2e 	bl	8005ad8 <memp_malloc>
 800bc7c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d007      	beq.n	800bc94 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bc84:	2220      	movs	r2, #32
 800bc86:	2100      	movs	r1, #0
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f002 faf1 	bl	800e270 <memset>
    pcb->ttl = UDP_TTL;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	22ff      	movs	r2, #255	; 0xff
 800bc92:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bc94:	687b      	ldr	r3, [r7, #4]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
	...

0800bca0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d01e      	beq.n	800bcee <udp_netif_ip_addr_changed+0x4e>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d01a      	beq.n	800bcee <udp_netif_ip_addr_changed+0x4e>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d017      	beq.n	800bcee <udp_netif_ip_addr_changed+0x4e>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d013      	beq.n	800bcee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <udp_netif_ip_addr_changed+0x58>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	e00c      	b.n	800bce8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d103      	bne.n	800bce2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1ef      	bne.n	800bcce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bcee:	bf00      	nop
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bc80      	pop	{r7}
 800bcf6:	4770      	bx	lr
 800bcf8:	20006bc0 	.word	0x20006bc0

0800bcfc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bd04:	4915      	ldr	r1, [pc, #84]	; (800bd5c <etharp_free_entry+0x60>)
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	4613      	mov	r3, r2
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	4413      	add	r3, r2
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	440b      	add	r3, r1
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d013      	beq.n	800bd40 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bd18:	4910      	ldr	r1, [pc, #64]	; (800bd5c <etharp_free_entry+0x60>)
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	4413      	add	r3, r2
 800bd22:	00db      	lsls	r3, r3, #3
 800bd24:	440b      	add	r3, r1
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fa fc59 	bl	80065e0 <pbuf_free>
    arp_table[i].q = NULL;
 800bd2e:	490b      	ldr	r1, [pc, #44]	; (800bd5c <etharp_free_entry+0x60>)
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	4613      	mov	r3, r2
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	4413      	add	r3, r2
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	440b      	add	r3, r1
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bd40:	4906      	ldr	r1, [pc, #24]	; (800bd5c <etharp_free_entry+0x60>)
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	4613      	mov	r3, r2
 800bd46:	005b      	lsls	r3, r3, #1
 800bd48:	4413      	add	r3, r2
 800bd4a:	00db      	lsls	r3, r3, #3
 800bd4c:	440b      	add	r3, r1
 800bd4e:	3314      	adds	r3, #20
 800bd50:	2200      	movs	r2, #0
 800bd52:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	2000044c 	.word	0x2000044c

0800bd60 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd66:	2300      	movs	r3, #0
 800bd68:	71fb      	strb	r3, [r7, #7]
 800bd6a:	e096      	b.n	800be9a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bd6c:	79fa      	ldrb	r2, [r7, #7]
 800bd6e:	494f      	ldr	r1, [pc, #316]	; (800beac <etharp_tmr+0x14c>)
 800bd70:	4613      	mov	r3, r2
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	4413      	add	r3, r2
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	440b      	add	r3, r1
 800bd7a:	3314      	adds	r3, #20
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800bd80:	79bb      	ldrb	r3, [r7, #6]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 8086 	beq.w	800be94 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800bd88:	79fa      	ldrb	r2, [r7, #7]
 800bd8a:	4948      	ldr	r1, [pc, #288]	; (800beac <etharp_tmr+0x14c>)
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	4413      	add	r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	440b      	add	r3, r1
 800bd96:	3312      	adds	r3, #18
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	b298      	uxth	r0, r3
 800bd9e:	4943      	ldr	r1, [pc, #268]	; (800beac <etharp_tmr+0x14c>)
 800bda0:	4613      	mov	r3, r2
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	4413      	add	r3, r2
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	440b      	add	r3, r1
 800bdaa:	3312      	adds	r3, #18
 800bdac:	4602      	mov	r2, r0
 800bdae:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bdb0:	79fa      	ldrb	r2, [r7, #7]
 800bdb2:	493e      	ldr	r1, [pc, #248]	; (800beac <etharp_tmr+0x14c>)
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	4413      	add	r3, r2
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	440b      	add	r3, r1
 800bdbe:	3312      	adds	r3, #18
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bdc6:	d215      	bcs.n	800bdf4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bdc8:	79fa      	ldrb	r2, [r7, #7]
 800bdca:	4938      	ldr	r1, [pc, #224]	; (800beac <etharp_tmr+0x14c>)
 800bdcc:	4613      	mov	r3, r2
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	4413      	add	r3, r2
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	440b      	add	r3, r1
 800bdd6:	3314      	adds	r3, #20
 800bdd8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d10f      	bne.n	800bdfe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bdde:	79fa      	ldrb	r2, [r7, #7]
 800bde0:	4932      	ldr	r1, [pc, #200]	; (800beac <etharp_tmr+0x14c>)
 800bde2:	4613      	mov	r3, r2
 800bde4:	005b      	lsls	r3, r3, #1
 800bde6:	4413      	add	r3, r2
 800bde8:	00db      	lsls	r3, r3, #3
 800bdea:	440b      	add	r3, r1
 800bdec:	3312      	adds	r3, #18
 800bdee:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d904      	bls.n	800bdfe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bdf4:	79fb      	ldrb	r3, [r7, #7]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff ff80 	bl	800bcfc <etharp_free_entry>
 800bdfc:	e04a      	b.n	800be94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bdfe:	79fa      	ldrb	r2, [r7, #7]
 800be00:	492a      	ldr	r1, [pc, #168]	; (800beac <etharp_tmr+0x14c>)
 800be02:	4613      	mov	r3, r2
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	4413      	add	r3, r2
 800be08:	00db      	lsls	r3, r3, #3
 800be0a:	440b      	add	r3, r1
 800be0c:	3314      	adds	r3, #20
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	2b03      	cmp	r3, #3
 800be12:	d10a      	bne.n	800be2a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800be14:	79fa      	ldrb	r2, [r7, #7]
 800be16:	4925      	ldr	r1, [pc, #148]	; (800beac <etharp_tmr+0x14c>)
 800be18:	4613      	mov	r3, r2
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	4413      	add	r3, r2
 800be1e:	00db      	lsls	r3, r3, #3
 800be20:	440b      	add	r3, r1
 800be22:	3314      	adds	r3, #20
 800be24:	2204      	movs	r2, #4
 800be26:	701a      	strb	r2, [r3, #0]
 800be28:	e034      	b.n	800be94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800be2a:	79fa      	ldrb	r2, [r7, #7]
 800be2c:	491f      	ldr	r1, [pc, #124]	; (800beac <etharp_tmr+0x14c>)
 800be2e:	4613      	mov	r3, r2
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	4413      	add	r3, r2
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	440b      	add	r3, r1
 800be38:	3314      	adds	r3, #20
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	d10a      	bne.n	800be56 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800be40:	79fa      	ldrb	r2, [r7, #7]
 800be42:	491a      	ldr	r1, [pc, #104]	; (800beac <etharp_tmr+0x14c>)
 800be44:	4613      	mov	r3, r2
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	4413      	add	r3, r2
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	440b      	add	r3, r1
 800be4e:	3314      	adds	r3, #20
 800be50:	2202      	movs	r2, #2
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e01e      	b.n	800be94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800be56:	79fa      	ldrb	r2, [r7, #7]
 800be58:	4914      	ldr	r1, [pc, #80]	; (800beac <etharp_tmr+0x14c>)
 800be5a:	4613      	mov	r3, r2
 800be5c:	005b      	lsls	r3, r3, #1
 800be5e:	4413      	add	r3, r2
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	440b      	add	r3, r1
 800be64:	3314      	adds	r3, #20
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d113      	bne.n	800be94 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800be6c:	79fa      	ldrb	r2, [r7, #7]
 800be6e:	490f      	ldr	r1, [pc, #60]	; (800beac <etharp_tmr+0x14c>)
 800be70:	4613      	mov	r3, r2
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	4413      	add	r3, r2
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	440b      	add	r3, r1
 800be7a:	3308      	adds	r3, #8
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	79fa      	ldrb	r2, [r7, #7]
 800be80:	4613      	mov	r3, r2
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	4413      	add	r3, r2
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	4a08      	ldr	r2, [pc, #32]	; (800beac <etharp_tmr+0x14c>)
 800be8a:	4413      	add	r3, r2
 800be8c:	3304      	adds	r3, #4
 800be8e:	4619      	mov	r1, r3
 800be90:	f000 fe38 	bl	800cb04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	3301      	adds	r3, #1
 800be98:	71fb      	strb	r3, [r7, #7]
 800be9a:	79fb      	ldrb	r3, [r7, #7]
 800be9c:	2b09      	cmp	r3, #9
 800be9e:	f67f af65 	bls.w	800bd6c <etharp_tmr+0xc>
      }
    }
  }
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	2000044c 	.word	0x2000044c

0800beb0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b088      	sub	sp, #32
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	460b      	mov	r3, r1
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bebe:	230a      	movs	r3, #10
 800bec0:	77fb      	strb	r3, [r7, #31]
 800bec2:	230a      	movs	r3, #10
 800bec4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800bec6:	230a      	movs	r3, #10
 800bec8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800bece:	230a      	movs	r3, #10
 800bed0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bed2:	2300      	movs	r3, #0
 800bed4:	833b      	strh	r3, [r7, #24]
 800bed6:	2300      	movs	r3, #0
 800bed8:	82fb      	strh	r3, [r7, #22]
 800beda:	2300      	movs	r3, #0
 800bedc:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bede:	2300      	movs	r3, #0
 800bee0:	773b      	strb	r3, [r7, #28]
 800bee2:	e093      	b.n	800c00c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800bee4:	7f3a      	ldrb	r2, [r7, #28]
 800bee6:	4990      	ldr	r1, [pc, #576]	; (800c128 <etharp_find_entry+0x278>)
 800bee8:	4613      	mov	r3, r2
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	4413      	add	r3, r2
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	440b      	add	r3, r1
 800bef2:	3314      	adds	r3, #20
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bef8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800befc:	2b0a      	cmp	r3, #10
 800befe:	d105      	bne.n	800bf0c <etharp_find_entry+0x5c>
 800bf00:	7cfb      	ldrb	r3, [r7, #19]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800bf06:	7f3b      	ldrb	r3, [r7, #28]
 800bf08:	777b      	strb	r3, [r7, #29]
 800bf0a:	e07c      	b.n	800c006 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bf0c:	7cfb      	ldrb	r3, [r7, #19]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d079      	beq.n	800c006 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bf12:	7cfb      	ldrb	r3, [r7, #19]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d009      	beq.n	800bf2c <etharp_find_entry+0x7c>
 800bf18:	7cfb      	ldrb	r3, [r7, #19]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d806      	bhi.n	800bf2c <etharp_find_entry+0x7c>
 800bf1e:	4b83      	ldr	r3, [pc, #524]	; (800c12c <etharp_find_entry+0x27c>)
 800bf20:	f240 1225 	movw	r2, #293	; 0x125
 800bf24:	4982      	ldr	r1, [pc, #520]	; (800c130 <etharp_find_entry+0x280>)
 800bf26:	4883      	ldr	r0, [pc, #524]	; (800c134 <etharp_find_entry+0x284>)
 800bf28:	f002 fa50 	bl	800e3cc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00f      	beq.n	800bf52 <etharp_find_entry+0xa2>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6819      	ldr	r1, [r3, #0]
 800bf36:	7f3a      	ldrb	r2, [r7, #28]
 800bf38:	487b      	ldr	r0, [pc, #492]	; (800c128 <etharp_find_entry+0x278>)
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	4413      	add	r3, r2
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	4403      	add	r3, r0
 800bf44:	3304      	adds	r3, #4
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4299      	cmp	r1, r3
 800bf4a:	d102      	bne.n	800bf52 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bf4c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bf50:	e0e5      	b.n	800c11e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bf52:	7cfb      	ldrb	r3, [r7, #19]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d13b      	bne.n	800bfd0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bf58:	7f3a      	ldrb	r2, [r7, #28]
 800bf5a:	4973      	ldr	r1, [pc, #460]	; (800c128 <etharp_find_entry+0x278>)
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	4413      	add	r3, r2
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	440b      	add	r3, r1
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d018      	beq.n	800bf9e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800bf6c:	7f3a      	ldrb	r2, [r7, #28]
 800bf6e:	496e      	ldr	r1, [pc, #440]	; (800c128 <etharp_find_entry+0x278>)
 800bf70:	4613      	mov	r3, r2
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	4413      	add	r3, r2
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	440b      	add	r3, r1
 800bf7a:	3312      	adds	r3, #18
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	8b3a      	ldrh	r2, [r7, #24]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d840      	bhi.n	800c006 <etharp_find_entry+0x156>
            old_queue = i;
 800bf84:	7f3b      	ldrb	r3, [r7, #28]
 800bf86:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800bf88:	7f3a      	ldrb	r2, [r7, #28]
 800bf8a:	4967      	ldr	r1, [pc, #412]	; (800c128 <etharp_find_entry+0x278>)
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	4413      	add	r3, r2
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	440b      	add	r3, r1
 800bf96:	3312      	adds	r3, #18
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	833b      	strh	r3, [r7, #24]
 800bf9c:	e033      	b.n	800c006 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bf9e:	7f3a      	ldrb	r2, [r7, #28]
 800bfa0:	4961      	ldr	r1, [pc, #388]	; (800c128 <etharp_find_entry+0x278>)
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	440b      	add	r3, r1
 800bfac:	3312      	adds	r3, #18
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	8afa      	ldrh	r2, [r7, #22]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d827      	bhi.n	800c006 <etharp_find_entry+0x156>
            old_pending = i;
 800bfb6:	7f3b      	ldrb	r3, [r7, #28]
 800bfb8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800bfba:	7f3a      	ldrb	r2, [r7, #28]
 800bfbc:	495a      	ldr	r1, [pc, #360]	; (800c128 <etharp_find_entry+0x278>)
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	005b      	lsls	r3, r3, #1
 800bfc2:	4413      	add	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	440b      	add	r3, r1
 800bfc8:	3312      	adds	r3, #18
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	82fb      	strh	r3, [r7, #22]
 800bfce:	e01a      	b.n	800c006 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bfd0:	7cfb      	ldrb	r3, [r7, #19]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d917      	bls.n	800c006 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bfd6:	7f3a      	ldrb	r2, [r7, #28]
 800bfd8:	4953      	ldr	r1, [pc, #332]	; (800c128 <etharp_find_entry+0x278>)
 800bfda:	4613      	mov	r3, r2
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	4413      	add	r3, r2
 800bfe0:	00db      	lsls	r3, r3, #3
 800bfe2:	440b      	add	r3, r1
 800bfe4:	3312      	adds	r3, #18
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	8aba      	ldrh	r2, [r7, #20]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d80b      	bhi.n	800c006 <etharp_find_entry+0x156>
            old_stable = i;
 800bfee:	7f3b      	ldrb	r3, [r7, #28]
 800bff0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800bff2:	7f3a      	ldrb	r2, [r7, #28]
 800bff4:	494c      	ldr	r1, [pc, #304]	; (800c128 <etharp_find_entry+0x278>)
 800bff6:	4613      	mov	r3, r2
 800bff8:	005b      	lsls	r3, r3, #1
 800bffa:	4413      	add	r3, r2
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	440b      	add	r3, r1
 800c000:	3312      	adds	r3, #18
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c006:	7f3b      	ldrb	r3, [r7, #28]
 800c008:	3301      	adds	r3, #1
 800c00a:	773b      	strb	r3, [r7, #28]
 800c00c:	7f3b      	ldrb	r3, [r7, #28]
 800c00e:	2b09      	cmp	r3, #9
 800c010:	f67f af68 	bls.w	800bee4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c014:	7afb      	ldrb	r3, [r7, #11]
 800c016:	f003 0302 	and.w	r3, r3, #2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d108      	bne.n	800c030 <etharp_find_entry+0x180>
 800c01e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c022:	2b0a      	cmp	r3, #10
 800c024:	d107      	bne.n	800c036 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c026:	7afb      	ldrb	r3, [r7, #11]
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d102      	bne.n	800c036 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800c030:	f04f 33ff 	mov.w	r3, #4294967295
 800c034:	e073      	b.n	800c11e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c036:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c03a:	2b09      	cmp	r3, #9
 800c03c:	dc02      	bgt.n	800c044 <etharp_find_entry+0x194>
    i = empty;
 800c03e:	7f7b      	ldrb	r3, [r7, #29]
 800c040:	773b      	strb	r3, [r7, #28]
 800c042:	e036      	b.n	800c0b2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c044:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c048:	2b09      	cmp	r3, #9
 800c04a:	dc13      	bgt.n	800c074 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800c04c:	7fbb      	ldrb	r3, [r7, #30]
 800c04e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c050:	7f3a      	ldrb	r2, [r7, #28]
 800c052:	4935      	ldr	r1, [pc, #212]	; (800c128 <etharp_find_entry+0x278>)
 800c054:	4613      	mov	r3, r2
 800c056:	005b      	lsls	r3, r3, #1
 800c058:	4413      	add	r3, r2
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	440b      	add	r3, r1
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d018      	beq.n	800c096 <etharp_find_entry+0x1e6>
 800c064:	4b31      	ldr	r3, [pc, #196]	; (800c12c <etharp_find_entry+0x27c>)
 800c066:	f240 126f 	movw	r2, #367	; 0x16f
 800c06a:	4933      	ldr	r1, [pc, #204]	; (800c138 <etharp_find_entry+0x288>)
 800c06c:	4831      	ldr	r0, [pc, #196]	; (800c134 <etharp_find_entry+0x284>)
 800c06e:	f002 f9ad 	bl	800e3cc <iprintf>
 800c072:	e010      	b.n	800c096 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c074:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c078:	2b09      	cmp	r3, #9
 800c07a:	dc02      	bgt.n	800c082 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800c07c:	7ffb      	ldrb	r3, [r7, #31]
 800c07e:	773b      	strb	r3, [r7, #28]
 800c080:	e009      	b.n	800c096 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c082:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c086:	2b09      	cmp	r3, #9
 800c088:	dc02      	bgt.n	800c090 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c08a:	7efb      	ldrb	r3, [r7, #27]
 800c08c:	773b      	strb	r3, [r7, #28]
 800c08e:	e002      	b.n	800c096 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800c090:	f04f 33ff 	mov.w	r3, #4294967295
 800c094:	e043      	b.n	800c11e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c096:	7f3b      	ldrb	r3, [r7, #28]
 800c098:	2b09      	cmp	r3, #9
 800c09a:	d906      	bls.n	800c0aa <etharp_find_entry+0x1fa>
 800c09c:	4b23      	ldr	r3, [pc, #140]	; (800c12c <etharp_find_entry+0x27c>)
 800c09e:	f240 1281 	movw	r2, #385	; 0x181
 800c0a2:	4926      	ldr	r1, [pc, #152]	; (800c13c <etharp_find_entry+0x28c>)
 800c0a4:	4823      	ldr	r0, [pc, #140]	; (800c134 <etharp_find_entry+0x284>)
 800c0a6:	f002 f991 	bl	800e3cc <iprintf>
    etharp_free_entry(i);
 800c0aa:	7f3b      	ldrb	r3, [r7, #28]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff fe25 	bl	800bcfc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c0b2:	7f3b      	ldrb	r3, [r7, #28]
 800c0b4:	2b09      	cmp	r3, #9
 800c0b6:	d906      	bls.n	800c0c6 <etharp_find_entry+0x216>
 800c0b8:	4b1c      	ldr	r3, [pc, #112]	; (800c12c <etharp_find_entry+0x27c>)
 800c0ba:	f240 1285 	movw	r2, #389	; 0x185
 800c0be:	491f      	ldr	r1, [pc, #124]	; (800c13c <etharp_find_entry+0x28c>)
 800c0c0:	481c      	ldr	r0, [pc, #112]	; (800c134 <etharp_find_entry+0x284>)
 800c0c2:	f002 f983 	bl	800e3cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c0c6:	7f3a      	ldrb	r2, [r7, #28]
 800c0c8:	4917      	ldr	r1, [pc, #92]	; (800c128 <etharp_find_entry+0x278>)
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	4413      	add	r3, r2
 800c0d0:	00db      	lsls	r3, r3, #3
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3314      	adds	r3, #20
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d006      	beq.n	800c0ea <etharp_find_entry+0x23a>
 800c0dc:	4b13      	ldr	r3, [pc, #76]	; (800c12c <etharp_find_entry+0x27c>)
 800c0de:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800c0e2:	4917      	ldr	r1, [pc, #92]	; (800c140 <etharp_find_entry+0x290>)
 800c0e4:	4813      	ldr	r0, [pc, #76]	; (800c134 <etharp_find_entry+0x284>)
 800c0e6:	f002 f971 	bl	800e3cc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00a      	beq.n	800c106 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c0f0:	7f3a      	ldrb	r2, [r7, #28]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6819      	ldr	r1, [r3, #0]
 800c0f6:	480c      	ldr	r0, [pc, #48]	; (800c128 <etharp_find_entry+0x278>)
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	005b      	lsls	r3, r3, #1
 800c0fc:	4413      	add	r3, r2
 800c0fe:	00db      	lsls	r3, r3, #3
 800c100:	4403      	add	r3, r0
 800c102:	3304      	adds	r3, #4
 800c104:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c106:	7f3a      	ldrb	r2, [r7, #28]
 800c108:	4907      	ldr	r1, [pc, #28]	; (800c128 <etharp_find_entry+0x278>)
 800c10a:	4613      	mov	r3, r2
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	4413      	add	r3, r2
 800c110:	00db      	lsls	r3, r3, #3
 800c112:	440b      	add	r3, r1
 800c114:	3312      	adds	r3, #18
 800c116:	2200      	movs	r2, #0
 800c118:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800c11a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3720      	adds	r7, #32
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	2000044c 	.word	0x2000044c
 800c12c:	08010cf0 	.word	0x08010cf0
 800c130:	08010d28 	.word	0x08010d28
 800c134:	08010d68 	.word	0x08010d68
 800c138:	08010d90 	.word	0x08010d90
 800c13c:	08010da8 	.word	0x08010da8
 800c140:	08010dbc 	.word	0x08010dbc

0800c144 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af02      	add	r7, sp, #8
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c158:	2b06      	cmp	r3, #6
 800c15a:	d006      	beq.n	800c16a <etharp_update_arp_entry+0x26>
 800c15c:	4b48      	ldr	r3, [pc, #288]	; (800c280 <etharp_update_arp_entry+0x13c>)
 800c15e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c162:	4948      	ldr	r1, [pc, #288]	; (800c284 <etharp_update_arp_entry+0x140>)
 800c164:	4848      	ldr	r0, [pc, #288]	; (800c288 <etharp_update_arp_entry+0x144>)
 800c166:	f002 f931 	bl	800e3cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d012      	beq.n	800c196 <etharp_update_arp_entry+0x52>
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00e      	beq.n	800c196 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68f9      	ldr	r1, [r7, #12]
 800c17e:	4618      	mov	r0, r3
 800c180:	f001 f8dc 	bl	800d33c <ip4_addr_isbroadcast_u32>
 800c184:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c192:	2be0      	cmp	r3, #224	; 0xe0
 800c194:	d102      	bne.n	800c19c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c196:	f06f 030f 	mvn.w	r3, #15
 800c19a:	e06c      	b.n	800c276 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	68b8      	ldr	r0, [r7, #8]
 800c1a4:	f7ff fe84 	bl	800beb0 <etharp_find_entry>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c1ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	da02      	bge.n	800c1ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c1b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1b8:	e05d      	b.n	800c276 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c1ba:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c1be:	4933      	ldr	r1, [pc, #204]	; (800c28c <etharp_update_arp_entry+0x148>)
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	4413      	add	r3, r2
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	440b      	add	r3, r1
 800c1ca:	3314      	adds	r3, #20
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c1d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c1d4:	492d      	ldr	r1, [pc, #180]	; (800c28c <etharp_update_arp_entry+0x148>)
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	4413      	add	r3, r2
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	440b      	add	r3, r1
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800c1e6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	00db      	lsls	r3, r3, #3
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	4a25      	ldr	r2, [pc, #148]	; (800c28c <etharp_update_arp_entry+0x148>)
 800c1f6:	4413      	add	r3, r2
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	2206      	movs	r2, #6
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f002 f828 	bl	800e254 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c204:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c208:	4920      	ldr	r1, [pc, #128]	; (800c28c <etharp_update_arp_entry+0x148>)
 800c20a:	4613      	mov	r3, r2
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	4413      	add	r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	440b      	add	r3, r1
 800c214:	3312      	adds	r3, #18
 800c216:	2200      	movs	r2, #0
 800c218:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c21a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c21e:	491b      	ldr	r1, [pc, #108]	; (800c28c <etharp_update_arp_entry+0x148>)
 800c220:	4613      	mov	r3, r2
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	4413      	add	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	440b      	add	r3, r1
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d021      	beq.n	800c274 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c230:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c234:	4915      	ldr	r1, [pc, #84]	; (800c28c <etharp_update_arp_entry+0x148>)
 800c236:	4613      	mov	r3, r2
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	4413      	add	r3, r2
 800c23c:	00db      	lsls	r3, r3, #3
 800c23e:	440b      	add	r3, r1
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c244:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c248:	4910      	ldr	r1, [pc, #64]	; (800c28c <etharp_update_arp_entry+0x148>)
 800c24a:	4613      	mov	r3, r2
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4413      	add	r3, r2
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	440b      	add	r3, r1
 800c254:	2200      	movs	r2, #0
 800c256:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c25e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6939      	ldr	r1, [r7, #16]
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f001 ff0d 	bl	800e088 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c26e:	6938      	ldr	r0, [r7, #16]
 800c270:	f7fa f9b6 	bl	80065e0 <pbuf_free>
  }
  return ERR_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	08010cf0 	.word	0x08010cf0
 800c284:	08010de8 	.word	0x08010de8
 800c288:	08010d68 	.word	0x08010d68
 800c28c:	2000044c 	.word	0x2000044c

0800c290 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]
 800c29c:	e01f      	b.n	800c2de <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800c29e:	7bfa      	ldrb	r2, [r7, #15]
 800c2a0:	4913      	ldr	r1, [pc, #76]	; (800c2f0 <etharp_cleanup_netif+0x60>)
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	005b      	lsls	r3, r3, #1
 800c2a6:	4413      	add	r3, r2
 800c2a8:	00db      	lsls	r3, r3, #3
 800c2aa:	440b      	add	r3, r1
 800c2ac:	3314      	adds	r3, #20
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00f      	beq.n	800c2d8 <etharp_cleanup_netif+0x48>
 800c2b8:	7bfa      	ldrb	r2, [r7, #15]
 800c2ba:	490d      	ldr	r1, [pc, #52]	; (800c2f0 <etharp_cleanup_netif+0x60>)
 800c2bc:	4613      	mov	r3, r2
 800c2be:	005b      	lsls	r3, r3, #1
 800c2c0:	4413      	add	r3, r2
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	440b      	add	r3, r1
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d103      	bne.n	800c2d8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff fd12 	bl	800bcfc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	73fb      	strb	r3, [r7, #15]
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	2b09      	cmp	r3, #9
 800c2e2:	d9dc      	bls.n	800c29e <etharp_cleanup_netif+0xe>
    }
  }
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	2000044c 	.word	0x2000044c

0800c2f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c2f4:	b5b0      	push	{r4, r5, r7, lr}
 800c2f6:	b08a      	sub	sp, #40	; 0x28
 800c2f8:	af04      	add	r7, sp, #16
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d107      	bne.n	800c314 <etharp_input+0x20>
 800c304:	4b3d      	ldr	r3, [pc, #244]	; (800c3fc <etharp_input+0x108>)
 800c306:	f44f 7222 	mov.w	r2, #648	; 0x288
 800c30a:	493d      	ldr	r1, [pc, #244]	; (800c400 <etharp_input+0x10c>)
 800c30c:	483d      	ldr	r0, [pc, #244]	; (800c404 <etharp_input+0x110>)
 800c30e:	f002 f85d 	bl	800e3cc <iprintf>
 800c312:	e06f      	b.n	800c3f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c324:	d10c      	bne.n	800c340 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c32a:	2b06      	cmp	r3, #6
 800c32c:	d108      	bne.n	800c340 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c332:	2b04      	cmp	r3, #4
 800c334:	d104      	bne.n	800c340 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	885b      	ldrh	r3, [r3, #2]
 800c33a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c33c:	2b08      	cmp	r3, #8
 800c33e:	d003      	beq.n	800c348 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7fa f94d 	bl	80065e0 <pbuf_free>
    return;
 800c346:	e055      	b.n	800c3f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	330e      	adds	r3, #14
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	3318      	adds	r3, #24
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	3304      	adds	r3, #4
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d102      	bne.n	800c368 <etharp_input+0x74>
    for_us = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	75fb      	strb	r3, [r7, #23]
 800c366:	e009      	b.n	800c37c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	3304      	adds	r3, #4
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	429a      	cmp	r2, r3
 800c372:	bf0c      	ite	eq
 800c374:	2301      	moveq	r3, #1
 800c376:	2300      	movne	r3, #0
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	f103 0208 	add.w	r2, r3, #8
 800c382:	7dfb      	ldrb	r3, [r7, #23]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d001      	beq.n	800c38c <etharp_input+0x98>
 800c388:	2301      	movs	r3, #1
 800c38a:	e000      	b.n	800c38e <etharp_input+0x9a>
 800c38c:	2302      	movs	r3, #2
 800c38e:	f107 010c 	add.w	r1, r7, #12
 800c392:	6838      	ldr	r0, [r7, #0]
 800c394:	f7ff fed6 	bl	800c144 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	88db      	ldrh	r3, [r3, #6]
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3a2:	d003      	beq.n	800c3ac <etharp_input+0xb8>
 800c3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a8:	d01e      	beq.n	800c3e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800c3aa:	e020      	b.n	800c3ee <etharp_input+0xfa>
    if (for_us) {
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d01c      	beq.n	800c3ec <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	3208      	adds	r2, #8
      etharp_raw(netif,
 800c3cc:	2102      	movs	r1, #2
 800c3ce:	9103      	str	r1, [sp, #12]
 800c3d0:	f107 010c 	add.w	r1, r7, #12
 800c3d4:	9102      	str	r1, [sp, #8]
 800c3d6:	9201      	str	r2, [sp, #4]
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	462b      	mov	r3, r5
 800c3dc:	4622      	mov	r2, r4
 800c3de:	4601      	mov	r1, r0
 800c3e0:	6838      	ldr	r0, [r7, #0]
 800c3e2:	f000 fae1 	bl	800c9a8 <etharp_raw>
    break;
 800c3e6:	e001      	b.n	800c3ec <etharp_input+0xf8>
    break;
 800c3e8:	bf00      	nop
 800c3ea:	e000      	b.n	800c3ee <etharp_input+0xfa>
    break;
 800c3ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7fa f8f6 	bl	80065e0 <pbuf_free>
}
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	08010cf0 	.word	0x08010cf0
 800c400:	08010e40 	.word	0x08010e40
 800c404:	08010d68 	.word	0x08010d68

0800c408 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af02      	add	r7, sp, #8
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	4613      	mov	r3, r2
 800c414:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c416:	79fa      	ldrb	r2, [r7, #7]
 800c418:	4944      	ldr	r1, [pc, #272]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c41a:	4613      	mov	r3, r2
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	4413      	add	r3, r2
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	440b      	add	r3, r1
 800c424:	3314      	adds	r3, #20
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d806      	bhi.n	800c43a <etharp_output_to_arp_index+0x32>
 800c42c:	4b40      	ldr	r3, [pc, #256]	; (800c530 <etharp_output_to_arp_index+0x128>)
 800c42e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800c432:	4940      	ldr	r1, [pc, #256]	; (800c534 <etharp_output_to_arp_index+0x12c>)
 800c434:	4840      	ldr	r0, [pc, #256]	; (800c538 <etharp_output_to_arp_index+0x130>)
 800c436:	f001 ffc9 	bl	800e3cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c43a:	79fa      	ldrb	r2, [r7, #7]
 800c43c:	493b      	ldr	r1, [pc, #236]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c43e:	4613      	mov	r3, r2
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	4413      	add	r3, r2
 800c444:	00db      	lsls	r3, r3, #3
 800c446:	440b      	add	r3, r1
 800c448:	3314      	adds	r3, #20
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d153      	bne.n	800c4f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c450:	79fa      	ldrb	r2, [r7, #7]
 800c452:	4936      	ldr	r1, [pc, #216]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c454:	4613      	mov	r3, r2
 800c456:	005b      	lsls	r3, r3, #1
 800c458:	4413      	add	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	440b      	add	r3, r1
 800c45e:	3312      	adds	r3, #18
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c466:	d919      	bls.n	800c49c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c468:	79fa      	ldrb	r2, [r7, #7]
 800c46a:	4613      	mov	r3, r2
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	4413      	add	r3, r2
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	4a2e      	ldr	r2, [pc, #184]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c474:	4413      	add	r3, r2
 800c476:	3304      	adds	r3, #4
 800c478:	4619      	mov	r1, r3
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f000 fb42 	bl	800cb04 <etharp_request>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d138      	bne.n	800c4f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c486:	79fa      	ldrb	r2, [r7, #7]
 800c488:	4928      	ldr	r1, [pc, #160]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c48a:	4613      	mov	r3, r2
 800c48c:	005b      	lsls	r3, r3, #1
 800c48e:	4413      	add	r3, r2
 800c490:	00db      	lsls	r3, r3, #3
 800c492:	440b      	add	r3, r1
 800c494:	3314      	adds	r3, #20
 800c496:	2203      	movs	r2, #3
 800c498:	701a      	strb	r2, [r3, #0]
 800c49a:	e02d      	b.n	800c4f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c49c:	79fa      	ldrb	r2, [r7, #7]
 800c49e:	4923      	ldr	r1, [pc, #140]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	005b      	lsls	r3, r3, #1
 800c4a4:	4413      	add	r3, r2
 800c4a6:	00db      	lsls	r3, r3, #3
 800c4a8:	440b      	add	r3, r1
 800c4aa:	3312      	adds	r3, #18
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c4b2:	d321      	bcc.n	800c4f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c4b4:	79fa      	ldrb	r2, [r7, #7]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	4413      	add	r3, r2
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	4a1b      	ldr	r2, [pc, #108]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c4c0:	4413      	add	r3, r2
 800c4c2:	1d19      	adds	r1, r3, #4
 800c4c4:	79fa      	ldrb	r2, [r7, #7]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	4413      	add	r3, r2
 800c4cc:	00db      	lsls	r3, r3, #3
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	4a16      	ldr	r2, [pc, #88]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c4d2:	4413      	add	r3, r2
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 faf1 	bl	800cac0 <etharp_request_dst>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d109      	bne.n	800c4f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c4e4:	79fa      	ldrb	r2, [r7, #7]
 800c4e6:	4911      	ldr	r1, [pc, #68]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	4413      	add	r3, r2
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	440b      	add	r3, r1
 800c4f2:	3314      	adds	r3, #20
 800c4f4:	2203      	movs	r2, #3
 800c4f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800c4fe:	79fa      	ldrb	r2, [r7, #7]
 800c500:	4613      	mov	r3, r2
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	4413      	add	r3, r2
 800c506:	00db      	lsls	r3, r3, #3
 800c508:	3308      	adds	r3, #8
 800c50a:	4a08      	ldr	r2, [pc, #32]	; (800c52c <etharp_output_to_arp_index+0x124>)
 800c50c:	4413      	add	r3, r2
 800c50e:	3304      	adds	r3, #4
 800c510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c514:	9200      	str	r2, [sp, #0]
 800c516:	460a      	mov	r2, r1
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f001 fdb4 	bl	800e088 <ethernet_output>
 800c520:	4603      	mov	r3, r0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	2000044c 	.word	0x2000044c
 800c530:	08010cf0 	.word	0x08010cf0
 800c534:	08010e60 	.word	0x08010e60
 800c538:	08010d68 	.word	0x08010d68

0800c53c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08a      	sub	sp, #40	; 0x28
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d106      	bne.n	800c560 <etharp_output+0x24>
 800c552:	4b69      	ldr	r3, [pc, #420]	; (800c6f8 <etharp_output+0x1bc>)
 800c554:	f240 321b 	movw	r2, #795	; 0x31b
 800c558:	4968      	ldr	r1, [pc, #416]	; (800c6fc <etharp_output+0x1c0>)
 800c55a:	4869      	ldr	r0, [pc, #420]	; (800c700 <etharp_output+0x1c4>)
 800c55c:	f001 ff36 	bl	800e3cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <etharp_output+0x38>
 800c566:	4b64      	ldr	r3, [pc, #400]	; (800c6f8 <etharp_output+0x1bc>)
 800c568:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c56c:	4965      	ldr	r1, [pc, #404]	; (800c704 <etharp_output+0x1c8>)
 800c56e:	4864      	ldr	r0, [pc, #400]	; (800c700 <etharp_output+0x1c4>)
 800c570:	f001 ff2c 	bl	800e3cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d106      	bne.n	800c588 <etharp_output+0x4c>
 800c57a:	4b5f      	ldr	r3, [pc, #380]	; (800c6f8 <etharp_output+0x1bc>)
 800c57c:	f240 321d 	movw	r2, #797	; 0x31d
 800c580:	4961      	ldr	r1, [pc, #388]	; (800c708 <etharp_output+0x1cc>)
 800c582:	485f      	ldr	r0, [pc, #380]	; (800c700 <etharp_output+0x1c4>)
 800c584:	f001 ff22 	bl	800e3cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68f9      	ldr	r1, [r7, #12]
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 fed4 	bl	800d33c <ip4_addr_isbroadcast_u32>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d002      	beq.n	800c5a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c59a:	4b5c      	ldr	r3, [pc, #368]	; (800c70c <etharp_output+0x1d0>)
 800c59c:	61fb      	str	r3, [r7, #28]
 800c59e:	e09b      	b.n	800c6d8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5a8:	2be0      	cmp	r3, #224	; 0xe0
 800c5aa:	d118      	bne.n	800c5de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c5b4:	235e      	movs	r3, #94	; 0x5e
 800c5b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3302      	adds	r3, #2
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3303      	adds	r3, #3
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c5d6:	f107 0310 	add.w	r3, r7, #16
 800c5da:	61fb      	str	r3, [r7, #28]
 800c5dc:	e07c      	b.n	800c6d8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	405a      	eors	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d012      	beq.n	800c61c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c5fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c600:	4293      	cmp	r3, r2
 800c602:	d00b      	beq.n	800c61c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	330c      	adds	r3, #12
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	330c      	adds	r3, #12
 800c612:	61bb      	str	r3, [r7, #24]
 800c614:	e002      	b.n	800c61c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c616:	f06f 0303 	mvn.w	r3, #3
 800c61a:	e069      	b.n	800c6f0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c61c:	4b3c      	ldr	r3, [pc, #240]	; (800c710 <etharp_output+0x1d4>)
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	4619      	mov	r1, r3
 800c622:	4a3c      	ldr	r2, [pc, #240]	; (800c714 <etharp_output+0x1d8>)
 800c624:	460b      	mov	r3, r1
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	440b      	add	r3, r1
 800c62a:	00db      	lsls	r3, r3, #3
 800c62c:	4413      	add	r3, r2
 800c62e:	3314      	adds	r3, #20
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d917      	bls.n	800c666 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b35      	ldr	r3, [pc, #212]	; (800c710 <etharp_output+0x1d4>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	4618      	mov	r0, r3
 800c640:	4934      	ldr	r1, [pc, #208]	; (800c714 <etharp_output+0x1d8>)
 800c642:	4603      	mov	r3, r0
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	4403      	add	r3, r0
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	440b      	add	r3, r1
 800c64c:	3304      	adds	r3, #4
 800c64e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c650:	429a      	cmp	r2, r3
 800c652:	d108      	bne.n	800c666 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c654:	4b2e      	ldr	r3, [pc, #184]	; (800c710 <etharp_output+0x1d4>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	68b9      	ldr	r1, [r7, #8]
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f7ff fed3 	bl	800c408 <etharp_output_to_arp_index>
 800c662:	4603      	mov	r3, r0
 800c664:	e044      	b.n	800c6f0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c666:	2300      	movs	r3, #0
 800c668:	75fb      	strb	r3, [r7, #23]
 800c66a:	e02a      	b.n	800c6c2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c66c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c670:	4928      	ldr	r1, [pc, #160]	; (800c714 <etharp_output+0x1d8>)
 800c672:	4613      	mov	r3, r2
 800c674:	005b      	lsls	r3, r3, #1
 800c676:	4413      	add	r3, r2
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	440b      	add	r3, r1
 800c67c:	3314      	adds	r3, #20
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d918      	bls.n	800c6b6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	6819      	ldr	r1, [r3, #0]
 800c688:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c68c:	4821      	ldr	r0, [pc, #132]	; (800c714 <etharp_output+0x1d8>)
 800c68e:	4613      	mov	r3, r2
 800c690:	005b      	lsls	r3, r3, #1
 800c692:	4413      	add	r3, r2
 800c694:	00db      	lsls	r3, r3, #3
 800c696:	4403      	add	r3, r0
 800c698:	3304      	adds	r3, #4
 800c69a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c69c:	4299      	cmp	r1, r3
 800c69e:	d10a      	bne.n	800c6b6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800c6a0:	7dfa      	ldrb	r2, [r7, #23]
 800c6a2:	4b1b      	ldr	r3, [pc, #108]	; (800c710 <etharp_output+0x1d4>)
 800c6a4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f7ff feab 	bl	800c408 <etharp_output_to_arp_index>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	e01c      	b.n	800c6f0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c6b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	3301      	adds	r3, #1
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	75fb      	strb	r3, [r7, #23]
 800c6c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6c6:	2b09      	cmp	r3, #9
 800c6c8:	ddd0      	ble.n	800c66c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	69b9      	ldr	r1, [r7, #24]
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f000 f822 	bl	800c718 <etharp_query>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	e00b      	b.n	800c6f0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c6de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	68b9      	ldr	r1, [r7, #8]
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f001 fccd 	bl	800e088 <ethernet_output>
 800c6ee:	4603      	mov	r3, r0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3720      	adds	r7, #32
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	08010cf0 	.word	0x08010cf0
 800c6fc:	08010e40 	.word	0x08010e40
 800c700:	08010d68 	.word	0x08010d68
 800c704:	08010e90 	.word	0x08010e90
 800c708:	08010e30 	.word	0x08010e30
 800c70c:	08011470 	.word	0x08011470
 800c710:	2000053c 	.word	0x2000053c
 800c714:	2000044c 	.word	0x2000044c

0800c718 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08c      	sub	sp, #48	; 0x30
 800c71c:	af02      	add	r7, sp, #8
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	3329      	adds	r3, #41	; 0x29
 800c728:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c72a:	23ff      	movs	r3, #255	; 0xff
 800c72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68f9      	ldr	r1, [r7, #12]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 fdfe 	bl	800d33c <ip4_addr_isbroadcast_u32>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10c      	bne.n	800c760 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c74e:	2be0      	cmp	r3, #224	; 0xe0
 800c750:	d006      	beq.n	800c760 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d003      	beq.n	800c760 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d102      	bne.n	800c766 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c760:	f06f 030f 	mvn.w	r3, #15
 800c764:	e10e      	b.n	800c984 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	2101      	movs	r1, #1
 800c76a:	68b8      	ldr	r0, [r7, #8]
 800c76c:	f7ff fba0 	bl	800beb0 <etharp_find_entry>
 800c770:	4603      	mov	r3, r0
 800c772:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800c774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	da02      	bge.n	800c782 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800c77c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c780:	e100      	b.n	800c984 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c782:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c786:	4981      	ldr	r1, [pc, #516]	; (800c98c <etharp_query+0x274>)
 800c788:	4613      	mov	r3, r2
 800c78a:	005b      	lsls	r3, r3, #1
 800c78c:	4413      	add	r3, r2
 800c78e:	00db      	lsls	r3, r3, #3
 800c790:	440b      	add	r3, r1
 800c792:	3314      	adds	r3, #20
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d117      	bne.n	800c7ca <etharp_query+0xb2>
    is_new_entry = 1;
 800c79a:	2301      	movs	r3, #1
 800c79c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c79e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c7a2:	497a      	ldr	r1, [pc, #488]	; (800c98c <etharp_query+0x274>)
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	4413      	add	r3, r2
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	440b      	add	r3, r1
 800c7ae:	3314      	adds	r3, #20
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c7b4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c7b8:	4974      	ldr	r1, [pc, #464]	; (800c98c <etharp_query+0x274>)
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	4413      	add	r3, r2
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	440b      	add	r3, r1
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c7ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c7ce:	496f      	ldr	r1, [pc, #444]	; (800c98c <etharp_query+0x274>)
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	440b      	add	r3, r1
 800c7da:	3314      	adds	r3, #20
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d012      	beq.n	800c808 <etharp_query+0xf0>
 800c7e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c7e6:	4969      	ldr	r1, [pc, #420]	; (800c98c <etharp_query+0x274>)
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	4413      	add	r3, r2
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	440b      	add	r3, r1
 800c7f2:	3314      	adds	r3, #20
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d806      	bhi.n	800c808 <etharp_query+0xf0>
 800c7fa:	4b65      	ldr	r3, [pc, #404]	; (800c990 <etharp_query+0x278>)
 800c7fc:	f240 32c7 	movw	r2, #967	; 0x3c7
 800c800:	4964      	ldr	r1, [pc, #400]	; (800c994 <etharp_query+0x27c>)
 800c802:	4865      	ldr	r0, [pc, #404]	; (800c998 <etharp_query+0x280>)
 800c804:	f001 fde2 	bl	800e3cc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d102      	bne.n	800c814 <etharp_query+0xfc>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10c      	bne.n	800c82e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c814:	68b9      	ldr	r1, [r7, #8]
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 f974 	bl	800cb04 <etharp_request>
 800c81c:	4603      	mov	r3, r0
 800c81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d102      	bne.n	800c82e <etharp_query+0x116>
      return result;
 800c828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c82c:	e0aa      	b.n	800c984 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d106      	bne.n	800c842 <etharp_query+0x12a>
 800c834:	4b56      	ldr	r3, [pc, #344]	; (800c990 <etharp_query+0x278>)
 800c836:	f240 32db 	movw	r2, #987	; 0x3db
 800c83a:	4958      	ldr	r1, [pc, #352]	; (800c99c <etharp_query+0x284>)
 800c83c:	4856      	ldr	r0, [pc, #344]	; (800c998 <etharp_query+0x280>)
 800c83e:	f001 fdc5 	bl	800e3cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c842:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c846:	4951      	ldr	r1, [pc, #324]	; (800c98c <etharp_query+0x274>)
 800c848:	4613      	mov	r3, r2
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	4413      	add	r3, r2
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	440b      	add	r3, r1
 800c852:	3314      	adds	r3, #20
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d918      	bls.n	800c88c <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c85a:	7cfa      	ldrb	r2, [r7, #19]
 800c85c:	4b50      	ldr	r3, [pc, #320]	; (800c9a0 <etharp_query+0x288>)
 800c85e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c860:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c864:	4613      	mov	r3, r2
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	4413      	add	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	3308      	adds	r3, #8
 800c86e:	4a47      	ldr	r2, [pc, #284]	; (800c98c <etharp_query+0x274>)
 800c870:	4413      	add	r3, r2
 800c872:	3304      	adds	r3, #4
 800c874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c878:	9200      	str	r2, [sp, #0]
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	6879      	ldr	r1, [r7, #4]
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f001 fc02 	bl	800e088 <ethernet_output>
 800c884:	4603      	mov	r3, r0
 800c886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c88a:	e079      	b.n	800c980 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c88c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c890:	493e      	ldr	r1, [pc, #248]	; (800c98c <etharp_query+0x274>)
 800c892:	4613      	mov	r3, r2
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	4413      	add	r3, r2
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	440b      	add	r3, r1
 800c89c:	3314      	adds	r3, #20
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d16d      	bne.n	800c980 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c8ac:	e01a      	b.n	800c8e4 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	895a      	ldrh	r2, [r3, #10]
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	891b      	ldrh	r3, [r3, #8]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d10a      	bne.n	800c8d0 <etharp_query+0x1b8>
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <etharp_query+0x1b8>
 800c8c2:	4b33      	ldr	r3, [pc, #204]	; (800c990 <etharp_query+0x278>)
 800c8c4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c8c8:	4936      	ldr	r1, [pc, #216]	; (800c9a4 <etharp_query+0x28c>)
 800c8ca:	4833      	ldr	r0, [pc, #204]	; (800c998 <etharp_query+0x280>)
 800c8cc:	f001 fd7e 	bl	800e3cc <iprintf>
      if (p->type != PBUF_ROM) {
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	7b1b      	ldrb	r3, [r3, #12]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d002      	beq.n	800c8de <etharp_query+0x1c6>
        copy_needed = 1;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	61bb      	str	r3, [r7, #24]
        break;
 800c8dc:	e005      	b.n	800c8ea <etharp_query+0x1d2>
      }
      p = p->next;
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e1      	bne.n	800c8ae <etharp_query+0x196>
    }
    if (copy_needed) {
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d017      	beq.n	800c920 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	891b      	ldrh	r3, [r3, #8]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	2002      	movs	r0, #2
 800c8fa:	f7f9 faff 	bl	8005efc <pbuf_alloc>
 800c8fe:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d011      	beq.n	800c92a <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	69f8      	ldr	r0, [r7, #28]
 800c90a:	f7f9 ff9b 	bl	8006844 <pbuf_copy>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00a      	beq.n	800c92a <etharp_query+0x212>
          pbuf_free(p);
 800c914:	69f8      	ldr	r0, [r7, #28]
 800c916:	f7f9 fe63 	bl	80065e0 <pbuf_free>
          p = NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	61fb      	str	r3, [r7, #28]
 800c91e:	e004      	b.n	800c92a <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c924:	69f8      	ldr	r0, [r7, #28]
 800c926:	f7f9 ff05 	bl	8006734 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d024      	beq.n	800c97a <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c930:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c934:	4915      	ldr	r1, [pc, #84]	; (800c98c <etharp_query+0x274>)
 800c936:	4613      	mov	r3, r2
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	4413      	add	r3, r2
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	440b      	add	r3, r1
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00b      	beq.n	800c95e <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c946:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c94a:	4910      	ldr	r1, [pc, #64]	; (800c98c <etharp_query+0x274>)
 800c94c:	4613      	mov	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4413      	add	r3, r2
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	440b      	add	r3, r1
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4618      	mov	r0, r3
 800c95a:	f7f9 fe41 	bl	80065e0 <pbuf_free>
      }
      arp_table[i].q = p;
 800c95e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c962:	490a      	ldr	r1, [pc, #40]	; (800c98c <etharp_query+0x274>)
 800c964:	4613      	mov	r3, r2
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	4413      	add	r3, r2
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	440b      	add	r3, r1
 800c96e:	69fa      	ldr	r2, [r7, #28]
 800c970:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c978:	e002      	b.n	800c980 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c97a:	23ff      	movs	r3, #255	; 0xff
 800c97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c980:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c984:	4618      	mov	r0, r3
 800c986:	3728      	adds	r7, #40	; 0x28
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	2000044c 	.word	0x2000044c
 800c990:	08010cf0 	.word	0x08010cf0
 800c994:	08010e9c 	.word	0x08010e9c
 800c998:	08010d68 	.word	0x08010d68
 800c99c:	08010e90 	.word	0x08010e90
 800c9a0:	2000053c 	.word	0x2000053c
 800c9a4:	08010ec4 	.word	0x08010ec4

0800c9a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08a      	sub	sp, #40	; 0x28
 800c9ac:	af02      	add	r7, sp, #8
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d106      	bne.n	800c9ce <etharp_raw+0x26>
 800c9c0:	4b3a      	ldr	r3, [pc, #232]	; (800caac <etharp_raw+0x104>)
 800c9c2:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c9c6:	493a      	ldr	r1, [pc, #232]	; (800cab0 <etharp_raw+0x108>)
 800c9c8:	483a      	ldr	r0, [pc, #232]	; (800cab4 <etharp_raw+0x10c>)
 800c9ca:	f001 fcff 	bl	800e3cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	211c      	movs	r1, #28
 800c9d2:	2002      	movs	r0, #2
 800c9d4:	f7f9 fa92 	bl	8005efc <pbuf_alloc>
 800c9d8:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d102      	bne.n	800c9e6 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e4:	e05d      	b.n	800caa2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	895b      	ldrh	r3, [r3, #10]
 800c9ea:	2b1b      	cmp	r3, #27
 800c9ec:	d806      	bhi.n	800c9fc <etharp_raw+0x54>
 800c9ee:	4b2f      	ldr	r3, [pc, #188]	; (800caac <etharp_raw+0x104>)
 800c9f0:	f240 4263 	movw	r2, #1123	; 0x463
 800c9f4:	4930      	ldr	r1, [pc, #192]	; (800cab8 <etharp_raw+0x110>)
 800c9f6:	482f      	ldr	r0, [pc, #188]	; (800cab4 <etharp_raw+0x10c>)
 800c9f8:	f001 fce8 	bl	800e3cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ca02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7f8 fcbe 	bl	8005386 <lwip_htons>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca18:	2b06      	cmp	r3, #6
 800ca1a:	d006      	beq.n	800ca2a <etharp_raw+0x82>
 800ca1c:	4b23      	ldr	r3, [pc, #140]	; (800caac <etharp_raw+0x104>)
 800ca1e:	f240 426a 	movw	r2, #1130	; 0x46a
 800ca22:	4926      	ldr	r1, [pc, #152]	; (800cabc <etharp_raw+0x114>)
 800ca24:	4823      	ldr	r0, [pc, #140]	; (800cab4 <etharp_raw+0x10c>)
 800ca26:	f001 fcd1 	bl	800e3cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	2206      	movs	r2, #6
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f001 fc0e 	bl	800e254 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	3312      	adds	r3, #18
 800ca3c:	2206      	movs	r2, #6
 800ca3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca40:	4618      	mov	r0, r3
 800ca42:	f001 fc07 	bl	800e254 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	330e      	adds	r3, #14
 800ca4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca4c:	6812      	ldr	r2, [r2, #0]
 800ca4e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	3318      	adds	r3, #24
 800ca54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca56:	6812      	ldr	r2, [r2, #0]
 800ca58:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	701a      	strb	r2, [r3, #0]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f042 0201 	orr.w	r2, r2, #1
 800ca66:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f042 0208 	orr.w	r2, r2, #8
 800ca70:	709a      	strb	r2, [r3, #2]
 800ca72:	2200      	movs	r2, #0
 800ca74:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2206      	movs	r2, #6
 800ca7a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	2204      	movs	r2, #4
 800ca80:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ca82:	f640 0306 	movw	r3, #2054	; 0x806
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	69b9      	ldr	r1, [r7, #24]
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f001 fafa 	bl	800e088 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ca94:	69b8      	ldr	r0, [r7, #24]
 800ca96:	f7f9 fda3 	bl	80065e0 <pbuf_free>
  p = NULL;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ca9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3720      	adds	r7, #32
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	08010cf0 	.word	0x08010cf0
 800cab0:	08010e40 	.word	0x08010e40
 800cab4:	08010d68 	.word	0x08010d68
 800cab8:	08010ee0 	.word	0x08010ee0
 800cabc:	08010f14 	.word	0x08010f14

0800cac0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af04      	add	r7, sp, #16
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cadc:	2201      	movs	r2, #1
 800cade:	9203      	str	r2, [sp, #12]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	9202      	str	r2, [sp, #8]
 800cae4:	4a06      	ldr	r2, [pc, #24]	; (800cb00 <etharp_request_dst+0x40>)
 800cae6:	9201      	str	r2, [sp, #4]
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	4603      	mov	r3, r0
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f7ff ff5a 	bl	800c9a8 <etharp_raw>
 800caf4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	08011478 	.word	0x08011478

0800cb04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cb0e:	4a05      	ldr	r2, [pc, #20]	; (800cb24 <etharp_request+0x20>)
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7ff ffd4 	bl	800cac0 <etharp_request_dst>
 800cb18:	4603      	mov	r3, r0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	08011470 	.word	0x08011470

0800cb28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08e      	sub	sp, #56	; 0x38
 800cb2c:	af04      	add	r7, sp, #16
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cb32:	4b7a      	ldr	r3, [pc, #488]	; (800cd1c <icmp_input+0x1f4>)
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	f003 030f 	and.w	r3, r3, #15
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cb48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb4a:	2b13      	cmp	r3, #19
 800cb4c:	f240 80d1 	bls.w	800ccf2 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	895b      	ldrh	r3, [r3, #10]
 800cb54:	2b03      	cmp	r3, #3
 800cb56:	f240 80ce 	bls.w	800ccf6 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cb64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 80bb 	beq.w	800cce4 <icmp_input+0x1bc>
 800cb6e:	2b08      	cmp	r3, #8
 800cb70:	f040 80bb 	bne.w	800ccea <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800cb74:	4b6a      	ldr	r3, [pc, #424]	; (800cd20 <icmp_input+0x1f8>)
 800cb76:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cb78:	4b68      	ldr	r3, [pc, #416]	; (800cd1c <icmp_input+0x1f4>)
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb80:	2be0      	cmp	r3, #224	; 0xe0
 800cb82:	f000 80bf 	beq.w	800cd04 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cb86:	4b65      	ldr	r3, [pc, #404]	; (800cd1c <icmp_input+0x1f4>)
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	4a64      	ldr	r2, [pc, #400]	; (800cd1c <icmp_input+0x1f4>)
 800cb8c:	6812      	ldr	r2, [r2, #0]
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 fbd3 	bl	800d33c <ip4_addr_isbroadcast_u32>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f040 80b5 	bne.w	800cd08 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	891b      	ldrh	r3, [r3, #8]
 800cba2:	2b07      	cmp	r3, #7
 800cba4:	f240 80a9 	bls.w	800ccfa <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800cba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbaa:	330e      	adds	r3, #14
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	b21b      	sxth	r3, r3
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7f9 fcf0 	bl	8006598 <pbuf_header>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d046      	beq.n	800cc4c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	891a      	ldrh	r2, [r3, #8]
 800cbc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbc4:	4413      	add	r3, r2
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	2200      	movs	r2, #0
 800cbca:	4619      	mov	r1, r3
 800cbcc:	2002      	movs	r0, #2
 800cbce:	f7f9 f995 	bl	8005efc <pbuf_alloc>
 800cbd2:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f000 8098 	beq.w	800cd0c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	895b      	ldrh	r3, [r3, #10]
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d203      	bcs.n	800cbf2 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800cbea:	69b8      	ldr	r0, [r7, #24]
 800cbec:	f7f9 fcf8 	bl	80065e0 <pbuf_free>
        goto icmperr;
 800cbf0:	e08d      	b.n	800cd0e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cbf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f001 fb2a 	bl	800e254 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800cc00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc02:	425b      	negs	r3, r3
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	b21b      	sxth	r3, r3
 800cc08:	4619      	mov	r1, r3
 800cc0a:	69b8      	ldr	r0, [r7, #24]
 800cc0c:	f7f9 fcc4 	bl	8006598 <pbuf_header>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d009      	beq.n	800cc2a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cc16:	4b43      	ldr	r3, [pc, #268]	; (800cd24 <icmp_input+0x1fc>)
 800cc18:	22af      	movs	r2, #175	; 0xaf
 800cc1a:	4943      	ldr	r1, [pc, #268]	; (800cd28 <icmp_input+0x200>)
 800cc1c:	4843      	ldr	r0, [pc, #268]	; (800cd2c <icmp_input+0x204>)
 800cc1e:	f001 fbd5 	bl	800e3cc <iprintf>
        pbuf_free(r);
 800cc22:	69b8      	ldr	r0, [r7, #24]
 800cc24:	f7f9 fcdc 	bl	80065e0 <pbuf_free>
        goto icmperr;
 800cc28:	e071      	b.n	800cd0e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	69b8      	ldr	r0, [r7, #24]
 800cc2e:	f7f9 fe09 	bl	8006844 <pbuf_copy>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d003      	beq.n	800cc40 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800cc38:	69b8      	ldr	r0, [r7, #24]
 800cc3a:	f7f9 fcd1 	bl	80065e0 <pbuf_free>
        goto icmperr;
 800cc3e:	e066      	b.n	800cd0e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7f9 fccd 	bl	80065e0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	607b      	str	r3, [r7, #4]
 800cc4a:	e015      	b.n	800cc78 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800cc4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc4e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800cc52:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cc56:	33f2      	adds	r3, #242	; 0xf2
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	b21b      	sxth	r3, r3
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7f9 fc9a 	bl	8006598 <pbuf_header>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d006      	beq.n	800cc78 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cc6a:	4b2e      	ldr	r3, [pc, #184]	; (800cd24 <icmp_input+0x1fc>)
 800cc6c:	22c0      	movs	r2, #192	; 0xc0
 800cc6e:	4930      	ldr	r1, [pc, #192]	; (800cd30 <icmp_input+0x208>)
 800cc70:	482e      	ldr	r0, [pc, #184]	; (800cd2c <icmp_input+0x204>)
 800cc72:	f001 fbab 	bl	800e3cc <iprintf>
        goto icmperr;
 800cc76:	e04a      	b.n	800cd0e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800cc7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7f9 fc87 	bl	8006598 <pbuf_header>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d12b      	bne.n	800cce8 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cc9e:	4b1f      	ldr	r3, [pc, #124]	; (800cd1c <icmp_input+0x1f4>)
 800cca0:	691a      	ldr	r2, [r3, #16]
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	709a      	strb	r2, [r3, #2]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	22ff      	movs	r2, #255	; 0xff
 800ccba:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	729a      	strb	r2, [r3, #10]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	9302      	str	r3, [sp, #8]
 800ccca:	2301      	movs	r3, #1
 800cccc:	9301      	str	r3, [sp, #4]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	23ff      	movs	r3, #255	; 0xff
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	69f9      	ldr	r1, [r7, #28]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fa5d 	bl	800d198 <ip4_output_if>
 800ccde:	4603      	mov	r3, r0
 800cce0:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800cce2:	e001      	b.n	800cce8 <icmp_input+0x1c0>
    break;
 800cce4:	bf00      	nop
 800cce6:	e000      	b.n	800ccea <icmp_input+0x1c2>
    break;
 800cce8:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7f9 fc78 	bl	80065e0 <pbuf_free>
  return;
 800ccf0:	e011      	b.n	800cd16 <icmp_input+0x1ee>
    goto lenerr;
 800ccf2:	bf00      	nop
 800ccf4:	e002      	b.n	800ccfc <icmp_input+0x1d4>
    goto lenerr;
 800ccf6:	bf00      	nop
 800ccf8:	e000      	b.n	800ccfc <icmp_input+0x1d4>
      goto lenerr;
 800ccfa:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7f9 fc6f 	bl	80065e0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cd02:	e008      	b.n	800cd16 <icmp_input+0x1ee>
      goto icmperr;
 800cd04:	bf00      	nop
 800cd06:	e002      	b.n	800cd0e <icmp_input+0x1e6>
      goto icmperr;
 800cd08:	bf00      	nop
 800cd0a:	e000      	b.n	800cd0e <icmp_input+0x1e6>
        goto icmperr;
 800cd0c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7f9 fc66 	bl	80065e0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cd14:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cd16:	3728      	adds	r7, #40	; 0x28
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	20003678 	.word	0x20003678
 800cd20:	2000368c 	.word	0x2000368c
 800cd24:	08010f58 	.word	0x08010f58
 800cd28:	08010f90 	.word	0x08010f90
 800cd2c:	08010fc8 	.word	0x08010fc8
 800cd30:	08010ff0 	.word	0x08010ff0

0800cd34 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	461a      	mov	r2, r3
 800cd44:	2103      	movs	r1, #3
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 f814 	bl	800cd74 <icmp_send_response>
}
 800cd4c:	bf00      	nop
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cd60:	78fb      	ldrb	r3, [r7, #3]
 800cd62:	461a      	mov	r2, r3
 800cd64:	210b      	movs	r1, #11
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f804 	bl	800cd74 <icmp_send_response>
}
 800cd6c:	bf00      	nop
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b08c      	sub	sp, #48	; 0x30
 800cd78:	af04      	add	r7, sp, #16
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	70fb      	strb	r3, [r7, #3]
 800cd80:	4613      	mov	r3, r2
 800cd82:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cd84:	2200      	movs	r2, #0
 800cd86:	2124      	movs	r1, #36	; 0x24
 800cd88:	2001      	movs	r0, #1
 800cd8a:	f7f9 f8b7 	bl	8005efc <pbuf_alloc>
 800cd8e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d04c      	beq.n	800ce30 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	895b      	ldrh	r3, [r3, #10]
 800cd9a:	2b23      	cmp	r3, #35	; 0x23
 800cd9c:	d806      	bhi.n	800cdac <icmp_send_response+0x38>
 800cd9e:	4b26      	ldr	r3, [pc, #152]	; (800ce38 <icmp_send_response+0xc4>)
 800cda0:	f240 1261 	movw	r2, #353	; 0x161
 800cda4:	4925      	ldr	r1, [pc, #148]	; (800ce3c <icmp_send_response+0xc8>)
 800cda6:	4826      	ldr	r0, [pc, #152]	; (800ce40 <icmp_send_response+0xcc>)
 800cda8:	f001 fb10 	bl	800e3cc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	78fa      	ldrb	r2, [r7, #3]
 800cdbc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	78ba      	ldrb	r2, [r7, #2]
 800cdc2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	711a      	strb	r2, [r3, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	719a      	strb	r2, [r3, #6]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	f103 0008 	add.w	r0, r3, #8
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	221c      	movs	r2, #28
 800cde6:	4619      	mov	r1, r3
 800cde8:	f001 fa34 	bl	800e254 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cdf2:	f107 030c 	add.w	r3, r7, #12
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 f824 	bl	800ce44 <ip4_route>
 800cdfc:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d011      	beq.n	800ce28 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2200      	movs	r2, #0
 800ce08:	709a      	strb	r2, [r3, #2]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ce0e:	f107 020c 	add.w	r2, r7, #12
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	9302      	str	r3, [sp, #8]
 800ce16:	2301      	movs	r3, #1
 800ce18:	9301      	str	r3, [sp, #4]
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	23ff      	movs	r3, #255	; 0xff
 800ce20:	2100      	movs	r1, #0
 800ce22:	69f8      	ldr	r0, [r7, #28]
 800ce24:	f000 f9b8 	bl	800d198 <ip4_output_if>
  }
  pbuf_free(q);
 800ce28:	69f8      	ldr	r0, [r7, #28]
 800ce2a:	f7f9 fbd9 	bl	80065e0 <pbuf_free>
 800ce2e:	e000      	b.n	800ce32 <icmp_send_response+0xbe>
    return;
 800ce30:	bf00      	nop
}
 800ce32:	3720      	adds	r7, #32
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	08010f58 	.word	0x08010f58
 800ce3c:	08011024 	.word	0x08011024
 800ce40:	08010fc8 	.word	0x08010fc8

0800ce44 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ce4c:	4b30      	ldr	r3, [pc, #192]	; (800cf10 <ip4_route+0xcc>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	e036      	b.n	800cec2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce5a:	f003 0301 	and.w	r3, r3, #1
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d02b      	beq.n	800cebc <ip4_route+0x78>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce6a:	089b      	lsrs	r3, r3, #2
 800ce6c:	f003 0301 	and.w	r3, r3, #1
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d022      	beq.n	800cebc <ip4_route+0x78>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3304      	adds	r3, #4
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d01d      	beq.n	800cebc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3304      	adds	r3, #4
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	405a      	eors	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3308      	adds	r3, #8
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4013      	ands	r3, r2
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d101      	bne.n	800ce9c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	e033      	b.n	800cf04 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cea2:	f003 0302 	and.w	r3, r3, #2
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d108      	bne.n	800cebc <ip4_route+0x78>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	330c      	adds	r3, #12
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d101      	bne.n	800cebc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	e023      	b.n	800cf04 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1c5      	bne.n	800ce54 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cec8:	4b12      	ldr	r3, [pc, #72]	; (800cf14 <ip4_route+0xd0>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d015      	beq.n	800cefc <ip4_route+0xb8>
 800ced0:	4b10      	ldr	r3, [pc, #64]	; (800cf14 <ip4_route+0xd0>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00d      	beq.n	800cefc <ip4_route+0xb8>
 800cee0:	4b0c      	ldr	r3, [pc, #48]	; (800cf14 <ip4_route+0xd0>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cee8:	f003 0304 	and.w	r3, r3, #4
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d005      	beq.n	800cefc <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800cef0:	4b08      	ldr	r3, [pc, #32]	; (800cf14 <ip4_route+0xd0>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	3304      	adds	r3, #4
 800cef6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cefc:	2300      	movs	r3, #0
 800cefe:	e001      	b.n	800cf04 <ip4_route+0xc0>
  }

  return netif_default;
 800cf00:	4b04      	ldr	r3, [pc, #16]	; (800cf14 <ip4_route+0xd0>)
 800cf02:	681b      	ldr	r3, [r3, #0]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3714      	adds	r7, #20
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bc80      	pop	{r7}
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	20006b98 	.word	0x20006b98
 800cf14:	20006b9c 	.word	0x20006b9c

0800cf18 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	091b      	lsrs	r3, r3, #4
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b04      	cmp	r3, #4
 800cf32:	d004      	beq.n	800cf3e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7f9 fb53 	bl	80065e0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e124      	b.n	800d188 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	f003 030f 	and.w	r3, r3, #15
 800cf48:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800cf4a:	897b      	ldrh	r3, [r7, #10]
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	885b      	ldrh	r3, [r3, #2]
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7f8 fa15 	bl	8005386 <lwip_htons>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	891b      	ldrh	r3, [r3, #8]
 800cf64:	893a      	ldrh	r2, [r7, #8]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d204      	bcs.n	800cf74 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800cf6a:	893b      	ldrh	r3, [r7, #8]
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7f9 f9c2 	bl	80062f8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	895b      	ldrh	r3, [r3, #10]
 800cf78:	897a      	ldrh	r2, [r7, #10]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d807      	bhi.n	800cf8e <ip4_input+0x76>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	891b      	ldrh	r3, [r3, #8]
 800cf82:	893a      	ldrh	r2, [r7, #8]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d802      	bhi.n	800cf8e <ip4_input+0x76>
 800cf88:	897b      	ldrh	r3, [r7, #10]
 800cf8a:	2b13      	cmp	r3, #19
 800cf8c:	d804      	bhi.n	800cf98 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7f9 fb26 	bl	80065e0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	e0f7      	b.n	800d188 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	4a7c      	ldr	r2, [pc, #496]	; (800d190 <ip4_input+0x278>)
 800cf9e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	4a7a      	ldr	r2, [pc, #488]	; (800d190 <ip4_input+0x278>)
 800cfa6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cfa8:	4b79      	ldr	r3, [pc, #484]	; (800d190 <ip4_input+0x278>)
 800cfaa:	695b      	ldr	r3, [r3, #20]
 800cfac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfb0:	2be0      	cmp	r3, #224	; 0xe0
 800cfb2:	d112      	bne.n	800cfda <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d007      	beq.n	800cfd4 <ip4_input+0xbc>
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <ip4_input+0xbc>
      netif = inp;
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	613b      	str	r3, [r7, #16]
 800cfd2:	e041      	b.n	800d058 <ip4_input+0x140>
    } else {
      netif = NULL;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	613b      	str	r3, [r7, #16]
 800cfd8:	e03e      	b.n	800d058 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d014      	beq.n	800d01c <ip4_input+0x104>
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	3304      	adds	r3, #4
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00f      	beq.n	800d01c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cffc:	4b64      	ldr	r3, [pc, #400]	; (800d190 <ip4_input+0x278>)
 800cffe:	695a      	ldr	r2, [r3, #20]
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	3304      	adds	r3, #4
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	429a      	cmp	r2, r3
 800d008:	d026      	beq.n	800d058 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d00a:	4b61      	ldr	r3, [pc, #388]	; (800d190 <ip4_input+0x278>)
 800d00c:	695b      	ldr	r3, [r3, #20]
 800d00e:	6939      	ldr	r1, [r7, #16]
 800d010:	4618      	mov	r0, r3
 800d012:	f000 f993 	bl	800d33c <ip4_addr_isbroadcast_u32>
 800d016:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d11d      	bne.n	800d058 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00d      	beq.n	800d03e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800d022:	4b5b      	ldr	r3, [pc, #364]	; (800d190 <ip4_input+0x278>)
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b7f      	cmp	r3, #127	; 0x7f
 800d02a:	d102      	bne.n	800d032 <ip4_input+0x11a>
          netif = NULL;
 800d02c:	2300      	movs	r3, #0
 800d02e:	613b      	str	r3, [r7, #16]
          break;
 800d030:	e012      	b.n	800d058 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800d036:	4b57      	ldr	r3, [pc, #348]	; (800d194 <ip4_input+0x27c>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	613b      	str	r3, [r7, #16]
 800d03c:	e002      	b.n	800d044 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800d044:	693a      	ldr	r2, [r7, #16]
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d102      	bne.n	800d052 <ip4_input+0x13a>
        netif = netif->next;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1c4      	bne.n	800cfe2 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d058:	4b4d      	ldr	r3, [pc, #308]	; (800d190 <ip4_input+0x278>)
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 f96c 	bl	800d33c <ip4_addr_isbroadcast_u32>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d105      	bne.n	800d076 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d06a:	4b49      	ldr	r3, [pc, #292]	; (800d190 <ip4_input+0x278>)
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d072:	2be0      	cmp	r3, #224	; 0xe0
 800d074:	d104      	bne.n	800d080 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7f9 fab2 	bl	80065e0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	e083      	b.n	800d188 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d104      	bne.n	800d090 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f7f9 faaa 	bl	80065e0 <pbuf_free>
    return ERR_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	e07b      	b.n	800d188 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	88db      	ldrh	r3, [r3, #6]
 800d094:	b29b      	uxth	r3, r3
 800d096:	461a      	mov	r2, r3
 800d098:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d09c:	4013      	ands	r3, r2
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00b      	beq.n	800d0ba <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 fc8e 	bl	800d9c4 <ip4_reass>
 800d0a8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <ip4_input+0x19c>
      return ERR_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e069      	b.n	800d188 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d0ba:	4a35      	ldr	r2, [pc, #212]	; (800d190 <ip4_input+0x278>)
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d0c0:	4a33      	ldr	r2, [pc, #204]	; (800d190 <ip4_input+0x278>)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d0c6:	4a32      	ldr	r2, [pc, #200]	; (800d190 <ip4_input+0x278>)
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	f003 030f 	and.w	r3, r3, #15
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	4b2c      	ldr	r3, [pc, #176]	; (800d190 <ip4_input+0x278>)
 800d0de:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800d0e0:	897b      	ldrh	r3, [r7, #10]
 800d0e2:	425b      	negs	r3, r3
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	b21b      	sxth	r3, r3
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7f9 fa54 	bl	8006598 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	7a5b      	ldrb	r3, [r3, #9]
 800d0f4:	2b11      	cmp	r3, #17
 800d0f6:	d006      	beq.n	800d106 <ip4_input+0x1ee>
 800d0f8:	2b11      	cmp	r3, #17
 800d0fa:	dc13      	bgt.n	800d124 <ip4_input+0x20c>
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d00c      	beq.n	800d11a <ip4_input+0x202>
 800d100:	2b06      	cmp	r3, #6
 800d102:	d005      	beq.n	800d110 <ip4_input+0x1f8>
 800d104:	e00e      	b.n	800d124 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800d106:	6839      	ldr	r1, [r7, #0]
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7fe fa91 	bl	800b630 <udp_input>
      break;
 800d10e:	e028      	b.n	800d162 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7fa ff42 	bl	8007f9c <tcp_input>
      break;
 800d118:	e023      	b.n	800d162 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff fd03 	bl	800cb28 <icmp_input>
      break;
 800d122:	e01e      	b.n	800d162 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d124:	4b1a      	ldr	r3, [pc, #104]	; (800d190 <ip4_input+0x278>)
 800d126:	695b      	ldr	r3, [r3, #20]
 800d128:	6939      	ldr	r1, [r7, #16]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f000 f906 	bl	800d33c <ip4_addr_isbroadcast_u32>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d112      	bne.n	800d15c <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d136:	4b16      	ldr	r3, [pc, #88]	; (800d190 <ip4_input+0x278>)
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d13e:	2be0      	cmp	r3, #224	; 0xe0
 800d140:	d00c      	beq.n	800d15c <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800d142:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d146:	4619      	mov	r1, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7f9 fa37 	bl	80065bc <pbuf_header_force>
        p->payload = iphdr;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	697a      	ldr	r2, [r7, #20]
 800d152:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d154:	2102      	movs	r1, #2
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff fdec 	bl	800cd34 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7f9 fa3f 	bl	80065e0 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d162:	4b0b      	ldr	r3, [pc, #44]	; (800d190 <ip4_input+0x278>)
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d168:	4b09      	ldr	r3, [pc, #36]	; (800d190 <ip4_input+0x278>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d16e:	4b08      	ldr	r3, [pc, #32]	; (800d190 <ip4_input+0x278>)
 800d170:	2200      	movs	r2, #0
 800d172:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d174:	4b06      	ldr	r3, [pc, #24]	; (800d190 <ip4_input+0x278>)
 800d176:	2200      	movs	r2, #0
 800d178:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d17a:	4b05      	ldr	r3, [pc, #20]	; (800d190 <ip4_input+0x278>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d180:	4b03      	ldr	r3, [pc, #12]	; (800d190 <ip4_input+0x278>)
 800d182:	2200      	movs	r2, #0
 800d184:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20003678 	.word	0x20003678
 800d194:	20006b98 	.word	0x20006b98

0800d198 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08a      	sub	sp, #40	; 0x28
 800d19c:	af04      	add	r7, sp, #16
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d009      	beq.n	800d1c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d003      	beq.n	800d1be <ip4_output_if+0x26>
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d102      	bne.n	800d1c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d1c4:	78fa      	ldrb	r2, [r7, #3]
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	9302      	str	r3, [sp, #8]
 800d1ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	6979      	ldr	r1, [r7, #20]
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f000 f805 	bl	800d1ec <ip4_output_if_src>
 800d1e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b088      	sub	sp, #32
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	89db      	ldrh	r3, [r3, #14]
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d006      	beq.n	800d210 <ip4_output_if_src+0x24>
 800d202:	4b48      	ldr	r3, [pc, #288]	; (800d324 <ip4_output_if_src+0x138>)
 800d204:	f240 3233 	movw	r2, #819	; 0x333
 800d208:	4947      	ldr	r1, [pc, #284]	; (800d328 <ip4_output_if_src+0x13c>)
 800d20a:	4848      	ldr	r0, [pc, #288]	; (800d32c <ip4_output_if_src+0x140>)
 800d20c:	f001 f8de 	bl	800e3cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d060      	beq.n	800d2d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d216:	2314      	movs	r3, #20
 800d218:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800d21a:	2114      	movs	r1, #20
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f7f9 f9bb 	bl	8006598 <pbuf_header>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d228:	f06f 0301 	mvn.w	r3, #1
 800d22c:	e075      	b.n	800d31a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	895b      	ldrh	r3, [r3, #10]
 800d238:	2b13      	cmp	r3, #19
 800d23a:	d806      	bhi.n	800d24a <ip4_output_if_src+0x5e>
 800d23c:	4b39      	ldr	r3, [pc, #228]	; (800d324 <ip4_output_if_src+0x138>)
 800d23e:	f44f 7258 	mov.w	r2, #864	; 0x360
 800d242:	493b      	ldr	r1, [pc, #236]	; (800d330 <ip4_output_if_src+0x144>)
 800d244:	4839      	ldr	r0, [pc, #228]	; (800d32c <ip4_output_if_src+0x140>)
 800d246:	f001 f8c1 	bl	800e3cc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	78fa      	ldrb	r2, [r7, #3]
 800d24e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d256:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d260:	8b7b      	ldrh	r3, [r7, #26]
 800d262:	089b      	lsrs	r3, r3, #2
 800d264:	b29b      	uxth	r3, r3
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d278:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	891b      	ldrh	r3, [r3, #8]
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f8 f881 	bl	8005386 <lwip_htons>
 800d284:	4603      	mov	r3, r0
 800d286:	461a      	mov	r2, r3
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	2200      	movs	r2, #0
 800d290:	719a      	strb	r2, [r3, #6]
 800d292:	2200      	movs	r2, #0
 800d294:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d296:	4b27      	ldr	r3, [pc, #156]	; (800d334 <ip4_output_if_src+0x148>)
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7f8 f873 	bl	8005386 <lwip_htons>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d2a8:	4b22      	ldr	r3, [pc, #136]	; (800d334 <ip4_output_if_src+0x148>)
 800d2aa:	881b      	ldrh	r3, [r3, #0]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	4b20      	ldr	r3, [pc, #128]	; (800d334 <ip4_output_if_src+0x148>)
 800d2b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d104      	bne.n	800d2c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d2ba:	4b1f      	ldr	r3, [pc, #124]	; (800d338 <ip4_output_if_src+0x14c>)
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	60da      	str	r2, [r3, #12]
 800d2c2:	e003      	b.n	800d2cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	729a      	strb	r2, [r3, #10]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	72da      	strb	r2, [r3, #11]
 800d2d6:	e008      	b.n	800d2ea <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d2e4:	f107 0314 	add.w	r3, r7, #20
 800d2e8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00c      	beq.n	800d30c <ip4_output_if_src+0x120>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	891a      	ldrh	r2, [r3, #8]
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d906      	bls.n	800d30c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f000 fd0a 	bl	800dd1c <ip4_frag>
 800d308:	4603      	mov	r3, r0
 800d30a:	e006      	b.n	800d31a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	68f9      	ldr	r1, [r7, #12]
 800d314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d316:	4798      	blx	r3
 800d318:	4603      	mov	r3, r0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3720      	adds	r7, #32
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	08011050 	.word	0x08011050
 800d328:	08011084 	.word	0x08011084
 800d32c:	08011090 	.word	0x08011090
 800d330:	080110b8 	.word	0x080110b8
 800d334:	2000053e 	.word	0x2000053e
 800d338:	0801146c 	.word	0x0801146c

0800d33c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d350:	d002      	beq.n	800d358 <ip4_addr_isbroadcast_u32+0x1c>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d101      	bne.n	800d35c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d358:	2301      	movs	r3, #1
 800d35a:	e02a      	b.n	800d3b2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d362:	f003 0302 	and.w	r3, r3, #2
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	e021      	b.n	800d3b2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	3304      	adds	r3, #4
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	429a      	cmp	r2, r3
 800d378:	d101      	bne.n	800d37e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	e019      	b.n	800d3b2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	3304      	adds	r3, #4
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	405a      	eors	r2, r3
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	3308      	adds	r3, #8
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4013      	ands	r3, r2
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10d      	bne.n	800d3b0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	3308      	adds	r3, #8
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	43da      	mvns	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	3308      	adds	r3, #8
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d101      	bne.n	800d3b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e000      	b.n	800d3b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d3b0:	2300      	movs	r3, #0
  }
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3714      	adds	r7, #20
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bc80      	pop	{r7}
 800d3ba:	4770      	bx	lr

0800d3bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d3c6:	4b12      	ldr	r3, [pc, #72]	; (800d410 <ip_reass_tmr+0x54>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d3cc:	e018      	b.n	800d400 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	7fdb      	ldrb	r3, [r3, #31]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00b      	beq.n	800d3ee <ip_reass_tmr+0x32>
      r->timer--;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	7fdb      	ldrb	r3, [r3, #31]
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	e008      	b.n	800d400 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d3f8:	68b9      	ldr	r1, [r7, #8]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f80a 	bl	800d414 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1e3      	bne.n	800d3ce <ip_reass_tmr+0x12>
     }
   }
}
 800d406:	bf00      	nop
 800d408:	bf00      	nop
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20000540 	.word	0x20000540

0800d414 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	429a      	cmp	r2, r3
 800d428:	d105      	bne.n	800d436 <ip_reass_free_complete_datagram+0x22>
 800d42a:	4b45      	ldr	r3, [pc, #276]	; (800d540 <ip_reass_free_complete_datagram+0x12c>)
 800d42c:	22ab      	movs	r2, #171	; 0xab
 800d42e:	4945      	ldr	r1, [pc, #276]	; (800d544 <ip_reass_free_complete_datagram+0x130>)
 800d430:	4845      	ldr	r0, [pc, #276]	; (800d548 <ip_reass_free_complete_datagram+0x134>)
 800d432:	f000 ffcb 	bl	800e3cc <iprintf>
  if (prev != NULL) {
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00a      	beq.n	800d452 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	429a      	cmp	r2, r3
 800d444:	d005      	beq.n	800d452 <ip_reass_free_complete_datagram+0x3e>
 800d446:	4b3e      	ldr	r3, [pc, #248]	; (800d540 <ip_reass_free_complete_datagram+0x12c>)
 800d448:	22ad      	movs	r2, #173	; 0xad
 800d44a:	4940      	ldr	r1, [pc, #256]	; (800d54c <ip_reass_free_complete_datagram+0x138>)
 800d44c:	483e      	ldr	r0, [pc, #248]	; (800d548 <ip_reass_free_complete_datagram+0x134>)
 800d44e:	f000 ffbd 	bl	800e3cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	889b      	ldrh	r3, [r3, #4]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	2b00      	cmp	r3, #0
 800d462:	d12a      	bne.n	800d4ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	6858      	ldr	r0, [r3, #4]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	3308      	adds	r3, #8
 800d47a:	2214      	movs	r2, #20
 800d47c:	4619      	mov	r1, r3
 800d47e:	f000 fee9 	bl	800e254 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d482:	2101      	movs	r1, #1
 800d484:	69b8      	ldr	r0, [r7, #24]
 800d486:	f7ff fc65 	bl	800cd54 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d48a:	69b8      	ldr	r0, [r7, #24]
 800d48c:	f7f9 f93c 	bl	8006708 <pbuf_clen>
 800d490:	4603      	mov	r3, r0
 800d492:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d494:	8bfa      	ldrh	r2, [r7, #30]
 800d496:	8a7b      	ldrh	r3, [r7, #18]
 800d498:	4413      	add	r3, r2
 800d49a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d49e:	db05      	blt.n	800d4ac <ip_reass_free_complete_datagram+0x98>
 800d4a0:	4b27      	ldr	r3, [pc, #156]	; (800d540 <ip_reass_free_complete_datagram+0x12c>)
 800d4a2:	22bc      	movs	r2, #188	; 0xbc
 800d4a4:	492a      	ldr	r1, [pc, #168]	; (800d550 <ip_reass_free_complete_datagram+0x13c>)
 800d4a6:	4828      	ldr	r0, [pc, #160]	; (800d548 <ip_reass_free_complete_datagram+0x134>)
 800d4a8:	f000 ff90 	bl	800e3cc <iprintf>
    pbufs_freed += clen;
 800d4ac:	8bfa      	ldrh	r2, [r7, #30]
 800d4ae:	8a7b      	ldrh	r3, [r7, #18]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d4b4:	69b8      	ldr	r0, [r7, #24]
 800d4b6:	f7f9 f893 	bl	80065e0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d4c0:	e01f      	b.n	800d502 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f7f9 f918 	bl	8006708 <pbuf_clen>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d4dc:	8bfa      	ldrh	r2, [r7, #30]
 800d4de:	8a7b      	ldrh	r3, [r7, #18]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4e6:	db05      	blt.n	800d4f4 <ip_reass_free_complete_datagram+0xe0>
 800d4e8:	4b15      	ldr	r3, [pc, #84]	; (800d540 <ip_reass_free_complete_datagram+0x12c>)
 800d4ea:	22cc      	movs	r2, #204	; 0xcc
 800d4ec:	4918      	ldr	r1, [pc, #96]	; (800d550 <ip_reass_free_complete_datagram+0x13c>)
 800d4ee:	4816      	ldr	r0, [pc, #88]	; (800d548 <ip_reass_free_complete_datagram+0x134>)
 800d4f0:	f000 ff6c 	bl	800e3cc <iprintf>
    pbufs_freed += clen;
 800d4f4:	8bfa      	ldrh	r2, [r7, #30]
 800d4f6:	8a7b      	ldrh	r3, [r7, #18]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f7f9 f86f 	bl	80065e0 <pbuf_free>
  while (p != NULL) {
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1dc      	bne.n	800d4c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d508:	6839      	ldr	r1, [r7, #0]
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f8c2 	bl	800d694 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d510:	4b10      	ldr	r3, [pc, #64]	; (800d554 <ip_reass_free_complete_datagram+0x140>)
 800d512:	881b      	ldrh	r3, [r3, #0]
 800d514:	8bfa      	ldrh	r2, [r7, #30]
 800d516:	429a      	cmp	r2, r3
 800d518:	d905      	bls.n	800d526 <ip_reass_free_complete_datagram+0x112>
 800d51a:	4b09      	ldr	r3, [pc, #36]	; (800d540 <ip_reass_free_complete_datagram+0x12c>)
 800d51c:	22d2      	movs	r2, #210	; 0xd2
 800d51e:	490e      	ldr	r1, [pc, #56]	; (800d558 <ip_reass_free_complete_datagram+0x144>)
 800d520:	4809      	ldr	r0, [pc, #36]	; (800d548 <ip_reass_free_complete_datagram+0x134>)
 800d522:	f000 ff53 	bl	800e3cc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800d526:	4b0b      	ldr	r3, [pc, #44]	; (800d554 <ip_reass_free_complete_datagram+0x140>)
 800d528:	881a      	ldrh	r2, [r3, #0]
 800d52a:	8bfb      	ldrh	r3, [r7, #30]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	b29a      	uxth	r2, r3
 800d530:	4b08      	ldr	r3, [pc, #32]	; (800d554 <ip_reass_free_complete_datagram+0x140>)
 800d532:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d534:	8bfb      	ldrh	r3, [r7, #30]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3720      	adds	r7, #32
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	080110e8 	.word	0x080110e8
 800d544:	08011124 	.word	0x08011124
 800d548:	08011130 	.word	0x08011130
 800d54c:	08011158 	.word	0x08011158
 800d550:	0801116c 	.word	0x0801116c
 800d554:	20000544 	.word	0x20000544
 800d558:	0801118c 	.word	0x0801118c

0800d55c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08a      	sub	sp, #40	; 0x28
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d566:	2300      	movs	r3, #0
 800d568:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d56a:	2300      	movs	r3, #0
 800d56c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d56e:	2300      	movs	r3, #0
 800d570:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d572:	2300      	movs	r3, #0
 800d574:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d57a:	4b28      	ldr	r3, [pc, #160]	; (800d61c <ip_reass_remove_oldest_datagram+0xc0>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d580:	e030      	b.n	800d5e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d584:	695a      	ldr	r2, [r3, #20]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d10c      	bne.n	800d5a8 <ip_reass_remove_oldest_datagram+0x4c>
 800d58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d590:	699a      	ldr	r2, [r3, #24]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	429a      	cmp	r2, r3
 800d598:	d106      	bne.n	800d5a8 <ip_reass_remove_oldest_datagram+0x4c>
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	899a      	ldrh	r2, [r3, #12]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	889b      	ldrh	r3, [r3, #4]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d014      	beq.n	800d5d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d104      	bne.n	800d5be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	61bb      	str	r3, [r7, #24]
 800d5bc:	e009      	b.n	800d5d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c0:	7fda      	ldrb	r2, [r3, #31]
 800d5c2:	6a3b      	ldr	r3, [r7, #32]
 800d5c4:	7fdb      	ldrb	r3, [r3, #31]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d803      	bhi.n	800d5d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d001      	beq.n	800d5de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1cb      	bne.n	800d582 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d008      	beq.n	800d602 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d5f0:	69b9      	ldr	r1, [r7, #24]
 800d5f2:	6a38      	ldr	r0, [r7, #32]
 800d5f4:	f7ff ff0e 	bl	800d414 <ip_reass_free_complete_datagram>
 800d5f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4413      	add	r3, r2
 800d600:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d602:	697a      	ldr	r2, [r7, #20]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	da02      	bge.n	800d610 <ip_reass_remove_oldest_datagram+0xb4>
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	dcac      	bgt.n	800d56a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d610:	697b      	ldr	r3, [r7, #20]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3728      	adds	r7, #40	; 0x28
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	20000540 	.word	0x20000540

0800d620 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d62a:	2004      	movs	r0, #4
 800d62c:	f7f8 fa54 	bl	8005ad8 <memp_malloc>
 800d630:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d110      	bne.n	800d65a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff ff8e 	bl	800d55c <ip_reass_remove_oldest_datagram>
 800d640:	4602      	mov	r2, r0
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	4293      	cmp	r3, r2
 800d646:	dc03      	bgt.n	800d650 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d648:	2004      	movs	r0, #4
 800d64a:	f7f8 fa45 	bl	8005ad8 <memp_malloc>
 800d64e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d101      	bne.n	800d65a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800d656:	2300      	movs	r3, #0
 800d658:	e016      	b.n	800d688 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d65a:	2220      	movs	r2, #32
 800d65c:	2100      	movs	r1, #0
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f000 fe06 	bl	800e270 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2203      	movs	r2, #3
 800d668:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d66a:	4b09      	ldr	r3, [pc, #36]	; (800d690 <ip_reass_enqueue_new_datagram+0x70>)
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d672:	4a07      	ldr	r2, [pc, #28]	; (800d690 <ip_reass_enqueue_new_datagram+0x70>)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3308      	adds	r3, #8
 800d67c:	2214      	movs	r2, #20
 800d67e:	6879      	ldr	r1, [r7, #4]
 800d680:	4618      	mov	r0, r3
 800d682:	f000 fde7 	bl	800e254 <memcpy>
  return ipr;
 800d686:	68fb      	ldr	r3, [r7, #12]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	20000540 	.word	0x20000540

0800d694 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d69e:	4b10      	ldr	r3, [pc, #64]	; (800d6e0 <ip_reass_dequeue_datagram+0x4c>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d104      	bne.n	800d6b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a0c      	ldr	r2, [pc, #48]	; (800d6e0 <ip_reass_dequeue_datagram+0x4c>)
 800d6ae:	6013      	str	r3, [r2, #0]
 800d6b0:	e00d      	b.n	800d6ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d106      	bne.n	800d6c6 <ip_reass_dequeue_datagram+0x32>
 800d6b8:	4b0a      	ldr	r3, [pc, #40]	; (800d6e4 <ip_reass_dequeue_datagram+0x50>)
 800d6ba:	f240 1245 	movw	r2, #325	; 0x145
 800d6be:	490a      	ldr	r1, [pc, #40]	; (800d6e8 <ip_reass_dequeue_datagram+0x54>)
 800d6c0:	480a      	ldr	r0, [pc, #40]	; (800d6ec <ip_reass_dequeue_datagram+0x58>)
 800d6c2:	f000 fe83 	bl	800e3cc <iprintf>
    prev->next = ipr->next;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d6ce:	6879      	ldr	r1, [r7, #4]
 800d6d0:	2004      	movs	r0, #4
 800d6d2:	f7f8 fa4d 	bl	8005b70 <memp_free>
}
 800d6d6:	bf00      	nop
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20000540 	.word	0x20000540
 800d6e4:	080110e8 	.word	0x080110e8
 800d6e8:	080111a8 	.word	0x080111a8
 800d6ec:	08011130 	.word	0x08011130

0800d6f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08c      	sub	sp, #48	; 0x30
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d700:	2301      	movs	r3, #1
 800d702:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	885b      	ldrh	r3, [r3, #2]
 800d70e:	b29b      	uxth	r3, r3
 800d710:	4618      	mov	r0, r3
 800d712:	f7f7 fe38 	bl	8005386 <lwip_htons>
 800d716:	4603      	mov	r3, r0
 800d718:	461a      	mov	r2, r3
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	f003 030f 	and.w	r3, r3, #15
 800d724:	b29b      	uxth	r3, r3
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	b29b      	uxth	r3, r3
 800d72a:	1ad3      	subs	r3, r2, r3
 800d72c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	88db      	ldrh	r3, [r3, #6]
 800d732:	b29b      	uxth	r3, r3
 800d734:	4618      	mov	r0, r3
 800d736:	f7f7 fe26 	bl	8005386 <lwip_htons>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d740:	b29b      	uxth	r3, r3
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74e:	2200      	movs	r2, #0
 800d750:	701a      	strb	r2, [r3, #0]
 800d752:	2200      	movs	r2, #0
 800d754:	705a      	strb	r2, [r3, #1]
 800d756:	2200      	movs	r2, #0
 800d758:	709a      	strb	r2, [r3, #2]
 800d75a:	2200      	movs	r2, #0
 800d75c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d760:	8b3a      	ldrh	r2, [r7, #24]
 800d762:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800d764:	8b3a      	ldrh	r2, [r7, #24]
 800d766:	8b7b      	ldrh	r3, [r7, #26]
 800d768:	4413      	add	r3, r2
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	627b      	str	r3, [r7, #36]	; 0x24
 800d776:	e061      	b.n	800d83c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d780:	889b      	ldrh	r3, [r3, #4]
 800d782:	b29a      	uxth	r2, r3
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	889b      	ldrh	r3, [r3, #4]
 800d788:	b29b      	uxth	r3, r3
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d232      	bcs.n	800d7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d792:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	2b00      	cmp	r3, #0
 800d798:	d01f      	beq.n	800d7da <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	889b      	ldrh	r3, [r3, #4]
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	88db      	ldrh	r3, [r3, #6]
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	f0c0 80e3 	bcc.w	800d972 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	88db      	ldrh	r3, [r3, #6]
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	889b      	ldrh	r3, [r3, #4]
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	f200 80da 	bhi.w	800d972 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	88db      	ldrh	r3, [r3, #6]
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	889b      	ldrh	r3, [r3, #4]
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d037      	beq.n	800d844 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d7d8:	e034      	b.n	800d844 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	88db      	ldrh	r3, [r3, #6]
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	889b      	ldrh	r3, [r3, #4]
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	f200 80c5 	bhi.w	800d976 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	605a      	str	r2, [r3, #4]
      break;
 800d7f2:	e027      	b.n	800d844 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800d7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f6:	889b      	ldrh	r3, [r3, #4]
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	889b      	ldrh	r3, [r3, #4]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	429a      	cmp	r2, r3
 800d802:	f000 80ba 	beq.w	800d97a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	889b      	ldrh	r3, [r3, #4]
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	88db      	ldrh	r3, [r3, #6]
 800d810:	b29b      	uxth	r3, r3
 800d812:	429a      	cmp	r2, r3
 800d814:	f0c0 80b3 	bcc.w	800d97e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d009      	beq.n	800d832 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d820:	88db      	ldrh	r3, [r3, #6]
 800d822:	b29a      	uxth	r2, r3
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	889b      	ldrh	r3, [r3, #4]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d001      	beq.n	800d832 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d82e:	2300      	movs	r3, #0
 800d830:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d19a      	bne.n	800d778 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800d842:	e000      	b.n	800d846 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800d844:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d12d      	bne.n	800d8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d01c      	beq.n	800d88c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d854:	88db      	ldrh	r3, [r3, #6]
 800d856:	b29a      	uxth	r2, r3
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	889b      	ldrh	r3, [r3, #4]
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	429a      	cmp	r2, r3
 800d860:	d906      	bls.n	800d870 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d862:	4b51      	ldr	r3, [pc, #324]	; (800d9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d864:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d868:	4950      	ldr	r1, [pc, #320]	; (800d9ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d86a:	4851      	ldr	r0, [pc, #324]	; (800d9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d86c:	f000 fdae 	bl	800e3cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d878:	88db      	ldrh	r3, [r3, #6]
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	889b      	ldrh	r3, [r3, #4]
 800d880:	b29b      	uxth	r3, r3
 800d882:	429a      	cmp	r2, r3
 800d884:	d010      	beq.n	800d8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	623b      	str	r3, [r7, #32]
 800d88a:	e00d      	b.n	800d8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d006      	beq.n	800d8a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d894:	4b44      	ldr	r3, [pc, #272]	; (800d9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d896:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d89a:	4946      	ldr	r1, [pc, #280]	; (800d9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d89c:	4844      	ldr	r0, [pc, #272]	; (800d9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d89e:	f000 fd95 	bl	800e3cc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d105      	bne.n	800d8ba <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	7f9b      	ldrb	r3, [r3, #30]
 800d8b2:	f003 0301 	and.w	r3, r3, #1
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d059      	beq.n	800d96e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d04f      	beq.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d006      	beq.n	800d8d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	889b      	ldrh	r3, [r3, #4]
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d002      	beq.n	800d8dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	623b      	str	r3, [r7, #32]
 800d8da:	e041      	b.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8de:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d8e6:	e012      	b.n	800d90e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	88db      	ldrh	r3, [r3, #6]
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	889b      	ldrh	r3, [r3, #4]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d002      	beq.n	800d904 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	623b      	str	r3, [r7, #32]
            break;
 800d902:	e007      	b.n	800d914 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1e9      	bne.n	800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d914:	6a3b      	ldr	r3, [r7, #32]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d022      	beq.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d106      	bne.n	800d930 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d922:	4b21      	ldr	r3, [pc, #132]	; (800d9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d924:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d928:	4923      	ldr	r1, [pc, #140]	; (800d9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d92a:	4821      	ldr	r0, [pc, #132]	; (800d9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d92c:	f000 fd4e 	bl	800e3cc <iprintf>
          LWIP_ASSERT("sanity check",
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d938:	429a      	cmp	r2, r3
 800d93a:	d106      	bne.n	800d94a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d93c:	4b1a      	ldr	r3, [pc, #104]	; (800d9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d93e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d942:	491d      	ldr	r1, [pc, #116]	; (800d9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d944:	481a      	ldr	r0, [pc, #104]	; (800d9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d946:	f000 fd41 	bl	800e3cc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d006      	beq.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d952:	4b15      	ldr	r3, [pc, #84]	; (800d9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d954:	f240 12d7 	movw	r2, #471	; 0x1d7
 800d958:	4918      	ldr	r1, [pc, #96]	; (800d9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d95a:	4815      	ldr	r0, [pc, #84]	; (800d9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d95c:	f000 fd36 	bl	800e3cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d960:	6a3b      	ldr	r3, [r7, #32]
 800d962:	2b00      	cmp	r3, #0
 800d964:	bf14      	ite	ne
 800d966:	2301      	movne	r3, #1
 800d968:	2300      	moveq	r3, #0
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	e018      	b.n	800d9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d96e:	2300      	movs	r3, #0
 800d970:	e016      	b.n	800d9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800d972:	bf00      	nop
 800d974:	e004      	b.n	800d980 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d976:	bf00      	nop
 800d978:	e002      	b.n	800d980 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d97a:	bf00      	nop
 800d97c:	e000      	b.n	800d980 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d97e:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d980:	68b8      	ldr	r0, [r7, #8]
 800d982:	f7f8 fec1 	bl	8006708 <pbuf_clen>
 800d986:	4603      	mov	r3, r0
 800d988:	461a      	mov	r2, r3
 800d98a:	4b0d      	ldr	r3, [pc, #52]	; (800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d98c:	881b      	ldrh	r3, [r3, #0]
 800d98e:	1a9b      	subs	r3, r3, r2
 800d990:	b29a      	uxth	r2, r3
 800d992:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d994:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d996:	68b8      	ldr	r0, [r7, #8]
 800d998:	f7f8 fe22 	bl	80065e0 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d99c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3730      	adds	r7, #48	; 0x30
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	080110e8 	.word	0x080110e8
 800d9ac:	080111c4 	.word	0x080111c4
 800d9b0:	08011130 	.word	0x08011130
 800d9b4:	080111e4 	.word	0x080111e4
 800d9b8:	0801121c 	.word	0x0801121c
 800d9bc:	0801122c 	.word	0x0801122c
 800d9c0:	20000544 	.word	0x20000544

0800d9c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08e      	sub	sp, #56	; 0x38
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	f003 030f 	and.w	r3, r3, #15
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	2b14      	cmp	r3, #20
 800d9de:	f040 8131 	bne.w	800dc44 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e4:	88db      	ldrh	r3, [r3, #6]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7f7 fccc 	bl	8005386 <lwip_htons>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	00db      	lsls	r3, r3, #3
 800d9f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fc:	885b      	ldrh	r3, [r3, #2]
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	4618      	mov	r0, r3
 800da02:	f7f7 fcc0 	bl	8005386 <lwip_htons>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	b29b      	uxth	r3, r3
 800da10:	f003 030f 	and.w	r3, r3, #15
 800da14:	b29b      	uxth	r3, r3
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	b29b      	uxth	r3, r3
 800da1a:	1ad3      	subs	r3, r2, r3
 800da1c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7f8 fe72 	bl	8006708 <pbuf_clen>
 800da24:	4603      	mov	r3, r0
 800da26:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800da28:	4b8e      	ldr	r3, [pc, #568]	; (800dc64 <ip4_reass+0x2a0>)
 800da2a:	881b      	ldrh	r3, [r3, #0]
 800da2c:	461a      	mov	r2, r3
 800da2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da30:	4413      	add	r3, r2
 800da32:	2b0a      	cmp	r3, #10
 800da34:	dd10      	ble.n	800da58 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800da36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da38:	4619      	mov	r1, r3
 800da3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da3c:	f7ff fd8e 	bl	800d55c <ip_reass_remove_oldest_datagram>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	f000 8100 	beq.w	800dc48 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800da48:	4b86      	ldr	r3, [pc, #536]	; (800dc64 <ip4_reass+0x2a0>)
 800da4a:	881b      	ldrh	r3, [r3, #0]
 800da4c:	461a      	mov	r2, r3
 800da4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da50:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800da52:	2b0a      	cmp	r3, #10
 800da54:	f300 80f8 	bgt.w	800dc48 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800da58:	4b83      	ldr	r3, [pc, #524]	; (800dc68 <ip4_reass+0x2a4>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	633b      	str	r3, [r7, #48]	; 0x30
 800da5e:	e015      	b.n	800da8c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da62:	695a      	ldr	r2, [r3, #20]
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d10c      	bne.n	800da86 <ip4_reass+0xc2>
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	699a      	ldr	r2, [r3, #24]
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	429a      	cmp	r2, r3
 800da76:	d106      	bne.n	800da86 <ip4_reass+0xc2>
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	899a      	ldrh	r2, [r3, #12]
 800da7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7e:	889b      	ldrh	r3, [r3, #4]
 800da80:	b29b      	uxth	r3, r3
 800da82:	429a      	cmp	r2, r3
 800da84:	d006      	beq.n	800da94 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	633b      	str	r3, [r7, #48]	; 0x30
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1e6      	bne.n	800da60 <ip4_reass+0x9c>
 800da92:	e000      	b.n	800da96 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800da94:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d109      	bne.n	800dab0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800da9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da9e:	4619      	mov	r1, r3
 800daa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daa2:	f7ff fdbd 	bl	800d620 <ip_reass_enqueue_new_datagram>
 800daa6:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d11c      	bne.n	800dae8 <ip4_reass+0x124>
      goto nullreturn;
 800daae:	e0d0      	b.n	800dc52 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	88db      	ldrh	r3, [r3, #6]
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7f7 fc65 	bl	8005386 <lwip_htons>
 800dabc:	4603      	mov	r3, r0
 800dabe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d110      	bne.n	800dae8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac8:	89db      	ldrh	r3, [r3, #14]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7f7 fc5b 	bl	8005386 <lwip_htons>
 800dad0:	4603      	mov	r3, r0
 800dad2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d006      	beq.n	800dae8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	3308      	adds	r3, #8
 800dade:	2214      	movs	r2, #20
 800dae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 fbb6 	bl	800e254 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daea:	88db      	ldrh	r3, [r3, #6]
 800daec:	b29b      	uxth	r3, r3
 800daee:	f003 0320 	and.w	r3, r3, #32
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	bf0c      	ite	eq
 800daf6:	2301      	moveq	r3, #1
 800daf8:	2300      	movne	r3, #0
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00e      	beq.n	800db22 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800db04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db08:	4413      	add	r3, r2
 800db0a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800db0c:	8b7a      	ldrh	r2, [r7, #26]
 800db0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db10:	429a      	cmp	r2, r3
 800db12:	f0c0 809b 	bcc.w	800dc4c <ip4_reass+0x288>
 800db16:	8b7b      	ldrh	r3, [r7, #26]
 800db18:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800db1c:	4293      	cmp	r3, r2
 800db1e:	f200 8095 	bhi.w	800dc4c <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800db22:	69fa      	ldr	r2, [r7, #28]
 800db24:	6879      	ldr	r1, [r7, #4]
 800db26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db28:	f7ff fde2 	bl	800d6f0 <ip_reass_chain_frag_into_datagram_and_validate>
 800db2c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db34:	f000 808c 	beq.w	800dc50 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800db38:	4b4a      	ldr	r3, [pc, #296]	; (800dc64 <ip4_reass+0x2a0>)
 800db3a:	881a      	ldrh	r2, [r3, #0]
 800db3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db3e:	4413      	add	r3, r2
 800db40:	b29a      	uxth	r2, r3
 800db42:	4b48      	ldr	r3, [pc, #288]	; (800dc64 <ip4_reass+0x2a0>)
 800db44:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00d      	beq.n	800db68 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800db4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db50:	4413      	add	r3, r2
 800db52:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800db54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db56:	8a7a      	ldrh	r2, [r7, #18]
 800db58:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5c:	7f9b      	ldrb	r3, [r3, #30]
 800db5e:	f043 0301 	orr.w	r3, r3, #1
 800db62:	b2da      	uxtb	r2, r3
 800db64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db66:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d168      	bne.n	800dc40 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	8b9b      	ldrh	r3, [r3, #28]
 800db72:	3314      	adds	r3, #20
 800db74:	b29a      	uxth	r2, r3
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800db84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	3308      	adds	r3, #8
 800db90:	2214      	movs	r2, #20
 800db92:	4619      	mov	r1, r3
 800db94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db96:	f000 fb5d 	bl	800e254 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	8b9b      	ldrh	r3, [r3, #28]
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7f7 fbf1 	bl	8005386 <lwip_htons>
 800dba4:	4603      	mov	r3, r0
 800dba6:	461a      	mov	r2, r3
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbae:	2200      	movs	r2, #0
 800dbb0:	719a      	strb	r2, [r3, #6]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb8:	2200      	movs	r2, #0
 800dbba:	729a      	strb	r2, [r3, #10]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dbc6:	e00e      	b.n	800dbe6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800dbc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800dbce:	f06f 0113 	mvn.w	r1, #19
 800dbd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dbd4:	f7f8 fce0 	bl	8006598 <pbuf_header>
      pbuf_cat(p, r);
 800dbd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f7f8 fdcc 	bl	8006778 <pbuf_cat>
      r = iprh->next_pbuf;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1ed      	bne.n	800dbc8 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dbec:	4b1e      	ldr	r3, [pc, #120]	; (800dc68 <ip4_reass+0x2a4>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d102      	bne.n	800dbfc <ip4_reass+0x238>
      ipr_prev = NULL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbfa:	e010      	b.n	800dc1e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dbfc:	4b1a      	ldr	r3, [pc, #104]	; (800dc68 <ip4_reass+0x2a4>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc02:	e007      	b.n	800dc14 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d006      	beq.n	800dc1c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1f4      	bne.n	800dc04 <ip4_reass+0x240>
 800dc1a:	e000      	b.n	800dc1e <ip4_reass+0x25a>
          break;
 800dc1c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dc1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc22:	f7ff fd37 	bl	800d694 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7f8 fd6e 	bl	8006708 <pbuf_clen>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	461a      	mov	r2, r3
 800dc30:	4b0c      	ldr	r3, [pc, #48]	; (800dc64 <ip4_reass+0x2a0>)
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	1a9b      	subs	r3, r3, r2
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	4b0a      	ldr	r3, [pc, #40]	; (800dc64 <ip4_reass+0x2a0>)
 800dc3a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	e00c      	b.n	800dc5a <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dc40:	2300      	movs	r3, #0
 800dc42:	e00a      	b.n	800dc5a <ip4_reass+0x296>
    goto nullreturn;
 800dc44:	bf00      	nop
 800dc46:	e004      	b.n	800dc52 <ip4_reass+0x28e>
      goto nullreturn;
 800dc48:	bf00      	nop
 800dc4a:	e002      	b.n	800dc52 <ip4_reass+0x28e>
      goto nullreturn;
 800dc4c:	bf00      	nop
 800dc4e:	e000      	b.n	800dc52 <ip4_reass+0x28e>
    goto nullreturn;
 800dc50:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7f8 fcc4 	bl	80065e0 <pbuf_free>
  return NULL;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3738      	adds	r7, #56	; 0x38
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20000544 	.word	0x20000544
 800dc68:	20000540 	.word	0x20000540

0800dc6c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800dc70:	2005      	movs	r0, #5
 800dc72:	f7f7 ff31 	bl	8005ad8 <memp_malloc>
 800dc76:	4603      	mov	r3, r0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d106      	bne.n	800dc98 <ip_frag_free_pbuf_custom_ref+0x1c>
 800dc8a:	4b07      	ldr	r3, [pc, #28]	; (800dca8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dc8c:	f240 22ae 	movw	r2, #686	; 0x2ae
 800dc90:	4906      	ldr	r1, [pc, #24]	; (800dcac <ip_frag_free_pbuf_custom_ref+0x30>)
 800dc92:	4807      	ldr	r0, [pc, #28]	; (800dcb0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800dc94:	f000 fb9a 	bl	800e3cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	2005      	movs	r0, #5
 800dc9c:	f7f7 ff68 	bl	8005b70 <memp_free>
}
 800dca0:	bf00      	nop
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	080110e8 	.word	0x080110e8
 800dcac:	08011250 	.word	0x08011250
 800dcb0:	08011130 	.word	0x08011130

0800dcb4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d106      	bne.n	800dcd4 <ipfrag_free_pbuf_custom+0x20>
 800dcc6:	4b11      	ldr	r3, [pc, #68]	; (800dd0c <ipfrag_free_pbuf_custom+0x58>)
 800dcc8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800dccc:	4910      	ldr	r1, [pc, #64]	; (800dd10 <ipfrag_free_pbuf_custom+0x5c>)
 800dcce:	4811      	ldr	r0, [pc, #68]	; (800dd14 <ipfrag_free_pbuf_custom+0x60>)
 800dcd0:	f000 fb7c 	bl	800e3cc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d006      	beq.n	800dcea <ipfrag_free_pbuf_custom+0x36>
 800dcdc:	4b0b      	ldr	r3, [pc, #44]	; (800dd0c <ipfrag_free_pbuf_custom+0x58>)
 800dcde:	f240 22b9 	movw	r2, #697	; 0x2b9
 800dce2:	490d      	ldr	r1, [pc, #52]	; (800dd18 <ipfrag_free_pbuf_custom+0x64>)
 800dce4:	480b      	ldr	r0, [pc, #44]	; (800dd14 <ipfrag_free_pbuf_custom+0x60>)
 800dce6:	f000 fb71 	bl	800e3cc <iprintf>
  if (pcr->original != NULL) {
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	695b      	ldr	r3, [r3, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d004      	beq.n	800dcfc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	695b      	ldr	r3, [r3, #20]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7f8 fc72 	bl	80065e0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f7ff ffbd 	bl	800dc7c <ip_frag_free_pbuf_custom_ref>
}
 800dd02:	bf00      	nop
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	080110e8 	.word	0x080110e8
 800dd10:	0801125c 	.word	0x0801125c
 800dd14:	08011130 	.word	0x08011130
 800dd18:	08011268 	.word	0x08011268

0800dd1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b092      	sub	sp, #72	; 0x48
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd30:	3b14      	subs	r3, #20
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	da00      	bge.n	800dd38 <ip4_frag+0x1c>
 800dd36:	3307      	adds	r3, #7
 800dd38:	10db      	asrs	r3, r3, #3
 800dd3a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dd3c:	2314      	movs	r3, #20
 800dd3e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800dd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	f003 030f 	and.w	r3, r3, #15
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	2b14      	cmp	r3, #20
 800dd56:	d009      	beq.n	800dd6c <ip4_frag+0x50>
 800dd58:	4b7a      	ldr	r3, [pc, #488]	; (800df44 <ip4_frag+0x228>)
 800dd5a:	f240 22e1 	movw	r2, #737	; 0x2e1
 800dd5e:	497a      	ldr	r1, [pc, #488]	; (800df48 <ip4_frag+0x22c>)
 800dd60:	487a      	ldr	r0, [pc, #488]	; (800df4c <ip4_frag+0x230>)
 800dd62:	f000 fb33 	bl	800e3cc <iprintf>
 800dd66:	f06f 0305 	mvn.w	r3, #5
 800dd6a:	e0e6      	b.n	800df3a <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6e:	88db      	ldrh	r3, [r3, #6]
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7f7 fb07 	bl	8005386 <lwip_htons>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800dd7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dd7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd82:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800dd84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dd86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d009      	beq.n	800dda2 <ip4_frag+0x86>
 800dd8e:	4b6d      	ldr	r3, [pc, #436]	; (800df44 <ip4_frag+0x228>)
 800dd90:	f240 22e6 	movw	r2, #742	; 0x2e6
 800dd94:	496e      	ldr	r1, [pc, #440]	; (800df50 <ip4_frag+0x234>)
 800dd96:	486d      	ldr	r0, [pc, #436]	; (800df4c <ip4_frag+0x230>)
 800dd98:	f000 fb18 	bl	800e3cc <iprintf>
 800dd9c:	f06f 0305 	mvn.w	r3, #5
 800dda0:	e0cb      	b.n	800df3a <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	891b      	ldrh	r3, [r3, #8]
 800dda6:	3b14      	subs	r3, #20
 800dda8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800ddaa:	e0bd      	b.n	800df28 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800ddac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ddae:	00da      	lsls	r2, r3, #3
 800ddb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	bfa8      	it	ge
 800ddb6:	4613      	movge	r3, r2
 800ddb8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ddba:	2200      	movs	r2, #0
 800ddbc:	2114      	movs	r1, #20
 800ddbe:	2002      	movs	r0, #2
 800ddc0:	f7f8 f89c 	bl	8005efc <pbuf_alloc>
 800ddc4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f000 80b3 	beq.w	800df34 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	895b      	ldrh	r3, [r3, #10]
 800ddd2:	2b13      	cmp	r3, #19
 800ddd4:	d806      	bhi.n	800dde4 <ip4_frag+0xc8>
 800ddd6:	4b5b      	ldr	r3, [pc, #364]	; (800df44 <ip4_frag+0x228>)
 800ddd8:	f44f 7242 	mov.w	r2, #776	; 0x308
 800dddc:	495d      	ldr	r1, [pc, #372]	; (800df54 <ip4_frag+0x238>)
 800ddde:	485b      	ldr	r0, [pc, #364]	; (800df4c <ip4_frag+0x230>)
 800dde0:	f000 faf4 	bl	800e3cc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	2214      	movs	r2, #20
 800ddea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 fa31 	bl	800e254 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ddf2:	6a3b      	ldr	r3, [r7, #32]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800ddf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ddfa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800ddfc:	e04f      	b.n	800de9e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	895a      	ldrh	r2, [r3, #10]
 800de02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de04:	1ad3      	subs	r3, r2, r3
 800de06:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800de08:	8b7a      	ldrh	r2, [r7, #26]
 800de0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de0c:	4293      	cmp	r3, r2
 800de0e:	bf28      	it	cs
 800de10:	4613      	movcs	r3, r2
 800de12:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800de14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de16:	2b00      	cmp	r3, #0
 800de18:	d105      	bne.n	800de26 <ip4_frag+0x10a>
        poff = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	60fb      	str	r3, [r7, #12]
        continue;
 800de24:	e03b      	b.n	800de9e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800de26:	f7ff ff21 	bl	800dc6c <ip_frag_alloc_pbuf_custom_ref>
 800de2a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d103      	bne.n	800de3a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800de32:	6a38      	ldr	r0, [r7, #32]
 800de34:	f7f8 fbd4 	bl	80065e0 <pbuf_free>
        goto memerr;
 800de38:	e07d      	b.n	800df36 <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800de3a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800de40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de42:	4413      	add	r3, r2
 800de44:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800de46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800de48:	9201      	str	r2, [sp, #4]
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	4603      	mov	r3, r0
 800de4e:	2202      	movs	r2, #2
 800de50:	2004      	movs	r0, #4
 800de52:	f7f8 f9e7 	bl	8006224 <pbuf_alloced_custom>
 800de56:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d106      	bne.n	800de6c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800de5e:	6978      	ldr	r0, [r7, #20]
 800de60:	f7ff ff0c 	bl	800dc7c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800de64:	6a38      	ldr	r0, [r7, #32]
 800de66:	f7f8 fbbb 	bl	80065e0 <pbuf_free>
        goto memerr;
 800de6a:	e064      	b.n	800df36 <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f7f8 fc61 	bl	8006734 <pbuf_ref>
      pcr->original = p;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	4a37      	ldr	r2, [pc, #220]	; (800df58 <ip4_frag+0x23c>)
 800de7c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800de7e:	6939      	ldr	r1, [r7, #16]
 800de80:	6a38      	ldr	r0, [r7, #32]
 800de82:	f7f8 fc79 	bl	8006778 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800de86:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800de88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800de8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de90:	2b00      	cmp	r3, #0
 800de92:	d004      	beq.n	800de9e <ip4_frag+0x182>
        poff = 0;
 800de94:	2300      	movs	r3, #0
 800de96:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800de9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1ac      	bne.n	800ddfe <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800dea4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dea6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dea8:	4413      	add	r3, r2
 800deaa:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800deb0:	f1a3 0213 	sub.w	r2, r3, #19
 800deb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800deb6:	429a      	cmp	r2, r3
 800deb8:	bfcc      	ite	gt
 800deba:	2301      	movgt	r3, #1
 800debc:	2300      	movle	r3, #0
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dec2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dec8:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d103      	bne.n	800ded8 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800ded0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ded2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ded6:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ded8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800deda:	4618      	mov	r0, r3
 800dedc:	f7f7 fa53 	bl	8005386 <lwip_htons>
 800dee0:	4603      	mov	r3, r0
 800dee2:	461a      	mov	r2, r3
 800dee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800dee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800deea:	3314      	adds	r3, #20
 800deec:	b29b      	uxth	r3, r3
 800deee:	4618      	mov	r0, r3
 800def0:	f7f7 fa49 	bl	8005386 <lwip_htons>
 800def4:	4603      	mov	r3, r0
 800def6:	461a      	mov	r2, r3
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800defc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defe:	2200      	movs	r2, #0
 800df00:	729a      	strb	r2, [r3, #10]
 800df02:	2200      	movs	r2, #0
 800df04:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	695b      	ldr	r3, [r3, #20]
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	6a39      	ldr	r1, [r7, #32]
 800df0e:	68b8      	ldr	r0, [r7, #8]
 800df10:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800df12:	6a38      	ldr	r0, [r7, #32]
 800df14:	f7f8 fb64 	bl	80065e0 <pbuf_free>
    left -= fragsize;
 800df18:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800df1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800df20:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800df22:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800df24:	4413      	add	r3, r2
 800df26:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800df28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f47f af3e 	bne.w	800ddac <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800df30:	2300      	movs	r3, #0
 800df32:	e002      	b.n	800df3a <ip4_frag+0x21e>
      goto memerr;
 800df34:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800df36:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3740      	adds	r7, #64	; 0x40
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	080110e8 	.word	0x080110e8
 800df48:	08011274 	.word	0x08011274
 800df4c:	08011130 	.word	0x08011130
 800df50:	0801129c 	.word	0x0801129c
 800df54:	080112b8 	.word	0x080112b8
 800df58:	0800dcb5 	.word	0x0800dcb5

0800df5c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b086      	sub	sp, #24
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800df66:	230e      	movs	r3, #14
 800df68:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	895b      	ldrh	r3, [r3, #10]
 800df6e:	2b0e      	cmp	r3, #14
 800df70:	d977      	bls.n	800e062 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	7b1a      	ldrb	r2, [r3, #12]
 800df7c:	7b5b      	ldrb	r3, [r3, #13]
 800df7e:	021b      	lsls	r3, r3, #8
 800df80:	4313      	orrs	r3, r2
 800df82:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	f003 0301 	and.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d023      	beq.n	800dfd8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d10f      	bne.n	800dfb8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	785b      	ldrb	r3, [r3, #1]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d11b      	bne.n	800dfd8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dfa4:	2b5e      	cmp	r3, #94	; 0x5e
 800dfa6:	d117      	bne.n	800dfd8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7b5b      	ldrb	r3, [r3, #13]
 800dfac:	f043 0310 	orr.w	r3, r3, #16
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	735a      	strb	r2, [r3, #13]
 800dfb6:	e00f      	b.n	800dfd8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	2206      	movs	r2, #6
 800dfbc:	4931      	ldr	r1, [pc, #196]	; (800e084 <ethernet_input+0x128>)
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 f93a 	bl	800e238 <memcmp>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	7b5b      	ldrb	r3, [r3, #13]
 800dfce:	f043 0308 	orr.w	r3, r3, #8
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800dfd8:	89fb      	ldrh	r3, [r7, #14]
 800dfda:	2b08      	cmp	r3, #8
 800dfdc:	d003      	beq.n	800dfe6 <ethernet_input+0x8a>
 800dfde:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800dfe2:	d01e      	beq.n	800e022 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dfe4:	e046      	b.n	800e074 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dfec:	f003 0308 	and.w	r3, r3, #8
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d038      	beq.n	800e066 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	895b      	ldrh	r3, [r3, #10]
 800dff8:	461a      	mov	r2, r3
 800dffa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dffe:	429a      	cmp	r2, r3
 800e000:	db33      	blt.n	800e06a <ethernet_input+0x10e>
 800e002:	8afb      	ldrh	r3, [r7, #22]
 800e004:	425b      	negs	r3, r3
 800e006:	b29b      	uxth	r3, r3
 800e008:	b21b      	sxth	r3, r3
 800e00a:	4619      	mov	r1, r3
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7f8 fac3 	bl	8006598 <pbuf_header>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d128      	bne.n	800e06a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7fe ff7c 	bl	800cf18 <ip4_input>
      break;
 800e020:	e01d      	b.n	800e05e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e028:	f003 0308 	and.w	r3, r3, #8
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d01e      	beq.n	800e06e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	895b      	ldrh	r3, [r3, #10]
 800e034:	461a      	mov	r2, r3
 800e036:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	db19      	blt.n	800e072 <ethernet_input+0x116>
 800e03e:	8afb      	ldrh	r3, [r7, #22]
 800e040:	425b      	negs	r3, r3
 800e042:	b29b      	uxth	r3, r3
 800e044:	b21b      	sxth	r3, r3
 800e046:	4619      	mov	r1, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7f8 faa5 	bl	8006598 <pbuf_header>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10e      	bne.n	800e072 <ethernet_input+0x116>
        etharp_input(p, netif);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7fe f94c 	bl	800c2f4 <etharp_input>
      break;
 800e05c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e05e:	2300      	movs	r3, #0
 800e060:	e00c      	b.n	800e07c <ethernet_input+0x120>
    goto free_and_return;
 800e062:	bf00      	nop
 800e064:	e006      	b.n	800e074 <ethernet_input+0x118>
        goto free_and_return;
 800e066:	bf00      	nop
 800e068:	e004      	b.n	800e074 <ethernet_input+0x118>
        goto free_and_return;
 800e06a:	bf00      	nop
 800e06c:	e002      	b.n	800e074 <ethernet_input+0x118>
        goto free_and_return;
 800e06e:	bf00      	nop
 800e070:	e000      	b.n	800e074 <ethernet_input+0x118>
        goto free_and_return;
 800e072:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7f8 fab3 	bl	80065e0 <pbuf_free>
  return ERR_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	08011470 	.word	0x08011470

0800e088 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e096:	8c3b      	ldrh	r3, [r7, #32]
 800e098:	4618      	mov	r0, r3
 800e09a:	f7f7 f974 	bl	8005386 <lwip_htons>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800e0a2:	210e      	movs	r1, #14
 800e0a4:	68b8      	ldr	r0, [r7, #8]
 800e0a6:	f7f8 fa77 	bl	8006598 <pbuf_header>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d125      	bne.n	800e0fc <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	8afa      	ldrh	r2, [r7, #22]
 800e0ba:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	2206      	movs	r2, #6
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f000 f8c6 	bl	800e254 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	3306      	adds	r3, #6
 800e0cc:	2206      	movs	r2, #6
 800e0ce:	6879      	ldr	r1, [r7, #4]
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f000 f8bf 	bl	800e254 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0dc:	2b06      	cmp	r3, #6
 800e0de:	d006      	beq.n	800e0ee <ethernet_output+0x66>
 800e0e0:	4b0a      	ldr	r3, [pc, #40]	; (800e10c <ethernet_output+0x84>)
 800e0e2:	f240 122b 	movw	r2, #299	; 0x12b
 800e0e6:	490a      	ldr	r1, [pc, #40]	; (800e110 <ethernet_output+0x88>)
 800e0e8:	480a      	ldr	r0, [pc, #40]	; (800e114 <ethernet_output+0x8c>)
 800e0ea:	f000 f96f 	bl	800e3cc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	68b9      	ldr	r1, [r7, #8]
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	4798      	blx	r3
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	e002      	b.n	800e102 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e0fc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e0fe:	f06f 0301 	mvn.w	r3, #1
}
 800e102:	4618      	mov	r0, r3
 800e104:	3718      	adds	r7, #24
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	080112d8 	.word	0x080112d8
 800e110:	08011310 	.word	0x08011310
 800e114:	08011344 	.word	0x08011344

0800e118 <_ZdlPv>:
 800e118:	f000 b878 	b.w	800e20c <free>

0800e11c <_Znwj>:
 800e11c:	2801      	cmp	r0, #1
 800e11e:	bf38      	it	cc
 800e120:	2001      	movcc	r0, #1
 800e122:	b510      	push	{r4, lr}
 800e124:	4604      	mov	r4, r0
 800e126:	4620      	mov	r0, r4
 800e128:	f000 f868 	bl	800e1fc <malloc>
 800e12c:	b930      	cbnz	r0, 800e13c <_Znwj+0x20>
 800e12e:	f000 f831 	bl	800e194 <_ZSt15get_new_handlerv>
 800e132:	b908      	cbnz	r0, 800e138 <_Znwj+0x1c>
 800e134:	f000 f836 	bl	800e1a4 <abort>
 800e138:	4780      	blx	r0
 800e13a:	e7f4      	b.n	800e126 <_Znwj+0xa>
 800e13c:	bd10      	pop	{r4, pc}

0800e13e <__cxa_pure_virtual>:
 800e13e:	b508      	push	{r3, lr}
 800e140:	f000 f822 	bl	800e188 <_ZSt9terminatev>

0800e144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800e144:	4603      	mov	r3, r0
 800e146:	f853 0b08 	ldr.w	r0, [r3], #8
 800e14a:	4298      	cmp	r0, r3
 800e14c:	d001      	beq.n	800e152 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800e14e:	f7ff bfe3 	b.w	800e118 <_ZdlPv>
 800e152:	4770      	bx	lr

0800e154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800e154:	f100 0208 	add.w	r2, r0, #8
 800e158:	6002      	str	r2, [r0, #0]
 800e15a:	2200      	movs	r2, #0
 800e15c:	6042      	str	r2, [r0, #4]
 800e15e:	7202      	strb	r2, [r0, #8]
 800e160:	4770      	bx	lr

0800e162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800e162:	b510      	push	{r4, lr}
 800e164:	4604      	mov	r4, r0
 800e166:	f7ff ffed 	bl	800e144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800e16a:	4620      	mov	r0, r4
 800e16c:	bd10      	pop	{r4, pc}

0800e16e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e16e:	b508      	push	{r3, lr}
 800e170:	4780      	blx	r0
 800e172:	f000 f817 	bl	800e1a4 <abort>
	...

0800e178 <_ZSt13get_terminatev>:
 800e178:	4b02      	ldr	r3, [pc, #8]	; (800e184 <_ZSt13get_terminatev+0xc>)
 800e17a:	6818      	ldr	r0, [r3, #0]
 800e17c:	f3bf 8f5b 	dmb	ish
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	20000014 	.word	0x20000014

0800e188 <_ZSt9terminatev>:
 800e188:	b508      	push	{r3, lr}
 800e18a:	f7ff fff5 	bl	800e178 <_ZSt13get_terminatev>
 800e18e:	f7ff ffee 	bl	800e16e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800e194 <_ZSt15get_new_handlerv>:
 800e194:	4b02      	ldr	r3, [pc, #8]	; (800e1a0 <_ZSt15get_new_handlerv+0xc>)
 800e196:	6818      	ldr	r0, [r3, #0]
 800e198:	f3bf 8f5b 	dmb	ish
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20000548 	.word	0x20000548

0800e1a4 <abort>:
 800e1a4:	2006      	movs	r0, #6
 800e1a6:	b508      	push	{r3, lr}
 800e1a8:	f000 f9d6 	bl	800e558 <raise>
 800e1ac:	2001      	movs	r0, #1
 800e1ae:	f7f3 f8f1 	bl	8001394 <_exit>
	...

0800e1b4 <__libc_init_array>:
 800e1b4:	b570      	push	{r4, r5, r6, lr}
 800e1b6:	2600      	movs	r6, #0
 800e1b8:	4d0c      	ldr	r5, [pc, #48]	; (800e1ec <__libc_init_array+0x38>)
 800e1ba:	4c0d      	ldr	r4, [pc, #52]	; (800e1f0 <__libc_init_array+0x3c>)
 800e1bc:	1b64      	subs	r4, r4, r5
 800e1be:	10a4      	asrs	r4, r4, #2
 800e1c0:	42a6      	cmp	r6, r4
 800e1c2:	d109      	bne.n	800e1d8 <__libc_init_array+0x24>
 800e1c4:	f001 f868 	bl	800f298 <_init>
 800e1c8:	2600      	movs	r6, #0
 800e1ca:	4d0a      	ldr	r5, [pc, #40]	; (800e1f4 <__libc_init_array+0x40>)
 800e1cc:	4c0a      	ldr	r4, [pc, #40]	; (800e1f8 <__libc_init_array+0x44>)
 800e1ce:	1b64      	subs	r4, r4, r5
 800e1d0:	10a4      	asrs	r4, r4, #2
 800e1d2:	42a6      	cmp	r6, r4
 800e1d4:	d105      	bne.n	800e1e2 <__libc_init_array+0x2e>
 800e1d6:	bd70      	pop	{r4, r5, r6, pc}
 800e1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1dc:	4798      	blx	r3
 800e1de:	3601      	adds	r6, #1
 800e1e0:	e7ee      	b.n	800e1c0 <__libc_init_array+0xc>
 800e1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1e6:	4798      	blx	r3
 800e1e8:	3601      	adds	r6, #1
 800e1ea:	e7f2      	b.n	800e1d2 <__libc_init_array+0x1e>
 800e1ec:	08011520 	.word	0x08011520
 800e1f0:	08011520 	.word	0x08011520
 800e1f4:	08011520 	.word	0x08011520
 800e1f8:	08011528 	.word	0x08011528

0800e1fc <malloc>:
 800e1fc:	4b02      	ldr	r3, [pc, #8]	; (800e208 <malloc+0xc>)
 800e1fe:	4601      	mov	r1, r0
 800e200:	6818      	ldr	r0, [r3, #0]
 800e202:	f000 b889 	b.w	800e318 <_malloc_r>
 800e206:	bf00      	nop
 800e208:	20000018 	.word	0x20000018

0800e20c <free>:
 800e20c:	4b02      	ldr	r3, [pc, #8]	; (800e218 <free+0xc>)
 800e20e:	4601      	mov	r1, r0
 800e210:	6818      	ldr	r0, [r3, #0]
 800e212:	f000 b835 	b.w	800e280 <_free_r>
 800e216:	bf00      	nop
 800e218:	20000018 	.word	0x20000018

0800e21c <memchr>:
 800e21c:	4603      	mov	r3, r0
 800e21e:	b510      	push	{r4, lr}
 800e220:	b2c9      	uxtb	r1, r1
 800e222:	4402      	add	r2, r0
 800e224:	4293      	cmp	r3, r2
 800e226:	4618      	mov	r0, r3
 800e228:	d101      	bne.n	800e22e <memchr+0x12>
 800e22a:	2000      	movs	r0, #0
 800e22c:	e003      	b.n	800e236 <memchr+0x1a>
 800e22e:	7804      	ldrb	r4, [r0, #0]
 800e230:	3301      	adds	r3, #1
 800e232:	428c      	cmp	r4, r1
 800e234:	d1f6      	bne.n	800e224 <memchr+0x8>
 800e236:	bd10      	pop	{r4, pc}

0800e238 <memcmp>:
 800e238:	b530      	push	{r4, r5, lr}
 800e23a:	2400      	movs	r4, #0
 800e23c:	3901      	subs	r1, #1
 800e23e:	42a2      	cmp	r2, r4
 800e240:	d101      	bne.n	800e246 <memcmp+0xe>
 800e242:	2000      	movs	r0, #0
 800e244:	e005      	b.n	800e252 <memcmp+0x1a>
 800e246:	5d03      	ldrb	r3, [r0, r4]
 800e248:	3401      	adds	r4, #1
 800e24a:	5d0d      	ldrb	r5, [r1, r4]
 800e24c:	42ab      	cmp	r3, r5
 800e24e:	d0f6      	beq.n	800e23e <memcmp+0x6>
 800e250:	1b58      	subs	r0, r3, r5
 800e252:	bd30      	pop	{r4, r5, pc}

0800e254 <memcpy>:
 800e254:	440a      	add	r2, r1
 800e256:	4291      	cmp	r1, r2
 800e258:	f100 33ff 	add.w	r3, r0, #4294967295
 800e25c:	d100      	bne.n	800e260 <memcpy+0xc>
 800e25e:	4770      	bx	lr
 800e260:	b510      	push	{r4, lr}
 800e262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e266:	4291      	cmp	r1, r2
 800e268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e26c:	d1f9      	bne.n	800e262 <memcpy+0xe>
 800e26e:	bd10      	pop	{r4, pc}

0800e270 <memset>:
 800e270:	4603      	mov	r3, r0
 800e272:	4402      	add	r2, r0
 800e274:	4293      	cmp	r3, r2
 800e276:	d100      	bne.n	800e27a <memset+0xa>
 800e278:	4770      	bx	lr
 800e27a:	f803 1b01 	strb.w	r1, [r3], #1
 800e27e:	e7f9      	b.n	800e274 <memset+0x4>

0800e280 <_free_r>:
 800e280:	b538      	push	{r3, r4, r5, lr}
 800e282:	4605      	mov	r5, r0
 800e284:	2900      	cmp	r1, #0
 800e286:	d043      	beq.n	800e310 <_free_r+0x90>
 800e288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e28c:	1f0c      	subs	r4, r1, #4
 800e28e:	2b00      	cmp	r3, #0
 800e290:	bfb8      	it	lt
 800e292:	18e4      	addlt	r4, r4, r3
 800e294:	f000 fc5a 	bl	800eb4c <__malloc_lock>
 800e298:	4a1e      	ldr	r2, [pc, #120]	; (800e314 <_free_r+0x94>)
 800e29a:	6813      	ldr	r3, [r2, #0]
 800e29c:	4610      	mov	r0, r2
 800e29e:	b933      	cbnz	r3, 800e2ae <_free_r+0x2e>
 800e2a0:	6063      	str	r3, [r4, #4]
 800e2a2:	6014      	str	r4, [r2, #0]
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2aa:	f000 bc55 	b.w	800eb58 <__malloc_unlock>
 800e2ae:	42a3      	cmp	r3, r4
 800e2b0:	d90a      	bls.n	800e2c8 <_free_r+0x48>
 800e2b2:	6821      	ldr	r1, [r4, #0]
 800e2b4:	1862      	adds	r2, r4, r1
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	bf01      	itttt	eq
 800e2ba:	681a      	ldreq	r2, [r3, #0]
 800e2bc:	685b      	ldreq	r3, [r3, #4]
 800e2be:	1852      	addeq	r2, r2, r1
 800e2c0:	6022      	streq	r2, [r4, #0]
 800e2c2:	6063      	str	r3, [r4, #4]
 800e2c4:	6004      	str	r4, [r0, #0]
 800e2c6:	e7ed      	b.n	800e2a4 <_free_r+0x24>
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	b10b      	cbz	r3, 800e2d2 <_free_r+0x52>
 800e2ce:	42a3      	cmp	r3, r4
 800e2d0:	d9fa      	bls.n	800e2c8 <_free_r+0x48>
 800e2d2:	6811      	ldr	r1, [r2, #0]
 800e2d4:	1850      	adds	r0, r2, r1
 800e2d6:	42a0      	cmp	r0, r4
 800e2d8:	d10b      	bne.n	800e2f2 <_free_r+0x72>
 800e2da:	6820      	ldr	r0, [r4, #0]
 800e2dc:	4401      	add	r1, r0
 800e2de:	1850      	adds	r0, r2, r1
 800e2e0:	4283      	cmp	r3, r0
 800e2e2:	6011      	str	r1, [r2, #0]
 800e2e4:	d1de      	bne.n	800e2a4 <_free_r+0x24>
 800e2e6:	6818      	ldr	r0, [r3, #0]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	4401      	add	r1, r0
 800e2ec:	6011      	str	r1, [r2, #0]
 800e2ee:	6053      	str	r3, [r2, #4]
 800e2f0:	e7d8      	b.n	800e2a4 <_free_r+0x24>
 800e2f2:	d902      	bls.n	800e2fa <_free_r+0x7a>
 800e2f4:	230c      	movs	r3, #12
 800e2f6:	602b      	str	r3, [r5, #0]
 800e2f8:	e7d4      	b.n	800e2a4 <_free_r+0x24>
 800e2fa:	6820      	ldr	r0, [r4, #0]
 800e2fc:	1821      	adds	r1, r4, r0
 800e2fe:	428b      	cmp	r3, r1
 800e300:	bf01      	itttt	eq
 800e302:	6819      	ldreq	r1, [r3, #0]
 800e304:	685b      	ldreq	r3, [r3, #4]
 800e306:	1809      	addeq	r1, r1, r0
 800e308:	6021      	streq	r1, [r4, #0]
 800e30a:	6063      	str	r3, [r4, #4]
 800e30c:	6054      	str	r4, [r2, #4]
 800e30e:	e7c9      	b.n	800e2a4 <_free_r+0x24>
 800e310:	bd38      	pop	{r3, r4, r5, pc}
 800e312:	bf00      	nop
 800e314:	2000054c 	.word	0x2000054c

0800e318 <_malloc_r>:
 800e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31a:	1ccd      	adds	r5, r1, #3
 800e31c:	f025 0503 	bic.w	r5, r5, #3
 800e320:	3508      	adds	r5, #8
 800e322:	2d0c      	cmp	r5, #12
 800e324:	bf38      	it	cc
 800e326:	250c      	movcc	r5, #12
 800e328:	2d00      	cmp	r5, #0
 800e32a:	4606      	mov	r6, r0
 800e32c:	db01      	blt.n	800e332 <_malloc_r+0x1a>
 800e32e:	42a9      	cmp	r1, r5
 800e330:	d903      	bls.n	800e33a <_malloc_r+0x22>
 800e332:	230c      	movs	r3, #12
 800e334:	6033      	str	r3, [r6, #0]
 800e336:	2000      	movs	r0, #0
 800e338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e33a:	f000 fc07 	bl	800eb4c <__malloc_lock>
 800e33e:	4921      	ldr	r1, [pc, #132]	; (800e3c4 <_malloc_r+0xac>)
 800e340:	680a      	ldr	r2, [r1, #0]
 800e342:	4614      	mov	r4, r2
 800e344:	b99c      	cbnz	r4, 800e36e <_malloc_r+0x56>
 800e346:	4f20      	ldr	r7, [pc, #128]	; (800e3c8 <_malloc_r+0xb0>)
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	b923      	cbnz	r3, 800e356 <_malloc_r+0x3e>
 800e34c:	4621      	mov	r1, r4
 800e34e:	4630      	mov	r0, r6
 800e350:	f000 f8ca 	bl	800e4e8 <_sbrk_r>
 800e354:	6038      	str	r0, [r7, #0]
 800e356:	4629      	mov	r1, r5
 800e358:	4630      	mov	r0, r6
 800e35a:	f000 f8c5 	bl	800e4e8 <_sbrk_r>
 800e35e:	1c43      	adds	r3, r0, #1
 800e360:	d123      	bne.n	800e3aa <_malloc_r+0x92>
 800e362:	230c      	movs	r3, #12
 800e364:	4630      	mov	r0, r6
 800e366:	6033      	str	r3, [r6, #0]
 800e368:	f000 fbf6 	bl	800eb58 <__malloc_unlock>
 800e36c:	e7e3      	b.n	800e336 <_malloc_r+0x1e>
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	1b5b      	subs	r3, r3, r5
 800e372:	d417      	bmi.n	800e3a4 <_malloc_r+0x8c>
 800e374:	2b0b      	cmp	r3, #11
 800e376:	d903      	bls.n	800e380 <_malloc_r+0x68>
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	441c      	add	r4, r3
 800e37c:	6025      	str	r5, [r4, #0]
 800e37e:	e004      	b.n	800e38a <_malloc_r+0x72>
 800e380:	6863      	ldr	r3, [r4, #4]
 800e382:	42a2      	cmp	r2, r4
 800e384:	bf0c      	ite	eq
 800e386:	600b      	streq	r3, [r1, #0]
 800e388:	6053      	strne	r3, [r2, #4]
 800e38a:	4630      	mov	r0, r6
 800e38c:	f000 fbe4 	bl	800eb58 <__malloc_unlock>
 800e390:	f104 000b 	add.w	r0, r4, #11
 800e394:	1d23      	adds	r3, r4, #4
 800e396:	f020 0007 	bic.w	r0, r0, #7
 800e39a:	1ac2      	subs	r2, r0, r3
 800e39c:	d0cc      	beq.n	800e338 <_malloc_r+0x20>
 800e39e:	1a1b      	subs	r3, r3, r0
 800e3a0:	50a3      	str	r3, [r4, r2]
 800e3a2:	e7c9      	b.n	800e338 <_malloc_r+0x20>
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	6864      	ldr	r4, [r4, #4]
 800e3a8:	e7cc      	b.n	800e344 <_malloc_r+0x2c>
 800e3aa:	1cc4      	adds	r4, r0, #3
 800e3ac:	f024 0403 	bic.w	r4, r4, #3
 800e3b0:	42a0      	cmp	r0, r4
 800e3b2:	d0e3      	beq.n	800e37c <_malloc_r+0x64>
 800e3b4:	1a21      	subs	r1, r4, r0
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	f000 f896 	bl	800e4e8 <_sbrk_r>
 800e3bc:	3001      	adds	r0, #1
 800e3be:	d1dd      	bne.n	800e37c <_malloc_r+0x64>
 800e3c0:	e7cf      	b.n	800e362 <_malloc_r+0x4a>
 800e3c2:	bf00      	nop
 800e3c4:	2000054c 	.word	0x2000054c
 800e3c8:	20000550 	.word	0x20000550

0800e3cc <iprintf>:
 800e3cc:	b40f      	push	{r0, r1, r2, r3}
 800e3ce:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <iprintf+0x2c>)
 800e3d0:	b513      	push	{r0, r1, r4, lr}
 800e3d2:	681c      	ldr	r4, [r3, #0]
 800e3d4:	b124      	cbz	r4, 800e3e0 <iprintf+0x14>
 800e3d6:	69a3      	ldr	r3, [r4, #24]
 800e3d8:	b913      	cbnz	r3, 800e3e0 <iprintf+0x14>
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f000 fab2 	bl	800e944 <__sinit>
 800e3e0:	ab05      	add	r3, sp, #20
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	9a04      	ldr	r2, [sp, #16]
 800e3e6:	68a1      	ldr	r1, [r4, #8]
 800e3e8:	9301      	str	r3, [sp, #4]
 800e3ea:	f000 fbe3 	bl	800ebb4 <_vfiprintf_r>
 800e3ee:	b002      	add	sp, #8
 800e3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3f4:	b004      	add	sp, #16
 800e3f6:	4770      	bx	lr
 800e3f8:	20000018 	.word	0x20000018

0800e3fc <_puts_r>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	460e      	mov	r6, r1
 800e400:	4605      	mov	r5, r0
 800e402:	b118      	cbz	r0, 800e40c <_puts_r+0x10>
 800e404:	6983      	ldr	r3, [r0, #24]
 800e406:	b90b      	cbnz	r3, 800e40c <_puts_r+0x10>
 800e408:	f000 fa9c 	bl	800e944 <__sinit>
 800e40c:	69ab      	ldr	r3, [r5, #24]
 800e40e:	68ac      	ldr	r4, [r5, #8]
 800e410:	b913      	cbnz	r3, 800e418 <_puts_r+0x1c>
 800e412:	4628      	mov	r0, r5
 800e414:	f000 fa96 	bl	800e944 <__sinit>
 800e418:	4b2c      	ldr	r3, [pc, #176]	; (800e4cc <_puts_r+0xd0>)
 800e41a:	429c      	cmp	r4, r3
 800e41c:	d120      	bne.n	800e460 <_puts_r+0x64>
 800e41e:	686c      	ldr	r4, [r5, #4]
 800e420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e422:	07db      	lsls	r3, r3, #31
 800e424:	d405      	bmi.n	800e432 <_puts_r+0x36>
 800e426:	89a3      	ldrh	r3, [r4, #12]
 800e428:	0598      	lsls	r0, r3, #22
 800e42a:	d402      	bmi.n	800e432 <_puts_r+0x36>
 800e42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e42e:	f000 fb27 	bl	800ea80 <__retarget_lock_acquire_recursive>
 800e432:	89a3      	ldrh	r3, [r4, #12]
 800e434:	0719      	lsls	r1, r3, #28
 800e436:	d51d      	bpl.n	800e474 <_puts_r+0x78>
 800e438:	6923      	ldr	r3, [r4, #16]
 800e43a:	b1db      	cbz	r3, 800e474 <_puts_r+0x78>
 800e43c:	3e01      	subs	r6, #1
 800e43e:	68a3      	ldr	r3, [r4, #8]
 800e440:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e444:	3b01      	subs	r3, #1
 800e446:	60a3      	str	r3, [r4, #8]
 800e448:	bb39      	cbnz	r1, 800e49a <_puts_r+0x9e>
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	da38      	bge.n	800e4c0 <_puts_r+0xc4>
 800e44e:	4622      	mov	r2, r4
 800e450:	210a      	movs	r1, #10
 800e452:	4628      	mov	r0, r5
 800e454:	f000 f89c 	bl	800e590 <__swbuf_r>
 800e458:	3001      	adds	r0, #1
 800e45a:	d011      	beq.n	800e480 <_puts_r+0x84>
 800e45c:	250a      	movs	r5, #10
 800e45e:	e011      	b.n	800e484 <_puts_r+0x88>
 800e460:	4b1b      	ldr	r3, [pc, #108]	; (800e4d0 <_puts_r+0xd4>)
 800e462:	429c      	cmp	r4, r3
 800e464:	d101      	bne.n	800e46a <_puts_r+0x6e>
 800e466:	68ac      	ldr	r4, [r5, #8]
 800e468:	e7da      	b.n	800e420 <_puts_r+0x24>
 800e46a:	4b1a      	ldr	r3, [pc, #104]	; (800e4d4 <_puts_r+0xd8>)
 800e46c:	429c      	cmp	r4, r3
 800e46e:	bf08      	it	eq
 800e470:	68ec      	ldreq	r4, [r5, #12]
 800e472:	e7d5      	b.n	800e420 <_puts_r+0x24>
 800e474:	4621      	mov	r1, r4
 800e476:	4628      	mov	r0, r5
 800e478:	f000 f8dc 	bl	800e634 <__swsetup_r>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d0dd      	beq.n	800e43c <_puts_r+0x40>
 800e480:	f04f 35ff 	mov.w	r5, #4294967295
 800e484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e486:	07da      	lsls	r2, r3, #31
 800e488:	d405      	bmi.n	800e496 <_puts_r+0x9a>
 800e48a:	89a3      	ldrh	r3, [r4, #12]
 800e48c:	059b      	lsls	r3, r3, #22
 800e48e:	d402      	bmi.n	800e496 <_puts_r+0x9a>
 800e490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e492:	f000 faf6 	bl	800ea82 <__retarget_lock_release_recursive>
 800e496:	4628      	mov	r0, r5
 800e498:	bd70      	pop	{r4, r5, r6, pc}
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	da04      	bge.n	800e4a8 <_puts_r+0xac>
 800e49e:	69a2      	ldr	r2, [r4, #24]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	dc06      	bgt.n	800e4b2 <_puts_r+0xb6>
 800e4a4:	290a      	cmp	r1, #10
 800e4a6:	d004      	beq.n	800e4b2 <_puts_r+0xb6>
 800e4a8:	6823      	ldr	r3, [r4, #0]
 800e4aa:	1c5a      	adds	r2, r3, #1
 800e4ac:	6022      	str	r2, [r4, #0]
 800e4ae:	7019      	strb	r1, [r3, #0]
 800e4b0:	e7c5      	b.n	800e43e <_puts_r+0x42>
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f000 f86b 	bl	800e590 <__swbuf_r>
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	d1bf      	bne.n	800e43e <_puts_r+0x42>
 800e4be:	e7df      	b.n	800e480 <_puts_r+0x84>
 800e4c0:	250a      	movs	r5, #10
 800e4c2:	6823      	ldr	r3, [r4, #0]
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	6022      	str	r2, [r4, #0]
 800e4c8:	701d      	strb	r5, [r3, #0]
 800e4ca:	e7db      	b.n	800e484 <_puts_r+0x88>
 800e4cc:	080114a4 	.word	0x080114a4
 800e4d0:	080114c4 	.word	0x080114c4
 800e4d4:	08011484 	.word	0x08011484

0800e4d8 <puts>:
 800e4d8:	4b02      	ldr	r3, [pc, #8]	; (800e4e4 <puts+0xc>)
 800e4da:	4601      	mov	r1, r0
 800e4dc:	6818      	ldr	r0, [r3, #0]
 800e4de:	f7ff bf8d 	b.w	800e3fc <_puts_r>
 800e4e2:	bf00      	nop
 800e4e4:	20000018 	.word	0x20000018

0800e4e8 <_sbrk_r>:
 800e4e8:	b538      	push	{r3, r4, r5, lr}
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	4d05      	ldr	r5, [pc, #20]	; (800e504 <_sbrk_r+0x1c>)
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	4608      	mov	r0, r1
 800e4f2:	602b      	str	r3, [r5, #0]
 800e4f4:	f7f2 ffc2 	bl	800147c <_sbrk>
 800e4f8:	1c43      	adds	r3, r0, #1
 800e4fa:	d102      	bne.n	800e502 <_sbrk_r+0x1a>
 800e4fc:	682b      	ldr	r3, [r5, #0]
 800e4fe:	b103      	cbz	r3, 800e502 <_sbrk_r+0x1a>
 800e500:	6023      	str	r3, [r4, #0]
 800e502:	bd38      	pop	{r3, r4, r5, pc}
 800e504:	20006bc4 	.word	0x20006bc4

0800e508 <_raise_r>:
 800e508:	291f      	cmp	r1, #31
 800e50a:	b538      	push	{r3, r4, r5, lr}
 800e50c:	4604      	mov	r4, r0
 800e50e:	460d      	mov	r5, r1
 800e510:	d904      	bls.n	800e51c <_raise_r+0x14>
 800e512:	2316      	movs	r3, #22
 800e514:	6003      	str	r3, [r0, #0]
 800e516:	f04f 30ff 	mov.w	r0, #4294967295
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e51e:	b112      	cbz	r2, 800e526 <_raise_r+0x1e>
 800e520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e524:	b94b      	cbnz	r3, 800e53a <_raise_r+0x32>
 800e526:	4620      	mov	r0, r4
 800e528:	f000 f830 	bl	800e58c <_getpid_r>
 800e52c:	462a      	mov	r2, r5
 800e52e:	4601      	mov	r1, r0
 800e530:	4620      	mov	r0, r4
 800e532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e536:	f000 b817 	b.w	800e568 <_kill_r>
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d00a      	beq.n	800e554 <_raise_r+0x4c>
 800e53e:	1c59      	adds	r1, r3, #1
 800e540:	d103      	bne.n	800e54a <_raise_r+0x42>
 800e542:	2316      	movs	r3, #22
 800e544:	6003      	str	r3, [r0, #0]
 800e546:	2001      	movs	r0, #1
 800e548:	e7e7      	b.n	800e51a <_raise_r+0x12>
 800e54a:	2400      	movs	r4, #0
 800e54c:	4628      	mov	r0, r5
 800e54e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e552:	4798      	blx	r3
 800e554:	2000      	movs	r0, #0
 800e556:	e7e0      	b.n	800e51a <_raise_r+0x12>

0800e558 <raise>:
 800e558:	4b02      	ldr	r3, [pc, #8]	; (800e564 <raise+0xc>)
 800e55a:	4601      	mov	r1, r0
 800e55c:	6818      	ldr	r0, [r3, #0]
 800e55e:	f7ff bfd3 	b.w	800e508 <_raise_r>
 800e562:	bf00      	nop
 800e564:	20000018 	.word	0x20000018

0800e568 <_kill_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	2300      	movs	r3, #0
 800e56c:	4d06      	ldr	r5, [pc, #24]	; (800e588 <_kill_r+0x20>)
 800e56e:	4604      	mov	r4, r0
 800e570:	4608      	mov	r0, r1
 800e572:	4611      	mov	r1, r2
 800e574:	602b      	str	r3, [r5, #0]
 800e576:	f7f2 fefb 	bl	8001370 <_kill>
 800e57a:	1c43      	adds	r3, r0, #1
 800e57c:	d102      	bne.n	800e584 <_kill_r+0x1c>
 800e57e:	682b      	ldr	r3, [r5, #0]
 800e580:	b103      	cbz	r3, 800e584 <_kill_r+0x1c>
 800e582:	6023      	str	r3, [r4, #0]
 800e584:	bd38      	pop	{r3, r4, r5, pc}
 800e586:	bf00      	nop
 800e588:	20006bc4 	.word	0x20006bc4

0800e58c <_getpid_r>:
 800e58c:	f7f2 bee9 	b.w	8001362 <_getpid>

0800e590 <__swbuf_r>:
 800e590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e592:	460e      	mov	r6, r1
 800e594:	4614      	mov	r4, r2
 800e596:	4605      	mov	r5, r0
 800e598:	b118      	cbz	r0, 800e5a2 <__swbuf_r+0x12>
 800e59a:	6983      	ldr	r3, [r0, #24]
 800e59c:	b90b      	cbnz	r3, 800e5a2 <__swbuf_r+0x12>
 800e59e:	f000 f9d1 	bl	800e944 <__sinit>
 800e5a2:	4b21      	ldr	r3, [pc, #132]	; (800e628 <__swbuf_r+0x98>)
 800e5a4:	429c      	cmp	r4, r3
 800e5a6:	d12b      	bne.n	800e600 <__swbuf_r+0x70>
 800e5a8:	686c      	ldr	r4, [r5, #4]
 800e5aa:	69a3      	ldr	r3, [r4, #24]
 800e5ac:	60a3      	str	r3, [r4, #8]
 800e5ae:	89a3      	ldrh	r3, [r4, #12]
 800e5b0:	071a      	lsls	r2, r3, #28
 800e5b2:	d52f      	bpl.n	800e614 <__swbuf_r+0x84>
 800e5b4:	6923      	ldr	r3, [r4, #16]
 800e5b6:	b36b      	cbz	r3, 800e614 <__swbuf_r+0x84>
 800e5b8:	6923      	ldr	r3, [r4, #16]
 800e5ba:	6820      	ldr	r0, [r4, #0]
 800e5bc:	b2f6      	uxtb	r6, r6
 800e5be:	1ac0      	subs	r0, r0, r3
 800e5c0:	6963      	ldr	r3, [r4, #20]
 800e5c2:	4637      	mov	r7, r6
 800e5c4:	4283      	cmp	r3, r0
 800e5c6:	dc04      	bgt.n	800e5d2 <__swbuf_r+0x42>
 800e5c8:	4621      	mov	r1, r4
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f000 f926 	bl	800e81c <_fflush_r>
 800e5d0:	bb30      	cbnz	r0, 800e620 <__swbuf_r+0x90>
 800e5d2:	68a3      	ldr	r3, [r4, #8]
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	60a3      	str	r3, [r4, #8]
 800e5da:	6823      	ldr	r3, [r4, #0]
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	6022      	str	r2, [r4, #0]
 800e5e0:	701e      	strb	r6, [r3, #0]
 800e5e2:	6963      	ldr	r3, [r4, #20]
 800e5e4:	4283      	cmp	r3, r0
 800e5e6:	d004      	beq.n	800e5f2 <__swbuf_r+0x62>
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	07db      	lsls	r3, r3, #31
 800e5ec:	d506      	bpl.n	800e5fc <__swbuf_r+0x6c>
 800e5ee:	2e0a      	cmp	r6, #10
 800e5f0:	d104      	bne.n	800e5fc <__swbuf_r+0x6c>
 800e5f2:	4621      	mov	r1, r4
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	f000 f911 	bl	800e81c <_fflush_r>
 800e5fa:	b988      	cbnz	r0, 800e620 <__swbuf_r+0x90>
 800e5fc:	4638      	mov	r0, r7
 800e5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e600:	4b0a      	ldr	r3, [pc, #40]	; (800e62c <__swbuf_r+0x9c>)
 800e602:	429c      	cmp	r4, r3
 800e604:	d101      	bne.n	800e60a <__swbuf_r+0x7a>
 800e606:	68ac      	ldr	r4, [r5, #8]
 800e608:	e7cf      	b.n	800e5aa <__swbuf_r+0x1a>
 800e60a:	4b09      	ldr	r3, [pc, #36]	; (800e630 <__swbuf_r+0xa0>)
 800e60c:	429c      	cmp	r4, r3
 800e60e:	bf08      	it	eq
 800e610:	68ec      	ldreq	r4, [r5, #12]
 800e612:	e7ca      	b.n	800e5aa <__swbuf_r+0x1a>
 800e614:	4621      	mov	r1, r4
 800e616:	4628      	mov	r0, r5
 800e618:	f000 f80c 	bl	800e634 <__swsetup_r>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d0cb      	beq.n	800e5b8 <__swbuf_r+0x28>
 800e620:	f04f 37ff 	mov.w	r7, #4294967295
 800e624:	e7ea      	b.n	800e5fc <__swbuf_r+0x6c>
 800e626:	bf00      	nop
 800e628:	080114a4 	.word	0x080114a4
 800e62c:	080114c4 	.word	0x080114c4
 800e630:	08011484 	.word	0x08011484

0800e634 <__swsetup_r>:
 800e634:	4b32      	ldr	r3, [pc, #200]	; (800e700 <__swsetup_r+0xcc>)
 800e636:	b570      	push	{r4, r5, r6, lr}
 800e638:	681d      	ldr	r5, [r3, #0]
 800e63a:	4606      	mov	r6, r0
 800e63c:	460c      	mov	r4, r1
 800e63e:	b125      	cbz	r5, 800e64a <__swsetup_r+0x16>
 800e640:	69ab      	ldr	r3, [r5, #24]
 800e642:	b913      	cbnz	r3, 800e64a <__swsetup_r+0x16>
 800e644:	4628      	mov	r0, r5
 800e646:	f000 f97d 	bl	800e944 <__sinit>
 800e64a:	4b2e      	ldr	r3, [pc, #184]	; (800e704 <__swsetup_r+0xd0>)
 800e64c:	429c      	cmp	r4, r3
 800e64e:	d10f      	bne.n	800e670 <__swsetup_r+0x3c>
 800e650:	686c      	ldr	r4, [r5, #4]
 800e652:	89a3      	ldrh	r3, [r4, #12]
 800e654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e658:	0719      	lsls	r1, r3, #28
 800e65a:	d42c      	bmi.n	800e6b6 <__swsetup_r+0x82>
 800e65c:	06dd      	lsls	r5, r3, #27
 800e65e:	d411      	bmi.n	800e684 <__swsetup_r+0x50>
 800e660:	2309      	movs	r3, #9
 800e662:	6033      	str	r3, [r6, #0]
 800e664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e668:	f04f 30ff 	mov.w	r0, #4294967295
 800e66c:	81a3      	strh	r3, [r4, #12]
 800e66e:	e03e      	b.n	800e6ee <__swsetup_r+0xba>
 800e670:	4b25      	ldr	r3, [pc, #148]	; (800e708 <__swsetup_r+0xd4>)
 800e672:	429c      	cmp	r4, r3
 800e674:	d101      	bne.n	800e67a <__swsetup_r+0x46>
 800e676:	68ac      	ldr	r4, [r5, #8]
 800e678:	e7eb      	b.n	800e652 <__swsetup_r+0x1e>
 800e67a:	4b24      	ldr	r3, [pc, #144]	; (800e70c <__swsetup_r+0xd8>)
 800e67c:	429c      	cmp	r4, r3
 800e67e:	bf08      	it	eq
 800e680:	68ec      	ldreq	r4, [r5, #12]
 800e682:	e7e6      	b.n	800e652 <__swsetup_r+0x1e>
 800e684:	0758      	lsls	r0, r3, #29
 800e686:	d512      	bpl.n	800e6ae <__swsetup_r+0x7a>
 800e688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e68a:	b141      	cbz	r1, 800e69e <__swsetup_r+0x6a>
 800e68c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e690:	4299      	cmp	r1, r3
 800e692:	d002      	beq.n	800e69a <__swsetup_r+0x66>
 800e694:	4630      	mov	r0, r6
 800e696:	f7ff fdf3 	bl	800e280 <_free_r>
 800e69a:	2300      	movs	r3, #0
 800e69c:	6363      	str	r3, [r4, #52]	; 0x34
 800e69e:	89a3      	ldrh	r3, [r4, #12]
 800e6a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6a4:	81a3      	strh	r3, [r4, #12]
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	6063      	str	r3, [r4, #4]
 800e6aa:	6923      	ldr	r3, [r4, #16]
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	89a3      	ldrh	r3, [r4, #12]
 800e6b0:	f043 0308 	orr.w	r3, r3, #8
 800e6b4:	81a3      	strh	r3, [r4, #12]
 800e6b6:	6923      	ldr	r3, [r4, #16]
 800e6b8:	b94b      	cbnz	r3, 800e6ce <__swsetup_r+0x9a>
 800e6ba:	89a3      	ldrh	r3, [r4, #12]
 800e6bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6c4:	d003      	beq.n	800e6ce <__swsetup_r+0x9a>
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	f000 f9ff 	bl	800eacc <__smakebuf_r>
 800e6ce:	89a0      	ldrh	r0, [r4, #12]
 800e6d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6d4:	f010 0301 	ands.w	r3, r0, #1
 800e6d8:	d00a      	beq.n	800e6f0 <__swsetup_r+0xbc>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60a3      	str	r3, [r4, #8]
 800e6de:	6963      	ldr	r3, [r4, #20]
 800e6e0:	425b      	negs	r3, r3
 800e6e2:	61a3      	str	r3, [r4, #24]
 800e6e4:	6923      	ldr	r3, [r4, #16]
 800e6e6:	b943      	cbnz	r3, 800e6fa <__swsetup_r+0xc6>
 800e6e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6ec:	d1ba      	bne.n	800e664 <__swsetup_r+0x30>
 800e6ee:	bd70      	pop	{r4, r5, r6, pc}
 800e6f0:	0781      	lsls	r1, r0, #30
 800e6f2:	bf58      	it	pl
 800e6f4:	6963      	ldrpl	r3, [r4, #20]
 800e6f6:	60a3      	str	r3, [r4, #8]
 800e6f8:	e7f4      	b.n	800e6e4 <__swsetup_r+0xb0>
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	e7f7      	b.n	800e6ee <__swsetup_r+0xba>
 800e6fe:	bf00      	nop
 800e700:	20000018 	.word	0x20000018
 800e704:	080114a4 	.word	0x080114a4
 800e708:	080114c4 	.word	0x080114c4
 800e70c:	08011484 	.word	0x08011484

0800e710 <__sflush_r>:
 800e710:	898a      	ldrh	r2, [r1, #12]
 800e712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e716:	4605      	mov	r5, r0
 800e718:	0710      	lsls	r0, r2, #28
 800e71a:	460c      	mov	r4, r1
 800e71c:	d458      	bmi.n	800e7d0 <__sflush_r+0xc0>
 800e71e:	684b      	ldr	r3, [r1, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	dc05      	bgt.n	800e730 <__sflush_r+0x20>
 800e724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e726:	2b00      	cmp	r3, #0
 800e728:	dc02      	bgt.n	800e730 <__sflush_r+0x20>
 800e72a:	2000      	movs	r0, #0
 800e72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e732:	2e00      	cmp	r6, #0
 800e734:	d0f9      	beq.n	800e72a <__sflush_r+0x1a>
 800e736:	2300      	movs	r3, #0
 800e738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e73c:	682f      	ldr	r7, [r5, #0]
 800e73e:	602b      	str	r3, [r5, #0]
 800e740:	d032      	beq.n	800e7a8 <__sflush_r+0x98>
 800e742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	075a      	lsls	r2, r3, #29
 800e748:	d505      	bpl.n	800e756 <__sflush_r+0x46>
 800e74a:	6863      	ldr	r3, [r4, #4]
 800e74c:	1ac0      	subs	r0, r0, r3
 800e74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e750:	b10b      	cbz	r3, 800e756 <__sflush_r+0x46>
 800e752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e754:	1ac0      	subs	r0, r0, r3
 800e756:	2300      	movs	r3, #0
 800e758:	4602      	mov	r2, r0
 800e75a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e75c:	4628      	mov	r0, r5
 800e75e:	6a21      	ldr	r1, [r4, #32]
 800e760:	47b0      	blx	r6
 800e762:	1c43      	adds	r3, r0, #1
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	d106      	bne.n	800e776 <__sflush_r+0x66>
 800e768:	6829      	ldr	r1, [r5, #0]
 800e76a:	291d      	cmp	r1, #29
 800e76c:	d82c      	bhi.n	800e7c8 <__sflush_r+0xb8>
 800e76e:	4a2a      	ldr	r2, [pc, #168]	; (800e818 <__sflush_r+0x108>)
 800e770:	40ca      	lsrs	r2, r1
 800e772:	07d6      	lsls	r6, r2, #31
 800e774:	d528      	bpl.n	800e7c8 <__sflush_r+0xb8>
 800e776:	2200      	movs	r2, #0
 800e778:	6062      	str	r2, [r4, #4]
 800e77a:	6922      	ldr	r2, [r4, #16]
 800e77c:	04d9      	lsls	r1, r3, #19
 800e77e:	6022      	str	r2, [r4, #0]
 800e780:	d504      	bpl.n	800e78c <__sflush_r+0x7c>
 800e782:	1c42      	adds	r2, r0, #1
 800e784:	d101      	bne.n	800e78a <__sflush_r+0x7a>
 800e786:	682b      	ldr	r3, [r5, #0]
 800e788:	b903      	cbnz	r3, 800e78c <__sflush_r+0x7c>
 800e78a:	6560      	str	r0, [r4, #84]	; 0x54
 800e78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e78e:	602f      	str	r7, [r5, #0]
 800e790:	2900      	cmp	r1, #0
 800e792:	d0ca      	beq.n	800e72a <__sflush_r+0x1a>
 800e794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e798:	4299      	cmp	r1, r3
 800e79a:	d002      	beq.n	800e7a2 <__sflush_r+0x92>
 800e79c:	4628      	mov	r0, r5
 800e79e:	f7ff fd6f 	bl	800e280 <_free_r>
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e7a6:	e7c1      	b.n	800e72c <__sflush_r+0x1c>
 800e7a8:	6a21      	ldr	r1, [r4, #32]
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	47b0      	blx	r6
 800e7b0:	1c41      	adds	r1, r0, #1
 800e7b2:	d1c7      	bne.n	800e744 <__sflush_r+0x34>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d0c4      	beq.n	800e744 <__sflush_r+0x34>
 800e7ba:	2b1d      	cmp	r3, #29
 800e7bc:	d001      	beq.n	800e7c2 <__sflush_r+0xb2>
 800e7be:	2b16      	cmp	r3, #22
 800e7c0:	d101      	bne.n	800e7c6 <__sflush_r+0xb6>
 800e7c2:	602f      	str	r7, [r5, #0]
 800e7c4:	e7b1      	b.n	800e72a <__sflush_r+0x1a>
 800e7c6:	89a3      	ldrh	r3, [r4, #12]
 800e7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7cc:	81a3      	strh	r3, [r4, #12]
 800e7ce:	e7ad      	b.n	800e72c <__sflush_r+0x1c>
 800e7d0:	690f      	ldr	r7, [r1, #16]
 800e7d2:	2f00      	cmp	r7, #0
 800e7d4:	d0a9      	beq.n	800e72a <__sflush_r+0x1a>
 800e7d6:	0793      	lsls	r3, r2, #30
 800e7d8:	bf18      	it	ne
 800e7da:	2300      	movne	r3, #0
 800e7dc:	680e      	ldr	r6, [r1, #0]
 800e7de:	bf08      	it	eq
 800e7e0:	694b      	ldreq	r3, [r1, #20]
 800e7e2:	eba6 0807 	sub.w	r8, r6, r7
 800e7e6:	600f      	str	r7, [r1, #0]
 800e7e8:	608b      	str	r3, [r1, #8]
 800e7ea:	f1b8 0f00 	cmp.w	r8, #0
 800e7ee:	dd9c      	ble.n	800e72a <__sflush_r+0x1a>
 800e7f0:	4643      	mov	r3, r8
 800e7f2:	463a      	mov	r2, r7
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	6a21      	ldr	r1, [r4, #32]
 800e7f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e7fa:	47b0      	blx	r6
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	dc06      	bgt.n	800e80e <__sflush_r+0xfe>
 800e800:	89a3      	ldrh	r3, [r4, #12]
 800e802:	f04f 30ff 	mov.w	r0, #4294967295
 800e806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e80a:	81a3      	strh	r3, [r4, #12]
 800e80c:	e78e      	b.n	800e72c <__sflush_r+0x1c>
 800e80e:	4407      	add	r7, r0
 800e810:	eba8 0800 	sub.w	r8, r8, r0
 800e814:	e7e9      	b.n	800e7ea <__sflush_r+0xda>
 800e816:	bf00      	nop
 800e818:	20400001 	.word	0x20400001

0800e81c <_fflush_r>:
 800e81c:	b538      	push	{r3, r4, r5, lr}
 800e81e:	690b      	ldr	r3, [r1, #16]
 800e820:	4605      	mov	r5, r0
 800e822:	460c      	mov	r4, r1
 800e824:	b913      	cbnz	r3, 800e82c <_fflush_r+0x10>
 800e826:	2500      	movs	r5, #0
 800e828:	4628      	mov	r0, r5
 800e82a:	bd38      	pop	{r3, r4, r5, pc}
 800e82c:	b118      	cbz	r0, 800e836 <_fflush_r+0x1a>
 800e82e:	6983      	ldr	r3, [r0, #24]
 800e830:	b90b      	cbnz	r3, 800e836 <_fflush_r+0x1a>
 800e832:	f000 f887 	bl	800e944 <__sinit>
 800e836:	4b14      	ldr	r3, [pc, #80]	; (800e888 <_fflush_r+0x6c>)
 800e838:	429c      	cmp	r4, r3
 800e83a:	d11b      	bne.n	800e874 <_fflush_r+0x58>
 800e83c:	686c      	ldr	r4, [r5, #4]
 800e83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d0ef      	beq.n	800e826 <_fflush_r+0xa>
 800e846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e848:	07d0      	lsls	r0, r2, #31
 800e84a:	d404      	bmi.n	800e856 <_fflush_r+0x3a>
 800e84c:	0599      	lsls	r1, r3, #22
 800e84e:	d402      	bmi.n	800e856 <_fflush_r+0x3a>
 800e850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e852:	f000 f915 	bl	800ea80 <__retarget_lock_acquire_recursive>
 800e856:	4628      	mov	r0, r5
 800e858:	4621      	mov	r1, r4
 800e85a:	f7ff ff59 	bl	800e710 <__sflush_r>
 800e85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e860:	4605      	mov	r5, r0
 800e862:	07da      	lsls	r2, r3, #31
 800e864:	d4e0      	bmi.n	800e828 <_fflush_r+0xc>
 800e866:	89a3      	ldrh	r3, [r4, #12]
 800e868:	059b      	lsls	r3, r3, #22
 800e86a:	d4dd      	bmi.n	800e828 <_fflush_r+0xc>
 800e86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e86e:	f000 f908 	bl	800ea82 <__retarget_lock_release_recursive>
 800e872:	e7d9      	b.n	800e828 <_fflush_r+0xc>
 800e874:	4b05      	ldr	r3, [pc, #20]	; (800e88c <_fflush_r+0x70>)
 800e876:	429c      	cmp	r4, r3
 800e878:	d101      	bne.n	800e87e <_fflush_r+0x62>
 800e87a:	68ac      	ldr	r4, [r5, #8]
 800e87c:	e7df      	b.n	800e83e <_fflush_r+0x22>
 800e87e:	4b04      	ldr	r3, [pc, #16]	; (800e890 <_fflush_r+0x74>)
 800e880:	429c      	cmp	r4, r3
 800e882:	bf08      	it	eq
 800e884:	68ec      	ldreq	r4, [r5, #12]
 800e886:	e7da      	b.n	800e83e <_fflush_r+0x22>
 800e888:	080114a4 	.word	0x080114a4
 800e88c:	080114c4 	.word	0x080114c4
 800e890:	08011484 	.word	0x08011484

0800e894 <std>:
 800e894:	2300      	movs	r3, #0
 800e896:	b510      	push	{r4, lr}
 800e898:	4604      	mov	r4, r0
 800e89a:	e9c0 3300 	strd	r3, r3, [r0]
 800e89e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8a2:	6083      	str	r3, [r0, #8]
 800e8a4:	8181      	strh	r1, [r0, #12]
 800e8a6:	6643      	str	r3, [r0, #100]	; 0x64
 800e8a8:	81c2      	strh	r2, [r0, #14]
 800e8aa:	6183      	str	r3, [r0, #24]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	2208      	movs	r2, #8
 800e8b0:	305c      	adds	r0, #92	; 0x5c
 800e8b2:	f7ff fcdd 	bl	800e270 <memset>
 800e8b6:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <std+0x38>)
 800e8b8:	6224      	str	r4, [r4, #32]
 800e8ba:	6263      	str	r3, [r4, #36]	; 0x24
 800e8bc:	4b04      	ldr	r3, [pc, #16]	; (800e8d0 <std+0x3c>)
 800e8be:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8c0:	4b04      	ldr	r3, [pc, #16]	; (800e8d4 <std+0x40>)
 800e8c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8c4:	4b04      	ldr	r3, [pc, #16]	; (800e8d8 <std+0x44>)
 800e8c6:	6323      	str	r3, [r4, #48]	; 0x30
 800e8c8:	bd10      	pop	{r4, pc}
 800e8ca:	bf00      	nop
 800e8cc:	0800f141 	.word	0x0800f141
 800e8d0:	0800f163 	.word	0x0800f163
 800e8d4:	0800f19b 	.word	0x0800f19b
 800e8d8:	0800f1bf 	.word	0x0800f1bf

0800e8dc <_cleanup_r>:
 800e8dc:	4901      	ldr	r1, [pc, #4]	; (800e8e4 <_cleanup_r+0x8>)
 800e8de:	f000 b8af 	b.w	800ea40 <_fwalk_reent>
 800e8e2:	bf00      	nop
 800e8e4:	0800e81d 	.word	0x0800e81d

0800e8e8 <__sfmoreglue>:
 800e8e8:	b570      	push	{r4, r5, r6, lr}
 800e8ea:	2568      	movs	r5, #104	; 0x68
 800e8ec:	1e4a      	subs	r2, r1, #1
 800e8ee:	4355      	muls	r5, r2
 800e8f0:	460e      	mov	r6, r1
 800e8f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8f6:	f7ff fd0f 	bl	800e318 <_malloc_r>
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	b140      	cbz	r0, 800e910 <__sfmoreglue+0x28>
 800e8fe:	2100      	movs	r1, #0
 800e900:	e9c0 1600 	strd	r1, r6, [r0]
 800e904:	300c      	adds	r0, #12
 800e906:	60a0      	str	r0, [r4, #8]
 800e908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e90c:	f7ff fcb0 	bl	800e270 <memset>
 800e910:	4620      	mov	r0, r4
 800e912:	bd70      	pop	{r4, r5, r6, pc}

0800e914 <__sfp_lock_acquire>:
 800e914:	4801      	ldr	r0, [pc, #4]	; (800e91c <__sfp_lock_acquire+0x8>)
 800e916:	f000 b8b3 	b.w	800ea80 <__retarget_lock_acquire_recursive>
 800e91a:	bf00      	nop
 800e91c:	20006bd0 	.word	0x20006bd0

0800e920 <__sfp_lock_release>:
 800e920:	4801      	ldr	r0, [pc, #4]	; (800e928 <__sfp_lock_release+0x8>)
 800e922:	f000 b8ae 	b.w	800ea82 <__retarget_lock_release_recursive>
 800e926:	bf00      	nop
 800e928:	20006bd0 	.word	0x20006bd0

0800e92c <__sinit_lock_acquire>:
 800e92c:	4801      	ldr	r0, [pc, #4]	; (800e934 <__sinit_lock_acquire+0x8>)
 800e92e:	f000 b8a7 	b.w	800ea80 <__retarget_lock_acquire_recursive>
 800e932:	bf00      	nop
 800e934:	20006bcb 	.word	0x20006bcb

0800e938 <__sinit_lock_release>:
 800e938:	4801      	ldr	r0, [pc, #4]	; (800e940 <__sinit_lock_release+0x8>)
 800e93a:	f000 b8a2 	b.w	800ea82 <__retarget_lock_release_recursive>
 800e93e:	bf00      	nop
 800e940:	20006bcb 	.word	0x20006bcb

0800e944 <__sinit>:
 800e944:	b510      	push	{r4, lr}
 800e946:	4604      	mov	r4, r0
 800e948:	f7ff fff0 	bl	800e92c <__sinit_lock_acquire>
 800e94c:	69a3      	ldr	r3, [r4, #24]
 800e94e:	b11b      	cbz	r3, 800e958 <__sinit+0x14>
 800e950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e954:	f7ff bff0 	b.w	800e938 <__sinit_lock_release>
 800e958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e95c:	6523      	str	r3, [r4, #80]	; 0x50
 800e95e:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <__sinit+0x68>)
 800e960:	4a13      	ldr	r2, [pc, #76]	; (800e9b0 <__sinit+0x6c>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	62a2      	str	r2, [r4, #40]	; 0x28
 800e966:	42a3      	cmp	r3, r4
 800e968:	bf08      	it	eq
 800e96a:	2301      	moveq	r3, #1
 800e96c:	4620      	mov	r0, r4
 800e96e:	bf08      	it	eq
 800e970:	61a3      	streq	r3, [r4, #24]
 800e972:	f000 f81f 	bl	800e9b4 <__sfp>
 800e976:	6060      	str	r0, [r4, #4]
 800e978:	4620      	mov	r0, r4
 800e97a:	f000 f81b 	bl	800e9b4 <__sfp>
 800e97e:	60a0      	str	r0, [r4, #8]
 800e980:	4620      	mov	r0, r4
 800e982:	f000 f817 	bl	800e9b4 <__sfp>
 800e986:	2200      	movs	r2, #0
 800e988:	2104      	movs	r1, #4
 800e98a:	60e0      	str	r0, [r4, #12]
 800e98c:	6860      	ldr	r0, [r4, #4]
 800e98e:	f7ff ff81 	bl	800e894 <std>
 800e992:	2201      	movs	r2, #1
 800e994:	2109      	movs	r1, #9
 800e996:	68a0      	ldr	r0, [r4, #8]
 800e998:	f7ff ff7c 	bl	800e894 <std>
 800e99c:	2202      	movs	r2, #2
 800e99e:	2112      	movs	r1, #18
 800e9a0:	68e0      	ldr	r0, [r4, #12]
 800e9a2:	f7ff ff77 	bl	800e894 <std>
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	61a3      	str	r3, [r4, #24]
 800e9aa:	e7d1      	b.n	800e950 <__sinit+0xc>
 800e9ac:	08011480 	.word	0x08011480
 800e9b0:	0800e8dd 	.word	0x0800e8dd

0800e9b4 <__sfp>:
 800e9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b6:	4607      	mov	r7, r0
 800e9b8:	f7ff ffac 	bl	800e914 <__sfp_lock_acquire>
 800e9bc:	4b1e      	ldr	r3, [pc, #120]	; (800ea38 <__sfp+0x84>)
 800e9be:	681e      	ldr	r6, [r3, #0]
 800e9c0:	69b3      	ldr	r3, [r6, #24]
 800e9c2:	b913      	cbnz	r3, 800e9ca <__sfp+0x16>
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff ffbd 	bl	800e944 <__sinit>
 800e9ca:	3648      	adds	r6, #72	; 0x48
 800e9cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	d503      	bpl.n	800e9dc <__sfp+0x28>
 800e9d4:	6833      	ldr	r3, [r6, #0]
 800e9d6:	b30b      	cbz	r3, 800ea1c <__sfp+0x68>
 800e9d8:	6836      	ldr	r6, [r6, #0]
 800e9da:	e7f7      	b.n	800e9cc <__sfp+0x18>
 800e9dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9e0:	b9d5      	cbnz	r5, 800ea18 <__sfp+0x64>
 800e9e2:	4b16      	ldr	r3, [pc, #88]	; (800ea3c <__sfp+0x88>)
 800e9e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9e8:	60e3      	str	r3, [r4, #12]
 800e9ea:	6665      	str	r5, [r4, #100]	; 0x64
 800e9ec:	f000 f847 	bl	800ea7e <__retarget_lock_init_recursive>
 800e9f0:	f7ff ff96 	bl	800e920 <__sfp_lock_release>
 800e9f4:	2208      	movs	r2, #8
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea00:	6025      	str	r5, [r4, #0]
 800ea02:	61a5      	str	r5, [r4, #24]
 800ea04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea08:	f7ff fc32 	bl	800e270 <memset>
 800ea0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea14:	4620      	mov	r0, r4
 800ea16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea18:	3468      	adds	r4, #104	; 0x68
 800ea1a:	e7d9      	b.n	800e9d0 <__sfp+0x1c>
 800ea1c:	2104      	movs	r1, #4
 800ea1e:	4638      	mov	r0, r7
 800ea20:	f7ff ff62 	bl	800e8e8 <__sfmoreglue>
 800ea24:	4604      	mov	r4, r0
 800ea26:	6030      	str	r0, [r6, #0]
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d1d5      	bne.n	800e9d8 <__sfp+0x24>
 800ea2c:	f7ff ff78 	bl	800e920 <__sfp_lock_release>
 800ea30:	230c      	movs	r3, #12
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	e7ee      	b.n	800ea14 <__sfp+0x60>
 800ea36:	bf00      	nop
 800ea38:	08011480 	.word	0x08011480
 800ea3c:	ffff0001 	.word	0xffff0001

0800ea40 <_fwalk_reent>:
 800ea40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea44:	4606      	mov	r6, r0
 800ea46:	4688      	mov	r8, r1
 800ea48:	2700      	movs	r7, #0
 800ea4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea52:	f1b9 0901 	subs.w	r9, r9, #1
 800ea56:	d505      	bpl.n	800ea64 <_fwalk_reent+0x24>
 800ea58:	6824      	ldr	r4, [r4, #0]
 800ea5a:	2c00      	cmp	r4, #0
 800ea5c:	d1f7      	bne.n	800ea4e <_fwalk_reent+0xe>
 800ea5e:	4638      	mov	r0, r7
 800ea60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea64:	89ab      	ldrh	r3, [r5, #12]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d907      	bls.n	800ea7a <_fwalk_reent+0x3a>
 800ea6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	d003      	beq.n	800ea7a <_fwalk_reent+0x3a>
 800ea72:	4629      	mov	r1, r5
 800ea74:	4630      	mov	r0, r6
 800ea76:	47c0      	blx	r8
 800ea78:	4307      	orrs	r7, r0
 800ea7a:	3568      	adds	r5, #104	; 0x68
 800ea7c:	e7e9      	b.n	800ea52 <_fwalk_reent+0x12>

0800ea7e <__retarget_lock_init_recursive>:
 800ea7e:	4770      	bx	lr

0800ea80 <__retarget_lock_acquire_recursive>:
 800ea80:	4770      	bx	lr

0800ea82 <__retarget_lock_release_recursive>:
 800ea82:	4770      	bx	lr

0800ea84 <__swhatbuf_r>:
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	460e      	mov	r6, r1
 800ea88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea8c:	4614      	mov	r4, r2
 800ea8e:	2900      	cmp	r1, #0
 800ea90:	461d      	mov	r5, r3
 800ea92:	b096      	sub	sp, #88	; 0x58
 800ea94:	da07      	bge.n	800eaa6 <__swhatbuf_r+0x22>
 800ea96:	2300      	movs	r3, #0
 800ea98:	602b      	str	r3, [r5, #0]
 800ea9a:	89b3      	ldrh	r3, [r6, #12]
 800ea9c:	061a      	lsls	r2, r3, #24
 800ea9e:	d410      	bmi.n	800eac2 <__swhatbuf_r+0x3e>
 800eaa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaa4:	e00e      	b.n	800eac4 <__swhatbuf_r+0x40>
 800eaa6:	466a      	mov	r2, sp
 800eaa8:	f000 fbb0 	bl	800f20c <_fstat_r>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	dbf2      	blt.n	800ea96 <__swhatbuf_r+0x12>
 800eab0:	9a01      	ldr	r2, [sp, #4]
 800eab2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eab6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eaba:	425a      	negs	r2, r3
 800eabc:	415a      	adcs	r2, r3
 800eabe:	602a      	str	r2, [r5, #0]
 800eac0:	e7ee      	b.n	800eaa0 <__swhatbuf_r+0x1c>
 800eac2:	2340      	movs	r3, #64	; 0x40
 800eac4:	2000      	movs	r0, #0
 800eac6:	6023      	str	r3, [r4, #0]
 800eac8:	b016      	add	sp, #88	; 0x58
 800eaca:	bd70      	pop	{r4, r5, r6, pc}

0800eacc <__smakebuf_r>:
 800eacc:	898b      	ldrh	r3, [r1, #12]
 800eace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ead0:	079d      	lsls	r5, r3, #30
 800ead2:	4606      	mov	r6, r0
 800ead4:	460c      	mov	r4, r1
 800ead6:	d507      	bpl.n	800eae8 <__smakebuf_r+0x1c>
 800ead8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	6123      	str	r3, [r4, #16]
 800eae0:	2301      	movs	r3, #1
 800eae2:	6163      	str	r3, [r4, #20]
 800eae4:	b002      	add	sp, #8
 800eae6:	bd70      	pop	{r4, r5, r6, pc}
 800eae8:	466a      	mov	r2, sp
 800eaea:	ab01      	add	r3, sp, #4
 800eaec:	f7ff ffca 	bl	800ea84 <__swhatbuf_r>
 800eaf0:	9900      	ldr	r1, [sp, #0]
 800eaf2:	4605      	mov	r5, r0
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f7ff fc0f 	bl	800e318 <_malloc_r>
 800eafa:	b948      	cbnz	r0, 800eb10 <__smakebuf_r+0x44>
 800eafc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb00:	059a      	lsls	r2, r3, #22
 800eb02:	d4ef      	bmi.n	800eae4 <__smakebuf_r+0x18>
 800eb04:	f023 0303 	bic.w	r3, r3, #3
 800eb08:	f043 0302 	orr.w	r3, r3, #2
 800eb0c:	81a3      	strh	r3, [r4, #12]
 800eb0e:	e7e3      	b.n	800ead8 <__smakebuf_r+0xc>
 800eb10:	4b0d      	ldr	r3, [pc, #52]	; (800eb48 <__smakebuf_r+0x7c>)
 800eb12:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb14:	89a3      	ldrh	r3, [r4, #12]
 800eb16:	6020      	str	r0, [r4, #0]
 800eb18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb1c:	81a3      	strh	r3, [r4, #12]
 800eb1e:	9b00      	ldr	r3, [sp, #0]
 800eb20:	6120      	str	r0, [r4, #16]
 800eb22:	6163      	str	r3, [r4, #20]
 800eb24:	9b01      	ldr	r3, [sp, #4]
 800eb26:	b15b      	cbz	r3, 800eb40 <__smakebuf_r+0x74>
 800eb28:	4630      	mov	r0, r6
 800eb2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb2e:	f000 fb7f 	bl	800f230 <_isatty_r>
 800eb32:	b128      	cbz	r0, 800eb40 <__smakebuf_r+0x74>
 800eb34:	89a3      	ldrh	r3, [r4, #12]
 800eb36:	f023 0303 	bic.w	r3, r3, #3
 800eb3a:	f043 0301 	orr.w	r3, r3, #1
 800eb3e:	81a3      	strh	r3, [r4, #12]
 800eb40:	89a0      	ldrh	r0, [r4, #12]
 800eb42:	4305      	orrs	r5, r0
 800eb44:	81a5      	strh	r5, [r4, #12]
 800eb46:	e7cd      	b.n	800eae4 <__smakebuf_r+0x18>
 800eb48:	0800e8dd 	.word	0x0800e8dd

0800eb4c <__malloc_lock>:
 800eb4c:	4801      	ldr	r0, [pc, #4]	; (800eb54 <__malloc_lock+0x8>)
 800eb4e:	f7ff bf97 	b.w	800ea80 <__retarget_lock_acquire_recursive>
 800eb52:	bf00      	nop
 800eb54:	20006bcc 	.word	0x20006bcc

0800eb58 <__malloc_unlock>:
 800eb58:	4801      	ldr	r0, [pc, #4]	; (800eb60 <__malloc_unlock+0x8>)
 800eb5a:	f7ff bf92 	b.w	800ea82 <__retarget_lock_release_recursive>
 800eb5e:	bf00      	nop
 800eb60:	20006bcc 	.word	0x20006bcc

0800eb64 <__sfputc_r>:
 800eb64:	6893      	ldr	r3, [r2, #8]
 800eb66:	b410      	push	{r4}
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	6093      	str	r3, [r2, #8]
 800eb6e:	da07      	bge.n	800eb80 <__sfputc_r+0x1c>
 800eb70:	6994      	ldr	r4, [r2, #24]
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	db01      	blt.n	800eb7a <__sfputc_r+0x16>
 800eb76:	290a      	cmp	r1, #10
 800eb78:	d102      	bne.n	800eb80 <__sfputc_r+0x1c>
 800eb7a:	bc10      	pop	{r4}
 800eb7c:	f7ff bd08 	b.w	800e590 <__swbuf_r>
 800eb80:	6813      	ldr	r3, [r2, #0]
 800eb82:	1c58      	adds	r0, r3, #1
 800eb84:	6010      	str	r0, [r2, #0]
 800eb86:	7019      	strb	r1, [r3, #0]
 800eb88:	4608      	mov	r0, r1
 800eb8a:	bc10      	pop	{r4}
 800eb8c:	4770      	bx	lr

0800eb8e <__sfputs_r>:
 800eb8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb90:	4606      	mov	r6, r0
 800eb92:	460f      	mov	r7, r1
 800eb94:	4614      	mov	r4, r2
 800eb96:	18d5      	adds	r5, r2, r3
 800eb98:	42ac      	cmp	r4, r5
 800eb9a:	d101      	bne.n	800eba0 <__sfputs_r+0x12>
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	e007      	b.n	800ebb0 <__sfputs_r+0x22>
 800eba0:	463a      	mov	r2, r7
 800eba2:	4630      	mov	r0, r6
 800eba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba8:	f7ff ffdc 	bl	800eb64 <__sfputc_r>
 800ebac:	1c43      	adds	r3, r0, #1
 800ebae:	d1f3      	bne.n	800eb98 <__sfputs_r+0xa>
 800ebb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebb4 <_vfiprintf_r>:
 800ebb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb8:	460d      	mov	r5, r1
 800ebba:	4614      	mov	r4, r2
 800ebbc:	4698      	mov	r8, r3
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	b09d      	sub	sp, #116	; 0x74
 800ebc2:	b118      	cbz	r0, 800ebcc <_vfiprintf_r+0x18>
 800ebc4:	6983      	ldr	r3, [r0, #24]
 800ebc6:	b90b      	cbnz	r3, 800ebcc <_vfiprintf_r+0x18>
 800ebc8:	f7ff febc 	bl	800e944 <__sinit>
 800ebcc:	4b89      	ldr	r3, [pc, #548]	; (800edf4 <_vfiprintf_r+0x240>)
 800ebce:	429d      	cmp	r5, r3
 800ebd0:	d11b      	bne.n	800ec0a <_vfiprintf_r+0x56>
 800ebd2:	6875      	ldr	r5, [r6, #4]
 800ebd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebd6:	07d9      	lsls	r1, r3, #31
 800ebd8:	d405      	bmi.n	800ebe6 <_vfiprintf_r+0x32>
 800ebda:	89ab      	ldrh	r3, [r5, #12]
 800ebdc:	059a      	lsls	r2, r3, #22
 800ebde:	d402      	bmi.n	800ebe6 <_vfiprintf_r+0x32>
 800ebe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebe2:	f7ff ff4d 	bl	800ea80 <__retarget_lock_acquire_recursive>
 800ebe6:	89ab      	ldrh	r3, [r5, #12]
 800ebe8:	071b      	lsls	r3, r3, #28
 800ebea:	d501      	bpl.n	800ebf0 <_vfiprintf_r+0x3c>
 800ebec:	692b      	ldr	r3, [r5, #16]
 800ebee:	b9eb      	cbnz	r3, 800ec2c <_vfiprintf_r+0x78>
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7ff fd1e 	bl	800e634 <__swsetup_r>
 800ebf8:	b1c0      	cbz	r0, 800ec2c <_vfiprintf_r+0x78>
 800ebfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebfc:	07dc      	lsls	r4, r3, #31
 800ebfe:	d50e      	bpl.n	800ec1e <_vfiprintf_r+0x6a>
 800ec00:	f04f 30ff 	mov.w	r0, #4294967295
 800ec04:	b01d      	add	sp, #116	; 0x74
 800ec06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0a:	4b7b      	ldr	r3, [pc, #492]	; (800edf8 <_vfiprintf_r+0x244>)
 800ec0c:	429d      	cmp	r5, r3
 800ec0e:	d101      	bne.n	800ec14 <_vfiprintf_r+0x60>
 800ec10:	68b5      	ldr	r5, [r6, #8]
 800ec12:	e7df      	b.n	800ebd4 <_vfiprintf_r+0x20>
 800ec14:	4b79      	ldr	r3, [pc, #484]	; (800edfc <_vfiprintf_r+0x248>)
 800ec16:	429d      	cmp	r5, r3
 800ec18:	bf08      	it	eq
 800ec1a:	68f5      	ldreq	r5, [r6, #12]
 800ec1c:	e7da      	b.n	800ebd4 <_vfiprintf_r+0x20>
 800ec1e:	89ab      	ldrh	r3, [r5, #12]
 800ec20:	0598      	lsls	r0, r3, #22
 800ec22:	d4ed      	bmi.n	800ec00 <_vfiprintf_r+0x4c>
 800ec24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec26:	f7ff ff2c 	bl	800ea82 <__retarget_lock_release_recursive>
 800ec2a:	e7e9      	b.n	800ec00 <_vfiprintf_r+0x4c>
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec30:	2320      	movs	r3, #32
 800ec32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec36:	2330      	movs	r3, #48	; 0x30
 800ec38:	f04f 0901 	mov.w	r9, #1
 800ec3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ee00 <_vfiprintf_r+0x24c>
 800ec44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec48:	4623      	mov	r3, r4
 800ec4a:	469a      	mov	sl, r3
 800ec4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec50:	b10a      	cbz	r2, 800ec56 <_vfiprintf_r+0xa2>
 800ec52:	2a25      	cmp	r2, #37	; 0x25
 800ec54:	d1f9      	bne.n	800ec4a <_vfiprintf_r+0x96>
 800ec56:	ebba 0b04 	subs.w	fp, sl, r4
 800ec5a:	d00b      	beq.n	800ec74 <_vfiprintf_r+0xc0>
 800ec5c:	465b      	mov	r3, fp
 800ec5e:	4622      	mov	r2, r4
 800ec60:	4629      	mov	r1, r5
 800ec62:	4630      	mov	r0, r6
 800ec64:	f7ff ff93 	bl	800eb8e <__sfputs_r>
 800ec68:	3001      	adds	r0, #1
 800ec6a:	f000 80aa 	beq.w	800edc2 <_vfiprintf_r+0x20e>
 800ec6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec70:	445a      	add	r2, fp
 800ec72:	9209      	str	r2, [sp, #36]	; 0x24
 800ec74:	f89a 3000 	ldrb.w	r3, [sl]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 80a2 	beq.w	800edc2 <_vfiprintf_r+0x20e>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f04f 32ff 	mov.w	r2, #4294967295
 800ec84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec88:	f10a 0a01 	add.w	sl, sl, #1
 800ec8c:	9304      	str	r3, [sp, #16]
 800ec8e:	9307      	str	r3, [sp, #28]
 800ec90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec94:	931a      	str	r3, [sp, #104]	; 0x68
 800ec96:	4654      	mov	r4, sl
 800ec98:	2205      	movs	r2, #5
 800ec9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec9e:	4858      	ldr	r0, [pc, #352]	; (800ee00 <_vfiprintf_r+0x24c>)
 800eca0:	f7ff fabc 	bl	800e21c <memchr>
 800eca4:	9a04      	ldr	r2, [sp, #16]
 800eca6:	b9d8      	cbnz	r0, 800ece0 <_vfiprintf_r+0x12c>
 800eca8:	06d1      	lsls	r1, r2, #27
 800ecaa:	bf44      	itt	mi
 800ecac:	2320      	movmi	r3, #32
 800ecae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecb2:	0713      	lsls	r3, r2, #28
 800ecb4:	bf44      	itt	mi
 800ecb6:	232b      	movmi	r3, #43	; 0x2b
 800ecb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecbc:	f89a 3000 	ldrb.w	r3, [sl]
 800ecc0:	2b2a      	cmp	r3, #42	; 0x2a
 800ecc2:	d015      	beq.n	800ecf0 <_vfiprintf_r+0x13c>
 800ecc4:	4654      	mov	r4, sl
 800ecc6:	2000      	movs	r0, #0
 800ecc8:	f04f 0c0a 	mov.w	ip, #10
 800eccc:	9a07      	ldr	r2, [sp, #28]
 800ecce:	4621      	mov	r1, r4
 800ecd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecd4:	3b30      	subs	r3, #48	; 0x30
 800ecd6:	2b09      	cmp	r3, #9
 800ecd8:	d94e      	bls.n	800ed78 <_vfiprintf_r+0x1c4>
 800ecda:	b1b0      	cbz	r0, 800ed0a <_vfiprintf_r+0x156>
 800ecdc:	9207      	str	r2, [sp, #28]
 800ecde:	e014      	b.n	800ed0a <_vfiprintf_r+0x156>
 800ece0:	eba0 0308 	sub.w	r3, r0, r8
 800ece4:	fa09 f303 	lsl.w	r3, r9, r3
 800ece8:	4313      	orrs	r3, r2
 800ecea:	46a2      	mov	sl, r4
 800ecec:	9304      	str	r3, [sp, #16]
 800ecee:	e7d2      	b.n	800ec96 <_vfiprintf_r+0xe2>
 800ecf0:	9b03      	ldr	r3, [sp, #12]
 800ecf2:	1d19      	adds	r1, r3, #4
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	9103      	str	r1, [sp, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	bfbb      	ittet	lt
 800ecfc:	425b      	neglt	r3, r3
 800ecfe:	f042 0202 	orrlt.w	r2, r2, #2
 800ed02:	9307      	strge	r3, [sp, #28]
 800ed04:	9307      	strlt	r3, [sp, #28]
 800ed06:	bfb8      	it	lt
 800ed08:	9204      	strlt	r2, [sp, #16]
 800ed0a:	7823      	ldrb	r3, [r4, #0]
 800ed0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed0e:	d10c      	bne.n	800ed2a <_vfiprintf_r+0x176>
 800ed10:	7863      	ldrb	r3, [r4, #1]
 800ed12:	2b2a      	cmp	r3, #42	; 0x2a
 800ed14:	d135      	bne.n	800ed82 <_vfiprintf_r+0x1ce>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	3402      	adds	r4, #2
 800ed1a:	1d1a      	adds	r2, r3, #4
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	9203      	str	r2, [sp, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	bfb8      	it	lt
 800ed24:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed28:	9305      	str	r3, [sp, #20]
 800ed2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee10 <_vfiprintf_r+0x25c>
 800ed2e:	2203      	movs	r2, #3
 800ed30:	4650      	mov	r0, sl
 800ed32:	7821      	ldrb	r1, [r4, #0]
 800ed34:	f7ff fa72 	bl	800e21c <memchr>
 800ed38:	b140      	cbz	r0, 800ed4c <_vfiprintf_r+0x198>
 800ed3a:	2340      	movs	r3, #64	; 0x40
 800ed3c:	eba0 000a 	sub.w	r0, r0, sl
 800ed40:	fa03 f000 	lsl.w	r0, r3, r0
 800ed44:	9b04      	ldr	r3, [sp, #16]
 800ed46:	3401      	adds	r4, #1
 800ed48:	4303      	orrs	r3, r0
 800ed4a:	9304      	str	r3, [sp, #16]
 800ed4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed50:	2206      	movs	r2, #6
 800ed52:	482c      	ldr	r0, [pc, #176]	; (800ee04 <_vfiprintf_r+0x250>)
 800ed54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed58:	f7ff fa60 	bl	800e21c <memchr>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	d03f      	beq.n	800ede0 <_vfiprintf_r+0x22c>
 800ed60:	4b29      	ldr	r3, [pc, #164]	; (800ee08 <_vfiprintf_r+0x254>)
 800ed62:	bb1b      	cbnz	r3, 800edac <_vfiprintf_r+0x1f8>
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	3307      	adds	r3, #7
 800ed68:	f023 0307 	bic.w	r3, r3, #7
 800ed6c:	3308      	adds	r3, #8
 800ed6e:	9303      	str	r3, [sp, #12]
 800ed70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed72:	443b      	add	r3, r7
 800ed74:	9309      	str	r3, [sp, #36]	; 0x24
 800ed76:	e767      	b.n	800ec48 <_vfiprintf_r+0x94>
 800ed78:	460c      	mov	r4, r1
 800ed7a:	2001      	movs	r0, #1
 800ed7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed80:	e7a5      	b.n	800ecce <_vfiprintf_r+0x11a>
 800ed82:	2300      	movs	r3, #0
 800ed84:	f04f 0c0a 	mov.w	ip, #10
 800ed88:	4619      	mov	r1, r3
 800ed8a:	3401      	adds	r4, #1
 800ed8c:	9305      	str	r3, [sp, #20]
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed94:	3a30      	subs	r2, #48	; 0x30
 800ed96:	2a09      	cmp	r2, #9
 800ed98:	d903      	bls.n	800eda2 <_vfiprintf_r+0x1ee>
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d0c5      	beq.n	800ed2a <_vfiprintf_r+0x176>
 800ed9e:	9105      	str	r1, [sp, #20]
 800eda0:	e7c3      	b.n	800ed2a <_vfiprintf_r+0x176>
 800eda2:	4604      	mov	r4, r0
 800eda4:	2301      	movs	r3, #1
 800eda6:	fb0c 2101 	mla	r1, ip, r1, r2
 800edaa:	e7f0      	b.n	800ed8e <_vfiprintf_r+0x1da>
 800edac:	ab03      	add	r3, sp, #12
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	462a      	mov	r2, r5
 800edb2:	4630      	mov	r0, r6
 800edb4:	4b15      	ldr	r3, [pc, #84]	; (800ee0c <_vfiprintf_r+0x258>)
 800edb6:	a904      	add	r1, sp, #16
 800edb8:	f3af 8000 	nop.w
 800edbc:	4607      	mov	r7, r0
 800edbe:	1c78      	adds	r0, r7, #1
 800edc0:	d1d6      	bne.n	800ed70 <_vfiprintf_r+0x1bc>
 800edc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc4:	07d9      	lsls	r1, r3, #31
 800edc6:	d405      	bmi.n	800edd4 <_vfiprintf_r+0x220>
 800edc8:	89ab      	ldrh	r3, [r5, #12]
 800edca:	059a      	lsls	r2, r3, #22
 800edcc:	d402      	bmi.n	800edd4 <_vfiprintf_r+0x220>
 800edce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edd0:	f7ff fe57 	bl	800ea82 <__retarget_lock_release_recursive>
 800edd4:	89ab      	ldrh	r3, [r5, #12]
 800edd6:	065b      	lsls	r3, r3, #25
 800edd8:	f53f af12 	bmi.w	800ec00 <_vfiprintf_r+0x4c>
 800eddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edde:	e711      	b.n	800ec04 <_vfiprintf_r+0x50>
 800ede0:	ab03      	add	r3, sp, #12
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	462a      	mov	r2, r5
 800ede6:	4630      	mov	r0, r6
 800ede8:	4b08      	ldr	r3, [pc, #32]	; (800ee0c <_vfiprintf_r+0x258>)
 800edea:	a904      	add	r1, sp, #16
 800edec:	f000 f882 	bl	800eef4 <_printf_i>
 800edf0:	e7e4      	b.n	800edbc <_vfiprintf_r+0x208>
 800edf2:	bf00      	nop
 800edf4:	080114a4 	.word	0x080114a4
 800edf8:	080114c4 	.word	0x080114c4
 800edfc:	08011484 	.word	0x08011484
 800ee00:	080114e4 	.word	0x080114e4
 800ee04:	080114ee 	.word	0x080114ee
 800ee08:	00000000 	.word	0x00000000
 800ee0c:	0800eb8f 	.word	0x0800eb8f
 800ee10:	080114ea 	.word	0x080114ea

0800ee14 <_printf_common>:
 800ee14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee18:	4616      	mov	r6, r2
 800ee1a:	4699      	mov	r9, r3
 800ee1c:	688a      	ldr	r2, [r1, #8]
 800ee1e:	690b      	ldr	r3, [r1, #16]
 800ee20:	4607      	mov	r7, r0
 800ee22:	4293      	cmp	r3, r2
 800ee24:	bfb8      	it	lt
 800ee26:	4613      	movlt	r3, r2
 800ee28:	6033      	str	r3, [r6, #0]
 800ee2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee2e:	460c      	mov	r4, r1
 800ee30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee34:	b10a      	cbz	r2, 800ee3a <_printf_common+0x26>
 800ee36:	3301      	adds	r3, #1
 800ee38:	6033      	str	r3, [r6, #0]
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	0699      	lsls	r1, r3, #26
 800ee3e:	bf42      	ittt	mi
 800ee40:	6833      	ldrmi	r3, [r6, #0]
 800ee42:	3302      	addmi	r3, #2
 800ee44:	6033      	strmi	r3, [r6, #0]
 800ee46:	6825      	ldr	r5, [r4, #0]
 800ee48:	f015 0506 	ands.w	r5, r5, #6
 800ee4c:	d106      	bne.n	800ee5c <_printf_common+0x48>
 800ee4e:	f104 0a19 	add.w	sl, r4, #25
 800ee52:	68e3      	ldr	r3, [r4, #12]
 800ee54:	6832      	ldr	r2, [r6, #0]
 800ee56:	1a9b      	subs	r3, r3, r2
 800ee58:	42ab      	cmp	r3, r5
 800ee5a:	dc28      	bgt.n	800eeae <_printf_common+0x9a>
 800ee5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee60:	1e13      	subs	r3, r2, #0
 800ee62:	6822      	ldr	r2, [r4, #0]
 800ee64:	bf18      	it	ne
 800ee66:	2301      	movne	r3, #1
 800ee68:	0692      	lsls	r2, r2, #26
 800ee6a:	d42d      	bmi.n	800eec8 <_printf_common+0xb4>
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	4638      	mov	r0, r7
 800ee70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee74:	47c0      	blx	r8
 800ee76:	3001      	adds	r0, #1
 800ee78:	d020      	beq.n	800eebc <_printf_common+0xa8>
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	68e5      	ldr	r5, [r4, #12]
 800ee7e:	f003 0306 	and.w	r3, r3, #6
 800ee82:	2b04      	cmp	r3, #4
 800ee84:	bf18      	it	ne
 800ee86:	2500      	movne	r5, #0
 800ee88:	6832      	ldr	r2, [r6, #0]
 800ee8a:	f04f 0600 	mov.w	r6, #0
 800ee8e:	68a3      	ldr	r3, [r4, #8]
 800ee90:	bf08      	it	eq
 800ee92:	1aad      	subeq	r5, r5, r2
 800ee94:	6922      	ldr	r2, [r4, #16]
 800ee96:	bf08      	it	eq
 800ee98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	bfc4      	itt	gt
 800eea0:	1a9b      	subgt	r3, r3, r2
 800eea2:	18ed      	addgt	r5, r5, r3
 800eea4:	341a      	adds	r4, #26
 800eea6:	42b5      	cmp	r5, r6
 800eea8:	d11a      	bne.n	800eee0 <_printf_common+0xcc>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	e008      	b.n	800eec0 <_printf_common+0xac>
 800eeae:	2301      	movs	r3, #1
 800eeb0:	4652      	mov	r2, sl
 800eeb2:	4649      	mov	r1, r9
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	47c0      	blx	r8
 800eeb8:	3001      	adds	r0, #1
 800eeba:	d103      	bne.n	800eec4 <_printf_common+0xb0>
 800eebc:	f04f 30ff 	mov.w	r0, #4294967295
 800eec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec4:	3501      	adds	r5, #1
 800eec6:	e7c4      	b.n	800ee52 <_printf_common+0x3e>
 800eec8:	2030      	movs	r0, #48	; 0x30
 800eeca:	18e1      	adds	r1, r4, r3
 800eecc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eed0:	1c5a      	adds	r2, r3, #1
 800eed2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eed6:	4422      	add	r2, r4
 800eed8:	3302      	adds	r3, #2
 800eeda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eede:	e7c5      	b.n	800ee6c <_printf_common+0x58>
 800eee0:	2301      	movs	r3, #1
 800eee2:	4622      	mov	r2, r4
 800eee4:	4649      	mov	r1, r9
 800eee6:	4638      	mov	r0, r7
 800eee8:	47c0      	blx	r8
 800eeea:	3001      	adds	r0, #1
 800eeec:	d0e6      	beq.n	800eebc <_printf_common+0xa8>
 800eeee:	3601      	adds	r6, #1
 800eef0:	e7d9      	b.n	800eea6 <_printf_common+0x92>
	...

0800eef4 <_printf_i>:
 800eef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eef8:	460c      	mov	r4, r1
 800eefa:	7e27      	ldrb	r7, [r4, #24]
 800eefc:	4691      	mov	r9, r2
 800eefe:	2f78      	cmp	r7, #120	; 0x78
 800ef00:	4680      	mov	r8, r0
 800ef02:	469a      	mov	sl, r3
 800ef04:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef0a:	d807      	bhi.n	800ef1c <_printf_i+0x28>
 800ef0c:	2f62      	cmp	r7, #98	; 0x62
 800ef0e:	d80a      	bhi.n	800ef26 <_printf_i+0x32>
 800ef10:	2f00      	cmp	r7, #0
 800ef12:	f000 80d9 	beq.w	800f0c8 <_printf_i+0x1d4>
 800ef16:	2f58      	cmp	r7, #88	; 0x58
 800ef18:	f000 80a4 	beq.w	800f064 <_printf_i+0x170>
 800ef1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef24:	e03a      	b.n	800ef9c <_printf_i+0xa8>
 800ef26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef2a:	2b15      	cmp	r3, #21
 800ef2c:	d8f6      	bhi.n	800ef1c <_printf_i+0x28>
 800ef2e:	a001      	add	r0, pc, #4	; (adr r0, 800ef34 <_printf_i+0x40>)
 800ef30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ef34:	0800ef8d 	.word	0x0800ef8d
 800ef38:	0800efa1 	.word	0x0800efa1
 800ef3c:	0800ef1d 	.word	0x0800ef1d
 800ef40:	0800ef1d 	.word	0x0800ef1d
 800ef44:	0800ef1d 	.word	0x0800ef1d
 800ef48:	0800ef1d 	.word	0x0800ef1d
 800ef4c:	0800efa1 	.word	0x0800efa1
 800ef50:	0800ef1d 	.word	0x0800ef1d
 800ef54:	0800ef1d 	.word	0x0800ef1d
 800ef58:	0800ef1d 	.word	0x0800ef1d
 800ef5c:	0800ef1d 	.word	0x0800ef1d
 800ef60:	0800f0af 	.word	0x0800f0af
 800ef64:	0800efd1 	.word	0x0800efd1
 800ef68:	0800f091 	.word	0x0800f091
 800ef6c:	0800ef1d 	.word	0x0800ef1d
 800ef70:	0800ef1d 	.word	0x0800ef1d
 800ef74:	0800f0d1 	.word	0x0800f0d1
 800ef78:	0800ef1d 	.word	0x0800ef1d
 800ef7c:	0800efd1 	.word	0x0800efd1
 800ef80:	0800ef1d 	.word	0x0800ef1d
 800ef84:	0800ef1d 	.word	0x0800ef1d
 800ef88:	0800f099 	.word	0x0800f099
 800ef8c:	680b      	ldr	r3, [r1, #0]
 800ef8e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef92:	1d1a      	adds	r2, r3, #4
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	600a      	str	r2, [r1, #0]
 800ef98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e0a4      	b.n	800f0ea <_printf_i+0x1f6>
 800efa0:	6825      	ldr	r5, [r4, #0]
 800efa2:	6808      	ldr	r0, [r1, #0]
 800efa4:	062e      	lsls	r6, r5, #24
 800efa6:	f100 0304 	add.w	r3, r0, #4
 800efaa:	d50a      	bpl.n	800efc2 <_printf_i+0xce>
 800efac:	6805      	ldr	r5, [r0, #0]
 800efae:	600b      	str	r3, [r1, #0]
 800efb0:	2d00      	cmp	r5, #0
 800efb2:	da03      	bge.n	800efbc <_printf_i+0xc8>
 800efb4:	232d      	movs	r3, #45	; 0x2d
 800efb6:	426d      	negs	r5, r5
 800efb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efbc:	230a      	movs	r3, #10
 800efbe:	485e      	ldr	r0, [pc, #376]	; (800f138 <_printf_i+0x244>)
 800efc0:	e019      	b.n	800eff6 <_printf_i+0x102>
 800efc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800efc6:	6805      	ldr	r5, [r0, #0]
 800efc8:	600b      	str	r3, [r1, #0]
 800efca:	bf18      	it	ne
 800efcc:	b22d      	sxthne	r5, r5
 800efce:	e7ef      	b.n	800efb0 <_printf_i+0xbc>
 800efd0:	680b      	ldr	r3, [r1, #0]
 800efd2:	6825      	ldr	r5, [r4, #0]
 800efd4:	1d18      	adds	r0, r3, #4
 800efd6:	6008      	str	r0, [r1, #0]
 800efd8:	0628      	lsls	r0, r5, #24
 800efda:	d501      	bpl.n	800efe0 <_printf_i+0xec>
 800efdc:	681d      	ldr	r5, [r3, #0]
 800efde:	e002      	b.n	800efe6 <_printf_i+0xf2>
 800efe0:	0669      	lsls	r1, r5, #25
 800efe2:	d5fb      	bpl.n	800efdc <_printf_i+0xe8>
 800efe4:	881d      	ldrh	r5, [r3, #0]
 800efe6:	2f6f      	cmp	r7, #111	; 0x6f
 800efe8:	bf0c      	ite	eq
 800efea:	2308      	moveq	r3, #8
 800efec:	230a      	movne	r3, #10
 800efee:	4852      	ldr	r0, [pc, #328]	; (800f138 <_printf_i+0x244>)
 800eff0:	2100      	movs	r1, #0
 800eff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eff6:	6866      	ldr	r6, [r4, #4]
 800eff8:	2e00      	cmp	r6, #0
 800effa:	bfa8      	it	ge
 800effc:	6821      	ldrge	r1, [r4, #0]
 800effe:	60a6      	str	r6, [r4, #8]
 800f000:	bfa4      	itt	ge
 800f002:	f021 0104 	bicge.w	r1, r1, #4
 800f006:	6021      	strge	r1, [r4, #0]
 800f008:	b90d      	cbnz	r5, 800f00e <_printf_i+0x11a>
 800f00a:	2e00      	cmp	r6, #0
 800f00c:	d04d      	beq.n	800f0aa <_printf_i+0x1b6>
 800f00e:	4616      	mov	r6, r2
 800f010:	fbb5 f1f3 	udiv	r1, r5, r3
 800f014:	fb03 5711 	mls	r7, r3, r1, r5
 800f018:	5dc7      	ldrb	r7, [r0, r7]
 800f01a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f01e:	462f      	mov	r7, r5
 800f020:	42bb      	cmp	r3, r7
 800f022:	460d      	mov	r5, r1
 800f024:	d9f4      	bls.n	800f010 <_printf_i+0x11c>
 800f026:	2b08      	cmp	r3, #8
 800f028:	d10b      	bne.n	800f042 <_printf_i+0x14e>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	07df      	lsls	r7, r3, #31
 800f02e:	d508      	bpl.n	800f042 <_printf_i+0x14e>
 800f030:	6923      	ldr	r3, [r4, #16]
 800f032:	6861      	ldr	r1, [r4, #4]
 800f034:	4299      	cmp	r1, r3
 800f036:	bfde      	ittt	le
 800f038:	2330      	movle	r3, #48	; 0x30
 800f03a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f03e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f042:	1b92      	subs	r2, r2, r6
 800f044:	6122      	str	r2, [r4, #16]
 800f046:	464b      	mov	r3, r9
 800f048:	4621      	mov	r1, r4
 800f04a:	4640      	mov	r0, r8
 800f04c:	f8cd a000 	str.w	sl, [sp]
 800f050:	aa03      	add	r2, sp, #12
 800f052:	f7ff fedf 	bl	800ee14 <_printf_common>
 800f056:	3001      	adds	r0, #1
 800f058:	d14c      	bne.n	800f0f4 <_printf_i+0x200>
 800f05a:	f04f 30ff 	mov.w	r0, #4294967295
 800f05e:	b004      	add	sp, #16
 800f060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f064:	4834      	ldr	r0, [pc, #208]	; (800f138 <_printf_i+0x244>)
 800f066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f06a:	680e      	ldr	r6, [r1, #0]
 800f06c:	6823      	ldr	r3, [r4, #0]
 800f06e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f072:	061f      	lsls	r7, r3, #24
 800f074:	600e      	str	r6, [r1, #0]
 800f076:	d514      	bpl.n	800f0a2 <_printf_i+0x1ae>
 800f078:	07d9      	lsls	r1, r3, #31
 800f07a:	bf44      	itt	mi
 800f07c:	f043 0320 	orrmi.w	r3, r3, #32
 800f080:	6023      	strmi	r3, [r4, #0]
 800f082:	b91d      	cbnz	r5, 800f08c <_printf_i+0x198>
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	f023 0320 	bic.w	r3, r3, #32
 800f08a:	6023      	str	r3, [r4, #0]
 800f08c:	2310      	movs	r3, #16
 800f08e:	e7af      	b.n	800eff0 <_printf_i+0xfc>
 800f090:	6823      	ldr	r3, [r4, #0]
 800f092:	f043 0320 	orr.w	r3, r3, #32
 800f096:	6023      	str	r3, [r4, #0]
 800f098:	2378      	movs	r3, #120	; 0x78
 800f09a:	4828      	ldr	r0, [pc, #160]	; (800f13c <_printf_i+0x248>)
 800f09c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0a0:	e7e3      	b.n	800f06a <_printf_i+0x176>
 800f0a2:	065e      	lsls	r6, r3, #25
 800f0a4:	bf48      	it	mi
 800f0a6:	b2ad      	uxthmi	r5, r5
 800f0a8:	e7e6      	b.n	800f078 <_printf_i+0x184>
 800f0aa:	4616      	mov	r6, r2
 800f0ac:	e7bb      	b.n	800f026 <_printf_i+0x132>
 800f0ae:	680b      	ldr	r3, [r1, #0]
 800f0b0:	6826      	ldr	r6, [r4, #0]
 800f0b2:	1d1d      	adds	r5, r3, #4
 800f0b4:	6960      	ldr	r0, [r4, #20]
 800f0b6:	600d      	str	r5, [r1, #0]
 800f0b8:	0635      	lsls	r5, r6, #24
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	d501      	bpl.n	800f0c2 <_printf_i+0x1ce>
 800f0be:	6018      	str	r0, [r3, #0]
 800f0c0:	e002      	b.n	800f0c8 <_printf_i+0x1d4>
 800f0c2:	0671      	lsls	r1, r6, #25
 800f0c4:	d5fb      	bpl.n	800f0be <_printf_i+0x1ca>
 800f0c6:	8018      	strh	r0, [r3, #0]
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	4616      	mov	r6, r2
 800f0cc:	6123      	str	r3, [r4, #16]
 800f0ce:	e7ba      	b.n	800f046 <_printf_i+0x152>
 800f0d0:	680b      	ldr	r3, [r1, #0]
 800f0d2:	1d1a      	adds	r2, r3, #4
 800f0d4:	600a      	str	r2, [r1, #0]
 800f0d6:	681e      	ldr	r6, [r3, #0]
 800f0d8:	2100      	movs	r1, #0
 800f0da:	4630      	mov	r0, r6
 800f0dc:	6862      	ldr	r2, [r4, #4]
 800f0de:	f7ff f89d 	bl	800e21c <memchr>
 800f0e2:	b108      	cbz	r0, 800f0e8 <_printf_i+0x1f4>
 800f0e4:	1b80      	subs	r0, r0, r6
 800f0e6:	6060      	str	r0, [r4, #4]
 800f0e8:	6863      	ldr	r3, [r4, #4]
 800f0ea:	6123      	str	r3, [r4, #16]
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0f2:	e7a8      	b.n	800f046 <_printf_i+0x152>
 800f0f4:	4632      	mov	r2, r6
 800f0f6:	4649      	mov	r1, r9
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	6923      	ldr	r3, [r4, #16]
 800f0fc:	47d0      	blx	sl
 800f0fe:	3001      	adds	r0, #1
 800f100:	d0ab      	beq.n	800f05a <_printf_i+0x166>
 800f102:	6823      	ldr	r3, [r4, #0]
 800f104:	079b      	lsls	r3, r3, #30
 800f106:	d413      	bmi.n	800f130 <_printf_i+0x23c>
 800f108:	68e0      	ldr	r0, [r4, #12]
 800f10a:	9b03      	ldr	r3, [sp, #12]
 800f10c:	4298      	cmp	r0, r3
 800f10e:	bfb8      	it	lt
 800f110:	4618      	movlt	r0, r3
 800f112:	e7a4      	b.n	800f05e <_printf_i+0x16a>
 800f114:	2301      	movs	r3, #1
 800f116:	4632      	mov	r2, r6
 800f118:	4649      	mov	r1, r9
 800f11a:	4640      	mov	r0, r8
 800f11c:	47d0      	blx	sl
 800f11e:	3001      	adds	r0, #1
 800f120:	d09b      	beq.n	800f05a <_printf_i+0x166>
 800f122:	3501      	adds	r5, #1
 800f124:	68e3      	ldr	r3, [r4, #12]
 800f126:	9903      	ldr	r1, [sp, #12]
 800f128:	1a5b      	subs	r3, r3, r1
 800f12a:	42ab      	cmp	r3, r5
 800f12c:	dcf2      	bgt.n	800f114 <_printf_i+0x220>
 800f12e:	e7eb      	b.n	800f108 <_printf_i+0x214>
 800f130:	2500      	movs	r5, #0
 800f132:	f104 0619 	add.w	r6, r4, #25
 800f136:	e7f5      	b.n	800f124 <_printf_i+0x230>
 800f138:	080114f5 	.word	0x080114f5
 800f13c:	08011506 	.word	0x08011506

0800f140 <__sread>:
 800f140:	b510      	push	{r4, lr}
 800f142:	460c      	mov	r4, r1
 800f144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f148:	f000 f894 	bl	800f274 <_read_r>
 800f14c:	2800      	cmp	r0, #0
 800f14e:	bfab      	itete	ge
 800f150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f152:	89a3      	ldrhlt	r3, [r4, #12]
 800f154:	181b      	addge	r3, r3, r0
 800f156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f15a:	bfac      	ite	ge
 800f15c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f15e:	81a3      	strhlt	r3, [r4, #12]
 800f160:	bd10      	pop	{r4, pc}

0800f162 <__swrite>:
 800f162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f166:	461f      	mov	r7, r3
 800f168:	898b      	ldrh	r3, [r1, #12]
 800f16a:	4605      	mov	r5, r0
 800f16c:	05db      	lsls	r3, r3, #23
 800f16e:	460c      	mov	r4, r1
 800f170:	4616      	mov	r6, r2
 800f172:	d505      	bpl.n	800f180 <__swrite+0x1e>
 800f174:	2302      	movs	r3, #2
 800f176:	2200      	movs	r2, #0
 800f178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f17c:	f000 f868 	bl	800f250 <_lseek_r>
 800f180:	89a3      	ldrh	r3, [r4, #12]
 800f182:	4632      	mov	r2, r6
 800f184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f188:	81a3      	strh	r3, [r4, #12]
 800f18a:	4628      	mov	r0, r5
 800f18c:	463b      	mov	r3, r7
 800f18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f196:	f000 b817 	b.w	800f1c8 <_write_r>

0800f19a <__sseek>:
 800f19a:	b510      	push	{r4, lr}
 800f19c:	460c      	mov	r4, r1
 800f19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1a2:	f000 f855 	bl	800f250 <_lseek_r>
 800f1a6:	1c43      	adds	r3, r0, #1
 800f1a8:	89a3      	ldrh	r3, [r4, #12]
 800f1aa:	bf15      	itete	ne
 800f1ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1b6:	81a3      	strheq	r3, [r4, #12]
 800f1b8:	bf18      	it	ne
 800f1ba:	81a3      	strhne	r3, [r4, #12]
 800f1bc:	bd10      	pop	{r4, pc}

0800f1be <__sclose>:
 800f1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c2:	f000 b813 	b.w	800f1ec <_close_r>
	...

0800f1c8 <_write_r>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	4608      	mov	r0, r1
 800f1ce:	4611      	mov	r1, r2
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	4d05      	ldr	r5, [pc, #20]	; (800f1e8 <_write_r+0x20>)
 800f1d4:	602a      	str	r2, [r5, #0]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f7f2 f903 	bl	80013e2 <_write>
 800f1dc:	1c43      	adds	r3, r0, #1
 800f1de:	d102      	bne.n	800f1e6 <_write_r+0x1e>
 800f1e0:	682b      	ldr	r3, [r5, #0]
 800f1e2:	b103      	cbz	r3, 800f1e6 <_write_r+0x1e>
 800f1e4:	6023      	str	r3, [r4, #0]
 800f1e6:	bd38      	pop	{r3, r4, r5, pc}
 800f1e8:	20006bc4 	.word	0x20006bc4

0800f1ec <_close_r>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	4d05      	ldr	r5, [pc, #20]	; (800f208 <_close_r+0x1c>)
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	4608      	mov	r0, r1
 800f1f6:	602b      	str	r3, [r5, #0]
 800f1f8:	f7f2 f90f 	bl	800141a <_close>
 800f1fc:	1c43      	adds	r3, r0, #1
 800f1fe:	d102      	bne.n	800f206 <_close_r+0x1a>
 800f200:	682b      	ldr	r3, [r5, #0]
 800f202:	b103      	cbz	r3, 800f206 <_close_r+0x1a>
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	bd38      	pop	{r3, r4, r5, pc}
 800f208:	20006bc4 	.word	0x20006bc4

0800f20c <_fstat_r>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	2300      	movs	r3, #0
 800f210:	4d06      	ldr	r5, [pc, #24]	; (800f22c <_fstat_r+0x20>)
 800f212:	4604      	mov	r4, r0
 800f214:	4608      	mov	r0, r1
 800f216:	4611      	mov	r1, r2
 800f218:	602b      	str	r3, [r5, #0]
 800f21a:	f7f2 f909 	bl	8001430 <_fstat>
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	d102      	bne.n	800f228 <_fstat_r+0x1c>
 800f222:	682b      	ldr	r3, [r5, #0]
 800f224:	b103      	cbz	r3, 800f228 <_fstat_r+0x1c>
 800f226:	6023      	str	r3, [r4, #0]
 800f228:	bd38      	pop	{r3, r4, r5, pc}
 800f22a:	bf00      	nop
 800f22c:	20006bc4 	.word	0x20006bc4

0800f230 <_isatty_r>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	2300      	movs	r3, #0
 800f234:	4d05      	ldr	r5, [pc, #20]	; (800f24c <_isatty_r+0x1c>)
 800f236:	4604      	mov	r4, r0
 800f238:	4608      	mov	r0, r1
 800f23a:	602b      	str	r3, [r5, #0]
 800f23c:	f7f2 f907 	bl	800144e <_isatty>
 800f240:	1c43      	adds	r3, r0, #1
 800f242:	d102      	bne.n	800f24a <_isatty_r+0x1a>
 800f244:	682b      	ldr	r3, [r5, #0]
 800f246:	b103      	cbz	r3, 800f24a <_isatty_r+0x1a>
 800f248:	6023      	str	r3, [r4, #0]
 800f24a:	bd38      	pop	{r3, r4, r5, pc}
 800f24c:	20006bc4 	.word	0x20006bc4

0800f250 <_lseek_r>:
 800f250:	b538      	push	{r3, r4, r5, lr}
 800f252:	4604      	mov	r4, r0
 800f254:	4608      	mov	r0, r1
 800f256:	4611      	mov	r1, r2
 800f258:	2200      	movs	r2, #0
 800f25a:	4d05      	ldr	r5, [pc, #20]	; (800f270 <_lseek_r+0x20>)
 800f25c:	602a      	str	r2, [r5, #0]
 800f25e:	461a      	mov	r2, r3
 800f260:	f7f2 f8ff 	bl	8001462 <_lseek>
 800f264:	1c43      	adds	r3, r0, #1
 800f266:	d102      	bne.n	800f26e <_lseek_r+0x1e>
 800f268:	682b      	ldr	r3, [r5, #0]
 800f26a:	b103      	cbz	r3, 800f26e <_lseek_r+0x1e>
 800f26c:	6023      	str	r3, [r4, #0]
 800f26e:	bd38      	pop	{r3, r4, r5, pc}
 800f270:	20006bc4 	.word	0x20006bc4

0800f274 <_read_r>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	4604      	mov	r4, r0
 800f278:	4608      	mov	r0, r1
 800f27a:	4611      	mov	r1, r2
 800f27c:	2200      	movs	r2, #0
 800f27e:	4d05      	ldr	r5, [pc, #20]	; (800f294 <_read_r+0x20>)
 800f280:	602a      	str	r2, [r5, #0]
 800f282:	461a      	mov	r2, r3
 800f284:	f7f2 f890 	bl	80013a8 <_read>
 800f288:	1c43      	adds	r3, r0, #1
 800f28a:	d102      	bne.n	800f292 <_read_r+0x1e>
 800f28c:	682b      	ldr	r3, [r5, #0]
 800f28e:	b103      	cbz	r3, 800f292 <_read_r+0x1e>
 800f290:	6023      	str	r3, [r4, #0]
 800f292:	bd38      	pop	{r3, r4, r5, pc}
 800f294:	20006bc4 	.word	0x20006bc4

0800f298 <_init>:
 800f298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f29a:	bf00      	nop
 800f29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f29e:	bc08      	pop	{r3}
 800f2a0:	469e      	mov	lr, r3
 800f2a2:	4770      	bx	lr

0800f2a4 <_fini>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	bf00      	nop
 800f2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	469e      	mov	lr, r3
 800f2ae:	4770      	bx	lr
